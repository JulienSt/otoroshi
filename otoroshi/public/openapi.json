{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "Otoroshi Admin API",
    "description" : "Admin API of the Otoroshi reverse proxy",
    "version" : "1.5.0-dev",
    "contact" : {
      "name" : "Otoroshi Team",
      "email" : "oss@maif.fr"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "externalDocs" : {
    "url" : "https://www.otoroshi.io",
    "description" : "everything about otoroshi"
  },
  "servers" : [ {
    "url" : "http://otoroshi-api.oto.tools:8080",
    "description" : "your local otoroshi server"
  } ],
  "tags" : [ {
    "name" : "admin-sessions",
    "description" : "All api endpoints about admin-session"
  }, {
    "name" : "admins",
    "description" : "All api endpoints about admins"
  }, {
    "name" : "analytics",
    "description" : "All api endpoints about analytics"
  }, {
    "name" : "apikeys",
    "description" : "All api endpoints about apikeys"
  }, {
    "name" : "apps-sessions",
    "description" : "All api endpoints about apps-sessions"
  }, {
    "name" : "auth-modules",
    "description" : "All api endpoints about auth-modules"
  }, {
    "name" : "certificates",
    "description" : "All api endpoints about certificates"
  }, {
    "name" : "cluster",
    "description" : "All api endpoints about cluster"
  }, {
    "name" : "data-exporters",
    "description" : "All api endpoints about data-exporters"
  }, {
    "name" : "events",
    "description" : "All api endpoints about events"
  }, {
    "name" : "globalconfig",
    "description" : "All api endpoints about globalconfig"
  }, {
    "name" : "groups",
    "description" : "All api endpoints about groups"
  }, {
    "name" : "import-export",
    "description" : "All api endpoints about import-export"
  }, {
    "name" : "jwt-verifiers",
    "description" : "All api endpoints about jwt-verifiers"
  }, {
    "name" : "lines",
    "description" : "All api endpoints about lines"
  }, {
    "name" : "live",
    "description" : "All api endpoints about live"
  }, {
    "name" : "organizations",
    "description" : "All api endpoints about organizations"
  }, {
    "name" : "pki",
    "description" : "All api endpoints about pki"
  }, {
    "name" : "privateapps",
    "description" : "All api endpoints about privateapps"
  }, {
    "name" : "scripts",
    "description" : "All api endpoints about scripts"
  }, {
    "name" : "services",
    "description" : "All api endpoints about services"
  }, {
    "name" : "snowmonkey",
    "description" : "All api endpoints about snowmonkey"
  }, {
    "name" : "tcp",
    "description" : "All api endpoints about tcp"
  }, {
    "name" : "teams",
    "description" : "All api endpoints about teams"
  }, {
    "name" : "templates",
    "description" : "All api endpoints about templates "
  } ],
  "paths" : {
    "/api/stats" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Statistic for a service, apikey or group",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.filterableStats",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/global" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Global statistic for your services",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.globalStats",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/stats" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Statistics for a service",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.serviceStats",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/scripts/_template" : {
      "get" : {
        "tags" : [ "scripts" ],
        "summary" : "Creates a new Script from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateScript",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        }
      }
    },
    "/api/scripts/_list" : {
      "get" : {
        "tags" : [ "scripts" ],
        "summary" : "Search plugins based on type of plugin",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.findAllScriptsList",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScriptsList"
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/webauthn" : {
      "post" : {
        "tags" : [ "admins" ],
        "summary" : "Register a webauthn admin user",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.registerWebAuthnAdmin",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "admins" ],
        "summary" : "Returns all webauthn admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.webAuthnAdmins",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebauthnAdminList"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/status" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Statis for a group of services over time",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.groupStatus",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the groupId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/{id}" : {
      "patch" : {
        "tags" : [ "teams" ],
        "summary" : "Updates (using json-patch) a specific Team using its id",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Team"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Find a specific Team using its id",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "teams" ],
        "summary" : "Deletes a specific Team using its id",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "teams" ],
        "summary" : "Updates a specific Team using its id",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Team"
              }
            }
          }
        }
      }
    },
    "/api/teams" : {
      "post" : {
        "tags" : [ "teams" ],
        "summary" : "Creates a Team",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Team"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Find all possible Teams entities",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.Team"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/_bulk" : {
      "patch" : {
        "tags" : [ "teams" ],
        "summary" : "Update (using json-patch) multiple Teams at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "teams" ],
        "summary" : "Create multiple Teams at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "teams" ],
        "summary" : "Delete multiple Teams at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "teams" ],
        "summary" : "Update multiple Teams at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/targets" : {
      "patch" : {
        "tags" : [ "services" ],
        "summary" : "Update the target of the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.updateServiceTargets",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Target"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Target"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Adds a target to the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceAddTarget",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Target"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Target"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get targets of the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceTargets",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TargetsList"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Deletes a target to the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceDeleteTarget",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/{id}" : {
      "patch" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Updates (using json-patch) a specific AuthModuleConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Find a specific AuthModuleConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Deletes a specific AuthModuleConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Updates a specific AuthModuleConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
              }
            }
          }
        }
      }
    },
    "/api/cluster/members" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Get cluster members statistics",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.getClusterMembers",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "cluster" ],
        "summary" : "Clear cluster members from members statistics",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.clearClusterMembers",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/_bulk" : {
      "patch" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Update (using json-patch) multiple AuthModuleConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Create multiple AuthModuleConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Delete multiple AuthModuleConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Update multiple AuthModuleConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/scripts" : {
      "post" : {
        "tags" : [ "scripts" ],
        "summary" : "Creates a otoroshi.script.Script",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.script.Script"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "scripts" ],
        "summary" : "Find all possible otoroshi.script.Scripts entities",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.script.Script"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/privateapps/sessions/{id}/{username}" : {
      "post" : {
        "tags" : [ "privateapps" ],
        "summary" : "Registers a private app session",
        "operationId" : "otoroshi.controllers.PrivateAppsController.registerSession",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        }, {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/cluster/sessions/{id}" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to create a distributed private apps session between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.isSessionValid",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.PrivateAppsUser"
                }
              }
            }
          }
        }
      }
    },
    "/api/apikeys/_bulk" : {
      "patch" : {
        "tags" : [ "apikeys" ],
        "summary" : "Update (using json-patch) multiple ApiKeys at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "apikeys" ],
        "summary" : "Create multiple ApiKeys at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "apikeys" ],
        "summary" : "Delete multiple ApiKeys at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "apikeys" ],
        "summary" : "Update multiple ApiKeys at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/apps-sessions/{id}" : {
      "delete" : {
        "tags" : [ "apps-sessions" ],
        "summary" : "Discard a specific private apps session",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.discardPrivateAppsSession",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/services" : {
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Creates a ServiceDescriptor",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Find all possible ServiceDescriptors entities",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants" : {
      "post" : {
        "tags" : [ "organizations" ],
        "summary" : "Creates a Tenant",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Tenant"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "Find all possible Tenants entities",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/new/service" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new Service from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateService_templates",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      }
    },
    "/api/snowmonkey/config" : {
      "patch" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Updates (using json-patch) the snowmonkey configuration",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.patchSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchBody"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Get the snowmonkey config",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Updates the snowmonkey configuration",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.updateSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
              }
            }
          }
        }
      }
    },
    "/api/globalconfig/_template" : {
      "get" : {
        "tags" : [ "globalconfig" ],
        "summary" : "Creates a new GlobalConfig from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateGlobalConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/alert/events" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Get all events of type AlertEvent",
        "operationId" : "otoroshi.controllers.adminapi.EventsController.alertEvents",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlertEventList"
                }
              }
            }
          }
        }
      }
    },
    "/api/lines/{line}/services" : {
      "get" : {
        "tags" : [ "lines" ],
        "summary" : "Get all service for a line of work",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.servicesForALine",
        "parameters" : [ {
          "name" : "line",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The line param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDescriptorList"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Creates a ServiceGroup",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Find all possible ServiceGroups entities",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/{entity}/_template" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new Template from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_templates",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the entity parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/pki/cas/{ca}/cas" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a sub-CA",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genSubCA",
        "parameters" : [ {
          "name" : "ca",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the ca parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/verifiers/{id}" : {
      "patch" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Updates (using json-patch) a specific GlobalJwtVerifier using its id",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Find a specific GlobalJwtVerifier using its id",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Deletes a specific GlobalJwtVerifier using its id",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Updates a specific GlobalJwtVerifier using its id",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
              }
            }
          }
        }
      }
    },
    "/api/admin-sessions/{id}" : {
      "delete" : {
        "tags" : [ "admin-sessions" ],
        "summary" : "Discard a specific admin session (otoroshi-ui)",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.discardSession",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/tcp/_template" : {
      "get" : {
        "tags" : [ "tcp" ],
        "summary" : "Creates a new TcpService from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_tcp",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      }
    },
    "/api/status/global" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Global status of your services",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.globalStatus",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/_bulk" : {
      "patch" : {
        "tags" : [ "services" ],
        "summary" : "Update (using json-patch) multiple ServiceDescriptors at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Create multiple ServiceDescriptors at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Delete multiple ServiceDescriptors at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "services" ],
        "summary" : "Update multiple ServiceDescriptors at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/snowmonkey/outages" : {
      "get" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Get the current snowmonkey outages",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyOutages",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutagesList"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Reset the snowmonkey outages",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.resetSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/data-exporter-configs/_bulk" : {
      "patch" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Update (using json-patch) multiple DataExporterConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Create multiple DataExporterConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Delete multiple DataExporterConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Update multiple DataExporterConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/tenants/_bulk" : {
      "patch" : {
        "tags" : [ "organizations" ],
        "summary" : "Update (using json-patch) multiple Tenants at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "organizations" ],
        "summary" : "Create multiple Tenants at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "organizations" ],
        "summary" : "Delete multiple Tenants at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "organizations" ],
        "summary" : "Update multiple Tenants at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/cluster/state" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to get internal state from a leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.internalState",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      }
    },
    "/api/pki/certs/_p12" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Import de .p12 file as client certificates",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.importCertFromP12",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ByteStreamBody"
              }
            }
          }
        }
      }
    },
    "/api/pki/keys" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a keypair",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genKeyPair",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenKeyPairResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenKeyPairQuery"
              }
            }
          }
        }
      }
    },
    "/api/otoroshi.json" : {
      "post" : {
        "tags" : [ "import-export" ],
        "summary" : "Import the content of the otoroshi datastore (json)",
        "operationId" : "otoroshi.controllers.adminapi.ImportExportController.fullImport",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalConfigImportBody"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "import-export" ],
        "summary" : "Export all the content of the otoroshi datastore",
        "operationId" : "otoroshi.controllers.adminapi.ImportExportController.fullExport",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths" : {
      "post" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Creates a AuthModuleConfig",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Find all possible AuthModuleConfigs entities",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/webauthn/_template" : {
      "post" : {
        "tags" : [ "admins" ],
        "summary" : "Creates a new Template from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_webauthn",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.OtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "admins" ],
        "summary" : "Creates a new WebauthnAdmin from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateWebauthnAdmin",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}" : {
      "patch" : {
        "tags" : [ "groups" ],
        "summary" : "Updates (using json-patch) a specific ServiceGroup using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Find a specific ServiceGroup using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "groups" ],
        "summary" : "Deletes a specific ServiceGroup using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "groups" ],
        "summary" : "Updates a specific ServiceGroup using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
              }
            }
          }
        }
      }
    },
    "/api/tenants/{id}" : {
      "patch" : {
        "tags" : [ "organizations" ],
        "summary" : "Updates (using json-patch) a specific Tenant using its id",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Tenant"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "Find a specific Tenant using its id",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "organizations" ],
        "summary" : "Deletes a specific Tenant using its id",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "organizations" ],
        "summary" : "Updates a specific Tenant using its id",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Tenant"
              }
            }
          }
        }
      }
    },
    "/api/live" : {
      "get" : {
        "tags" : [ "live" ],
        "summary" : "Get global live statis",
        "operationId" : "otoroshi.controllers.adminapi.StatsController.globalLiveStats",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiveStats"
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/webauthn/{username}/{id}" : {
      "delete" : {
        "tags" : [ "admins" ],
        "summary" : "Deletes a webauthn admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.webAuthnDeleteAdmin",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        }, {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/import" : {
      "post" : {
        "tags" : [ "import-export" ],
        "summary" : "Import the content of the otoroshi datastore (file)",
        "operationId" : "otoroshi.controllers.adminapi.ImportExportController.fullImportFromFile",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalConfigImportBody"
              }
            }
          }
        }
      }
    },
    "/api/pki/cas" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a self signed CA",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genSelfSignedCA",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/scripts/{id}" : {
      "patch" : {
        "tags" : [ "scripts" ],
        "summary" : "Updates (using json-patch) a specific otoroshi.script.Script using its id",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.script.Script"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "scripts" ],
        "summary" : "Find a specific otoroshi.script.Script using its id",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "scripts" ],
        "summary" : "Deletes a specific otoroshi.script.Script using its id",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "scripts" ],
        "summary" : "Updates a specific otoroshi.script.Script using its id",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.script.Script"
              }
            }
          }
        }
      }
    },
    "/api/events" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Events for a service, apikey or group",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.filterableEvents",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/pki/certs" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a self signed certificates",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genSelfSignedCert",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/new/tcp/service" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new TcpService from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_templates",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/{id}/register/finish" : {
      "post" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Finishes the registration of a user",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.finishRegistration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebAuthnRegistrationFinishBody"
              }
            }
          }
        }
      }
    },
    "/api/new/group" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new ServiceGroup from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_templates",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/tcp/services/_template" : {
      "post" : {
        "tags" : [ "tcp" ],
        "summary" : "Creates a new Template from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_tcp",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/tcp/services/_bulk" : {
      "patch" : {
        "tags" : [ "tcp" ],
        "summary" : "Update (using json-patch) multiple TcpServices at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tcp" ],
        "summary" : "Create multiple TcpServices at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tcp" ],
        "summary" : "Delete multiple TcpServices at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "tcp" ],
        "summary" : "Update multiple TcpServices at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/auths/_template" : {
      "get" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Creates a new AuthModule from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateAuthModule",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/tcp/services" : {
      "post" : {
        "tags" : [ "tcp" ],
        "summary" : "Creates a TcpService",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "tcp" ],
        "summary" : "Find all possible TcpServices entities",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/verifiers/_template" : {
      "get" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Creates a new JwtVerifier from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateJwtVerifier",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        }
      }
    },
    "/api/globalconfig" : {
      "patch" : {
        "tags" : [ "globalconfig" ],
        "summary" : "Update (with json-patch) the global config",
        "operationId" : "otoroshi.controllers.adminapi.GlobalConfigController.patchGlobalConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchBody"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "globalconfig" ],
        "summary" : "Get the global config",
        "operationId" : "otoroshi.controllers.adminapi.GlobalConfigController.globalConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "globalconfig" ],
        "summary" : "Update the global config",
        "operationId" : "otoroshi.controllers.adminapi.GlobalConfigController.updateGlobalConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/response" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Response time statistics for a service",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.serviceResponseTime",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/new/apikey" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new ApiKey from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_templates",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      }
    },
    "/api/apikeys/{id}" : {
      "patch" : {
        "tags" : [ "apikeys" ],
        "summary" : "Updates (using json-patch) a specific ApiKey using its id",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "apikeys" ],
        "summary" : "Find a specific ApiKey using its id",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "apikeys" ],
        "summary" : "Deletes a specific ApiKey using its id",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "apikeys" ],
        "summary" : "Updates a specific ApiKey using its id",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
              }
            }
          }
        }
      }
    },
    "/api/pki/certs/_data" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Extract data from a certificate",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.certificateData",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PemCertificateBody"
              }
            }
          }
        }
      }
    },
    "/api/cluster/quotas" : {
      "put" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to push quotas usage from a worker to a leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.updateQuotas",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateQuotasBody"
              }
            }
          }
        }
      }
    },
    "/api/admins/webauthn/{username}" : {
      "put" : {
        "tags" : [ "admins" ],
        "summary" : "Updates a webauthn admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.updateWebAuthnAdmin",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
              }
            }
          }
        }
      }
    },
    "/api/groups/_bulk" : {
      "patch" : {
        "tags" : [ "groups" ],
        "summary" : "Update (using json-patch) multiple ServiceGroups at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Create multiple ServiceGroups at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "groups" ],
        "summary" : "Delete multiple ServiceGroups at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "groups" ],
        "summary" : "Update multiple ServiceGroups at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/live" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get live stats for a specific service",
        "operationId" : "otoroshi.controllers.adminapi.StatsController.serviceLiveStats_services",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiveStats"
                }
              }
            }
          }
        }
      }
    },
    "/api/scripts/_bulk" : {
      "patch" : {
        "tags" : [ "scripts" ],
        "summary" : "Update (using json-patch) multiple otoroshi.script.Scripts at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "scripts" ],
        "summary" : "Create multiple otoroshi.script.Scripts at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "scripts" ],
        "summary" : "Delete multiple otoroshi.script.Scripts at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "scripts" ],
        "summary" : "Update multiple otoroshi.script.Scripts at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/data-exporter-configs/{id}" : {
      "patch" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Updates (using json-patch) a specific DataExporterConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Find a specific DataExporterConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Deletes a specific DataExporterConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Updates a specific DataExporterConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
              }
            }
          }
        }
      }
    },
    "/api/pki/csrs" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a CSR",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genCsr",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/groups/_template" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Creates a new ServiceGroup from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_groups",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/verifiers" : {
      "post" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Creates a GlobalJwtVerifier",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Find all possible GlobalJwtVerifiers entities",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/simple/{username}" : {
      "delete" : {
        "tags" : [ "admins" ],
        "summary" : "Deletes an admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.deleteAdmin",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "admins" ],
        "summary" : "Updates an admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.updateAdmin",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
              }
            }
          }
        }
      }
    },
    "/api/data-exporter-configs" : {
      "post" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Creates a DataExporterConfig",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Find all possible DataExporterConfigs entities",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/data-exporter-configs/_template" : {
      "get" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Creates a new DataExporterConfig from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateDataExporterConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/_template" : {
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Creates a new Team from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateTeam",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin-sessions" : {
      "get" : {
        "tags" : [ "admin-sessions" ],
        "summary" : "Returns all admin sessions",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.sessions",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.BackOfficeUser"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "admin-sessions" ],
        "summary" : "Discard all admin sessions (otoroshi-ui)",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.discardAllSessions",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/simple/_template" : {
      "post" : {
        "tags" : [ "admins" ],
        "summary" : "Creates a new Template from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_simple",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.OtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "admins" ],
        "summary" : "Creates a new SimpleAdmin from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateSimpleAdmin",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates/{id}" : {
      "patch" : {
        "tags" : [ "certificates" ],
        "summary" : "Updates (using json-patch) a specific Cert using its id",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "certificates" ],
        "summary" : "Find a specific Cert using its id",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "certificates" ],
        "summary" : "Deletes a specific Cert using its id",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "certificates" ],
        "summary" : "Updates a specific Cert using its id",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
              }
            }
          }
        }
      }
    },
    "/api/cluster/user-tokens/{id}" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to get a distributed login token between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.getUserToken",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/snowmonkey/_start" : {
      "post" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Start the snowmonkey of all otoroshi instances",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.startSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/events/_template" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Returns a template that extract possible fields out of a Gateway event",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.templateSpec",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{id}" : {
      "patch" : {
        "tags" : [ "services" ],
        "summary" : "Updates (using json-patch) a specific ServiceDescriptor using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Find a specific ServiceDescriptor using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Deletes a specific ServiceDescriptor using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "services" ],
        "summary" : "Updates a specific ServiceDescriptor using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
              }
            }
          }
        }
      }
    },
    "/api/apikeys" : {
      "post" : {
        "tags" : [ "apikeys" ],
        "summary" : "Creates a ApiKey",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "apikeys" ],
        "summary" : "Find all possible ApiKeys entities",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/pki/cas/{ca}/certs" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a certificate",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genCert",
        "parameters" : [ {
          "name" : "ca",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the ca parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/events" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Events for a service",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.serviceEvents",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates/_template" : {
      "get" : {
        "tags" : [ "certificates" ],
        "summary" : "Creates a new Certificate from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateCertificate",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        }
      }
    },
    "/api/audit/events" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Get all events of type AuditEvent",
        "operationId" : "otoroshi.controllers.adminapi.EventsController.auditEvents",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditEventList"
                }
              }
            }
          }
        }
      }
    },
    "/api/snowmonkey/_stop" : {
      "post" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Stop the snowmonkey of all otoroshi instances",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.stopSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/certificates/_bulk" : {
      "patch" : {
        "tags" : [ "certificates" ],
        "summary" : "Update (using json-patch) multiple Certs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "certificates" ],
        "summary" : "Create multiple Certs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "certificates" ],
        "summary" : "Delete multiple Certs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "certificates" ],
        "summary" : "Update multiple Certs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/tenants/_template" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "Creates a new Tenant from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateTenant",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/health" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get healthcheck status for the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceHealth",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HealthCheckEventList"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/canary" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get members of a canary campaign",
        "operationId" : "otoroshi.controllers.adminapi.CanaryController.serviceCanaryMembers",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Reset members of a canary campaign",
        "operationId" : "otoroshi.controllers.adminapi.CanaryController.resetServiceCanaryMembers",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/live/host" : {
      "get" : {
        "tags" : [ "live" ],
        "summary" : "Get local host metrics",
        "operationId" : "otoroshi.controllers.adminapi.StatsController.hostMetrics",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HostMetrics"
                }
              }
            }
          }
        }
      }
    },
    "/api/pki/certs/_valid" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Check if a certificate is valid (based on its own data)",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.certificateIsValid",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertValidResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
              }
            }
          }
        }
      }
    },
    "/api/cluster/live" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to get cluster statistics",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.liveCluster",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates" : {
      "post" : {
        "tags" : [ "certificates" ],
        "summary" : "Creates a Cert",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "certificates" ],
        "summary" : "Find all possible Certs entities",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/apikeys/{id}/quotas" : {
      "get" : {
        "tags" : [ "apikeys" ],
        "summary" : "Consumed quotas for a specific apikey",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.apiKeyQuotas",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.RemainingQuotas"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "apikeys" ],
        "summary" : "Reset quotas consumption for an apikey",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.resetApiKeyQuotas",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.RemainingQuotas"
                }
              }
            }
          }
        }
      }
    },
    "/api/cluster/user-tokens" : {
      "post" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to set a distributed login token between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.setUserToken",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserTokenBody"
              }
            }
          }
        }
      }
    },
    "/api/pki/certs/_letencrypt" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a certificates using Let's Encrypt or any ACME compatible system",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genLetsEncryptCert",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LetsEncryptCertBody"
              }
            }
          }
        }
      }
    },
    "/api/live/{id}" : {
      "get" : {
        "tags" : [ "live" ],
        "summary" : "Get live stats for a specific service",
        "operationId" : "otoroshi.controllers.adminapi.StatsController.serviceLiveStats_live",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiveStats"
                }
              }
            }
          }
        }
      }
    },
    "/api/verifiers/_bulk" : {
      "patch" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Update (using json-patch) multiple GlobalJwtVerifiers at the same time",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Create multiple GlobalJwtVerifiers at the same time",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Delete multiple GlobalJwtVerifiers at the same time",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Update multiple GlobalJwtVerifiers at the same time",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkBody"
              }
            }
          }
        }
      }
    },
    "/api/lines" : {
      "get" : {
        "tags" : [ "lines" ],
        "summary" : "Get all lines of work (prod, preprod, etc)",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.allLines",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StringList"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps-sessions" : {
      "get" : {
        "tags" : [ "apps-sessions" ],
        "summary" : "Return all private apps sessions",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.privateAppsSessions",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.PrivateAppsUser"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "apps-sessions" ],
        "summary" : "Discard all private apps sessions",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.discardAllPrivateAppsSessions",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/apikeys/_template" : {
      "get" : {
        "tags" : [ "apikeys" ],
        "summary" : "Creates a new ApiKey from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_apikeys",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}/services" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Get the services from a service group",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.serviceGroupServices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDescriptorList"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/template" : {
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Creates an error template for the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.createServiceTemplate",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get the error template for the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceTemplate",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorTemplateList"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Deletes the error template for the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.deleteServiceTemplate",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "services" ],
        "summary" : "Update the error template of the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.updateServiceTemplate",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
              }
            }
          }
        }
      }
    },
    "/api/status" : {
      "post" : {
        "tags" : [ "analytics" ],
        "summary" : "Status for some/all services over time",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.servicesStatus",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceDescriptorList"
              }
            }
          }
        }
      }
    },
    "/api/privateapps/sessions/send/{id}/{username}" : {
      "post" : {
        "tags" : [ "privateapps" ],
        "summary" : "Send an email to a user to update its own settings",
        "operationId" : "otoroshi.controllers.PrivateAppsController.sendSelfUpdateLink",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        }, {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/admins/simple" : {
      "post" : {
        "tags" : [ "admins" ],
        "summary" : "Register an admin user",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.registerSimpleAdmin",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "admins" ],
        "summary" : "Returns all admins",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.simpleAdmins",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleAdminList"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/{id}/register/start" : {
      "post" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Stats the registration of a user",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.startRegistration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebAuthnRegistrationStartBody"
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/status" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Status of a service over time",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.serviceStatus",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/scripts/_compile" : {
      "post" : {
        "tags" : [ "scripts" ],
        "summary" : "Trigger script compilation of the server",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.compileScript",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CodeBody"
              }
            }
          }
        }
      }
    },
    "/api/pki/cas/{ca}/certs/_sign" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Sign a certificate based on a CSR",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.signCert",
        "parameters" : [ {
          "name" : "ca",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the ca parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.SignCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PemCsrBody"
              }
            }
          }
        }
      }
    },
    "/api/cluster/login-tokens/{id}" : {
      "post" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to create a distributed login token between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.createLoginToken",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to check a distributed login token between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.isLoginTokenValid",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates/{certId}/_renew" : {
      "post" : {
        "tags" : [ "certificates" ],
        "summary" : "Renew a certificates with the same attributes as the original one",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.renewCert",
        "parameters" : [ {
          "name" : "certId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The certId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/tcp/services/{id}" : {
      "patch" : {
        "tags" : [ "tcp" ],
        "summary" : "Updates (using json-patch) a specific TcpService using its id",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "tcp" ],
        "summary" : "Find a specific TcpService using its id",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tcp" ],
        "summary" : "Deletes a specific TcpService using its id",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "tcp" ],
        "summary" : "Updates a specific TcpService using its id",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
              }
            }
          }
        }
      }
    },
    "/api/services/_template" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Creates a new Service from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateService_services",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      }
    },
    "/api/cluster/sessions" : {
      "post" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to create a distributed private apps session between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.createSession",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.PrivateAppsUser"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.PrivateAppsUser"
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "otoroshi.models.ElasticAnalyticsConfig" : {
        "description" : "Settings for connection to an elastic cluster",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for connection to an elastic cluster",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for connection to an elastic cluster",
              "type" : "object",
              "properties" : {
                "clusterUri" : {
                  "description" : "Cluster URL",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Additionnal headers in the http request"
                },
                "password" : {
                  "description" : "Elastic password",
                  "type" : "string"
                },
                "indexSettings" : {
                  "description" : "???",
                  "type" : "object",
                  "properties" : {
                    "clientSide" : {
                      "description" : "???",
                      "type" : "boolean"
                    },
                    "interval" : {
                      "description" : "???",
                      "type" : "object",
                      "properties" : { }
                    }
                  }
                },
                "mtlsConfig" : {
                  "description" : "TLS settings for the http client",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "index" : {
                  "description" : "Index name",
                  "type" : "string"
                },
                "type" : {
                  "description" : "Object type",
                  "type" : "string"
                },
                "applyTemplate" : {
                  "description" : "???",
                  "type" : "boolean"
                },
                "user" : {
                  "description" : "Elastic user",
                  "type" : "string"
                },
                "version" : {
                  "description" : "???",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "clusterUri" : {
            "description" : "Cluster URL",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additionnal headers in the http request"
          },
          "password" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Elastic password"
          },
          "indexSettings" : {
            "description" : "???",
            "$ref" : "#/components/schemas/otoroshi.models.IndexSettings"
          },
          "mtlsConfig" : {
            "description" : "TLS settings for the http client",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "index" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Index name"
          },
          "type" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Object type",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "applyTemplate" : {
            "description" : "???",
            "type" : "boolean"
          },
          "version" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "???"
          },
          "user" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Elastic user"
          }
        }
      },
      "otoroshi.models.CorsSettings" : {
        "description" : "Settings for CORS support",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for CORS support",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for CORS support",
              "type" : "object",
              "properties" : {
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "The cors excluded patterns"
                },
                "allowMethods" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "The cors allowed methods"
                },
                "allowHeaders" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "The cors allowed headers"
                },
                "exposeHeaders" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "The cors exposed header"
                },
                "maxAge" : {
                  "description" : "Cors max age",
                  "type" : "number"
                },
                "enabled" : {
                  "description" : "Whether or not cors is enabled",
                  "type" : "boolean"
                },
                "allowCredentials" : {
                  "description" : "Allow to pass credentials",
                  "type" : "boolean"
                },
                "allowOrigin" : {
                  "description" : "The cors allowed origin",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Whether or not cors is enabled",
            "type" : "boolean"
          },
          "allowCredentials" : {
            "description" : "Allow to pass credentials",
            "type" : "boolean"
          },
          "maxAge" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "number"
            } ],
            "description" : "Cors max age"
          },
          "allowMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors allowed methods"
          },
          "allowHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors allowed headers"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors excluded patterns"
          },
          "exposeHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors exposed header"
          },
          "allowOrigin" : {
            "description" : "The cors allowed origin",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.LargeResponseFaultConfig" : {
        "description" : "Settings for a large response fault (chaos engineering)",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for a large response fault (chaos engineering)",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for a large response fault (chaos engineering)",
              "properties" : {
                "ratio" : {
                  "format" : "double",
                  "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                  "type" : "number"
                },
                "additionalResponseSize" : {
                  "format" : "int32",
                  "description" : "Add n 0 bytes",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "additionalResponseSize" : {
            "format" : "int32",
            "description" : "Add n 0 bytes",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.MappingSettings" : {
        "description" : "Settings to transform a jwt token",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings to transform a jwt token",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings to transform a jwt token",
              "properties" : {
                "map" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Change values"
                },
                "values" : {
                  "description" : "Add values",
                  "type" : "object"
                },
                "remove" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Remove some token claims"
                }
              }
            }
          }
        },
        "properties" : {
          "map" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Change values"
          },
          "values" : {
            "description" : "Add values",
            "type" : "object"
          },
          "remove" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove some token claims"
          }
        }
      },
      "otoroshi.models.VerificationSettings" : {
        "description" : "jwt token verification settings",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "jwt token verification settings",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "jwt token verification settings",
              "properties" : {
                "fields" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Fields validation"
                },
                "arrayFields" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Fields array validation"
                }
              }
            }
          }
        },
        "properties" : {
          "fields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields validation"
          },
          "arrayFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields array validation"
          }
        }
      },
      "otoroshi.models.TeamId" : {
        "type" : "string",
        "description" : "team id"
      },
      "WebauthnAdminList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
        }
      },
      "otoroshi.models.RegionMatch" : {
        "description" : "Match a target if in the same region",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Match a target if in the same region",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Match a target if in the same region",
              "properties" : {
                "region" : {
                  "description" : "Region name",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          },
          "region" : {
            "description" : "Region name",
            "type" : "string"
          }
        }
      },
      "ErrorTemplateList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
        }
      },
      "otoroshi.auth.GroupRights" : {
        "description" : "User rights associated with a group",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "User rights associated with a group",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "User rights associated with a group",
              "type" : "object",
              "properties" : {
                "userRights" : {
                  "description" : "The user rights associated with this group",
                  "type" : "object",
                  "properties" : {
                    "rights" : {
                      "description" : "Access rights of a user",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "teams" : {
                            "description" : "Access rights on teams",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          },
                          "tenant" : {
                            "description" : "Access rights on organizations",
                            "type" : "object",
                            "properties" : {
                              "canWrite" : {
                                "description" : "Can this access right write data",
                                "type" : "boolean"
                              },
                              "value" : {
                                "description" : "Access pattern",
                                "type" : "string"
                              },
                              "canRead" : {
                                "description" : "Can this access right read data",
                                "type" : "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "users" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "The users associated with this group"
                }
              }
            }
          }
        },
        "properties" : {
          "userRights" : {
            "description" : "The user rights associated with this group",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The users associated with this group"
          }
        }
      },
      "otoroshi.utils.http.MtlsConfig" : {
        "description" : "TLS settings for the http client",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "TLS settings for the http client",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "TLS settings for the http client",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            }
          }
        },
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "otoroshi.models.RefJwtVerifier" : {
        "description" : "Reference to a jwt verifier",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Reference to a jwt verifier",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Reference to a jwt verifier",
              "properties" : {
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Verifier excluded paths"
                },
                "enabled" : {
                  "description" : "Verifier enabled",
                  "type" : "boolean"
                },
                "ids" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Verifiers ids"
                }
              }
            }
          }
        },
        "properties" : {
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Verifier excluded paths"
          },
          "ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Verifiers ids"
          },
          "type" : {
            "description" : "the kind of verifier",
            "type" : "string",
            "enum" : [ "global", "local", "ref" ]
          },
          "enabled" : {
            "description" : "Verifier enabled",
            "type" : "boolean"
          }
        }
      },
      "TokenResponse" : {
        "type" : "object",
        "description" : "User login token response",
        "properties" : {
          "valid" : {
            "type" : "string"
          }
        }
      },
      "ScriptsList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.script.Script"
        }
      },
      "otoroshi.models.WeightedBestResponseTime" : {
        "description" : "Loadbalancing policy that route to best response time targets with a weight",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Loadbalancing policy that route to best response time targets with a weight",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Loadbalancing policy that route to best response time targets with a weight",
              "properties" : {
                "ratio" : {
                  "format" : "double",
                  "description" : "Weight ratio",
                  "type" : "number"
                }
              }
            }
          }
        },
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "Weight ratio",
            "type" : "number"
          }
        }
      },
      "LetsEncryptCertBody" : {
        "type" : "object",
        "description" : "PEM encoded certificate"
      },
      "otoroshi.models.CustomTimeouts" : {
        "description" : "Settings for custom timeouts for a specific path",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for custom timeouts for a specific path",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for custom timeouts for a specific path",
              "properties" : {
                "path" : {
                  "description" : "path on which this configuration works",
                  "type" : "string"
                },
                "callAndStreamTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                  "type" : "integer"
                },
                "callTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                  "type" : "integer"
                },
                "idleTimeout" : {
                  "format" : "int64",
                  "description" : "Timeout on idle connection",
                  "type" : "integer"
                },
                "globalTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                  "type" : "integer"
                },
                "connectionTimeout" : {
                  "format" : "int64",
                  "description" : "Timeout at connection",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "path" : {
            "description" : "path on which this configuration works",
            "type" : "string"
          },
          "callAndStreamTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
            "type" : "integer"
          },
          "callTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
            "type" : "integer"
          },
          "idleTimeout" : {
            "format" : "int64",
            "description" : "Timeout on idle connection",
            "type" : "integer"
          },
          "globalTimeout" : {
            "format" : "int64",
            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
            "type" : "integer"
          },
          "connectionTimeout" : {
            "format" : "int64",
            "description" : "Timeout at connection",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.BasicAuthConstraints" : {
        "description" : "Settings to extract apikey from a basic auth header like",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings to extract apikey from a basic auth header like",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings to extract apikey from a basic auth header like",
              "type" : "object",
              "properties" : {
                "headerName" : {
                  "description" : "Header name to get client_id:client_secret base64 encoded",
                  "type" : "string"
                },
                "queryName" : {
                  "description" : "Query param name to get client_id:client_secret base64 encoded",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Constraint enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "headerName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to get client_id:client_secret base64 encoded"
          },
          "queryName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Query param name to get client_id:client_secret base64 encoded"
          }
        }
      },
      "otoroshi.models.Transform" : {
        "description" : "jwt token transformation policy settings",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "jwt token transformation policy settings",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "jwt token transformation policy settings",
              "type" : "object",
              "properties" : {
                "transformSettings" : {
                  "description" : "Transformation settings",
                  "type" : "object",
                  "properties" : {
                    "mappingSettings" : {
                      "description" : "Token mapping settings",
                      "type" : "object",
                      "properties" : {
                        "map" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Change values"
                        },
                        "values" : {
                          "description" : "Add values",
                          "type" : "object"
                        },
                        "remove" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Remove some token claims"
                        }
                      }
                    },
                    "location" : {
                      "description" : "Location of the token",
                      "oneOfConstraints" : [ {
                        "required" : [ "name", "type" ]
                      }, {
                        "required" : [ "name", "type", "remove" ]
                      }, {
                        "required" : [ "name", "type" ]
                      } ],
                      "type" : "object",
                      "properties" : {
                        "name" : {
                          "description" : "Query param name",
                          "type" : "string"
                        },
                        "type" : {
                          "description" : "the kind of location",
                          "type" : "string",
                          "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                        },
                        "remove" : {
                          "description" : "Remove from value",
                          "type" : "string"
                        }
                      }
                    }
                  }
                },
                "algoSettings" : {
                  "description" : "Algorithm settings for re-signing token",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "verificationSettings" : {
                  "description" : "Verification settings",
                  "type" : "object",
                  "properties" : {
                    "fields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields validation"
                    },
                    "arrayFields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields array validation"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "transformSettings" : {
            "description" : "Transformation settings",
            "$ref" : "#/components/schemas/otoroshi.models.TransformSettings"
          },
          "algoSettings" : {
            "description" : "Algorithm settings for re-signing token",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "verificationSettings" : {
            "description" : "Verification settings",
            "$ref" : "#/components/schemas/otoroshi.models.VerificationSettings"
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          }
        }
      },
      "otoroshi.models.KidAlgoSettings" : {
        "description" : "Settings to find keypair based on header kid for verification",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings to find keypair based on header kid for verification",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings to find keypair based on header kid for verification",
              "properties" : {
                "onlyExposedCerts" : {
                  "description" : "Use only exposed certs",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.models.AlwaysMatch" : {
        "type" : "object",
        "description" : "Always select target",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "Always" ]
          }
        }
      },
      "otoroshi.models.TenantId" : {
        "type" : "string",
        "description" : "organization id"
      },
      "otoroshi.auth.SAMLCanocalizationMethod" : {
        "description" : "Canonicalization Method for XML Signatures",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Canonicalization Method for XML Signatures",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Canonicalization Method for XML Signatures",
              "properties" : { }
            }
          }
        },
        "properties" : { }
      },
      "Done" : {
        "type" : "object",
        "description" : "operation is done",
        "properties" : {
          "done" : {
            "type" : "boolean"
          }
        }
      },
      "UserTokenBody" : {
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          }
        }
      },
      "otoroshi.utils.mailer.MailgunSettings" : {
        "description" : "Settings for the mailgun mailer",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for the mailgun mailer",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for the mailgun mailer",
              "type" : "object",
              "properties" : {
                "eu" : {
                  "description" : "European tenant",
                  "type" : "boolean"
                },
                "apiKey" : {
                  "description" : "Mailgun apikey",
                  "type" : "string"
                },
                "domain" : {
                  "description" : "Mailgun domain",
                  "type" : "string"
                },
                "to" : {
                  "description" : "Destination email address",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Destination name",
                        "type" : "string"
                      },
                      "email" : {
                        "description" : "Email address",
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "eu" : {
            "description" : "European tenant",
            "type" : "boolean"
          },
          "apiKey" : {
            "description" : "Mailgun apikey",
            "type" : "string"
          },
          "domain" : {
            "description" : "Mailgun domain",
            "type" : "string"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.EmailLocation"
            },
            "description" : "Destination email address"
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "otoroshi.models.FileSettings" : {
        "description" : "Settings for a file data exporter",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for a file data exporter",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for a file data exporter",
              "properties" : {
                "path" : {
                  "description" : "File path",
                  "type" : "string"
                },
                "maxFileSize" : {
                  "format" : "int32",
                  "description" : "Max file size in bytes",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "path" : {
            "description" : "File path",
            "type" : "string"
          },
          "maxFileSize" : {
            "format" : "int32",
            "description" : "Max file size in bytes",
            "type" : "integer"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          }
        }
      },
      "otoroshi.models.InfraProviderMatch" : {
        "description" : "Match a target if in the same infrastructure",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Match a target if in the same infrastructure",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Match a target if in the same infrastructure",
              "properties" : {
                "provider" : {
                  "description" : "provider name",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "provider" : {
            "description" : "provider name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          }
        }
      },
      "otoroshi.models.Exporter" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.events.KafkaConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.events.PulsarConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ConsoleSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ElasticAnalyticsConfig"
        }, {
          "$ref" : "#/components/schemas/Null"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ExporterRef"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.FileSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.MetricsSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.Webhook"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.ConsoleMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.GenericMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailgunSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailjetSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.NoneMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.SendgridSettings"
        } ]
      },
      "otoroshi.auth.LdapAuthModuleConfig" : {
        "description" : "Authentication module that works with LDAP",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Authentication module that works with LDAP",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Authentication module that works with LDAP",
              "type" : "object",
              "properties" : {
                "groupFilters" : {
                  "description" : "LDAP group filters",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "team" : {
                        "description" : "The team associated with this group",
                        "type" : "string"
                      },
                      "tenant" : {
                        "description" : "The tenant associated with this group",
                        "type" : "object",
                        "properties" : {
                          "canWrite" : {
                            "description" : "Can this access right write data",
                            "type" : "boolean"
                          },
                          "value" : {
                            "description" : "Access pattern",
                            "type" : "string"
                          },
                          "canRead" : {
                            "description" : "Can this access right read data",
                            "type" : "boolean"
                          }
                        }
                      },
                      "group" : {
                        "description" : "The LDAP group",
                        "type" : "string"
                      }
                    }
                  }
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata of the module"
                },
                "allowEmptyPassword" : {
                  "description" : "Allow empty password access",
                  "type" : "boolean"
                },
                "basicAuth" : {
                  "description" : "Use standard basic auth or web login form",
                  "type" : "boolean"
                },
                "searchBase" : {
                  "description" : "LDAP search base",
                  "type" : "string"
                },
                "nameField" : {
                  "description" : "Field name to get name from user profile",
                  "type" : "string"
                },
                "emailField" : {
                  "description" : "Field name to get email from user profile",
                  "type" : "string"
                },
                "metadataField" : {
                  "description" : "Field name to get metadata from user profile",
                  "type" : "string"
                },
                "rightsOverride" : {
                  "description" : "Overrides user rights. Object with email as key",
                  "additionalProperties" : {
                    "type" : "object",
                    "properties" : {
                      "rights" : {
                        "description" : "Access rights of a user",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "teams" : {
                              "description" : "Access rights on teams",
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "canRead" : {
                                    "description" : "Can this access right read data",
                                    "type" : "boolean"
                                  },
                                  "value" : {
                                    "description" : "Access pattern",
                                    "type" : "string"
                                  },
                                  "canWrite" : {
                                    "description" : "Can this access right write data",
                                    "type" : "boolean"
                                  }
                                }
                              }
                            },
                            "tenant" : {
                              "description" : "Access rights on organizations",
                              "type" : "object",
                              "properties" : {
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "type" : "object"
                },
                "id" : {
                  "description" : "Unique id of the config",
                  "type" : "string"
                },
                "groupRights" : {
                  "description" : "Rights associated with groups",
                  "additionalProperties" : {
                    "type" : "object",
                    "properties" : {
                      "userRights" : {
                        "description" : "The user rights associated with this group",
                        "type" : "object",
                        "properties" : {
                          "rights" : {
                            "description" : "Access rights of a user",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "teams" : {
                                  "description" : "Access rights on teams",
                                  "type" : "array",
                                  "items" : {
                                    "type" : "object",
                                    "properties" : {
                                      "canRead" : {
                                        "description" : "Can this access right read data",
                                        "type" : "boolean"
                                      },
                                      "value" : {
                                        "description" : "Access pattern",
                                        "type" : "string"
                                      },
                                      "canWrite" : {
                                        "description" : "Can this access right write data",
                                        "type" : "boolean"
                                      }
                                    }
                                  }
                                },
                                "tenant" : {
                                  "description" : "Access rights on organizations",
                                  "type" : "object",
                                  "properties" : {
                                    "canWrite" : {
                                      "description" : "Can this access right write data",
                                      "type" : "boolean"
                                    },
                                    "value" : {
                                      "description" : "Access pattern",
                                      "type" : "string"
                                    },
                                    "canRead" : {
                                      "description" : "Can this access right read data",
                                      "type" : "boolean"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "users" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "The users associated with this group"
                      }
                    }
                  },
                  "type" : "object"
                },
                "extraMetadata" : {
                  "description" : "Add metadata to user. Object with email as key",
                  "type" : "object"
                },
                "searchFilter" : {
                  "description" : "Filter for users",
                  "type" : "string"
                },
                "adminPassword" : {
                  "description" : "The admin password",
                  "type" : "string"
                },
                "sessionCookieValues" : {
                  "description" : "Settings for the session cookie",
                  "type" : "object",
                  "properties" : {
                    "httpOnly" : {
                      "description" : "Is cookie accessible on server side only",
                      "type" : "boolean"
                    },
                    "secure" : {
                      "description" : "Is cookie for https only",
                      "type" : "boolean"
                    }
                  }
                },
                "dataOverride" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object"
                  },
                  "description" : "Overiddes user data. Object with email as key"
                },
                "superAdmins" : {
                  "description" : "This module produces only super admins",
                  "type" : "boolean"
                },
                "userBase" : {
                  "description" : "LDAP user base DN",
                  "type" : "string"
                },
                "serverUrls" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "LDAP server list of url"
                },
                "_loc" : {
                  "description" : "Location of the module",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "sessionMaxAge" : {
                  "format" : "int32",
                  "description" : "Max age of the session",
                  "type" : "integer"
                },
                "adminUsername" : {
                  "description" : "The admin username",
                  "type" : "string"
                },
                "name" : {
                  "description" : "Name of the config",
                  "type" : "string"
                },
                "desc" : {
                  "description" : "Description of the config",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "groupFilters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.GroupFilter"
            },
            "description" : "LDAP group filters"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata of the module"
          },
          "allowEmptyPassword" : {
            "description" : "Allow empty password access",
            "type" : "boolean"
          },
          "basicAuth" : {
            "description" : "Use standard basic auth or web login form",
            "type" : "boolean"
          },
          "searchBase" : {
            "description" : "LDAP search base",
            "type" : "string"
          },
          "nameField" : {
            "description" : "Field name to get name from user profile",
            "type" : "string"
          },
          "emailField" : {
            "description" : "Field name to get email from user profile",
            "type" : "string"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "metadataField" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Field name to get metadata from user profile"
          },
          "rightsOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/otoroshi.models.UserRights"
            },
            "description" : "Overrides user rights. Object with email as key"
          },
          "groupRights" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/otoroshi.auth.GroupRights"
            },
            "description" : "Rights associated with groups"
          },
          "id" : {
            "description" : "Unique id of the config",
            "type" : "string"
          },
          "extraMetadata" : {
            "description" : "Add metadata to user. Object with email as key",
            "type" : "object"
          },
          "searchFilter" : {
            "description" : "Filter for users",
            "type" : "string"
          },
          "adminPassword" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The admin password"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "dataOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Overiddes user data. Object with email as key"
          },
          "superAdmins" : {
            "description" : "This module produces only super admins",
            "type" : "boolean"
          },
          "userBase" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "LDAP user base DN"
          },
          "serverUrls" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "LDAP server list of url"
          },
          "_loc" : {
            "description" : "Location of the module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "Max age of the session",
            "type" : "integer"
          },
          "adminUsername" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The admin username"
          },
          "name" : {
            "description" : "Name of the config",
            "type" : "string"
          },
          "desc" : {
            "description" : "Description of the config",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.Team" : {
        "description" : "An otoroshi model for a team of users in the organization (otoroshi-ui)",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "An otoroshi model for a team of users in the organization (otoroshi-ui)",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "An otoroshi model for a team of users in the organization (otoroshi-ui)",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "name" : {
                  "description" : "Entity name",
                  "type" : "string"
                },
                "description" : {
                  "description" : "Entity description",
                  "type" : "string"
                },
                "id" : {
                  "description" : "Entity id",
                  "type" : "string"
                },
                "tenant" : {
                  "description" : "Entity organization",
                  "type" : "string"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                }
              }
            }
          }
        },
        "properties" : {
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "tenant" : {
            "description" : "Entity organization",
            "$ref" : "#/components/schemas/otoroshi.models.TenantId"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "id" : {
            "description" : "Entity id",
            "$ref" : "#/components/schemas/otoroshi.models.TeamId"
          }
        }
      },
      "otoroshi.models.ChaosConfig" : {
        "description" : "Settings to enable chaos engineering for a service",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings to enable chaos engineering for a service",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings to enable chaos engineering for a service",
              "type" : "object",
              "properties" : {
                "badResponsesFaultConfig" : {
                  "description" : "Settings for bad responses",
                  "type" : "object",
                  "properties" : {
                    "responses" : {
                      "description" : "The possibles responses",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "status" : {
                            "format" : "int32",
                            "description" : "The HTTP status for the response",
                            "type" : "integer"
                          },
                          "body" : {
                            "description" : "The body of the HTTP response",
                            "type" : "string"
                          },
                          "headers" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "The HTTP headers of the response"
                          }
                        }
                      }
                    },
                    "ratio" : {
                      "format" : "double",
                      "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                      "type" : "number"
                    }
                  }
                },
                "largeResponseFaultConfig" : {
                  "description" : "Settings for large responses",
                  "type" : "object",
                  "properties" : {
                    "ratio" : {
                      "format" : "double",
                      "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                      "type" : "number"
                    },
                    "additionalResponseSize" : {
                      "format" : "int32",
                      "description" : "Add n 0 bytes",
                      "type" : "integer"
                    }
                  }
                },
                "latencyInjectionFaultConfig" : {
                  "description" : "Settings for latency injection",
                  "type" : "object",
                  "properties" : {
                    "ratio" : {
                      "format" : "double",
                      "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                      "type" : "number"
                    },
                    "from" : {
                      "description" : "The start range of latency added to the request",
                      "type" : "number"
                    },
                    "to" : {
                      "description" : "The end range of latency added to the request",
                      "type" : "number"
                    }
                  }
                },
                "largeRequestFaultConfig" : {
                  "description" : "Settings for large requests",
                  "type" : "object",
                  "properties" : {
                    "ratio" : {
                      "format" : "double",
                      "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                      "type" : "number"
                    },
                    "additionalRequestSize" : {
                      "format" : "int32",
                      "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                      "type" : "integer"
                    }
                  }
                },
                "enabled" : {
                  "description" : "Whether or not this config is enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "badResponsesFaultConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.BadResponsesFaultConfig"
            } ],
            "description" : "Settings for bad responses"
          },
          "largeRequestFaultConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.LargeRequestFaultConfig"
            } ],
            "description" : "Settings for large requests"
          },
          "largeResponseFaultConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.LargeResponseFaultConfig"
            } ],
            "description" : "Settings for large responses"
          },
          "latencyInjectionFaultConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.LatencyInjectionFaultConfig"
            } ],
            "description" : "Settings for latency injection"
          },
          "enabled" : {
            "description" : "Whether or not this config is enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.events.HealthCheckEvent" : {
        "description" : "Events generated by health checks",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Events generated by health checks",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Events generated by health checks",
              "type" : "object",
              "properties" : {
                "duration" : {
                  "format" : "int64",
                  "description" : "Duration of the call",
                  "type" : "integer"
                },
                "logicCheck" : {
                  "description" : "Did the service respond with the logic check",
                  "type" : "boolean"
                },
                "health" : {
                  "description" : "Health status",
                  "type" : "string"
                },
                "error" : {
                  "description" : "Error if any",
                  "type" : "string"
                },
                "url" : {
                  "description" : "Checked url",
                  "type" : "string"
                },
                "status" : {
                  "format" : "int32",
                  "description" : "Check status",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "error" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Error if any"
          },
          "health" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Health status"
          },
          "logicCheck" : {
            "description" : "Did the service respond with the logic check",
            "type" : "boolean"
          },
          "status" : {
            "format" : "int32",
            "description" : "Check status",
            "type" : "integer"
          },
          "url" : {
            "description" : "Checked url",
            "type" : "string"
          },
          "duration" : {
            "format" : "int64",
            "description" : "Duration of the call",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.SecComVersion" : {
        "type" : "string",
        "enum" : [ "V1", "v2" ],
        "description" : "Version of the challenge token"
      },
      "otoroshi.models.TransformSettings" : {
        "description" : "jwt token transformation settings",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "jwt token transformation settings",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "jwt token transformation settings",
              "type" : "object",
              "properties" : {
                "mappingSettings" : {
                  "description" : "Token mapping settings",
                  "type" : "object",
                  "properties" : {
                    "map" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Change values"
                    },
                    "values" : {
                      "description" : "Add values",
                      "type" : "object"
                    },
                    "remove" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Remove some token claims"
                    }
                  }
                },
                "location" : {
                  "description" : "Location of the token",
                  "oneOfConstraints" : [ {
                    "required" : [ "name", "type" ]
                  }, {
                    "required" : [ "name", "type", "remove" ]
                  }, {
                    "required" : [ "name", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "description" : "Query param name",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of location",
                      "type" : "string",
                      "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                    },
                    "remove" : {
                      "description" : "Remove from value",
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "location" : {
            "description" : "Location of the token",
            "$ref" : "#/components/schemas/otoroshi.models.JwtTokenLocation"
          },
          "mappingSettings" : {
            "description" : "Token mapping settings",
            "$ref" : "#/components/schemas/otoroshi.models.MappingSettings"
          }
        }
      },
      "ServiceDescriptorList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
        }
      },
      "otoroshi.models.ApiKey" : {
        "description" : "An otoroshi apikey that can allow you to access some services",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "An otoroshi apikey that can allow you to access some services",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "An otoroshi apikey that can allow you to access some services",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Bunch of metadata for the key"
                },
                "clientId" : {
                  "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
                  "type" : "string"
                },
                "clientName" : {
                  "description" : "The name of the api key, for humans ;-)",
                  "type" : "string"
                },
                "rotation" : {
                  "description" : "Apikey rotation settings",
                  "type" : "object",
                  "properties" : {
                    "gracePeriod" : {
                      "format" : "int64",
                      "description" : "period (in hours) during which both secrets works",
                      "type" : "integer"
                    },
                    "rotationEvery" : {
                      "format" : "int64",
                      "description" : "Rotate every n hours",
                      "type" : "integer"
                    },
                    "nextSecret" : {
                      "description" : "Next client_secret value",
                      "type" : "string"
                    },
                    "enabled" : {
                      "description" : "Rotation enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "description" : {
                  "description" : "Description of this apikey",
                  "type" : "string"
                },
                "restrictions" : {
                  "description" : "Apikey restrictions settings",
                  "type" : "object",
                  "properties" : {
                    "allowed" : {
                      "description" : "Allowed paths",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "method" : {
                            "description" : "Method of the http request",
                            "type" : "string"
                          },
                          "path" : {
                            "description" : "Path of the http request",
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "allowLast" : {
                      "description" : "Evalute allowed paths after everything else",
                      "type" : "boolean"
                    },
                    "forbidden" : {
                      "description" : "Forbidden paths (return 403)",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "method" : {
                            "description" : "Method of the http request",
                            "type" : "string"
                          },
                          "path" : {
                            "description" : "Path of the http request",
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "notFound" : {
                      "description" : "Not found paths (return 404)",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "method" : {
                            "description" : "Method of the http request",
                            "type" : "string"
                          },
                          "path" : {
                            "description" : "Path of the http request",
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "enabled" : {
                      "description" : "Restrictions enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "readOnly" : {
                  "description" : "The apikey only allow access for GET, HEAD and OPTIONS verbs",
                  "type" : "boolean"
                },
                "_loc" : {
                  "description" : "The location of the apikey",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "enabled" : {
                  "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
                  "type" : "boolean"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Apikey tags"
                },
                "throttlingQuota" : {
                  "format" : "int64",
                  "description" : "Authorized number of calls per second, measured on 10 seconds",
                  "type" : "integer"
                },
                "constrainedServicesOnly" : {
                  "description" : "This apikey can only be used on services that constrained their apikey routing",
                  "type" : "boolean"
                },
                "allowClientIdOnly" : {
                  "description" : "This apikey can be used juste with the client_id value",
                  "type" : "boolean"
                },
                "monthlyQuota" : {
                  "format" : "int64",
                  "description" : "Authorized number of calls per month",
                  "type" : "integer"
                },
                "validUntil" : {
                  "description" : "Date until when the apikey is valid",
                  "type" : "number"
                },
                "authorizedEntities" : {
                  "description" : "The group/service ids (prefixed by group_ or service_ on which the key is authorized",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "clientSecret" : {
                  "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
                  "type" : "string"
                },
                "dailyQuota" : {
                  "format" : "int64",
                  "description" : "Authorized number of calls per day",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "dailyQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per day",
            "type" : "integer"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Bunch of metadata for the key"
          },
          "throttlingQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per second, measured on 10 seconds",
            "type" : "integer"
          },
          "constrainedServicesOnly" : {
            "description" : "This apikey can only be used on services that constrained their apikey routing",
            "type" : "boolean"
          },
          "allowClientIdOnly" : {
            "description" : "This apikey can be used juste with the client_id value",
            "type" : "boolean"
          },
          "_loc" : {
            "description" : "The location of the apikey",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "restrictions" : {
            "description" : "Apikey restrictions settings",
            "$ref" : "#/components/schemas/otoroshi.models.Restrictions"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Apikey tags"
          },
          "enabled" : {
            "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
            "type" : "boolean"
          },
          "readOnly" : {
            "description" : "The apikey only allow access for GET, HEAD and OPTIONS verbs",
            "type" : "boolean"
          },
          "clientSecret" : {
            "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
            "type" : "string"
          },
          "validUntil" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "number"
            } ],
            "description" : "Date until when the apikey is valid"
          },
          "clientName" : {
            "description" : "The name of the api key, for humans ;-)",
            "type" : "string"
          },
          "monthlyQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per month",
            "type" : "integer"
          },
          "description" : {
            "description" : "Description of this apikey",
            "type" : "string"
          },
          "rotation" : {
            "description" : "Apikey rotation settings",
            "$ref" : "#/components/schemas/otoroshi.models.ApiKeyRotation"
          },
          "authorizedEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.EntityIdentifier"
            },
            "description" : "The group/service ids (prefixed by group_ or service_ on which the key is authorized"
          },
          "clientId" : {
            "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.UserRight" : {
        "description" : "Represent a user right (teams, organizations) in otoroshi-ui",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Represent a user right (teams, organizations) in otoroshi-ui",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Represent a user right (teams, organizations) in otoroshi-ui",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Access rights on teams",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "tenant" : {
                  "description" : "Access rights on organizations",
                  "type" : "object",
                  "properties" : {
                    "canWrite" : {
                      "description" : "Can this access right write data",
                      "type" : "boolean"
                    },
                    "value" : {
                      "description" : "Access pattern",
                      "type" : "string"
                    },
                    "canRead" : {
                      "description" : "Can this access right read data",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "tenant" : {
            "description" : "Access rights on organizations",
            "$ref" : "#/components/schemas/otoroshi.models.TenantAccess"
          },
          "teams" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.TeamAccess"
            },
            "description" : "Access rights on teams"
          }
        }
      },
      "otoroshi.models.InHeader" : {
        "description" : "JWT token location (header)",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "JWT token location (header)",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "JWT token location (header)",
              "properties" : {
                "name" : {
                  "description" : "Header name",
                  "type" : "string"
                },
                "remove" : {
                  "description" : "Remove from value",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "name" : {
            "description" : "Header name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          },
          "remove" : {
            "description" : "Remove from value",
            "type" : "string"
          }
        }
      },
      "otoroshi.auth.GenericOauth2ModuleConfig" : {
        "description" : "Authentication module that works with OAuth2/OIDC",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Authentication module that works with OAuth2/OIDC",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Authentication module that works with OAuth2/OIDC",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata of the module"
                },
                "refreshTokens" : {
                  "description" : "Refresh token support",
                  "type" : "boolean"
                },
                "tokenUrl" : {
                  "description" : "OAuth token URL",
                  "type" : "string"
                },
                "mtlsConfig" : {
                  "description" : "TLS config. for the module (for server accessed endpoints like tokenUrl, introspectionUrl, etc)",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "nameField" : {
                  "description" : "Field name to get name from user profile",
                  "type" : "string"
                },
                "emailField" : {
                  "description" : "Field name to get email from user profile",
                  "type" : "string"
                },
                "introspectionUrl" : {
                  "description" : "URL to introspect access_token",
                  "type" : "string"
                },
                "loginUrl" : {
                  "description" : "OAuth login URL",
                  "type" : "string"
                },
                "scope" : {
                  "description" : "The scope of the token",
                  "type" : "string"
                },
                "rightsOverride" : {
                  "description" : "Overrides user rights. Object with email as key",
                  "additionalProperties" : {
                    "type" : "object",
                    "properties" : {
                      "rights" : {
                        "description" : "Access rights of a user",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "teams" : {
                              "description" : "Access rights on teams",
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "canRead" : {
                                    "description" : "Can this access right read data",
                                    "type" : "boolean"
                                  },
                                  "value" : {
                                    "description" : "Access pattern",
                                    "type" : "string"
                                  },
                                  "canWrite" : {
                                    "description" : "Can this access right write data",
                                    "type" : "boolean"
                                  }
                                }
                              }
                            },
                            "tenant" : {
                              "description" : "Access rights on organizations",
                              "type" : "object",
                              "properties" : {
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "type" : "object"
                },
                "clientSecret" : {
                  "description" : "OAuth Client secret",
                  "type" : "string"
                },
                "callbackUrl" : {
                  "description" : "Otoroshi callback URL",
                  "type" : "string"
                },
                "id" : {
                  "description" : "Unique id of the config",
                  "type" : "string"
                },
                "accessTokenField" : {
                  "description" : "Field name to get access token",
                  "type" : "string"
                },
                "extraMetadata" : {
                  "description" : "Add metadata to user. Object with email as key",
                  "type" : "object"
                },
                "userInfoUrl" : {
                  "description" : "OAuth userinfo to get user profile",
                  "type" : "string"
                },
                "clientId" : {
                  "description" : "OAuth Client id",
                  "type" : "string"
                },
                "authorizeUrl" : {
                  "description" : "OAuth authorize URL",
                  "type" : "string"
                },
                "useCookie" : {
                  "description" : "Use cookies for redirection",
                  "type" : "boolean"
                },
                "sessionCookieValues" : {
                  "description" : "Settings for the session cookie",
                  "type" : "object",
                  "properties" : {
                    "httpOnly" : {
                      "description" : "Is cookie accessible on server side only",
                      "type" : "boolean"
                    },
                    "secure" : {
                      "description" : "Is cookie for https only",
                      "type" : "boolean"
                    }
                  }
                },
                "dataOverride" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object"
                  },
                  "description" : "Overiddes user data. Object with email as key"
                },
                "superAdmins" : {
                  "description" : "This module produces only super admins",
                  "type" : "boolean"
                },
                "apiKeyMetaField" : {
                  "description" : "Field name to extract apikey metadata",
                  "type" : "string"
                },
                "useJson" : {
                  "description" : "Use JSON or URL Form Encoded as payload with the OAuth provider",
                  "type" : "boolean"
                },
                "apiKeyTagsField" : {
                  "description" : "Field name to extract apikey tags",
                  "type" : "string"
                },
                "otoroshiDataField" : {
                  "description" : "Field name to get otoroshi metadata from. You can specify sub fields using | as separator",
                  "type" : "string"
                },
                "_loc" : {
                  "description" : "Location of the module",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "jwtVerifier" : {
                  "description" : "Algo. settings to verify JWT token",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "sessionMaxAge" : {
                  "format" : "int32",
                  "description" : "max age for the session cookie in seconds",
                  "type" : "integer"
                },
                "proxy" : {
                  "description" : "Web proxy configuration for the module's http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "logoutUrl" : {
                  "description" : "OAuth logout URL",
                  "type" : "string"
                },
                "readProfileFromToken" : {
                  "description" : "The user profile will be read from the JWT token in id_token",
                  "type" : "boolean"
                },
                "oidConfig" : {
                  "description" : "URL of the OIDC config. file",
                  "type" : "string"
                },
                "name" : {
                  "description" : "Name of the config",
                  "type" : "string"
                },
                "claims" : {
                  "description" : "The claims of the token",
                  "type" : "string"
                },
                "desc" : {
                  "description" : "Description of the config",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "refreshTokens" : {
            "description" : "Refresh token support",
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata of the module"
          },
          "tokenUrl" : {
            "description" : "OAuth token URL",
            "type" : "string"
          },
          "mtlsConfig" : {
            "description" : "TLS config. for the module (for server accessed endpoints like tokenUrl, introspectionUrl, etc)",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "nameField" : {
            "description" : "Field name to get name from user profile",
            "type" : "string"
          },
          "emailField" : {
            "description" : "Field name to get email from user profile",
            "type" : "string"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "introspectionUrl" : {
            "description" : "URL to introspect access_token",
            "type" : "string"
          },
          "loginUrl" : {
            "description" : "OAuth login URL",
            "type" : "string"
          },
          "scope" : {
            "description" : "The scope of the token",
            "type" : "string"
          },
          "rightsOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/otoroshi.models.UserRights"
            },
            "description" : "Overrides user rights. Object with email as key"
          },
          "callbackUrl" : {
            "description" : "Otoroshi callback URL",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "OAuth Client secret",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique id of the config",
            "type" : "string"
          },
          "extraMetadata" : {
            "description" : "Add metadata to user. Object with email as key",
            "type" : "object"
          },
          "accessTokenField" : {
            "description" : "Field name to get access token",
            "type" : "string"
          },
          "userInfoUrl" : {
            "description" : "OAuth userinfo to get user profile",
            "type" : "string"
          },
          "clientId" : {
            "description" : "OAuth Client id",
            "type" : "string"
          },
          "useCookie" : {
            "description" : "Use cookies for redirection",
            "type" : "boolean"
          },
          "authorizeUrl" : {
            "description" : "OAuth authorize URL",
            "type" : "string"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "dataOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Overiddes user data. Object with email as key"
          },
          "superAdmins" : {
            "description" : "This module produces only super admins",
            "type" : "boolean"
          },
          "apiKeyMetaField" : {
            "description" : "Field name to extract apikey metadata",
            "type" : "string"
          },
          "useJson" : {
            "description" : "Use JSON or URL Form Encoded as payload with the OAuth provider",
            "type" : "boolean"
          },
          "apiKeyTagsField" : {
            "description" : "Field name to extract apikey tags",
            "type" : "string"
          },
          "otoroshiDataField" : {
            "description" : "Field name to get otoroshi metadata from. You can specify sub fields using | as separator",
            "type" : "string"
          },
          "_loc" : {
            "description" : "Location of the module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "jwtVerifier" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
            } ],
            "description" : "Algo. settings to verify JWT token"
          },
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "max age for the session cookie in seconds",
            "type" : "integer"
          },
          "proxy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy configuration for the module's http client"
          },
          "logoutUrl" : {
            "description" : "OAuth logout URL",
            "type" : "string"
          },
          "oidConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "URL of the OIDC config. file"
          },
          "readProfileFromToken" : {
            "description" : "The user profile will be read from the JWT token in id_token",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Name of the config",
            "type" : "string"
          },
          "claims" : {
            "description" : "The claims of the token",
            "type" : "string"
          },
          "desc" : {
            "description" : "Description of the config",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.GlobalJwtVerifier" : {
        "description" : "Otoroshi model for JWT token verifier",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Otoroshi model for JWT token verifier",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Otoroshi model for JWT token verifier",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "algoSettings" : {
                  "description" : "Algo settings of the verifier",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "name" : {
                  "description" : "Verifier name",
                  "type" : "string"
                },
                "id" : {
                  "description" : "Verifier id",
                  "type" : "string"
                },
                "source" : {
                  "description" : "Where to find the jwt token",
                  "oneOfConstraints" : [ {
                    "required" : [ "name", "type" ]
                  }, {
                    "required" : [ "name", "type", "remove" ]
                  }, {
                    "required" : [ "name", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "description" : "Query param name",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of location",
                      "type" : "string",
                      "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                    },
                    "remove" : {
                      "description" : "Remove from value",
                      "type" : "string"
                    }
                  }
                },
                "strict" : {
                  "description" : "Does it fail if JWT not found",
                  "type" : "boolean"
                },
                "strategy" : {
                  "description" : "The strategy of the verifier",
                  "oneOfConstraints" : [ {
                    "required" : [ "verificationSettings", "type", "strict", "token" ]
                  }, {
                    "required" : [ "verificationSettings", "type" ]
                  }, {
                    "required" : [ "algoSettings", "verificationSettings", "type" ]
                  }, {
                    "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "transformSettings" : {
                      "description" : "Transformation settings",
                      "type" : "object",
                      "properties" : {
                        "mappingSettings" : {
                          "description" : "Token mapping settings",
                          "type" : "object",
                          "properties" : {
                            "map" : {
                              "type" : "object",
                              "additionalProperties" : {
                                "type" : "string"
                              },
                              "description" : "Change values"
                            },
                            "values" : {
                              "description" : "Add values",
                              "type" : "object"
                            },
                            "remove" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Remove some token claims"
                            }
                          }
                        },
                        "location" : {
                          "description" : "Location of the token",
                          "oneOfConstraints" : [ {
                            "required" : [ "name", "type" ]
                          }, {
                            "required" : [ "name", "type", "remove" ]
                          }, {
                            "required" : [ "name", "type" ]
                          } ],
                          "type" : "object",
                          "properties" : {
                            "name" : {
                              "description" : "Query param name",
                              "type" : "string"
                            },
                            "type" : {
                              "description" : "the kind of location",
                              "type" : "string",
                              "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                            },
                            "remove" : {
                              "description" : "Remove from value",
                              "type" : "string"
                            }
                          }
                        }
                      }
                    },
                    "algoSettings" : {
                      "description" : "Algorithm settings for re-signing token",
                      "oneOfConstraints" : [ {
                        "required" : [ "privateKey", "size", "publicKey", "type" ]
                      }, {
                        "required" : [ "size", "certId", "type" ]
                      }, {
                        "required" : [ "size", "base64", "secret", "type" ]
                      }, {
                        "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                      }, {
                        "required" : [ "onlyExposedCerts", "type" ]
                      }, {
                        "required" : [ "size", "certId", "type" ]
                      }, {
                        "required" : [ "privateKey", "size", "publicKey", "type" ]
                      } ],
                      "type" : "object",
                      "properties" : {
                        "headers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Http header when fetching JWKS"
                        },
                        "mtlsConfig" : {
                          "description" : "TLS settings for http client",
                          "type" : "object",
                          "properties" : {
                            "mtls" : {
                              "description" : "Enabled",
                              "type" : "boolean"
                            },
                            "loose" : {
                              "description" : "Loose verification",
                              "type" : "boolean"
                            },
                            "trustAll" : {
                              "description" : "Trust any certificate",
                              "type" : "boolean"
                            },
                            "trustedCerts" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            },
                            "certs" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            }
                          }
                        },
                        "base64" : {
                          "description" : "The secret is base64 encoded",
                          "type" : "boolean"
                        },
                        "publicKey" : {
                          "description" : "Public key (for verification)",
                          "type" : "string"
                        },
                        "certId" : {
                          "description" : "Certificate id",
                          "type" : "string"
                        },
                        "secret" : {
                          "description" : "HMAC secret",
                          "type" : "string"
                        },
                        "type" : {
                          "description" : "the kind of algosettings",
                          "type" : "string",
                          "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                        },
                        "ttl" : {
                          "description" : "Cache ttl",
                          "type" : "number"
                        },
                        "url" : {
                          "description" : "JWKS url",
                          "type" : "string"
                        },
                        "timeout" : {
                          "description" : "Timeout when fetching JWKS",
                          "type" : "number"
                        },
                        "kty" : {
                          "description" : "Key type",
                          "type" : "string"
                        },
                        "privateKey" : {
                          "description" : "Private key (for signing)",
                          "type" : "string"
                        },
                        "proxy" : {
                          "description" : "Web proxy for http client",
                          "oneOfConstraints" : [ ],
                          "type" : "object",
                          "properties" : { }
                        },
                        "onlyExposedCerts" : {
                          "description" : "Use only exposed certs",
                          "type" : "boolean"
                        },
                        "size" : {
                          "format" : "int32",
                          "description" : "SHA function size",
                          "type" : "integer"
                        }
                      }
                    },
                    "verificationSettings" : {
                      "description" : "Verification settings",
                      "type" : "object",
                      "properties" : {
                        "fields" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Fields validation"
                        },
                        "arrayFields" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Fields array validation"
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of strategy",
                      "type" : "string",
                      "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                    },
                    "strict" : {
                      "description" : "If the token already exists in the request, then fail",
                      "type" : "boolean"
                    },
                    "token" : {
                      "description" : "The default token",
                      "type" : "object"
                    }
                  }
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "desc" : {
                  "description" : "Verifier description",
                  "type" : "string"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                }
              }
            }
          }
        },
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "algoSettings" : {
            "description" : "Algo settings of the verifier",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "name" : {
            "description" : "Verifier name",
            "type" : "string"
          },
          "source" : {
            "description" : "Where to find the jwt token",
            "$ref" : "#/components/schemas/otoroshi.models.JwtTokenLocation"
          },
          "id" : {
            "description" : "Verifier id",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of verifier",
            "type" : "string",
            "enum" : [ "global" ]
          },
          "strict" : {
            "description" : "Does it fail if JWT not found",
            "type" : "boolean"
          },
          "strategy" : {
            "description" : "The strategy of the verifier",
            "$ref" : "#/components/schemas/otoroshi.models.VerifierStrategy"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "desc" : {
            "description" : "Verifier description",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          }
        }
      },
      "otoroshi.models.ConsoleSettings" : {
        "description" : "Data exporter that will log everything to the console",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Data exporter that will log everything to the console",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Data exporter that will log everything to the console",
              "properties" : { }
            }
          }
        },
        "properties" : {
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          }
        }
      },
      "otoroshi.models.TenantAccess" : {
        "description" : "Access rights for organizations",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Access rights for organizations",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Access rights for organizations",
              "properties" : {
                "canWrite" : {
                  "description" : "Can this access right write data",
                  "type" : "boolean"
                },
                "value" : {
                  "description" : "Access pattern",
                  "type" : "string"
                },
                "canRead" : {
                  "description" : "Can this access right read data",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "canWrite" : {
            "description" : "Can this access right write data",
            "type" : "boolean"
          },
          "value" : {
            "description" : "Access pattern",
            "type" : "string"
          },
          "canRead" : {
            "description" : "Can this access right read data",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.TargetPredicate" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.AlwaysMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.DataCenterMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.GeolocationMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.InfraProviderMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.NetworkLocationMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RackMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RegionMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ZoneMatch"
        } ]
      },
      "otoroshi.models.IpStackGeolocationSettings" : {
        "description" : "Settings for connection to IpStack",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for connection to IpStack",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for connection to IpStack",
              "properties" : {
                "enabled" : {
                  "description" : "enable ipstack geolocation",
                  "type" : "boolean"
                },
                "apikey" : {
                  "description" : "IpStack apikey",
                  "type" : "string"
                },
                "timeout" : {
                  "format" : "int64",
                  "description" : "API call timeout",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "apikey" : {
            "description" : "IpStack apikey",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of geolocation",
            "type" : "string",
            "enum" : [ "none", "maxmind", "ipstack" ]
          },
          "enabled" : {
            "description" : "enable ipstack geolocation",
            "type" : "boolean"
          },
          "timeout" : {
            "format" : "int64",
            "description" : "API call timeout",
            "type" : "integer"
          }
        }
      },
      "otoroshi.auth.SAMLSignature" : {
        "description" : "Algorithm and canocalization method used to sign SAML documents",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Algorithm and canocalization method used to sign SAML documents",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Algorithm and canocalization method used to sign SAML documents",
              "type" : "object",
              "properties" : {
                "canocalizationMethod" : {
                  "description" : "Canonicalization Method for XML Signatures",
                  "type" : "object",
                  "properties" : { }
                },
                "algorithm" : {
                  "description" : "Algorithm to sign documents or assertions",
                  "type" : "object",
                  "properties" : { }
                }
              }
            }
          }
        },
        "properties" : {
          "algorithm" : {
            "description" : "Algorithm to sign documents or assertions",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLSignatureAlgorithm"
          },
          "canocalizationMethod" : {
            "description" : "Canonicalization Method for XML Signatures",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLCanocalizationMethod"
          }
        }
      },
      "UpdateQuotasBody" : {
        "type" : "string",
        "description" : ""
      },
      "otoroshi.models.DataExporterConfigFiltering" : {
        "description" : "Settings to match otoroshi events",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings to match otoroshi events",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings to match otoroshi events",
              "properties" : {
                "include" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  },
                  "description" : "Exclude the events matching one of those filters"
                },
                "exclude" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  },
                  "description" : "Include the events matching one of those filters"
                }
              }
            }
          }
        },
        "properties" : {
          "include" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            },
            "description" : "Exclude the events matching one of those filters"
          },
          "exclude" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            },
            "description" : "Include the events matching one of those filters"
          }
        }
      },
      "otoroshi.models.ServiceGroup" : {
        "description" : "The otoroshi model for a group of services",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "The otoroshi model for a group of services",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "The otoroshi model for a group of services",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Just a bunch of random properties"
                },
                "name" : {
                  "description" : "The name of your service. Only for debug and human readability purposes",
                  "type" : "string"
                },
                "description" : {
                  "description" : "Entity description",
                  "type" : "string"
                },
                "id" : {
                  "description" : "A unique random string to identify your service",
                  "type" : "string"
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                }
              }
            }
          }
        },
        "properties" : {
          "id" : {
            "description" : "A unique random string to identify your service",
            "type" : "string"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "name" : {
            "description" : "The name of your service. Only for debug and human readability purposes",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Just a bunch of random properties"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          }
        }
      },
      "otoroshi.auth.OAuth1Provider" : {
        "description" : "Method used to get request and access token",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Method used to get request and access token",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Method used to get request and access token",
              "properties" : { }
            }
          }
        },
        "properties" : { }
      },
      "otoroshi.ssl.pki.models.GenCsrQuery" : {
        "description" : "Settings for generating a certificate",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for generating a certificate",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for generating a certificate",
              "type" : "object",
              "properties" : {
                "duration" : {
                  "description" : "Certificate lifespan",
                  "type" : "number"
                },
                "includeAIA" : {
                  "description" : "Include AIA extension (if generated from otoroshi CA)",
                  "type" : "boolean"
                },
                "signatureAlg" : {
                  "description" : "Signature algorithm",
                  "type" : "string"
                },
                "digestAlg" : {
                  "description" : "Digest algo",
                  "type" : "string"
                },
                "hosts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Certificate SANs"
                },
                "subject" : {
                  "description" : "Certificate subject",
                  "type" : "string"
                },
                "name" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Certificate name"
                },
                "client" : {
                  "description" : "Is cert client ?",
                  "type" : "boolean"
                },
                "existingSerialNumber" : {
                  "format" : "int64",
                  "description" : "",
                  "type" : "integer"
                },
                "ca" : {
                  "description" : "Is cert ca ?",
                  "type" : "boolean"
                },
                "key" : {
                  "description" : "Keypair specs",
                  "type" : "object",
                  "properties" : {
                    "algo" : {
                      "description" : "Keypair algorithm",
                      "type" : "string"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "Keypair size",
                      "type" : "integer"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "client" : {
            "description" : "Is cert client ?",
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Certificate SANs"
          },
          "key" : {
            "description" : "Keypair specs",
            "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenKeyPairQuery"
          },
          "includeAIA" : {
            "description" : "Include AIA extension (if generated from otoroshi CA)",
            "type" : "boolean"
          },
          "signatureAlg" : {
            "description" : "Signature algorithm",
            "type" : "string"
          },
          "existingSerialNumber" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "integer",
              "format" : "int64"
            } ],
            "description" : ""
          },
          "duration" : {
            "description" : "Certificate lifespan",
            "type" : "number"
          },
          "digestAlg" : {
            "description" : "Digest algo",
            "type" : "string"
          },
          "ca" : {
            "description" : "Is cert ca ?",
            "type" : "boolean"
          },
          "name" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Certificate name"
          },
          "subject" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Certificate subject"
          }
        }
      },
      "otoroshi.models.NetworkLocationMatch" : {
        "description" : "Match a target if in the same network location",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Match a target if in the same network location",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Match a target if in the same network location",
              "properties" : {
                "dataCenter" : {
                  "description" : "Datacenter name",
                  "type" : "string"
                },
                "rack" : {
                  "description" : "Rack name",
                  "type" : "string"
                },
                "region" : {
                  "description" : "Region name",
                  "type" : "string"
                },
                "provider" : {
                  "description" : "Provider name",
                  "type" : "string"
                },
                "zone" : {
                  "description" : "Zone name",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "rack" : {
            "description" : "Rack name",
            "type" : "string"
          },
          "provider" : {
            "description" : "Provider name",
            "type" : "string"
          },
          "dataCenter" : {
            "description" : "Datacenter name",
            "type" : "string"
          },
          "zone" : {
            "description" : "Zone name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          },
          "region" : {
            "description" : "Region name",
            "type" : "string"
          }
        }
      },
      "otoroshi.script.PluginType" : {
        "type" : "string",
        "enum" : [ "app", "transformer", "validator", "preroute", "sink", "listener", "job", "exporter" ],
        "description" : "Plugin kind"
      },
      "otoroshi.utils.mailer.ConsoleMailerSettings" : {
        "description" : "Settings for the console mailer",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for the console mailer",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for the console mailer",
              "properties" : { }
            }
          }
        },
        "properties" : {
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "otoroshi.models.DataExporterConfigType" : {
        "type" : "string",
        "enum" : [ "kafka", "pulsar", "elastic", "webhook", "file", "mailer", "custom", "none", "console", "metrics" ],
        "description" : "Type of data exporter"
      },
      "otoroshi.script.Script" : {
        "description" : "An otoroshi plugins stored as scala code in the otoroshi datastore",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "An otoroshi plugins stored as scala code in the otoroshi datastore",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "An otoroshi plugins stored as scala code in the otoroshi datastore",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "code" : {
                  "description" : "The code of the script",
                  "type" : "string"
                },
                "name" : {
                  "description" : "The name of the script",
                  "type" : "string"
                },
                "id" : {
                  "description" : "The id of the script",
                  "type" : "string"
                },
                "type" : {
                  "description" : "Plugin kind",
                  "type" : "string",
                  "enum" : [ "app", "transformer", "validator", "preroute", "sink", "listener", "job", "exporter" ]
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "desc" : {
                  "description" : "The description of the script",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "name" : {
            "description" : "The name of the script",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "desc" : {
            "description" : "The description of the script",
            "type" : "string"
          },
          "code" : {
            "description" : "The code of the script",
            "type" : "string"
          },
          "id" : {
            "description" : "The id of the script",
            "type" : "string"
          },
          "type" : {
            "description" : "Plugin type",
            "$ref" : "#/components/schemas/otoroshi.script.PluginType"
          }
        }
      },
      "otoroshi.utils.mailer.MailjetSettings" : {
        "description" : "Settings for the mailjet mailer",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for the mailjet mailer",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for the mailjet mailer",
              "type" : "object",
              "properties" : {
                "apiKeyPrivate" : {
                  "description" : "Private key",
                  "type" : "string"
                },
                "apiKeyPublic" : {
                  "description" : "Public key",
                  "type" : "string"
                },
                "to" : {
                  "description" : "Destination email address",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Destination name",
                        "type" : "string"
                      },
                      "email" : {
                        "description" : "Email address",
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "apiKeyPrivate" : {
            "description" : "Private key",
            "type" : "string"
          },
          "apiKeyPublic" : {
            "description" : "Public key",
            "type" : "string"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.EmailLocation"
            },
            "description" : "Destination email address"
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "play.api.libs.ws.WSProxyServer" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The hostname of the proxy server."
          },
          "port" : {
            "type" : "string",
            "description" : "The port of the proxy server."
          },
          "protocol" : {
            "type" : "string",
            "description" : "The protocol of the proxy server.  Use \"http\" or \"https\".  Defaults to \"http\" if not specified."
          },
          "principal" : {
            "type" : "string",
            "description" : "The principal (aka username) of the credentials for the proxy server."
          },
          "password" : {
            "type" : "string",
            "description" : "The password for the credentials for the proxy server."
          },
          "ntlmDomain" : {
            "type" : "string",
            "description" : "The ntlm domain for the proxy server."
          },
          "encoding" : {
            "type" : "string",
            "description" : "The realm's charset."
          },
          "nonProxyHosts" : {
            "type" : "string",
            "description" : "The non proxied hosts"
          }
        },
        "description" : "Proxy server"
      },
      "otoroshi.models.ServiceDescriptorIdentifier" : {
        "type" : "string",
        "description" : "the id of a service prefixed by 'service_'"
      },
      "otoroshi.models.SecComHeaders" : {
        "description" : "Header names for the otoroshi exchange protocol",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Header names for the otoroshi exchange protocol",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Header names for the otoroshi exchange protocol",
              "type" : "object",
              "properties" : {
                "stateResponseName" : {
                  "description" : "Header name where the validation token respondewill be",
                  "type" : "string"
                },
                "claimRequestName" : {
                  "description" : "Header name where the info token will be",
                  "type" : "string"
                },
                "stateRequestName" : {
                  "description" : "Header name where the validation token will be",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "claimRequestName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name where the info token will be"
          },
          "stateRequestName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name where the validation token will be"
          },
          "stateResponseName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name where the validation token respondewill be"
          }
        }
      },
      "otoroshi.auth.SAMLCredentials" : {
        "description" : "Used to sign, encrypt assertions and sign SAML documents",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Used to sign, encrypt assertions and sign SAML documents",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Used to sign, encrypt assertions and sign SAML documents",
              "type" : "object",
              "properties" : {
                "signedDocuments" : {
                  "description" : "Indicates if SAML documents have to be sign before sending to identity provider",
                  "type" : "boolean"
                },
                "encryptedAssertions" : {
                  "description" : "Indicates if assertions have to be encrypt before sending to identity provider",
                  "type" : "boolean"
                },
                "signingKey" : {
                  "description" : "Pair of configuration used to sign documents",
                  "type" : "object",
                  "properties" : {
                    "privateKey" : {
                      "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "certificate" : {
                      "description" : "PEM certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "useOtoroshiCertificate" : {
                      "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                      "type" : "boolean"
                    }
                  }
                },
                "encryptionKey" : {
                  "description" : "Pair of configuration used to encrypt assertions",
                  "type" : "object",
                  "properties" : {
                    "privateKey" : {
                      "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "certificate" : {
                      "description" : "PEM certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "useOtoroshiCertificate" : {
                      "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "signingKey" : {
            "description" : "Pair of configuration used to sign documents",
            "$ref" : "#/components/schemas/otoroshi.auth.Credential"
          },
          "encryptionKey" : {
            "description" : "Pair of configuration used to encrypt assertions",
            "$ref" : "#/components/schemas/otoroshi.auth.Credential"
          },
          "signedDocuments" : {
            "description" : "Indicates if SAML documents have to be sign before sending to identity provider",
            "type" : "boolean"
          },
          "encryptedAssertions" : {
            "description" : "Indicates if assertions have to be encrypt before sending to identity provider",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.tcp.TlsMode" : {
        "type" : "string",
        "enum" : [ "Disabled", "Enabled", "PassThrough" ],
        "description" : "TLS mode"
      },
      "otoroshi.models.ESKPAlgoSettings" : {
        "description" : "Settings to use elliptic curve signing algorithm from a certificate keypair",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings to use elliptic curve signing algorithm from a certificate keypair",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings to use elliptic curve signing algorithm from a certificate keypair",
              "properties" : {
                "size" : {
                  "format" : "int32",
                  "description" : "Size of the key",
                  "type" : "integer"
                },
                "certId" : {
                  "description" : "Certificate id to use the keypair",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "size" : {
            "format" : "int32",
            "description" : "Size of the key",
            "type" : "integer"
          },
          "certId" : {
            "description" : "Certificate id to use the keypair",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "AuditEventList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.events.AuditEvent"
        }
      },
      "otoroshi.models.ServiceDescriptor" : {
        "description" : "The otoroshi model for a service (handles routing)",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "The otoroshi model for a service (handles routing)",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "The otoroshi model for a service (handles routing)",
              "type" : "object",
              "properties" : {
                "removeHeadersIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Remove headers on client request"
                },
                "missingOnlyHeadersOut" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Add header on client response if they are not present"
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Just a bunch of random properties"
                },
                "tcpUdpTunneling" : {
                  "description" : "Enabled TCP/UDP tunneling through websocket connection",
                  "type" : "boolean"
                },
                "cors" : {
                  "description" : "CORS settings",
                  "type" : "object",
                  "properties" : {
                    "excludedPatterns" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "The cors excluded patterns"
                    },
                    "allowMethods" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "The cors allowed methods"
                    },
                    "allowHeaders" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "The cors allowed headers"
                    },
                    "exposeHeaders" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "The cors exposed header"
                    },
                    "maxAge" : {
                      "description" : "Cors max age",
                      "type" : "number"
                    },
                    "enabled" : {
                      "description" : "Whether or not cors is enabled",
                      "type" : "boolean"
                    },
                    "allowCredentials" : {
                      "description" : "Allow to pass credentials",
                      "type" : "boolean"
                    },
                    "allowOrigin" : {
                      "description" : "The cors allowed origin",
                      "type" : "string"
                    }
                  }
                },
                "forceHttps" : {
                  "description" : "Will force redirection to https:// if not present",
                  "type" : "boolean"
                },
                "matchingRoot" : {
                  "description" : "The root path on which the service is available",
                  "type" : "string"
                },
                "plugins" : {
                  "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
                  "type" : "object",
                  "properties" : {
                    "config" : {
                      "description" : "Plugins configuration",
                      "type" : "object"
                    },
                    "enabled" : {
                      "description" : "Plugins enabled",
                      "type" : "boolean"
                    },
                    "excluded" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Excluded paths"
                    },
                    "refs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Enabled plugins"
                    }
                  }
                },
                "letsEncrypt" : {
                  "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
                  "type" : "boolean"
                },
                "useNewWSClient" : {
                  "description" : "Use akka http client for this service on websocket calls",
                  "type" : "boolean"
                },
                "chaosConfig" : {
                  "description" : "Chaos engineering settings",
                  "type" : "object",
                  "properties" : {
                    "badResponsesFaultConfig" : {
                      "description" : "Settings for bad responses",
                      "type" : "object",
                      "properties" : {
                        "responses" : {
                          "description" : "The possibles responses",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "status" : {
                                "format" : "int32",
                                "description" : "The HTTP status for the response",
                                "type" : "integer"
                              },
                              "body" : {
                                "description" : "The body of the HTTP response",
                                "type" : "string"
                              },
                              "headers" : {
                                "type" : "object",
                                "additionalProperties" : {
                                  "type" : "string"
                                },
                                "description" : "The HTTP headers of the response"
                              }
                            }
                          }
                        },
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        }
                      }
                    },
                    "largeResponseFaultConfig" : {
                      "description" : "Settings for large responses",
                      "type" : "object",
                      "properties" : {
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        },
                        "additionalResponseSize" : {
                          "format" : "int32",
                          "description" : "Add n 0 bytes",
                          "type" : "integer"
                        }
                      }
                    },
                    "latencyInjectionFaultConfig" : {
                      "description" : "Settings for latency injection",
                      "type" : "object",
                      "properties" : {
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        },
                        "from" : {
                          "description" : "The start range of latency added to the request",
                          "type" : "number"
                        },
                        "to" : {
                          "description" : "The end range of latency added to the request",
                          "type" : "number"
                        }
                      }
                    },
                    "largeRequestFaultConfig" : {
                      "description" : "Settings for large requests",
                      "type" : "object",
                      "properties" : {
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        },
                        "additionalRequestSize" : {
                          "format" : "int32",
                          "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                          "type" : "integer"
                        }
                      }
                    },
                    "enabled" : {
                      "description" : "Whether or not this config is enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "secComSettings" : {
                  "description" : "Sec. com. settings",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "detectApiKeySooner" : {
                  "description" : "Detect if an apikey is present but do not fail if not",
                  "type" : "boolean"
                },
                "transformerRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Enabled transformer plugins"
                },
                "secComAlgoInfoToken" : {
                  "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "missingOnlyHeadersIn" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Add header on client request if they are not present"
                },
                "secComAlgoChallengeOtoToBack" : {
                  "description" : "Algorithm to sign challenge token to the backend",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "removeHeadersOut" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Remove headers on client response"
                },
                "stripPath" : {
                  "description" : "Strip matching path in the forwarded request path",
                  "type" : "boolean"
                },
                "localHost" : {
                  "description" : "The host used localy, mainly localhost:xxxx",
                  "type" : "string"
                },
                "sendOtoroshiHeadersBack" : {
                  "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
                  "type" : "boolean"
                },
                "id" : {
                  "description" : "A unique random string to identify your service",
                  "type" : "string"
                },
                "api" : {
                  "description" : "Api exposition settings",
                  "type" : "object",
                  "properties" : {
                    "exposeApi" : {
                      "description" : "Is this an API",
                      "type" : "boolean"
                    },
                    "openApiDescriptorUrl" : {
                      "description" : "openapi descriptor url",
                      "type" : "string"
                    }
                  }
                },
                "secComTtl" : {
                  "description" : "TTL for the info token",
                  "type" : "number"
                },
                "secComVersion" : {
                  "description" : "Version of the challenge token",
                  "type" : "string",
                  "enum" : [ "V1", "v2" ]
                },
                "targetsLoadBalancing" : {
                  "description" : "Loadbalancing strategy",
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "string",
                      "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                    },
                    "ratio" : {
                      "type" : "number",
                      "format" : "double"
                    }
                  }
                },
                "userFacing" : {
                  "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
                  "type" : "boolean"
                },
                "hosts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Possible hosts for the service"
                },
                "restrictions" : {
                  "description" : "Restriction settings",
                  "type" : "object",
                  "properties" : {
                    "allowed" : {
                      "description" : "Allowed paths",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "method" : {
                            "description" : "Method of the http request",
                            "type" : "string"
                          },
                          "path" : {
                            "description" : "Path of the http request",
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "allowLast" : {
                      "description" : "Evalute allowed paths after everything else",
                      "type" : "boolean"
                    },
                    "forbidden" : {
                      "description" : "Forbidden paths (return 403)",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "method" : {
                            "description" : "Method of the http request",
                            "type" : "string"
                          },
                          "path" : {
                            "description" : "Path of the http request",
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "notFound" : {
                      "description" : "Not found paths (return 404)",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "method" : {
                            "description" : "Method of the http request",
                            "type" : "string"
                          },
                          "path" : {
                            "description" : "Path of the http request",
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "enabled" : {
                      "description" : "Restrictions enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "readOnly" : {
                  "description" : "Service only accepts GET, HEAD and OPTIONS requests",
                  "type" : "boolean"
                },
                "secComInfoTokenVersion" : {
                  "description" : "Version of the info token",
                  "type" : "string",
                  "enum" : [ "Legacy", "Latest" ]
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "enforceSecureCommunication" : {
                  "description" : "When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside",
                  "type" : "boolean"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "clientValidatorRef" : {
                  "description" : "A reference to validation authority",
                  "type" : "string"
                },
                "privateApp" : {
                  "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
                  "type" : "boolean"
                },
                "paths" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Matching paths on request"
                },
                "domain" : {
                  "description" : "The domain on which the service is available.",
                  "type" : "string"
                },
                "name" : {
                  "description" : "The name of your service. Only for debug and human readability purposes",
                  "type" : "string"
                },
                "transformerConfig" : {
                  "description" : "Transformer plugins configuration",
                  "type" : "object"
                },
                "subdomain" : {
                  "description" : "The subdomain on which the service is available",
                  "type" : "string"
                },
                "maintenanceMode" : {
                  "description" : "Display a maintainance page when a user try to use the service",
                  "type" : "boolean"
                },
                "secComHeaders" : {
                  "description" : "Header names for sec. com. protocol",
                  "type" : "object",
                  "properties" : {
                    "stateResponseName" : {
                      "description" : "Header name where the validation token respondewill be",
                      "type" : "string"
                    },
                    "claimRequestName" : {
                      "description" : "Header name where the info token will be",
                      "type" : "string"
                    },
                    "stateRequestName" : {
                      "description" : "Header name where the validation token will be",
                      "type" : "string"
                    }
                  }
                },
                "handleLegacyDomain" : {
                  "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
                  "type" : "boolean"
                },
                "logAnalyticsOnServer" : {
                  "description" : "Log analytics event on the server",
                  "type" : "boolean"
                },
                "strictlyPrivate" : {
                  "description" : "When strictly private, private app session will not pass apikey filters",
                  "type" : "boolean"
                },
                "description" : {
                  "description" : "Entity description",
                  "type" : "string"
                },
                "buildMode" : {
                  "description" : "Display a construction page when a user try to use the service",
                  "type" : "boolean"
                },
                "targets" : {
                  "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "predicate" : {
                        "description" : "Predicate to choose this target",
                        "oneOfConstraints" : [ {
                          "required" : [ "type" ]
                        }, {
                          "required" : [ "type", "dc" ]
                        }, {
                          "required" : [ "positions", "type" ]
                        }, {
                          "required" : [ "provider", "type" ]
                        }, {
                          "required" : [ "rack", "provider", "dataCenter", "zone", "type", "region" ]
                        }, {
                          "required" : [ "rack", "type" ]
                        }, {
                          "required" : [ "type", "region" ]
                        }, {
                          "required" : [ "zone", "type" ]
                        } ],
                        "type" : "object",
                        "properties" : {
                          "rack" : {
                            "description" : "Rack name",
                            "type" : "string"
                          },
                          "provider" : {
                            "description" : "Provider name",
                            "type" : "string"
                          },
                          "dataCenter" : {
                            "description" : "Datacenter name",
                            "type" : "string"
                          },
                          "zone" : {
                            "description" : "Zone name",
                            "type" : "string"
                          },
                          "positions" : {
                            "description" : "Possible positions",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "latitude" : {
                                  "format" : "double",
                                  "description" : "Latitude of the position",
                                  "type" : "number"
                                },
                                "longitude" : {
                                  "format" : "double",
                                  "description" : "Longitude of the position",
                                  "type" : "number"
                                },
                                "radius" : {
                                  "format" : "double",
                                  "description" : "Radius of the circle in meters",
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "description" : "the kind of predicate",
                            "type" : "string",
                            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                          },
                          "region" : {
                            "description" : "Region name",
                            "type" : "string"
                          },
                          "dc" : {
                            "description" : "DC name",
                            "type" : "string"
                          }
                        }
                      },
                      "metadata" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Metadata for this target"
                      },
                      "protocol" : {
                        "description" : "Protocol for the target",
                        "type" : "string"
                      },
                      "scheme" : {
                        "description" : "The protocol used for communication. Can be http or https",
                        "type" : "string"
                      },
                      "mtlsConfig" : {
                        "description" : "TLS settings to contact this target",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "host" : {
                        "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                        "type" : "string"
                      },
                      "ipAddress" : {
                        "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                        "type" : "string"
                      },
                      "weight" : {
                        "format" : "int32",
                        "description" : "The weight of the target when choosing",
                        "type" : "integer"
                      },
                      "tags" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Tags for this target"
                      }
                    }
                  }
                },
                "enabled" : {
                  "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
                  "type" : "boolean"
                },
                "additionalHeadersOut" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Specify headers that will be added to each client response"
                },
                "sendStateChallenge" : {
                  "description" : "Should otoroshi send challenge token",
                  "type" : "boolean"
                },
                "root" : {
                  "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                  "type" : "string"
                },
                "additionalHeaders" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Specify headers that will be added to each client request. Useful to add authentication"
                },
                "issueCertCA" : {
                  "description" : "CA for cert issuance",
                  "type" : "string"
                },
                "ipFiltering" : {
                  "description" : "Ip filtering settings",
                  "type" : "object",
                  "properties" : {
                    "whitelist" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Whitelisted IP addresses"
                    },
                    "blacklist" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Blacklisted IP addresses"
                    }
                  }
                },
                "redirection" : {
                  "description" : "Redirection settings",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Whether or not redirection is enabled",
                      "type" : "boolean"
                    },
                    "code" : {
                      "format" : "int32",
                      "description" : "The http redirect code",
                      "type" : "integer"
                    },
                    "to" : {
                      "description" : "The location for redirection",
                      "type" : "string"
                    }
                  }
                },
                "redirectToLocal" : {
                  "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
                  "type" : "boolean"
                },
                "headersVerification" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Specify headers that will be verified after routing."
                },
                "useAkkaHttpClient" : {
                  "description" : "Use akka http client for this service",
                  "type" : "boolean"
                },
                "securityExcludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Exclude some paths"
                },
                "authConfigRef" : {
                  "description" : "A reference to a global auth module config",
                  "type" : "string"
                },
                "preRouting" : {
                  "description" : "Pre routing plugin settings",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "pre-routing plugins enabled",
                      "type" : "boolean"
                    },
                    "excludedPatterns" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Excluded paths"
                    },
                    "refs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Enabled plugins"
                    },
                    "config" : {
                      "description" : "pre-routing plugins configuration",
                      "type" : "object"
                    }
                  }
                },
                "canary" : {
                  "description" : "Canary settings",
                  "type" : "object",
                  "properties" : {
                    "root" : {
                      "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                      "type" : "string"
                    },
                    "targets" : {
                      "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "predicate" : {
                            "description" : "Predicate to choose this target",
                            "oneOfConstraints" : [ {
                              "required" : [ "type" ]
                            }, {
                              "required" : [ "type", "dc" ]
                            }, {
                              "required" : [ "positions", "type" ]
                            }, {
                              "required" : [ "provider", "type" ]
                            }, {
                              "required" : [ "rack", "provider", "dataCenter", "zone", "type", "region" ]
                            }, {
                              "required" : [ "rack", "type" ]
                            }, {
                              "required" : [ "type", "region" ]
                            }, {
                              "required" : [ "zone", "type" ]
                            } ],
                            "type" : "object",
                            "properties" : {
                              "rack" : {
                                "description" : "Rack name",
                                "type" : "string"
                              },
                              "provider" : {
                                "description" : "Provider name",
                                "type" : "string"
                              },
                              "dataCenter" : {
                                "description" : "Datacenter name",
                                "type" : "string"
                              },
                              "zone" : {
                                "description" : "Zone name",
                                "type" : "string"
                              },
                              "positions" : {
                                "description" : "Possible positions",
                                "type" : "array",
                                "items" : {
                                  "type" : "object",
                                  "properties" : {
                                    "latitude" : {
                                      "format" : "double",
                                      "description" : "Latitude of the position",
                                      "type" : "number"
                                    },
                                    "longitude" : {
                                      "format" : "double",
                                      "description" : "Longitude of the position",
                                      "type" : "number"
                                    },
                                    "radius" : {
                                      "format" : "double",
                                      "description" : "Radius of the circle in meters",
                                      "type" : "number"
                                    }
                                  }
                                }
                              },
                              "type" : {
                                "description" : "the kind of predicate",
                                "type" : "string",
                                "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                              },
                              "region" : {
                                "description" : "Region name",
                                "type" : "string"
                              },
                              "dc" : {
                                "description" : "DC name",
                                "type" : "string"
                              }
                            }
                          },
                          "metadata" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Metadata for this target"
                          },
                          "protocol" : {
                            "description" : "Protocol for the target",
                            "type" : "string"
                          },
                          "scheme" : {
                            "description" : "The protocol used for communication. Can be http or https",
                            "type" : "string"
                          },
                          "mtlsConfig" : {
                            "description" : "TLS settings to contact this target",
                            "type" : "object",
                            "properties" : {
                              "mtls" : {
                                "description" : "Enabled",
                                "type" : "boolean"
                              },
                              "loose" : {
                                "description" : "Loose verification",
                                "type" : "boolean"
                              },
                              "trustAll" : {
                                "description" : "Trust any certificate",
                                "type" : "boolean"
                              },
                              "trustedCerts" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Trusted cert. ids"
                              },
                              "certs" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Trusted cert. ids"
                              }
                            }
                          },
                          "host" : {
                            "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                            "type" : "string"
                          },
                          "ipAddress" : {
                            "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                            "type" : "string"
                          },
                          "weight" : {
                            "format" : "int32",
                            "description" : "The weight of the target when choosing",
                            "type" : "integer"
                          },
                          "tags" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Tags for this target"
                          }
                        }
                      }
                    },
                    "enabled" : {
                      "description" : "Use canary mode for this service",
                      "type" : "boolean"
                    },
                    "traffic" : {
                      "format" : "double",
                      "description" : "Ratio of traffic that will be sent to canary targets.",
                      "type" : "number"
                    }
                  }
                },
                "secComExcludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "URI patterns excluded from secured communications"
                },
                "xForwardedHeaders" : {
                  "description" : "Send X-Forwarded-* headers",
                  "type" : "boolean"
                },
                "apiKeyConstraints" : {
                  "description" : "Routing and extraction constraints for the apikeyh",
                  "type" : "object",
                  "properties" : {
                    "routing" : {
                      "description" : "Routing settings for this apikey",
                      "type" : "object",
                      "properties" : {
                        "oneTagIn" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "outing if one tag presents in apikey"
                        },
                        "noneMetaKeysIn" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Routing if none meta keys presents in apikey"
                        },
                        "oneMetaIn" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Routing if one meta presents in apikey"
                        },
                        "oneMetaKeyIn" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Routing if one meta key presents in apikey"
                        },
                        "allMetaKeysIn" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Routing if all meta keys presents in apikey"
                        },
                        "noneTagIn" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Routing if none tags presents in apikey"
                        },
                        "allTagsIn" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Routing if all tags presents in apikey"
                        },
                        "allMetaIn" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Routing if all meta presents in apikey"
                        },
                        "noneMetaIn" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Routing if none meta presents in apikey"
                        }
                      }
                    },
                    "customHeadersAuth" : {
                      "description" : "Settings to extract apikey from custom headers",
                      "type" : "object",
                      "properties" : {
                        "clientSecretHeaderName" : {
                          "description" : "Header name to find client_secret",
                          "type" : "string"
                        },
                        "enabled" : {
                          "description" : "Constraint enabled",
                          "type" : "boolean"
                        },
                        "clientIdHeaderName" : {
                          "description" : "Header name to find client_id",
                          "type" : "string"
                        }
                      }
                    },
                    "basicAuth" : {
                      "description" : "Settings to extract basic auth style apikey",
                      "type" : "object",
                      "properties" : {
                        "headerName" : {
                          "description" : "Header name to get client_id:client_secret base64 encoded",
                          "type" : "string"
                        },
                        "queryName" : {
                          "description" : "Query param name to get client_id:client_secret base64 encoded",
                          "type" : "string"
                        },
                        "enabled" : {
                          "description" : "Constraint enabled",
                          "type" : "boolean"
                        }
                      }
                    },
                    "jwtAuth" : {
                      "description" : "Settings to extract apikey from jwt token",
                      "type" : "object",
                      "properties" : {
                        "headerName" : {
                          "description" : "Header name to extract jwt token",
                          "type" : "string"
                        },
                        "maxJwtLifespanSecs" : {
                          "format" : "int64",
                          "description" : "Check if token does not have a long lifespan",
                          "type" : "integer"
                        },
                        "keyPairSigned" : {
                          "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                          "type" : "boolean"
                        },
                        "secretSigned" : {
                          "description" : "Jwt token signed with the client_secret",
                          "type" : "boolean"
                        },
                        "queryName" : {
                          "description" : "Query param name to extract jwt token",
                          "type" : "string"
                        },
                        "enabled" : {
                          "description" : "Constraint enabled",
                          "type" : "boolean"
                        },
                        "cookieName" : {
                          "description" : "Cookie name to extract jwt token",
                          "type" : "string"
                        },
                        "includeRequestAttributes" : {
                          "description" : "Jwt token should include verb and path",
                          "type" : "boolean"
                        }
                      }
                    },
                    "clientIdAuth" : {
                      "description" : "Settings to extract client_id only apikey",
                      "type" : "object",
                      "properties" : {
                        "headerName" : {
                          "description" : "Header name to find client_id",
                          "type" : "string"
                        },
                        "queryName" : {
                          "description" : "Query param name to find client_id",
                          "type" : "string"
                        },
                        "enabled" : {
                          "description" : "Constraint enabled",
                          "type" : "boolean"
                        }
                      }
                    }
                  }
                },
                "sendInfoToken" : {
                  "description" : "Should otoroshi send info token",
                  "type" : "boolean"
                },
                "issueCert" : {
                  "description" : "Flag to automatically issue a cert for this service",
                  "type" : "boolean"
                },
                "groups" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
                },
                "privatePatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
                },
                "gzip" : {
                  "description" : "GZIP settings",
                  "type" : "object",
                  "properties" : {
                    "compressionLevel" : {
                      "format" : "int32",
                      "description" : "Compression level (0 - 9)",
                      "type" : "integer"
                    },
                    "blackList" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "blocklisted content types"
                    },
                    "chunkedThreshold" : {
                      "format" : "int32",
                      "description" : "Chunk size",
                      "type" : "integer"
                    },
                    "excludedPatterns" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Excluded paths"
                    },
                    "bufferSize" : {
                      "format" : "int32",
                      "description" : "Buffer size in bytes",
                      "type" : "integer"
                    },
                    "whiteList" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "allow listed content types"
                    },
                    "enabled" : {
                      "description" : "Gzip enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "clientConfig" : {
                  "description" : "Http client settings",
                  "type" : "object",
                  "properties" : {
                    "sampleInterval" : {
                      "format" : "int64",
                      "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                      "type" : "integer"
                    },
                    "backoffFactor" : {
                      "format" : "int64",
                      "description" : "Specify the factor to multiply the delay for each retry",
                      "type" : "integer"
                    },
                    "customTimeouts" : {
                      "description" : "Custom timeouts per path",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "path" : {
                            "description" : "path on which this configuration works",
                            "type" : "string"
                          },
                          "callAndStreamTimeout" : {
                            "format" : "int64",
                            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                            "type" : "integer"
                          },
                          "callTimeout" : {
                            "format" : "int64",
                            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                            "type" : "integer"
                          },
                          "idleTimeout" : {
                            "format" : "int64",
                            "description" : "Timeout on idle connection",
                            "type" : "integer"
                          },
                          "globalTimeout" : {
                            "format" : "int64",
                            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                            "type" : "integer"
                          },
                          "connectionTimeout" : {
                            "format" : "int64",
                            "description" : "Timeout at connection",
                            "type" : "integer"
                          }
                        }
                      }
                    },
                    "callAndStreamTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                      "type" : "integer"
                    },
                    "retryInitialDelay" : {
                      "format" : "int64",
                      "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                      "type" : "integer"
                    },
                    "callTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                      "type" : "integer"
                    },
                    "useCircuitBreaker" : {
                      "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
                      "type" : "boolean"
                    },
                    "retries" : {
                      "format" : "int32",
                      "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                      "type" : "integer"
                    },
                    "proxy" : {
                      "description" : "Web proxy settings for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "maxErrors" : {
                      "format" : "int32",
                      "description" : "Specify how many errors can pass before opening the circuit breaker",
                      "type" : "integer"
                    },
                    "idleTimeout" : {
                      "format" : "int64",
                      "description" : "Timeout on idle connection",
                      "type" : "integer"
                    },
                    "globalTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                      "type" : "integer"
                    },
                    "cacheConnectionSettings" : {
                      "description" : "Cached connection settings",
                      "type" : "object",
                      "properties" : {
                        "enabled" : {
                          "description" : "Enable Cached connections at host tevel",
                          "type" : "boolean"
                        },
                        "queueSize" : {
                          "format" : "int32",
                          "description" : "The size for the request queue",
                          "type" : "integer"
                        }
                      }
                    },
                    "connectionTimeout" : {
                      "format" : "int64",
                      "description" : "Timeout at connection",
                      "type" : "integer"
                    }
                  }
                },
                "env" : {
                  "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
                  "type" : "string"
                },
                "jwtVerifier" : {
                  "description" : "JWT verifiers settings",
                  "oneOfConstraints" : [ {
                    "required" : [ "metadata", "algoSettings", "name", "source", "id", "type", "strict", "strategy", "_loc", "desc", "tags" ]
                  }, {
                    "required" : [ "excludedPatterns", "algoSettings", "source", "type", "strict", "strategy", "enabled" ]
                  }, {
                    "required" : [ "excludedPatterns", "ids", "type", "enabled" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "excludedPatterns" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Verifier excluded paths"
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Entity metadata"
                    },
                    "source" : {
                      "description" : "Token source",
                      "oneOfConstraints" : [ {
                        "required" : [ "name", "type" ]
                      }, {
                        "required" : [ "name", "type", "remove" ]
                      }, {
                        "required" : [ "name", "type" ]
                      } ],
                      "type" : "object",
                      "properties" : {
                        "name" : {
                          "description" : "Query param name",
                          "type" : "string"
                        },
                        "type" : {
                          "description" : "the kind of location",
                          "type" : "string",
                          "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                        },
                        "remove" : {
                          "description" : "Remove from value",
                          "type" : "string"
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of verifier",
                      "type" : "string",
                      "enum" : [ "global", "local", "ref" ]
                    },
                    "_loc" : {
                      "description" : "Entity location",
                      "type" : "object",
                      "properties" : {
                        "teams" : {
                          "description" : "Teams of the current entity",
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          }
                        },
                        "tenant" : {
                          "description" : "Organization of the current entity",
                          "type" : "string"
                        }
                      }
                    },
                    "enabled" : {
                      "description" : "Verifier enabled",
                      "type" : "boolean"
                    },
                    "tags" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Entity tags"
                    },
                    "algoSettings" : {
                      "description" : "Algo settings",
                      "oneOfConstraints" : [ {
                        "required" : [ "privateKey", "size", "publicKey", "type" ]
                      }, {
                        "required" : [ "size", "certId", "type" ]
                      }, {
                        "required" : [ "size", "base64", "secret", "type" ]
                      }, {
                        "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                      }, {
                        "required" : [ "onlyExposedCerts", "type" ]
                      }, {
                        "required" : [ "size", "certId", "type" ]
                      }, {
                        "required" : [ "privateKey", "size", "publicKey", "type" ]
                      } ],
                      "type" : "object",
                      "properties" : {
                        "headers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Http header when fetching JWKS"
                        },
                        "mtlsConfig" : {
                          "description" : "TLS settings for http client",
                          "type" : "object",
                          "properties" : {
                            "mtls" : {
                              "description" : "Enabled",
                              "type" : "boolean"
                            },
                            "loose" : {
                              "description" : "Loose verification",
                              "type" : "boolean"
                            },
                            "trustAll" : {
                              "description" : "Trust any certificate",
                              "type" : "boolean"
                            },
                            "trustedCerts" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            },
                            "certs" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            }
                          }
                        },
                        "base64" : {
                          "description" : "The secret is base64 encoded",
                          "type" : "boolean"
                        },
                        "publicKey" : {
                          "description" : "Public key (for verification)",
                          "type" : "string"
                        },
                        "certId" : {
                          "description" : "Certificate id",
                          "type" : "string"
                        },
                        "secret" : {
                          "description" : "HMAC secret",
                          "type" : "string"
                        },
                        "type" : {
                          "description" : "the kind of algosettings",
                          "type" : "string",
                          "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                        },
                        "ttl" : {
                          "description" : "Cache ttl",
                          "type" : "number"
                        },
                        "url" : {
                          "description" : "JWKS url",
                          "type" : "string"
                        },
                        "timeout" : {
                          "description" : "Timeout when fetching JWKS",
                          "type" : "number"
                        },
                        "kty" : {
                          "description" : "Key type",
                          "type" : "string"
                        },
                        "privateKey" : {
                          "description" : "Private key (for signing)",
                          "type" : "string"
                        },
                        "proxy" : {
                          "description" : "Web proxy for http client",
                          "oneOfConstraints" : [ ],
                          "type" : "object",
                          "properties" : { }
                        },
                        "onlyExposedCerts" : {
                          "description" : "Use only exposed certs",
                          "type" : "boolean"
                        },
                        "size" : {
                          "format" : "int32",
                          "description" : "SHA function size",
                          "type" : "integer"
                        }
                      }
                    },
                    "name" : {
                      "description" : "Verifier name",
                      "type" : "string"
                    },
                    "ids" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Verifiers ids"
                    },
                    "id" : {
                      "description" : "Verifier id",
                      "type" : "string"
                    },
                    "strict" : {
                      "description" : "Strict token verification",
                      "type" : "boolean"
                    },
                    "strategy" : {
                      "description" : "Token strategy",
                      "oneOfConstraints" : [ {
                        "required" : [ "verificationSettings", "type", "strict", "token" ]
                      }, {
                        "required" : [ "verificationSettings", "type" ]
                      }, {
                        "required" : [ "algoSettings", "verificationSettings", "type" ]
                      }, {
                        "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                      } ],
                      "type" : "object",
                      "properties" : {
                        "transformSettings" : {
                          "description" : "Transformation settings",
                          "type" : "object",
                          "properties" : {
                            "mappingSettings" : {
                              "description" : "Token mapping settings",
                              "type" : "object",
                              "properties" : {
                                "map" : {
                                  "type" : "object",
                                  "additionalProperties" : {
                                    "type" : "string"
                                  },
                                  "description" : "Change values"
                                },
                                "values" : {
                                  "description" : "Add values",
                                  "type" : "object"
                                },
                                "remove" : {
                                  "type" : "array",
                                  "items" : {
                                    "type" : "string"
                                  },
                                  "description" : "Remove some token claims"
                                }
                              }
                            },
                            "location" : {
                              "description" : "Location of the token",
                              "oneOfConstraints" : [ {
                                "required" : [ "name", "type" ]
                              }, {
                                "required" : [ "name", "type", "remove" ]
                              }, {
                                "required" : [ "name", "type" ]
                              } ],
                              "type" : "object",
                              "properties" : {
                                "name" : {
                                  "description" : "Query param name",
                                  "type" : "string"
                                },
                                "type" : {
                                  "description" : "the kind of location",
                                  "type" : "string",
                                  "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                                },
                                "remove" : {
                                  "description" : "Remove from value",
                                  "type" : "string"
                                }
                              }
                            }
                          }
                        },
                        "algoSettings" : {
                          "description" : "Algorithm settings for re-signing token",
                          "oneOfConstraints" : [ {
                            "required" : [ "privateKey", "size", "publicKey", "type" ]
                          }, {
                            "required" : [ "size", "certId", "type" ]
                          }, {
                            "required" : [ "size", "base64", "secret", "type" ]
                          }, {
                            "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                          }, {
                            "required" : [ "onlyExposedCerts", "type" ]
                          }, {
                            "required" : [ "size", "certId", "type" ]
                          }, {
                            "required" : [ "privateKey", "size", "publicKey", "type" ]
                          } ],
                          "type" : "object",
                          "properties" : {
                            "headers" : {
                              "type" : "object",
                              "additionalProperties" : {
                                "type" : "string"
                              },
                              "description" : "Http header when fetching JWKS"
                            },
                            "mtlsConfig" : {
                              "description" : "TLS settings for http client",
                              "type" : "object",
                              "properties" : {
                                "mtls" : {
                                  "description" : "Enabled",
                                  "type" : "boolean"
                                },
                                "loose" : {
                                  "description" : "Loose verification",
                                  "type" : "boolean"
                                },
                                "trustAll" : {
                                  "description" : "Trust any certificate",
                                  "type" : "boolean"
                                },
                                "trustedCerts" : {
                                  "type" : "array",
                                  "items" : {
                                    "type" : "string"
                                  },
                                  "description" : "Trusted cert. ids"
                                },
                                "certs" : {
                                  "type" : "array",
                                  "items" : {
                                    "type" : "string"
                                  },
                                  "description" : "Trusted cert. ids"
                                }
                              }
                            },
                            "base64" : {
                              "description" : "The secret is base64 encoded",
                              "type" : "boolean"
                            },
                            "publicKey" : {
                              "description" : "Public key (for verification)",
                              "type" : "string"
                            },
                            "certId" : {
                              "description" : "Certificate id",
                              "type" : "string"
                            },
                            "secret" : {
                              "description" : "HMAC secret",
                              "type" : "string"
                            },
                            "type" : {
                              "description" : "the kind of algosettings",
                              "type" : "string",
                              "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                            },
                            "ttl" : {
                              "description" : "Cache ttl",
                              "type" : "number"
                            },
                            "url" : {
                              "description" : "JWKS url",
                              "type" : "string"
                            },
                            "timeout" : {
                              "description" : "Timeout when fetching JWKS",
                              "type" : "number"
                            },
                            "kty" : {
                              "description" : "Key type",
                              "type" : "string"
                            },
                            "privateKey" : {
                              "description" : "Private key (for signing)",
                              "type" : "string"
                            },
                            "proxy" : {
                              "description" : "Web proxy for http client",
                              "oneOfConstraints" : [ ],
                              "type" : "object",
                              "properties" : { }
                            },
                            "onlyExposedCerts" : {
                              "description" : "Use only exposed certs",
                              "type" : "boolean"
                            },
                            "size" : {
                              "format" : "int32",
                              "description" : "SHA function size",
                              "type" : "integer"
                            }
                          }
                        },
                        "verificationSettings" : {
                          "description" : "Verification settings",
                          "type" : "object",
                          "properties" : {
                            "fields" : {
                              "type" : "object",
                              "additionalProperties" : {
                                "type" : "string"
                              },
                              "description" : "Fields validation"
                            },
                            "arrayFields" : {
                              "type" : "object",
                              "additionalProperties" : {
                                "type" : "string"
                              },
                              "description" : "Fields array validation"
                            }
                          }
                        },
                        "type" : {
                          "description" : "the kind of strategy",
                          "type" : "string",
                          "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                        },
                        "strict" : {
                          "description" : "If the token already exists in the request, then fail",
                          "type" : "boolean"
                        },
                        "token" : {
                          "description" : "The default token",
                          "type" : "object"
                        }
                      }
                    },
                    "desc" : {
                      "description" : "Verifier description",
                      "type" : "string"
                    }
                  }
                },
                "allowHttp10" : {
                  "description" : "Allow HTTP/1.0 requests",
                  "type" : "boolean"
                },
                "publicPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
                },
                "secComAlgoChallengeBackToOto" : {
                  "description" : "Algorithm to verify challenge token coming from the backend",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "localScheme" : {
                  "description" : "The scheme used localy, mainly http",
                  "type" : "string"
                },
                "healthCheck" : {
                  "description" : "Healthcheck settings",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                      "type" : "boolean"
                    },
                    "url" : {
                      "description" : "The URL to check",
                      "type" : "string"
                    }
                  }
                },
                "matchingHeaders" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
                },
                "overrideHost" : {
                  "description" : "Host header will be overriden with Host of the target",
                  "type" : "boolean"
                },
                "secComUseSameAlgo" : {
                  "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
                  "type" : "boolean"
                },
                "accessValidator" : {
                  "description" : "Service access validatiors",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Access validator plugins enabled",
                      "type" : "boolean"
                    },
                    "excludedPatterns" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Excluded paths"
                    },
                    "refs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Enabled plugins"
                    },
                    "config" : {
                      "description" : "Access validator plugins configuration",
                      "type" : "object"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "buildMode" : {
            "description" : "Display a construction page when a user try to use the service",
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Possible hosts for the service"
          },
          "privateApp" : {
            "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
            "type" : "boolean"
          },
          "localScheme" : {
            "description" : "The scheme used localy, mainly http",
            "type" : "string"
          },
          "authConfigRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "A reference to a global auth module config"
          },
          "issueCertCA" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "CA for cert issuance"
          },
          "root" : {
            "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
            "type" : "string"
          },
          "name" : {
            "description" : "The name of your service. Only for debug and human readability purposes",
            "type" : "string"
          },
          "additionalHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client request. Useful to add authentication"
          },
          "domain" : {
            "description" : "The domain on which the service is available.",
            "type" : "string"
          },
          "clientConfig" : {
            "description" : "Http client settings",
            "$ref" : "#/components/schemas/otoroshi.models.ClientConfig"
          },
          "matchingRoot" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The root path on which the service is available"
          },
          "forceHttps" : {
            "description" : "Will force redirection to https:// if not present",
            "type" : "boolean"
          },
          "localHost" : {
            "description" : "The host used localy, mainly localhost:xxxx",
            "type" : "string"
          },
          "sendOtoroshiHeadersBack" : {
            "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
            "type" : "boolean"
          },
          "healthCheck" : {
            "description" : "Healthcheck settings",
            "$ref" : "#/components/schemas/otoroshi.models.HealthCheck"
          },
          "strictlyPrivate" : {
            "description" : "When strictly private, private app session will not pass apikey filters",
            "type" : "boolean"
          },
          "detectApiKeySooner" : {
            "description" : "Detect if an apikey is present but do not fail if not",
            "type" : "boolean"
          },
          "allowHttp10" : {
            "description" : "Allow HTTP/1.0 requests",
            "type" : "boolean"
          },
          "subdomain" : {
            "description" : "The subdomain on which the service is available",
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching paths on request"
          },
          "stripPath" : {
            "description" : "Strip matching path in the forwarded request path",
            "type" : "boolean"
          },
          "secComAlgoChallengeOtoToBack" : {
            "description" : "Algorithm to sign challenge token to the backend",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "apiKeyConstraints" : {
            "description" : "Routing and extraction constraints for the apikeyh",
            "$ref" : "#/components/schemas/otoroshi.models.ApiKeyConstraints"
          },
          "env" : {
            "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
            "type" : "string"
          },
          "xForwardedHeaders" : {
            "description" : "Send X-Forwarded-* headers",
            "type" : "boolean"
          },
          "transformerRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled transformer plugins"
          },
          "enabled" : {
            "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
            "type" : "boolean"
          },
          "gzip" : {
            "description" : "GZIP settings",
            "$ref" : "#/components/schemas/otoroshi.utils.gzip.GzipConfig"
          },
          "sendInfoToken" : {
            "description" : "Should otoroshi send info token",
            "type" : "boolean"
          },
          "tcpUdpTunneling" : {
            "description" : "Enabled TCP/UDP tunneling through websocket connection",
            "type" : "boolean"
          },
          "removeHeadersOut" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client response"
          },
          "useAkkaHttpClient" : {
            "description" : "Use akka http client for this service",
            "type" : "boolean"
          },
          "maintenanceMode" : {
            "description" : "Display a maintainance page when a user try to use the service",
            "type" : "boolean"
          },
          "id" : {
            "description" : "A unique random string to identify your service",
            "type" : "string"
          },
          "removeHeadersIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client request"
          },
          "logAnalyticsOnServer" : {
            "description" : "Log analytics event on the server",
            "type" : "boolean"
          },
          "secComAlgoInfoToken" : {
            "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "userFacing" : {
            "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
            "type" : "boolean"
          },
          "transformerConfig" : {
            "description" : "Transformer plugins configuration",
            "type" : "object"
          },
          "clientValidatorRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "A reference to validation authority"
          },
          "securityExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Exclude some paths"
          },
          "ipFiltering" : {
            "description" : "Ip filtering settings",
            "$ref" : "#/components/schemas/otoroshi.models.IpFiltering"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Target"
            },
            "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures"
          },
          "redirection" : {
            "description" : "Redirection settings",
            "$ref" : "#/components/schemas/otoroshi.models.RedirectionSettings"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "restrictions" : {
            "description" : "Restriction settings",
            "$ref" : "#/components/schemas/otoroshi.models.Restrictions"
          },
          "overrideHost" : {
            "description" : "Host header will be overriden with Host of the target",
            "type" : "boolean"
          },
          "accessValidator" : {
            "description" : "Service access validatiors",
            "$ref" : "#/components/schemas/otoroshi.script.AccessValidatorRef"
          },
          "sendStateChallenge" : {
            "description" : "Should otoroshi send challenge token",
            "type" : "boolean"
          },
          "chaosConfig" : {
            "description" : "Chaos engineering settings",
            "$ref" : "#/components/schemas/otoroshi.models.ChaosConfig"
          },
          "secComInfoTokenVersion" : {
            "description" : "Version of the info token",
            "$ref" : "#/components/schemas/otoroshi.models.SecComInfoTokenVersion"
          },
          "additionalHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client response"
          },
          "secComHeaders" : {
            "description" : "Header names for sec. com. protocol",
            "$ref" : "#/components/schemas/otoroshi.models.SecComHeaders"
          },
          "matchingHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
          },
          "secComAlgoChallengeBackToOto" : {
            "description" : "Algorithm to verify challenge token coming from the backend",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "secComUseSameAlgo" : {
            "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
            "type" : "boolean"
          },
          "useNewWSClient" : {
            "description" : "Use akka http client for this service on websocket calls",
            "type" : "boolean"
          },
          "secComExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "URI patterns excluded from secured communications"
          },
          "redirectToLocal" : {
            "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
            "type" : "boolean"
          },
          "enforceSecureCommunication" : {
            "description" : "When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside",
            "type" : "boolean"
          },
          "missingOnlyHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client response if they are not present"
          },
          "secComSettings" : {
            "description" : "Sec. com. settings",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "handleLegacyDomain" : {
            "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
            "type" : "boolean"
          },
          "canary" : {
            "description" : "Canary settings",
            "$ref" : "#/components/schemas/otoroshi.models.Canary"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "plugins" : {
            "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
            "$ref" : "#/components/schemas/otoroshi.script.plugins.Plugins"
          },
          "secComTtl" : {
            "description" : "TTL for the info token",
            "type" : "number"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "secComVersion" : {
            "description" : "Version of the sec. com.",
            "$ref" : "#/components/schemas/otoroshi.models.SecComVersion"
          },
          "preRouting" : {
            "description" : "Pre routing plugin settings",
            "$ref" : "#/components/schemas/otoroshi.script.PreRoutingRef"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
          },
          "readOnly" : {
            "description" : "Service only accepts GET, HEAD and OPTIONS requests",
            "type" : "boolean"
          },
          "privatePatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
          },
          "targetsLoadBalancing" : {
            "description" : "Loadbalancing strategy",
            "$ref" : "#/components/schemas/otoroshi.models.LoadBalancing"
          },
          "cors" : {
            "description" : "CORS settings",
            "$ref" : "#/components/schemas/otoroshi.models.CorsSettings"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Just a bunch of random properties"
          },
          "publicPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
          },
          "api" : {
            "description" : "Api exposition settings",
            "$ref" : "#/components/schemas/otoroshi.models.ApiDescriptor"
          },
          "missingOnlyHeadersIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client request if they are not present"
          },
          "issueCert" : {
            "description" : "Flag to automatically issue a cert for this service",
            "type" : "boolean"
          },
          "headersVerification" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be verified after routing."
          },
          "jwtVerifier" : {
            "description" : "JWT verifiers settings",
            "$ref" : "#/components/schemas/otoroshi.models.JwtVerifier"
          },
          "letsEncrypt" : {
            "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.TeamAccess" : {
        "description" : "Access rights for teams",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Access rights for teams",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Access rights for teams",
              "properties" : {
                "canRead" : {
                  "description" : "Can this access right read data",
                  "type" : "boolean"
                },
                "value" : {
                  "description" : "Access pattern",
                  "type" : "string"
                },
                "canWrite" : {
                  "description" : "Can this access right write data",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "canRead" : {
            "description" : "Can this access right read data",
            "type" : "boolean"
          },
          "value" : {
            "description" : "Access pattern",
            "type" : "string"
          },
          "canWrite" : {
            "description" : "Can this access right write data",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.OtoroshiAdminType" : {
        "type" : "string",
        "enum" : [ "SIMPLE", "WEBAUTHN" ],
        "description" : "Admin kind"
      },
      "otoroshi.ssl.Cert" : {
        "description" : "The otoroshi model for X509 certificates",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "The otoroshi model for X509 certificates",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "The otoroshi model for X509 certificates",
              "type" : "object",
              "properties" : {
                "chain" : {
                  "description" : "Certicates chain (PEM encoded)",
                  "type" : "string"
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "sans" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Certificate SANs"
                },
                "subject" : {
                  "description" : "Certificate subject",
                  "type" : "string"
                },
                "letsEncrypt" : {
                  "description" : "Let's encrypt (ACME) generated",
                  "type" : "boolean"
                },
                "keypair" : {
                  "description" : "Is cert used for its keypair only ?",
                  "type" : "boolean"
                },
                "description" : {
                  "description" : "Entity description",
                  "type" : "string"
                },
                "revoked" : {
                  "description" : "Certificate is revoked",
                  "type" : "boolean"
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "valid" : {
                  "description" : "Is cert valid",
                  "type" : "boolean"
                },
                "privateKey" : {
                  "description" : "Certificate private key (PEM encoded)",
                  "type" : "string"
                },
                "password" : {
                  "description" : "Certificate password",
                  "type" : "string"
                },
                "caRef" : {
                  "description" : "Reference to the CA (if any)",
                  "type" : "string"
                },
                "domain" : {
                  "description" : "Certificate domain",
                  "type" : "string"
                },
                "name" : {
                  "description" : "Entity name",
                  "type" : "string"
                },
                "exposed" : {
                  "description" : "Is the cert exposed (public key exposed in jwks.json)",
                  "type" : "boolean"
                },
                "autoRenew" : {
                  "description" : "Auto renew cert",
                  "type" : "boolean"
                },
                "client" : {
                  "description" : "Is cert a client cert ?",
                  "type" : "boolean"
                },
                "from" : {
                  "description" : "Start date",
                  "type" : "number"
                },
                "selfSigned" : {
                  "description" : "Is cert self signed",
                  "type" : "boolean"
                },
                "to" : {
                  "description" : "Stop date",
                  "type" : "number"
                },
                "id" : {
                  "description" : "Entity id",
                  "type" : "string"
                },
                "ca" : {
                  "description" : "Is cert a CA ?",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "certType" : {
            "type" : "string",
            "description" : "the kind of certificate",
            "enum" : [ "client", "ca", "letsEncrypt", "keypair", "selfSigned", "certificate" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "subject" : {
            "description" : "Certificate subject",
            "type" : "string"
          },
          "letsEncrypt" : {
            "description" : "Let's encrypt (ACME) generated",
            "type" : "boolean"
          },
          "keypair" : {
            "description" : "Is cert used for its keypair only ?",
            "type" : "boolean"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "revoked" : {
            "description" : "Certificate is revoked",
            "type" : "boolean"
          },
          "valid" : {
            "description" : "Is cert valid",
            "type" : "boolean"
          },
          "password" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Certificate password"
          },
          "autoRenew" : {
            "description" : "Auto renew cert",
            "type" : "boolean"
          },
          "exposed" : {
            "description" : "Is the cert exposed (public key exposed in jwks.json)",
            "type" : "boolean"
          },
          "client" : {
            "description" : "Is cert a client cert ?",
            "type" : "boolean"
          },
          "from" : {
            "description" : "Start date",
            "type" : "number"
          },
          "selfSigned" : {
            "description" : "Is cert self signed",
            "type" : "boolean"
          },
          "id" : {
            "description" : "Entity id",
            "type" : "string"
          },
          "ca" : {
            "description" : "Is cert a CA ?",
            "type" : "boolean"
          },
          "chain" : {
            "description" : "Certicates chain (PEM encoded)",
            "type" : "string"
          },
          "sans" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Certificate SANs"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "privateKey" : {
            "description" : "Certificate private key (PEM encoded)",
            "type" : "string"
          },
          "caRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Reference to the CA (if any)"
          },
          "domain" : {
            "description" : "Certificate domain",
            "type" : "string"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "to" : {
            "description" : "Stop date",
            "type" : "number"
          }
        }
      },
      "otoroshi.models.AlgoSettings" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.ESAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ESKPAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.HSAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.JWKSAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.KidAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RSAKPAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RSAlgoSettings"
        } ]
      },
      "otoroshi.tcp.TcpRule" : {
        "description" : "Associate targets for a domain (SNI)",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Associate targets for a domain (SNI)",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Associate targets for a domain (SNI)",
              "type" : "object",
              "properties" : {
                "domain" : {
                  "description" : "match on SNI domain",
                  "type" : "string"
                },
                "targets" : {
                  "description" : "TCP targets",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "port" : {
                        "format" : "int32",
                        "description" : "Target port",
                        "type" : "integer"
                      },
                      "ip" : {
                        "description" : "Target ip",
                        "type" : "string"
                      },
                      "host" : {
                        "description" : "Target host",
                        "type" : "string"
                      },
                      "tls" : {
                        "description" : "Use tls",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "domain" : {
            "description" : "match on SNI domain",
            "type" : "string"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.tcp.TcpTarget"
            },
            "description" : "TCP targets"
          }
        }
      },
      "otoroshi.models.CleverCloudSettings" : {
        "description" : "Settings for connection to the clever-cloud api",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for connection to the clever-cloud api",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for connection to the clever-cloud api",
              "properties" : {
                "consumerSecret" : {
                  "description" : "Clever-Cloud oauth consumer secret",
                  "type" : "string"
                },
                "consumerKey" : {
                  "description" : "Clever-Cloud oauth consumer key",
                  "type" : "string"
                },
                "secret" : {
                  "description" : "Clever-Cloud oauth secret",
                  "type" : "string"
                },
                "token" : {
                  "description" : "Clever-Cloud oauth token",
                  "type" : "string"
                },
                "orgaId" : {
                  "description" : "Clever-Cloud organization id",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "consumerSecret" : {
            "description" : "Clever-Cloud oauth consumer secret",
            "type" : "string"
          },
          "consumerKey" : {
            "description" : "Clever-Cloud oauth consumer key",
            "type" : "string"
          },
          "secret" : {
            "description" : "Clever-Cloud oauth secret",
            "type" : "string"
          },
          "token" : {
            "description" : "Clever-Cloud oauth token",
            "type" : "string"
          },
          "orgaId" : {
            "description" : "Clever-Cloud organization id",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.Canary" : {
        "description" : "Settings for canary routing",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for canary routing",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for canary routing",
              "type" : "object",
              "properties" : {
                "root" : {
                  "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                  "type" : "string"
                },
                "targets" : {
                  "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "predicate" : {
                        "description" : "Predicate to choose this target",
                        "oneOfConstraints" : [ {
                          "required" : [ "type" ]
                        }, {
                          "required" : [ "type", "dc" ]
                        }, {
                          "required" : [ "positions", "type" ]
                        }, {
                          "required" : [ "provider", "type" ]
                        }, {
                          "required" : [ "rack", "provider", "dataCenter", "zone", "type", "region" ]
                        }, {
                          "required" : [ "rack", "type" ]
                        }, {
                          "required" : [ "type", "region" ]
                        }, {
                          "required" : [ "zone", "type" ]
                        } ],
                        "type" : "object",
                        "properties" : {
                          "rack" : {
                            "description" : "Rack name",
                            "type" : "string"
                          },
                          "provider" : {
                            "description" : "Provider name",
                            "type" : "string"
                          },
                          "dataCenter" : {
                            "description" : "Datacenter name",
                            "type" : "string"
                          },
                          "zone" : {
                            "description" : "Zone name",
                            "type" : "string"
                          },
                          "positions" : {
                            "description" : "Possible positions",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "latitude" : {
                                  "format" : "double",
                                  "description" : "Latitude of the position",
                                  "type" : "number"
                                },
                                "longitude" : {
                                  "format" : "double",
                                  "description" : "Longitude of the position",
                                  "type" : "number"
                                },
                                "radius" : {
                                  "format" : "double",
                                  "description" : "Radius of the circle in meters",
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "description" : "the kind of predicate",
                            "type" : "string",
                            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                          },
                          "region" : {
                            "description" : "Region name",
                            "type" : "string"
                          },
                          "dc" : {
                            "description" : "DC name",
                            "type" : "string"
                          }
                        }
                      },
                      "metadata" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Metadata for this target"
                      },
                      "protocol" : {
                        "description" : "Protocol for the target",
                        "type" : "string"
                      },
                      "scheme" : {
                        "description" : "The protocol used for communication. Can be http or https",
                        "type" : "string"
                      },
                      "mtlsConfig" : {
                        "description" : "TLS settings to contact this target",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "host" : {
                        "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                        "type" : "string"
                      },
                      "ipAddress" : {
                        "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                        "type" : "string"
                      },
                      "weight" : {
                        "format" : "int32",
                        "description" : "The weight of the target when choosing",
                        "type" : "integer"
                      },
                      "tags" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Tags for this target"
                      }
                    }
                  }
                },
                "enabled" : {
                  "description" : "Use canary mode for this service",
                  "type" : "boolean"
                },
                "traffic" : {
                  "format" : "double",
                  "description" : "Ratio of traffic that will be sent to canary targets.",
                  "type" : "number"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Use canary mode for this service",
            "type" : "boolean"
          },
          "traffic" : {
            "format" : "double",
            "description" : "Ratio of traffic that will be sent to canary targets.",
            "type" : "number"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Target"
            },
            "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures"
          },
          "root" : {
            "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.BadResponse" : {
        "description" : "Settings for a bad response return (chaos engineering)",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for a bad response return (chaos engineering)",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for a bad response return (chaos engineering)",
              "properties" : {
                "status" : {
                  "format" : "int32",
                  "description" : "The HTTP status for the response",
                  "type" : "integer"
                },
                "body" : {
                  "description" : "The body of the HTTP response",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "The HTTP headers of the response"
                }
              }
            }
          }
        },
        "properties" : {
          "status" : {
            "format" : "int32",
            "description" : "The HTTP status for the response",
            "type" : "integer"
          },
          "body" : {
            "description" : "The body of the HTTP response",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The HTTP headers of the response"
          }
        }
      },
      "otoroshi.auth.SAMLSignatureAlgorithm" : {
        "description" : "Algorithm to sign SAML requests",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Algorithm to sign SAML requests",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Algorithm to sign SAML requests",
              "properties" : { }
            }
          }
        },
        "properties" : { }
      },
      "otoroshi.models.GlobalConfig" : {
        "description" : "The global config (dynamic) for otoroshi",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "The global config (dynamic) for otoroshi",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "The global config (dynamic) for otoroshi",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "backOfficeAuthRef" : {
                  "description" : "Id of the auth module used for otoroshi-ui login",
                  "type" : "string"
                },
                "plugins" : {
                  "description" : "global plugins settings",
                  "type" : "object",
                  "properties" : {
                    "config" : {
                      "description" : "Plugins configuration",
                      "type" : "object"
                    },
                    "enabled" : {
                      "description" : "Plugins enabled",
                      "type" : "boolean"
                    },
                    "excluded" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Excluded paths"
                    },
                    "refs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Enabled plugins"
                    }
                  }
                },
                "elasticReadsConfig" : {
                  "description" : "Config. for elastic reads",
                  "type" : "object",
                  "properties" : {
                    "clusterUri" : {
                      "description" : "Cluster URL",
                      "type" : "string"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Additionnal headers in the http request"
                    },
                    "password" : {
                      "description" : "Elastic password",
                      "type" : "string"
                    },
                    "indexSettings" : {
                      "description" : "???",
                      "type" : "object",
                      "properties" : {
                        "clientSide" : {
                          "description" : "???",
                          "type" : "boolean"
                        },
                        "interval" : {
                          "description" : "???",
                          "type" : "object",
                          "properties" : { }
                        }
                      }
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for the http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "index" : {
                      "description" : "Index name",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "Object type",
                      "type" : "string",
                      "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                    },
                    "applyTemplate" : {
                      "description" : "???",
                      "type" : "boolean"
                    },
                    "version" : {
                      "description" : "???",
                      "type" : "string"
                    },
                    "user" : {
                      "description" : "Elastic user",
                      "type" : "string"
                    }
                  }
                },
                "logAnalyticsOnServer" : {
                  "description" : "Log analytics event on the server",
                  "type" : "boolean"
                },
                "tlsSettings" : {
                  "description" : "TLS settings",
                  "type" : "object",
                  "properties" : {
                    "randomIfNotFound" : {
                      "description" : "Use a random one",
                      "type" : "boolean"
                    },
                    "trustedCAsServer" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "List for CAs trusted by otoroshi when performing TLS termination"
                    },
                    "includeJdkCaClient" : {
                      "description" : "Use known JDK CAs to build trust when performing request from otoroshi to backends",
                      "type" : "boolean"
                    },
                    "defaultDomain" : {
                      "description" : "Default domain to choose if not found from current certificates",
                      "type" : "string"
                    },
                    "includeJdkCaServer" : {
                      "description" : "Use known JDK CAs to build trust for incoming request",
                      "type" : "boolean"
                    }
                  }
                },
                "geolocationSettings" : {
                  "description" : "Settings for geolocation extraction",
                  "oneOfConstraints" : [ {
                    "required" : [ "apikey", "type", "enabled", "timeout" ]
                  }, {
                    "required" : [ "path", "type", "enabled" ]
                  }, {
                    "required" : [ "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "apikey" : {
                      "description" : "IpStack apikey",
                      "type" : "string"
                    },
                    "type" : {
                      "type" : "string",
                      "enum" : [ "none" ]
                    },
                    "enabled" : {
                      "description" : "Geolocation using maxmind db enabled",
                      "type" : "boolean"
                    },
                    "timeout" : {
                      "format" : "int64",
                      "description" : "API call timeout",
                      "type" : "integer"
                    },
                    "path" : {
                      "description" : "Maxmlind db file path",
                      "type" : "string"
                    }
                  }
                },
                "autoCert" : {
                  "description" : "Auto certs settings",
                  "type" : "object",
                  "properties" : {
                    "caRef" : {
                      "description" : "Generate cert from the following CA",
                      "type" : "string"
                    },
                    "allowed" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "allowed domains"
                    },
                    "replyNicely" : {
                      "description" : "Reply TLS error with an auto generated certificate for the domain",
                      "type" : "boolean"
                    },
                    "notAllowed" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "not allowed domains"
                    },
                    "enabled" : {
                      "description" : "Enable auto cert",
                      "type" : "boolean"
                    }
                  }
                },
                "endlessIpAddresses" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros"
                },
                "streamEntityOnly" : {
                  "description" : "HTTP will be streamed only. Doesn't work with old browsers",
                  "type" : "boolean"
                },
                "alertsEmails" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Email addresses that will receive all Otoroshi alert events"
                },
                "middleFingers" : {
                  "description" : "Use middle finger emoji as a response character for endless HTTP responses",
                  "type" : "boolean"
                },
                "alertsWebhooks" : {
                  "description" : "Webhook that will receive all Otoroshi alert events",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Headers to authorize the call or whatever"
                      },
                      "mtlsConfig" : {
                        "description" : "TLS config when calling webhook",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "type" : {
                        "description" : "the kind of exporter",
                        "type" : "string",
                        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                      },
                      "url" : {
                        "description" : "The URL where events are posted",
                        "type" : "string"
                      }
                    }
                  }
                },
                "maxWebhookSize" : {
                  "format" : "int32",
                  "description" : "Max number of items in webhooks",
                  "type" : "integer"
                },
                "cleverSettings" : {
                  "description" : "Optional CleverCloud configuration",
                  "type" : "object",
                  "properties" : {
                    "consumerSecret" : {
                      "description" : "Clever-Cloud oauth consumer secret",
                      "type" : "string"
                    },
                    "consumerKey" : {
                      "description" : "Clever-Cloud oauth consumer key",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "Clever-Cloud oauth secret",
                      "type" : "string"
                    },
                    "token" : {
                      "description" : "Clever-Cloud oauth token",
                      "type" : "string"
                    },
                    "orgaId" : {
                      "description" : "Clever-Cloud organization id",
                      "type" : "string"
                    }
                  }
                },
                "u2fLoginOnly" : {
                  "description" : "If enabled, login to backoffice through Auth0 will be disabled",
                  "type" : "boolean"
                },
                "userAgentSettings" : {
                  "description" : "Settings for useragent extraction",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "User agent extraction enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "otoroshiId" : {
                  "description" : "Unique id for this otoroshi instance",
                  "type" : "string"
                },
                "proxies" : {
                  "description" : "Web proxies settings",
                  "type" : "object",
                  "properties" : {
                    "auth" : {
                      "description" : "Web proxy used to call OAuth providers",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "clevercloud" : {
                      "description" : "Web proxy used to call clevercloud",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "authority" : {
                      "description" : "Web proxy used to check authorities",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "elastic" : {
                      "description" : "Web proxy used to call elastic",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "alertEmails" : {
                      "description" : "Web proxy used to send alert emails",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "services" : {
                      "description" : "Web proxy used to access services targets",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "eventsWebhooks" : {
                      "description" : "Web proxy used to call webhooks",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "jwk" : {
                      "description" : "Web proxy used to fetch jwks",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    }
                  }
                },
                "ipFiltering" : {
                  "description" : "Global ip filtering settings",
                  "type" : "object",
                  "properties" : {
                    "whitelist" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Whitelisted IP addresses"
                    },
                    "blacklist" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Blacklisted IP addresses"
                    }
                  }
                },
                "mailerSettings" : {
                  "description" : "Optional mailer configuration",
                  "oneOfConstraints" : [ {
                    "required" : [ "type" ]
                  }, {
                    "required" : [ "headers", "to", "type", "url" ]
                  }, {
                    "required" : [ "eu", "apiKey", "domain", "to", "type" ]
                  }, {
                    "required" : [ "apiKeyPrivate", "apiKeyPublic", "to", "type" ]
                  }, {
                    "required" : [ "type" ]
                  }, {
                    "required" : [ "apiKey", "to", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "eu" : {
                      "description" : "European tenant",
                      "type" : "boolean"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Sender headers"
                    },
                    "apiKey" : {
                      "description" : "Sendgrid apikey",
                      "type" : "string"
                    },
                    "domain" : {
                      "description" : "Mailgun domain",
                      "type" : "string"
                    },
                    "apiKeyPrivate" : {
                      "description" : "Private key",
                      "type" : "string"
                    },
                    "apiKeyPublic" : {
                      "description" : "Public key",
                      "type" : "string"
                    },
                    "to" : {
                      "description" : "Destination email address",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "name" : {
                            "description" : "Destination name",
                            "type" : "string"
                          },
                          "email" : {
                            "description" : "Email address",
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of mailer",
                      "type" : "string",
                      "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
                    },
                    "url" : {
                      "description" : "Sender URL",
                      "type" : "string"
                    }
                  }
                },
                "lines" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Possibles lines for Otoroshi"
                },
                "useCircuitBreakers" : {
                  "description" : "If enabled, services will be authorized to use circuit breakers",
                  "type" : "boolean"
                },
                "scripts" : {
                  "description" : "global plugins settings. will be deprecated soon",
                  "type" : "object",
                  "properties" : {
                    "jobConfig" : {
                      "description" : "jobs enabled",
                      "type" : "object"
                    },
                    "enabled" : {
                      "description" : "Global scripts enabled",
                      "type" : "boolean"
                    },
                    "transformersConfig" : {
                      "description" : "transformers config",
                      "type" : "object"
                    },
                    "transformersRefs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "transformers enabled"
                    },
                    "preRouteRefs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "pre-route plugins enabled"
                    },
                    "sinkConfig" : {
                      "description" : "sinks config",
                      "type" : "object"
                    },
                    "jobRefs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "running jobs"
                    },
                    "validatorRefs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "validator enabled"
                    },
                    "sinkRefs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "sinks enabled"
                    },
                    "preRouteConfig" : {
                      "description" : "pre-route config",
                      "type" : "object"
                    },
                    "validatorConfig" : {
                      "description" : "validator config",
                      "type" : "object"
                    }
                  }
                },
                "maxLogsSize" : {
                  "format" : "int32",
                  "description" : "Number of events kept locally",
                  "type" : "integer"
                },
                "useAkkaHttpClient" : {
                  "description" : "Globally use akka http client for everything",
                  "type" : "boolean"
                },
                "apiReadOnly" : {
                  "description" : "If enabled, Admin API won't be able to write/update/delete entities",
                  "type" : "boolean"
                },
                "analyticsWebhooks" : {
                  "description" : "Webhook that will receive all internal Otoroshi events",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Headers to authorize the call or whatever"
                      },
                      "mtlsConfig" : {
                        "description" : "TLS config when calling webhook",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "type" : {
                        "description" : "the kind of exporter",
                        "type" : "string",
                        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                      },
                      "url" : {
                        "description" : "The URL where events are posted",
                        "type" : "string"
                      }
                    }
                  }
                },
                "kafkaConfig" : {
                  "description" : "Global kafka settings. deprecated",
                  "type" : "object",
                  "properties" : {
                    "servers" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "URLs of the kafka servers"
                    },
                    "keyPass" : {
                      "description" : "Optional keypass",
                      "type" : "string"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS config to access the cluster",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "topic" : {
                      "description" : "Optional kafka topic (otoroshi-events by default)",
                      "type" : "string"
                    },
                    "truststore" : {
                      "description" : "Optional truststore",
                      "type" : "string"
                    },
                    "keystore" : {
                      "description" : "Optional keystore",
                      "type" : "string"
                    },
                    "sendEvents" : {
                      "description" : "Send events to it, or just connect",
                      "type" : "boolean"
                    },
                    "type" : {
                      "description" : "the kind of exporter",
                      "type" : "string",
                      "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                    }
                  }
                },
                "enableEmbeddedMetrics" : {
                  "description" : "Enable embedded metrics",
                  "type" : "boolean"
                },
                "limitConcurrentRequests" : {
                  "description" : "If enabled, Otoroshi will reject new request if too much at the same time",
                  "type" : "boolean"
                },
                "maxConcurrentRequests" : {
                  "format" : "int64",
                  "description" : "The number of authorized request processed at the same time",
                  "type" : "integer"
                },
                "maxHttp10ResponseSize" : {
                  "format" : "int64",
                  "description" : "The max size in bytes of an HTTP 1.0 response",
                  "type" : "integer"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "letsEncryptSettings" : {
                  "description" : "Let's encrypt (ACME) settings",
                  "type" : "object",
                  "properties" : {
                    "privateKey" : {
                      "description" : "Let's encrypt (ACME) private key",
                      "type" : "string"
                    },
                    "contacts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Let's encrypt (ACME) contacts"
                    },
                    "emails" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Let's encrypt (ACME) contact emails"
                    },
                    "enabled" : {
                      "description" : "Let's encrypt (ACME) enabled",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Let's encrypt (ACME) public key",
                      "type" : "string"
                    },
                    "server" : {
                      "description" : "Let's encrypt (ACME) server",
                      "type" : "string"
                    }
                  }
                },
                "autoLinkToDefaultGroup" : {
                  "description" : "If not defined, every new service descriptor will be added to the default group",
                  "type" : "boolean"
                },
                "throttlingQuota" : {
                  "format" : "int64",
                  "description" : "Authorized number of calls per second globally, measured on 10 seconds",
                  "type" : "integer"
                },
                "snowMonkeyConfig" : {
                  "description" : "Snowmonky settings",
                  "type" : "object",
                  "properties" : {
                    "dryRun" : {
                      "description" : "Whether or not outages will actualy impact requests",
                      "type" : "boolean"
                    },
                    "targetGroups" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Groups impacted by Snow Monkey. If empty, all groups will be impacted"
                    },
                    "includeUserFacingDescriptors" : {
                      "description" : "Whether or not user facing apps. will be impacted by Snow Monkey",
                      "type" : "boolean"
                    },
                    "outageDurationTo" : {
                      "description" : "End of outage duration range",
                      "type" : "number"
                    },
                    "outageDurationFrom" : {
                      "description" : "Start of outage duration range",
                      "type" : "number"
                    },
                    "startTime" : {
                      "description" : "Start time of Snow Monkey each day",
                      "type" : "string"
                    },
                    "stopTime" : {
                      "description" : "Stop time of Snow Monkey each day",
                      "type" : "string"
                    },
                    "chaosConfig" : {
                      "description" : "Chaos settings",
                      "type" : "object",
                      "properties" : {
                        "badResponsesFaultConfig" : {
                          "description" : "Settings for bad responses",
                          "type" : "object",
                          "properties" : {
                            "responses" : {
                              "description" : "The possibles responses",
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "status" : {
                                    "format" : "int32",
                                    "description" : "The HTTP status for the response",
                                    "type" : "integer"
                                  },
                                  "body" : {
                                    "description" : "The body of the HTTP response",
                                    "type" : "string"
                                  },
                                  "headers" : {
                                    "type" : "object",
                                    "additionalProperties" : {
                                      "type" : "string"
                                    },
                                    "description" : "The HTTP headers of the response"
                                  }
                                }
                              }
                            },
                            "ratio" : {
                              "format" : "double",
                              "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                              "type" : "number"
                            }
                          }
                        },
                        "largeResponseFaultConfig" : {
                          "description" : "Settings for large responses",
                          "type" : "object",
                          "properties" : {
                            "ratio" : {
                              "format" : "double",
                              "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                              "type" : "number"
                            },
                            "additionalResponseSize" : {
                              "format" : "int32",
                              "description" : "Add n 0 bytes",
                              "type" : "integer"
                            }
                          }
                        },
                        "latencyInjectionFaultConfig" : {
                          "description" : "Settings for latency injection",
                          "type" : "object",
                          "properties" : {
                            "ratio" : {
                              "format" : "double",
                              "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                              "type" : "number"
                            },
                            "from" : {
                              "description" : "The start range of latency added to the request",
                              "type" : "number"
                            },
                            "to" : {
                              "description" : "The end range of latency added to the request",
                              "type" : "number"
                            }
                          }
                        },
                        "largeRequestFaultConfig" : {
                          "description" : "Settings for large requests",
                          "type" : "object",
                          "properties" : {
                            "ratio" : {
                              "format" : "double",
                              "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                              "type" : "number"
                            },
                            "additionalRequestSize" : {
                              "format" : "int32",
                              "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                              "type" : "integer"
                            }
                          }
                        },
                        "enabled" : {
                          "description" : "Whether or not this config is enabled",
                          "type" : "boolean"
                        }
                      }
                    },
                    "timesPerDay" : {
                      "format" : "int32",
                      "description" : "Number of time per day each service will be outage",
                      "type" : "integer"
                    },
                    "outageStrategy" : {
                      "description" : "",
                      "type" : "string",
                      "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
                    },
                    "enabled" : {
                      "description" : "Whether or not this config is enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "statsdConfig" : {
                  "description" : "Statsd settings (agent connection)",
                  "type" : "object",
                  "properties" : {
                    "datadog" : {
                      "description" : "Datadog agent",
                      "type" : "boolean"
                    },
                    "host" : {
                      "description" : "The host of the StatsD agent",
                      "type" : "string"
                    },
                    "port" : {
                      "format" : "int32",
                      "description" : "The port of the StatsD agent",
                      "type" : "integer"
                    }
                  }
                },
                "maintenanceMode" : {
                  "description" : "Global maintenant mode",
                  "type" : "boolean"
                },
                "perIpThrottlingQuota" : {
                  "format" : "int64",
                  "description" : "Authorized number of calls per second globally per IP address, measured on 10 seconds",
                  "type" : "integer"
                },
                "elasticWritesConfigs" : {
                  "description" : "Configs. for Elastic writes",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "clusterUri" : {
                        "description" : "Cluster URL",
                        "type" : "string"
                      },
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Additionnal headers in the http request"
                      },
                      "password" : {
                        "description" : "Elastic password",
                        "type" : "string"
                      },
                      "indexSettings" : {
                        "description" : "???",
                        "type" : "object",
                        "properties" : {
                          "clientSide" : {
                            "description" : "???",
                            "type" : "boolean"
                          },
                          "interval" : {
                            "description" : "???",
                            "type" : "object",
                            "properties" : { }
                          }
                        }
                      },
                      "mtlsConfig" : {
                        "description" : "TLS settings for the http client",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "index" : {
                        "description" : "Index name",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "Object type",
                        "type" : "string",
                        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                      },
                      "applyTemplate" : {
                        "description" : "???",
                        "type" : "boolean"
                      },
                      "version" : {
                        "description" : "???",
                        "type" : "string"
                      },
                      "user" : {
                        "description" : "Elastic user",
                        "type" : "string"
                      }
                    }
                  }
                },
                "trustXForwarded" : {
                  "description" : "Use X-Forwarded-* headers for routing",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "geolocationSettings" : {
            "description" : "Settings for geolocation extraction",
            "$ref" : "#/components/schemas/otoroshi.models.GeolocationSettings"
          },
          "alertsEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Email addresses that will receive all Otoroshi alert events"
          },
          "throttlingQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per second globally, measured on 10 seconds",
            "type" : "integer"
          },
          "maxWebhookSize" : {
            "format" : "int32",
            "description" : "Max number of items in webhooks",
            "type" : "integer"
          },
          "maxConcurrentRequests" : {
            "format" : "int64",
            "description" : "The number of authorized request processed at the same time",
            "type" : "integer"
          },
          "cleverSettings" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.CleverCloudSettings"
            } ],
            "description" : "Optional CleverCloud configuration"
          },
          "endlessIpAddresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros"
          },
          "plugins" : {
            "description" : "global plugins settings",
            "$ref" : "#/components/schemas/otoroshi.script.plugins.Plugins"
          },
          "kafkaConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.events.KafkaConfig"
            } ],
            "description" : "Global kafka settings. deprecated"
          },
          "maxLogsSize" : {
            "format" : "int32",
            "description" : "Number of events kept locally",
            "type" : "integer"
          },
          "proxies" : {
            "description" : "Web proxies settings",
            "$ref" : "#/components/schemas/otoroshi.models.Proxies"
          },
          "enableEmbeddedMetrics" : {
            "description" : "Enable embedded metrics",
            "type" : "boolean"
          },
          "elasticReadsConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.ElasticAnalyticsConfig"
            } ],
            "description" : "Config. for elastic reads"
          },
          "trustXForwarded" : {
            "description" : "Use X-Forwarded-* headers for routing",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "limitConcurrentRequests" : {
            "description" : "If enabled, Otoroshi will reject new request if too much at the same time",
            "type" : "boolean"
          },
          "useAkkaHttpClient" : {
            "description" : "Globally use akka http client for everything",
            "type" : "boolean"
          },
          "elasticWritesConfigs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.ElasticAnalyticsConfig"
            },
            "description" : "Configs. for Elastic writes"
          },
          "logAnalyticsOnServer" : {
            "description" : "Log analytics event on the server",
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "apiReadOnly" : {
            "description" : "If enabled, Admin API won't be able to write/update/delete entities",
            "type" : "boolean"
          },
          "backOfficeAuthRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Id of the auth module used for otoroshi-ui login"
          },
          "streamEntityOnly" : {
            "description" : "HTTP will be streamed only. Doesn't work with old browsers",
            "type" : "boolean"
          },
          "otoroshiId" : {
            "description" : "Unique id for this otoroshi instance",
            "type" : "string"
          },
          "mailerSettings" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailerSettings"
            } ],
            "description" : "Optional mailer configuration"
          },
          "lines" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Possibles lines for Otoroshi"
          },
          "middleFingers" : {
            "description" : "Use middle finger emoji as a response character for endless HTTP responses",
            "type" : "boolean"
          },
          "analyticsWebhooks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Webhook"
            },
            "description" : "Webhook that will receive all internal Otoroshi events"
          },
          "autoCert" : {
            "description" : "Auto certs settings",
            "$ref" : "#/components/schemas/otoroshi.models.AutoCert"
          },
          "maintenanceMode" : {
            "description" : "Global maintenant mode",
            "type" : "boolean"
          },
          "letsEncryptSettings" : {
            "description" : "Let's encrypt (ACME) settings",
            "$ref" : "#/components/schemas/otoroshi.utils.letsencrypt.LetsEncryptSettings"
          },
          "snowMonkeyConfig" : {
            "description" : "Snowmonky settings",
            "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
          },
          "scripts" : {
            "description" : "global plugins settings. will be deprecated soon",
            "$ref" : "#/components/schemas/otoroshi.models.GlobalScripts"
          },
          "perIpThrottlingQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per second globally per IP address, measured on 10 seconds",
            "type" : "integer"
          },
          "useCircuitBreakers" : {
            "description" : "If enabled, services will be authorized to use circuit breakers",
            "type" : "boolean"
          },
          "maxHttp10ResponseSize" : {
            "format" : "int64",
            "description" : "The max size in bytes of an HTTP 1.0 response",
            "type" : "integer"
          },
          "tlsSettings" : {
            "description" : "TLS settings",
            "$ref" : "#/components/schemas/otoroshi.models.TlsSettings"
          },
          "statsdConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.events.StatsdConfig"
            } ],
            "description" : "Statsd settings (agent connection)"
          },
          "autoLinkToDefaultGroup" : {
            "description" : "If not defined, every new service descriptor will be added to the default group",
            "type" : "boolean"
          },
          "alertsWebhooks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Webhook"
            },
            "description" : "Webhook that will receive all Otoroshi alert events"
          },
          "ipFiltering" : {
            "description" : "Global ip filtering settings",
            "$ref" : "#/components/schemas/otoroshi.models.IpFiltering"
          },
          "u2fLoginOnly" : {
            "description" : "If enabled, login to backoffice through Auth0 will be disabled",
            "type" : "boolean"
          },
          "userAgentSettings" : {
            "description" : "Settings for useragent extraction",
            "$ref" : "#/components/schemas/otoroshi.models.UserAgentSettings"
          }
        }
      },
      "StringList" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      },
      "otoroshi.models.ExporterRef" : {
        "description" : "Reference to a data exporter",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Reference to a data exporter",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Reference to a data exporter",
              "properties" : {
                "ref" : {
                  "description" : "Script id",
                  "type" : "string"
                },
                "config" : {
                  "description" : "Script config",
                  "type" : "object"
                }
              }
            }
          }
        },
        "properties" : {
          "ref" : {
            "description" : "Script id",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "config" : {
            "description" : "Script config",
            "type" : "object"
          }
        }
      },
      "otoroshi.ssl.pki.models.GenKeyPairQuery" : {
        "description" : "Settings for generating a keypair",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for generating a keypair",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for generating a keypair",
              "properties" : {
                "algo" : {
                  "description" : "Keypair algorithm",
                  "type" : "string"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "Keypair size",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "algo" : {
            "description" : "Keypair algorithm",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "Keypair size",
            "type" : "integer"
          }
        }
      },
      "HealthCheckEventList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.events.HealthCheckEvent"
        }
      },
      "otoroshi.models.OutageStrategy" : {
        "type" : "string",
        "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
      },
      "otoroshi.models.ClientIdAuthConstraints" : {
        "description" : "Settings to extract apikey (using client_id only) from a header or query param",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings to extract apikey (using client_id only) from a header or query param",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings to extract apikey (using client_id only) from a header or query param",
              "type" : "object",
              "properties" : {
                "headerName" : {
                  "description" : "Header name to find client_id",
                  "type" : "string"
                },
                "queryName" : {
                  "description" : "Query param name to find client_id",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Constraint enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "headerName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to find client_id"
          },
          "queryName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Query param name to find client_id"
          }
        }
      },
      "otoroshi.auth.BasicAuthUser" : {
        "description" : "A user model for the BasicAuthModuleConfig module",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "A user model for the BasicAuthModuleConfig module",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "A user model for the BasicAuthModuleConfig module",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "description" : "User metadata",
                  "type" : "object"
                },
                "password" : {
                  "description" : "User password (bcrypt hashed)",
                  "type" : "string"
                },
                "rights" : {
                  "description" : "User rights",
                  "type" : "object",
                  "properties" : {
                    "rights" : {
                      "description" : "Access rights of a user",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "teams" : {
                            "description" : "Access rights on teams",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          },
                          "tenant" : {
                            "description" : "Access rights on organizations",
                            "type" : "object",
                            "properties" : {
                              "canWrite" : {
                                "description" : "Can this access right write data",
                                "type" : "boolean"
                              },
                              "value" : {
                                "description" : "Access pattern",
                                "type" : "string"
                              },
                              "canRead" : {
                                "description" : "Can this access right read data",
                                "type" : "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "name" : {
                  "description" : "User name",
                  "type" : "string"
                },
                "webauthn" : {
                  "description" : "Webauthn details",
                  "type" : "object",
                  "properties" : {
                    "handle" : {
                      "description" : "Webauthn user handle",
                      "type" : "string"
                    },
                    "credentials" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "object"
                      },
                      "description" : "Webauthn credentials"
                    }
                  }
                },
                "email" : {
                  "description" : "User email",
                  "type" : "string"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "User tags"
                }
              }
            }
          }
        },
        "properties" : {
          "metadata" : {
            "description" : "User metadata",
            "type" : "object"
          },
          "password" : {
            "description" : "User password (bcrypt hashed)",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "User tags"
          },
          "email" : {
            "description" : "User email",
            "type" : "string"
          },
          "webauthn" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.auth.WebAuthnDetails"
            } ],
            "description" : "Webauthn details"
          },
          "rights" : {
            "description" : "User rights",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "name" : {
            "description" : "User name",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.ClientConfig" : {
        "description" : "Settings for the http client when http request is forwarded",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for the http client when http request is forwarded",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for the http client when http request is forwarded",
              "type" : "object",
              "properties" : {
                "sampleInterval" : {
                  "format" : "int64",
                  "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                  "type" : "integer"
                },
                "backoffFactor" : {
                  "format" : "int64",
                  "description" : "Specify the factor to multiply the delay for each retry",
                  "type" : "integer"
                },
                "customTimeouts" : {
                  "description" : "Custom timeouts per path",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "path" : {
                        "description" : "path on which this configuration works",
                        "type" : "string"
                      },
                      "callAndStreamTimeout" : {
                        "format" : "int64",
                        "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                        "type" : "integer"
                      },
                      "callTimeout" : {
                        "format" : "int64",
                        "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                        "type" : "integer"
                      },
                      "idleTimeout" : {
                        "format" : "int64",
                        "description" : "Timeout on idle connection",
                        "type" : "integer"
                      },
                      "globalTimeout" : {
                        "format" : "int64",
                        "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                        "type" : "integer"
                      },
                      "connectionTimeout" : {
                        "format" : "int64",
                        "description" : "Timeout at connection",
                        "type" : "integer"
                      }
                    }
                  }
                },
                "callAndStreamTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                  "type" : "integer"
                },
                "retryInitialDelay" : {
                  "format" : "int64",
                  "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                  "type" : "integer"
                },
                "callTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                  "type" : "integer"
                },
                "useCircuitBreaker" : {
                  "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
                  "type" : "boolean"
                },
                "retries" : {
                  "format" : "int32",
                  "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                  "type" : "integer"
                },
                "proxy" : {
                  "description" : "Web proxy settings for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "maxErrors" : {
                  "format" : "int32",
                  "description" : "Specify how many errors can pass before opening the circuit breaker",
                  "type" : "integer"
                },
                "idleTimeout" : {
                  "format" : "int64",
                  "description" : "Timeout on idle connection",
                  "type" : "integer"
                },
                "globalTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                  "type" : "integer"
                },
                "cacheConnectionSettings" : {
                  "description" : "Cached connection settings",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Enable Cached connections at host tevel",
                      "type" : "boolean"
                    },
                    "queueSize" : {
                      "format" : "int32",
                      "description" : "The size for the request queue",
                      "type" : "integer"
                    }
                  }
                },
                "connectionTimeout" : {
                  "format" : "int64",
                  "description" : "Timeout at connection",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "connectionTimeout" : {
            "format" : "int64",
            "description" : "Timeout at connection",
            "type" : "integer"
          },
          "useCircuitBreaker" : {
            "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
            "type" : "boolean"
          },
          "retryInitialDelay" : {
            "format" : "int64",
            "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
            "type" : "integer"
          },
          "cacheConnectionSettings" : {
            "description" : "Cached connection settings",
            "$ref" : "#/components/schemas/otoroshi.utils.http.CacheConnectionSettings"
          },
          "proxy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy settings for http client"
          },
          "callTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
            "type" : "integer"
          },
          "callAndStreamTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
            "type" : "integer"
          },
          "globalTimeout" : {
            "format" : "int64",
            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
            "type" : "integer"
          },
          "maxErrors" : {
            "format" : "int32",
            "description" : "Specify how many errors can pass before opening the circuit breaker",
            "type" : "integer"
          },
          "retries" : {
            "format" : "int32",
            "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
            "type" : "integer"
          },
          "backoffFactor" : {
            "format" : "int64",
            "description" : "Specify the factor to multiply the delay for each retry",
            "type" : "integer"
          },
          "customTimeouts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.CustomTimeouts"
            },
            "description" : "Custom timeouts per path"
          },
          "idleTimeout" : {
            "format" : "int64",
            "description" : "Timeout on idle connection",
            "type" : "integer"
          },
          "sampleInterval" : {
            "format" : "int64",
            "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
            "type" : "integer"
          }
        }
      },
      "LiveStats" : {
        "type" : "object",
        "description" : "Service live stats"
      },
      "otoroshi.models.ApiKeyConstraints" : {
        "description" : "Settings used to extract apikeys from http requests and routing traffic",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings used to extract apikeys from http requests and routing traffic",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings used to extract apikeys from http requests and routing traffic",
              "type" : "object",
              "properties" : {
                "routing" : {
                  "description" : "Routing settings for this apikey",
                  "type" : "object",
                  "properties" : {
                    "oneTagIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "outing if one tag presents in apikey"
                    },
                    "noneMetaKeysIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if none meta keys presents in apikey"
                    },
                    "oneMetaIn" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Routing if one meta presents in apikey"
                    },
                    "oneMetaKeyIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if one meta key presents in apikey"
                    },
                    "allMetaKeysIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if all meta keys presents in apikey"
                    },
                    "noneTagIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if none tags presents in apikey"
                    },
                    "allTagsIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if all tags presents in apikey"
                    },
                    "allMetaIn" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Routing if all meta presents in apikey"
                    },
                    "noneMetaIn" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Routing if none meta presents in apikey"
                    }
                  }
                },
                "customHeadersAuth" : {
                  "description" : "Settings to extract apikey from custom headers",
                  "type" : "object",
                  "properties" : {
                    "clientSecretHeaderName" : {
                      "description" : "Header name to find client_secret",
                      "type" : "string"
                    },
                    "enabled" : {
                      "description" : "Constraint enabled",
                      "type" : "boolean"
                    },
                    "clientIdHeaderName" : {
                      "description" : "Header name to find client_id",
                      "type" : "string"
                    }
                  }
                },
                "basicAuth" : {
                  "description" : "Settings to extract basic auth style apikey",
                  "type" : "object",
                  "properties" : {
                    "headerName" : {
                      "description" : "Header name to get client_id:client_secret base64 encoded",
                      "type" : "string"
                    },
                    "queryName" : {
                      "description" : "Query param name to get client_id:client_secret base64 encoded",
                      "type" : "string"
                    },
                    "enabled" : {
                      "description" : "Constraint enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "jwtAuth" : {
                  "description" : "Settings to extract apikey from jwt token",
                  "type" : "object",
                  "properties" : {
                    "headerName" : {
                      "description" : "Header name to extract jwt token",
                      "type" : "string"
                    },
                    "maxJwtLifespanSecs" : {
                      "format" : "int64",
                      "description" : "Check if token does not have a long lifespan",
                      "type" : "integer"
                    },
                    "keyPairSigned" : {
                      "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                      "type" : "boolean"
                    },
                    "secretSigned" : {
                      "description" : "Jwt token signed with the client_secret",
                      "type" : "boolean"
                    },
                    "queryName" : {
                      "description" : "Query param name to extract jwt token",
                      "type" : "string"
                    },
                    "enabled" : {
                      "description" : "Constraint enabled",
                      "type" : "boolean"
                    },
                    "cookieName" : {
                      "description" : "Cookie name to extract jwt token",
                      "type" : "string"
                    },
                    "includeRequestAttributes" : {
                      "description" : "Jwt token should include verb and path",
                      "type" : "boolean"
                    }
                  }
                },
                "clientIdAuth" : {
                  "description" : "Settings to extract client_id only apikey",
                  "type" : "object",
                  "properties" : {
                    "headerName" : {
                      "description" : "Header name to find client_id",
                      "type" : "string"
                    },
                    "queryName" : {
                      "description" : "Query param name to find client_id",
                      "type" : "string"
                    },
                    "enabled" : {
                      "description" : "Constraint enabled",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "customHeadersAuth" : {
            "description" : "Settings to extract apikey from custom headers",
            "$ref" : "#/components/schemas/otoroshi.models.CustomHeadersAuthConstraints"
          },
          "routing" : {
            "description" : "Routing settings for this apikey",
            "$ref" : "#/components/schemas/otoroshi.models.ApiKeyRouteMatcher"
          },
          "clientIdAuth" : {
            "description" : "Settings to extract client_id only apikey",
            "$ref" : "#/components/schemas/otoroshi.models.ClientIdAuthConstraints"
          },
          "jwtAuth" : {
            "description" : "Settings to extract apikey from jwt token",
            "$ref" : "#/components/schemas/otoroshi.models.JwtAuthConstraints"
          },
          "basicAuth" : {
            "description" : "Settings to extract basic auth style apikey",
            "$ref" : "#/components/schemas/otoroshi.models.BasicAuthConstraints"
          }
        }
      },
      "Any" : {
        "oneOf" : [ {
          "type" : "object"
        }, {
          "type" : "array"
        }, {
          "type" : "string"
        }, {
          "type" : "boolean"
        }, {
          "type" : "number"
        }, {
          "type" : "integer"
        } ]
      },
      "otoroshi.ssl.ClientAuth" : {
        "type" : "string",
        "enum" : [ "Need", "None", "Want" ],
        "description" : "Client authentication mode"
      },
      "otoroshi.models.SimpleOtoroshiAdmin" : {
        "description" : "An otoroshi admin user",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "An otoroshi admin user",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "An otoroshi admin user",
              "type" : "object",
              "properties" : {
                "createdAt" : {
                  "description" : "User creation date",
                  "type" : "number"
                },
                "password" : {
                  "description" : "User password (bcrypt hashed)",
                  "type" : "string"
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "rights" : {
                  "description" : "User rights",
                  "type" : "object",
                  "properties" : {
                    "rights" : {
                      "description" : "Access rights of a user",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "teams" : {
                            "description" : "Access rights on teams",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          },
                          "tenant" : {
                            "description" : "Access rights on organizations",
                            "type" : "object",
                            "properties" : {
                              "canWrite" : {
                                "description" : "Can this access right write data",
                                "type" : "boolean"
                              },
                              "value" : {
                                "description" : "Access pattern",
                                "type" : "string"
                              },
                              "canRead" : {
                                "description" : "Can this access right read data",
                                "type" : "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "typ" : {
                  "description" : "Admin kind",
                  "type" : "string",
                  "enum" : [ "SIMPLE", "WEBAUTHN" ]
                },
                "label" : {
                  "description" : "User label",
                  "type" : "string"
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "username" : {
                  "description" : "User username",
                  "type" : "string"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                }
              }
            }
          }
        },
        "properties" : {
          "createdAt" : {
            "description" : "User creation date",
            "type" : "number"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "password" : {
            "description" : "User password (bcrypt hashed)",
            "type" : "string"
          },
          "rights" : {
            "description" : "User rights",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "typ" : {
            "description" : "Type of user",
            "$ref" : "#/components/schemas/otoroshi.models.OtoroshiAdminType"
          },
          "label" : {
            "description" : "User label",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of admin",
            "type" : "string",
            "enum" : [ "simple", "webauthn" ]
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "username" : {
            "description" : "User username",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          }
        }
      },
      "otoroshi.models.EntityIdentifier" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptorIdentifier"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ServiceGroupIdentifier"
        } ]
      },
      "otoroshi.ssl.pki.models.SignCertResponse" : {
        "description" : "Response for a certificate signing operation",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Response for a certificate signing operation",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Response for a certificate signing operation",
              "type" : "object",
              "properties" : {
                "csr" : {
                  "description" : "CSR (PEM encoded)",
                  "type" : "string"
                },
                "cert" : {
                  "description" : "Cert (PEM encoded)",
                  "type" : "string"
                },
                "ca" : {
                  "description" : "pem encoded X509 certificate",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "cert" : {
            "description" : "Cert (PEM encoded)",
            "type" : "string"
          },
          "csr" : {
            "description" : "CSR (PEM encoded)",
            "type" : "string"
          },
          "ca" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string",
              "description" : "pem encoded X509 certificate"
            } ],
            "description" : "Ca cert (PEM encoded)"
          }
        }
      },
      "otoroshi.events.KafkaConfig" : {
        "description" : "Settings for connection to a kafka cluster",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for connection to a kafka cluster",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for connection to a kafka cluster",
              "type" : "object",
              "properties" : {
                "servers" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "URLs of the kafka servers"
                },
                "keyPass" : {
                  "description" : "Optional keypass",
                  "type" : "string"
                },
                "mtlsConfig" : {
                  "description" : "TLS config to access the cluster",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "topic" : {
                  "description" : "Optional kafka topic (otoroshi-events by default)",
                  "type" : "string"
                },
                "truststore" : {
                  "description" : "Optional truststore",
                  "type" : "string"
                },
                "keystore" : {
                  "description" : "Optional keystore",
                  "type" : "string"
                },
                "sendEvents" : {
                  "description" : "Send events to it, or just connect",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "servers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "URLs of the kafka servers"
          },
          "keyPass" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional keypass"
          },
          "mtlsConfig" : {
            "description" : "TLS config to access the cluster",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "topic" : {
            "description" : "Optional kafka topic (otoroshi-events by default)",
            "type" : "string"
          },
          "truststore" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional truststore"
          },
          "keystore" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional keystore"
          },
          "sendEvents" : {
            "description" : "Send events to it, or just connect",
            "type" : "boolean"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          }
        }
      },
      "otoroshi.models.UserRights" : {
        "description" : "Represent a list of user rights",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Represent a list of user rights",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Represent a list of user rights",
              "type" : "object",
              "properties" : {
                "rights" : {
                  "description" : "Access rights of a user",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "teams" : {
                        "description" : "Access rights on teams",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "canRead" : {
                              "description" : "Can this access right read data",
                              "type" : "boolean"
                            },
                            "value" : {
                              "description" : "Access pattern",
                              "type" : "string"
                            },
                            "canWrite" : {
                              "description" : "Can this access right write data",
                              "type" : "boolean"
                            }
                          }
                        }
                      },
                      "tenant" : {
                        "description" : "Access rights on organizations",
                        "type" : "object",
                        "properties" : {
                          "canWrite" : {
                            "description" : "Can this access right write data",
                            "type" : "boolean"
                          },
                          "value" : {
                            "description" : "Access pattern",
                            "type" : "string"
                          },
                          "canRead" : {
                            "description" : "Can this access right read data",
                            "type" : "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "rights" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.UserRight"
            },
            "description" : "Access rights of a user"
          }
        }
      },
      "otoroshi.models.IndexSettingsInterval" : {
        "description" : "???",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "???",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "???",
              "properties" : { }
            }
          }
        },
        "properties" : { }
      },
      "otoroshi.script.plugins.Plugins" : {
        "description" : "Settings for plugins (of any kind)",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for plugins (of any kind)",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for plugins (of any kind)",
              "properties" : {
                "config" : {
                  "description" : "Plugins configuration",
                  "type" : "object"
                },
                "enabled" : {
                  "description" : "Plugins enabled",
                  "type" : "boolean"
                },
                "excluded" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Excluded paths"
                },
                "refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Enabled plugins"
                }
              }
            }
          }
        },
        "properties" : {
          "config" : {
            "description" : "Plugins configuration",
            "type" : "object"
          },
          "enabled" : {
            "description" : "Plugins enabled",
            "type" : "boolean"
          },
          "excluded" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          }
        }
      },
      "otoroshi.auth.WebAuthnDetails" : {
        "description" : "Handle and credentials for a webauthn user",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Handle and credentials for a webauthn user",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Handle and credentials for a webauthn user",
              "properties" : {
                "handle" : {
                  "description" : "Webauthn user handle",
                  "type" : "string"
                },
                "credentials" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object"
                  },
                  "description" : "Webauthn credentials"
                }
              }
            }
          }
        },
        "properties" : {
          "handle" : {
            "description" : "Webauthn user handle",
            "type" : "string"
          },
          "credentials" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Webauthn credentials"
          }
        }
      },
      "otoroshi.tcp.TcpTarget" : {
        "description" : "Target for a TCP proxy",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Target for a TCP proxy",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Target for a TCP proxy",
              "type" : "object",
              "properties" : {
                "port" : {
                  "format" : "int32",
                  "description" : "Target port",
                  "type" : "integer"
                },
                "ip" : {
                  "description" : "Target ip",
                  "type" : "string"
                },
                "host" : {
                  "description" : "Target host",
                  "type" : "string"
                },
                "tls" : {
                  "description" : "Use tls",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "host" : {
            "description" : "Target host",
            "type" : "string"
          },
          "ip" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Target ip"
          },
          "port" : {
            "format" : "int32",
            "description" : "Target port",
            "type" : "integer"
          },
          "tls" : {
            "description" : "Use tls",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.GeoPositionRadius" : {
        "description" : "Geolocation radius",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Geolocation radius",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Geolocation radius",
              "properties" : {
                "latitude" : {
                  "format" : "double",
                  "description" : "Latitude of the position",
                  "type" : "number"
                },
                "longitude" : {
                  "format" : "double",
                  "description" : "Longitude of the position",
                  "type" : "number"
                },
                "radius" : {
                  "format" : "double",
                  "description" : "Radius of the circle in meters",
                  "type" : "number"
                }
              }
            }
          }
        },
        "properties" : {
          "latitude" : {
            "format" : "double",
            "description" : "Latitude of the position",
            "type" : "number"
          },
          "longitude" : {
            "format" : "double",
            "description" : "Longitude of the position",
            "type" : "number"
          },
          "radius" : {
            "format" : "double",
            "description" : "Radius of the circle in meters",
            "type" : "number"
          }
        }
      },
      "otoroshi.models.InCookie" : {
        "description" : "JWT token location (cookie)",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "JWT token location (cookie)",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "JWT token location (cookie)",
              "properties" : {
                "name" : {
                  "description" : "Cookie name",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "name" : {
            "description" : "Cookie name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          }
        }
      },
      "otoroshi.models.RSAlgoSettings" : {
        "description" : "Settings to use RSA signing algorithm",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings to use RSA signing algorithm",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings to use RSA signing algorithm",
              "type" : "object",
              "properties" : {
                "privateKey" : {
                  "description" : "Private key (for signing)",
                  "type" : "string"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                },
                "publicKey" : {
                  "description" : "Public key (for verification)",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "privateKey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Private key (for signing)"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.tcp.TcpService" : {
        "description" : "Model for a TCP proxy",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Model for a TCP proxy",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Model for a TCP proxy",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "description" : {
                  "description" : "Entity description",
                  "type" : "string"
                },
                "rules" : {
                  "description" : "Routing rules",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "domain" : {
                        "description" : "match on SNI domain",
                        "type" : "string"
                      },
                      "targets" : {
                        "description" : "TCP targets",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "port" : {
                              "format" : "int32",
                              "description" : "Target port",
                              "type" : "integer"
                            },
                            "ip" : {
                              "description" : "Target ip",
                              "type" : "string"
                            },
                            "host" : {
                              "description" : "Target host",
                              "type" : "string"
                            },
                            "tls" : {
                              "description" : "Use tls",
                              "type" : "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "interface" : {
                  "description" : "Network interface",
                  "type" : "string"
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "enabled" : {
                  "description" : "Service enabled",
                  "type" : "boolean"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "sni" : {
                  "description" : "SNI settings",
                  "type" : "object",
                  "properties" : {
                    "forwardIfNoMatch" : {
                      "description" : "",
                      "type" : "boolean"
                    },
                    "enabled" : {
                      "description" : "SNI extraction enabled",
                      "type" : "boolean"
                    },
                    "forwardsTo" : {
                      "description" : "forwards call to",
                      "type" : "object",
                      "properties" : {
                        "port" : {
                          "format" : "int32",
                          "description" : "Target port",
                          "type" : "integer"
                        },
                        "ip" : {
                          "description" : "Target ip",
                          "type" : "string"
                        },
                        "host" : {
                          "description" : "Target host",
                          "type" : "string"
                        },
                        "tls" : {
                          "description" : "Use tls",
                          "type" : "boolean"
                        }
                      }
                    }
                  }
                },
                "port" : {
                  "format" : "int32",
                  "description" : "network port",
                  "type" : "integer"
                },
                "name" : {
                  "description" : "Entity name",
                  "type" : "string"
                },
                "tls" : {
                  "description" : "TLS mode",
                  "type" : "string",
                  "enum" : [ "Disabled", "Enabled", "PassThrough" ]
                },
                "id" : {
                  "description" : "Entity id",
                  "type" : "string"
                },
                "clientAuth" : {
                  "description" : "Client authentication mode",
                  "type" : "string",
                  "enum" : [ "Need", "None", "Want" ]
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Service enabled",
            "type" : "boolean"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "port" : {
            "format" : "int32",
            "description" : "network port",
            "type" : "integer"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "rules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.tcp.TcpRule"
            },
            "description" : "Routing rules"
          },
          "clientAuth" : {
            "description" : "Use client authentication",
            "$ref" : "#/components/schemas/otoroshi.ssl.ClientAuth"
          },
          "interface" : {
            "description" : "Network interface",
            "type" : "string"
          },
          "sni" : {
            "description" : "SNI settings",
            "$ref" : "#/components/schemas/otoroshi.tcp.SniSettings"
          },
          "id" : {
            "description" : "Entity id",
            "type" : "string"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "tls" : {
            "description" : "TLS mode",
            "$ref" : "#/components/schemas/otoroshi.tcp.TlsMode"
          }
        }
      },
      "WebAuthnRegistrationFinishBody" : {
        "type" : "object",
        "description" : ""
      },
      "otoroshi.models.LocalJwtVerifier" : {
        "description" : "Local jwt verifier (deprecated)",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Local jwt verifier (deprecated)",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Local jwt verifier (deprecated)",
              "type" : "object",
              "properties" : {
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Verifier excluded paths"
                },
                "algoSettings" : {
                  "description" : "Algo settings",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "source" : {
                  "description" : "Token source",
                  "oneOfConstraints" : [ {
                    "required" : [ "name", "type" ]
                  }, {
                    "required" : [ "name", "type", "remove" ]
                  }, {
                    "required" : [ "name", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "description" : "Query param name",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of location",
                      "type" : "string",
                      "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                    },
                    "remove" : {
                      "description" : "Remove from value",
                      "type" : "string"
                    }
                  }
                },
                "strict" : {
                  "description" : "Strict token verification",
                  "type" : "boolean"
                },
                "strategy" : {
                  "description" : "Token strategy",
                  "oneOfConstraints" : [ {
                    "required" : [ "verificationSettings", "type", "strict", "token" ]
                  }, {
                    "required" : [ "verificationSettings", "type" ]
                  }, {
                    "required" : [ "algoSettings", "verificationSettings", "type" ]
                  }, {
                    "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "transformSettings" : {
                      "description" : "Transformation settings",
                      "type" : "object",
                      "properties" : {
                        "mappingSettings" : {
                          "description" : "Token mapping settings",
                          "type" : "object",
                          "properties" : {
                            "map" : {
                              "type" : "object",
                              "additionalProperties" : {
                                "type" : "string"
                              },
                              "description" : "Change values"
                            },
                            "values" : {
                              "description" : "Add values",
                              "type" : "object"
                            },
                            "remove" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Remove some token claims"
                            }
                          }
                        },
                        "location" : {
                          "description" : "Location of the token",
                          "oneOfConstraints" : [ {
                            "required" : [ "name", "type" ]
                          }, {
                            "required" : [ "name", "type", "remove" ]
                          }, {
                            "required" : [ "name", "type" ]
                          } ],
                          "type" : "object",
                          "properties" : {
                            "name" : {
                              "description" : "Query param name",
                              "type" : "string"
                            },
                            "type" : {
                              "description" : "the kind of location",
                              "type" : "string",
                              "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                            },
                            "remove" : {
                              "description" : "Remove from value",
                              "type" : "string"
                            }
                          }
                        }
                      }
                    },
                    "algoSettings" : {
                      "description" : "Algorithm settings for re-signing token",
                      "oneOfConstraints" : [ {
                        "required" : [ "privateKey", "size", "publicKey", "type" ]
                      }, {
                        "required" : [ "size", "certId", "type" ]
                      }, {
                        "required" : [ "size", "base64", "secret", "type" ]
                      }, {
                        "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                      }, {
                        "required" : [ "onlyExposedCerts", "type" ]
                      }, {
                        "required" : [ "size", "certId", "type" ]
                      }, {
                        "required" : [ "privateKey", "size", "publicKey", "type" ]
                      } ],
                      "type" : "object",
                      "properties" : {
                        "headers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Http header when fetching JWKS"
                        },
                        "mtlsConfig" : {
                          "description" : "TLS settings for http client",
                          "type" : "object",
                          "properties" : {
                            "mtls" : {
                              "description" : "Enabled",
                              "type" : "boolean"
                            },
                            "loose" : {
                              "description" : "Loose verification",
                              "type" : "boolean"
                            },
                            "trustAll" : {
                              "description" : "Trust any certificate",
                              "type" : "boolean"
                            },
                            "trustedCerts" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            },
                            "certs" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            }
                          }
                        },
                        "base64" : {
                          "description" : "The secret is base64 encoded",
                          "type" : "boolean"
                        },
                        "publicKey" : {
                          "description" : "Public key (for verification)",
                          "type" : "string"
                        },
                        "certId" : {
                          "description" : "Certificate id",
                          "type" : "string"
                        },
                        "secret" : {
                          "description" : "HMAC secret",
                          "type" : "string"
                        },
                        "type" : {
                          "description" : "the kind of algosettings",
                          "type" : "string",
                          "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                        },
                        "ttl" : {
                          "description" : "Cache ttl",
                          "type" : "number"
                        },
                        "url" : {
                          "description" : "JWKS url",
                          "type" : "string"
                        },
                        "timeout" : {
                          "description" : "Timeout when fetching JWKS",
                          "type" : "number"
                        },
                        "kty" : {
                          "description" : "Key type",
                          "type" : "string"
                        },
                        "privateKey" : {
                          "description" : "Private key (for signing)",
                          "type" : "string"
                        },
                        "proxy" : {
                          "description" : "Web proxy for http client",
                          "oneOfConstraints" : [ ],
                          "type" : "object",
                          "properties" : { }
                        },
                        "onlyExposedCerts" : {
                          "description" : "Use only exposed certs",
                          "type" : "boolean"
                        },
                        "size" : {
                          "format" : "int32",
                          "description" : "SHA function size",
                          "type" : "integer"
                        }
                      }
                    },
                    "verificationSettings" : {
                      "description" : "Verification settings",
                      "type" : "object",
                      "properties" : {
                        "fields" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Fields validation"
                        },
                        "arrayFields" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Fields array validation"
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of strategy",
                      "type" : "string",
                      "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                    },
                    "strict" : {
                      "description" : "If the token already exists in the request, then fail",
                      "type" : "boolean"
                    },
                    "token" : {
                      "description" : "The default token",
                      "type" : "object"
                    }
                  }
                },
                "enabled" : {
                  "description" : "Verifier enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Verifier excluded paths"
          },
          "algoSettings" : {
            "description" : "Algo settings",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "source" : {
            "description" : "Token source",
            "$ref" : "#/components/schemas/otoroshi.models.JwtTokenLocation"
          },
          "type" : {
            "description" : "the kind of verifier",
            "type" : "string",
            "enum" : [ "global", "local", "ref" ]
          },
          "strict" : {
            "description" : "Strict token verification",
            "type" : "boolean"
          },
          "strategy" : {
            "description" : "Token strategy",
            "$ref" : "#/components/schemas/otoroshi.models.VerifierStrategy"
          },
          "enabled" : {
            "description" : "Verifier enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.utils.gzip.GzipConfig" : {
        "description" : "Settings for gzip support",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for gzip support",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for gzip support",
              "properties" : {
                "compressionLevel" : {
                  "format" : "int32",
                  "description" : "Compression level (0 - 9)",
                  "type" : "integer"
                },
                "blackList" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "blocklisted content types"
                },
                "chunkedThreshold" : {
                  "format" : "int32",
                  "description" : "Chunk size",
                  "type" : "integer"
                },
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Excluded paths"
                },
                "bufferSize" : {
                  "format" : "int32",
                  "description" : "Buffer size in bytes",
                  "type" : "integer"
                },
                "whiteList" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "allow listed content types"
                },
                "enabled" : {
                  "description" : "Gzip enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "compressionLevel" : {
            "format" : "int32",
            "description" : "Compression level (0 - 9)",
            "type" : "integer"
          },
          "blackList" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "blocklisted content types"
          },
          "chunkedThreshold" : {
            "format" : "int32",
            "description" : "Chunk size",
            "type" : "integer"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "bufferSize" : {
            "format" : "int32",
            "description" : "Buffer size in bytes",
            "type" : "integer"
          },
          "whiteList" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "allow listed content types"
          },
          "enabled" : {
            "description" : "Gzip enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.Webhook" : {
        "description" : "Settings for webhook call",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for webhook call",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for webhook call",
              "type" : "object",
              "properties" : {
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Headers to authorize the call or whatever"
                },
                "mtlsConfig" : {
                  "description" : "TLS config when calling webhook",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "url" : {
                  "description" : "The URL where events are posted",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Headers to authorize the call or whatever"
          },
          "mtlsConfig" : {
            "description" : "TLS config when calling webhook",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "url" : {
            "description" : "The URL where events are posted",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.VerifierStrategy" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.DefaultToken"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.PassThrough"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.Sign"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.Transform"
        } ]
      },
      "otoroshi.models.DefaultToken" : {
        "description" : "Default jwt token when no other token validated",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Default jwt token when no other token validated",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Default jwt token when no other token validated",
              "type" : "object",
              "properties" : {
                "verificationSettings" : {
                  "description" : "Verification settings",
                  "type" : "object",
                  "properties" : {
                    "fields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields validation"
                    },
                    "arrayFields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields array validation"
                    }
                  }
                },
                "strict" : {
                  "description" : "If the token already exists in the request, then fail",
                  "type" : "boolean"
                },
                "token" : {
                  "description" : "The default token",
                  "type" : "object"
                }
              }
            }
          }
        },
        "properties" : {
          "verificationSettings" : {
            "description" : "Verification settings",
            "$ref" : "#/components/schemas/otoroshi.models.VerificationSettings"
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          },
          "strict" : {
            "description" : "If the token already exists in the request, then fail",
            "type" : "boolean"
          },
          "token" : {
            "description" : "The default token",
            "type" : "object"
          }
        }
      },
      "otoroshi.models.RemainingQuotas" : {
        "description" : "Remaining quotas for an apikey",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Remaining quotas for an apikey",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Remaining quotas for an apikey",
              "properties" : {
                "currentCallsPerSec" : {
                  "format" : "int64",
                  "description" : "Current number of call per second",
                  "type" : "integer"
                },
                "remainingCallsPerSec" : {
                  "format" : "int64",
                  "description" : "Remaining number of call per second",
                  "type" : "integer"
                },
                "currentCallsPerDay" : {
                  "format" : "int64",
                  "description" : "Current number of call per day",
                  "type" : "integer"
                },
                "authorizedCallsPerDay" : {
                  "format" : "int64",
                  "description" : "Number of authorized call per day",
                  "type" : "integer"
                },
                "currentCallsPerMonth" : {
                  "format" : "int64",
                  "description" : "Current number of call per month",
                  "type" : "integer"
                },
                "remainingCallsPerMonth" : {
                  "format" : "int64",
                  "description" : "Remaining number of call per month",
                  "type" : "integer"
                },
                "authorizedCallsPerSec" : {
                  "format" : "int64",
                  "description" : "Number of authorized call per second",
                  "type" : "integer"
                },
                "authorizedCallsPerMonth" : {
                  "format" : "int64",
                  "description" : "Number of authorized call per month",
                  "type" : "integer"
                },
                "remainingCallsPerDay" : {
                  "format" : "int64",
                  "description" : "Remaining number of call per day",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "currentCallsPerSec" : {
            "format" : "int64",
            "description" : "Current number of call per second",
            "type" : "integer"
          },
          "remainingCallsPerSec" : {
            "format" : "int64",
            "description" : "Remaining number of call per second",
            "type" : "integer"
          },
          "currentCallsPerDay" : {
            "format" : "int64",
            "description" : "Current number of call per day",
            "type" : "integer"
          },
          "authorizedCallsPerDay" : {
            "format" : "int64",
            "description" : "Number of authorized call per day",
            "type" : "integer"
          },
          "currentCallsPerMonth" : {
            "format" : "int64",
            "description" : "Current number of call per month",
            "type" : "integer"
          },
          "remainingCallsPerMonth" : {
            "format" : "int64",
            "description" : "Remaining number of call per month",
            "type" : "integer"
          },
          "authorizedCallsPerSec" : {
            "format" : "int64",
            "description" : "Number of authorized call per second",
            "type" : "integer"
          },
          "authorizedCallsPerMonth" : {
            "format" : "int64",
            "description" : "Number of authorized call per month",
            "type" : "integer"
          },
          "remainingCallsPerDay" : {
            "format" : "int64",
            "description" : "Remaining number of call per day",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.GlobalScripts" : {
        "description" : "Settings to apply plugins globally",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings to apply plugins globally",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings to apply plugins globally",
              "properties" : {
                "jobConfig" : {
                  "description" : "jobs enabled",
                  "type" : "object"
                },
                "enabled" : {
                  "description" : "Global scripts enabled",
                  "type" : "boolean"
                },
                "transformersConfig" : {
                  "description" : "transformers config",
                  "type" : "object"
                },
                "transformersRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "transformers enabled"
                },
                "preRouteRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "pre-route plugins enabled"
                },
                "sinkConfig" : {
                  "description" : "sinks config",
                  "type" : "object"
                },
                "jobRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "running jobs"
                },
                "validatorRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "validator enabled"
                },
                "sinkRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "sinks enabled"
                },
                "preRouteConfig" : {
                  "description" : "pre-route config",
                  "type" : "object"
                },
                "validatorConfig" : {
                  "description" : "validator config",
                  "type" : "object"
                }
              }
            }
          }
        },
        "properties" : {
          "jobConfig" : {
            "description" : "jobs enabled",
            "type" : "object"
          },
          "enabled" : {
            "description" : "Global scripts enabled",
            "type" : "boolean"
          },
          "transformersConfig" : {
            "description" : "transformers config",
            "type" : "object"
          },
          "transformersRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "transformers enabled"
          },
          "preRouteRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "pre-route plugins enabled"
          },
          "sinkConfig" : {
            "description" : "sinks config",
            "type" : "object"
          },
          "jobRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "running jobs"
          },
          "validatorRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "validator enabled"
          },
          "sinkRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "sinks enabled"
          },
          "preRouteConfig" : {
            "description" : "pre-route config",
            "type" : "object"
          },
          "validatorConfig" : {
            "description" : "validator config",
            "type" : "object"
          }
        }
      },
      "ErrorResponse" : {
        "type" : "object",
        "description" : "Typical error returned by otoroshi",
        "properties" : {
          "error" : {
            "type" : "string",
            "description" : "the error name"
          },
          "error_description" : {
            "type" : "string",
            "description" : "A short description of the error if one"
          },
          "Otoroshi-Error" : {
            "type" : "string",
            "description" : "sometimes, the error name is here"
          },
          "Otoroshi-Error-Msg" : {
            "type" : "string",
            "description" : "sometimes, the error description is here"
          }
        }
      },
      "otoroshi.models.JwtAuthConstraints" : {
        "description" : "Settings to extract apikey from a jwt token",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings to extract apikey from a jwt token",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings to extract apikey from a jwt token",
              "type" : "object",
              "properties" : {
                "headerName" : {
                  "description" : "Header name to extract jwt token",
                  "type" : "string"
                },
                "maxJwtLifespanSecs" : {
                  "format" : "int64",
                  "description" : "Check if token does not have a long lifespan",
                  "type" : "integer"
                },
                "keyPairSigned" : {
                  "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                  "type" : "boolean"
                },
                "secretSigned" : {
                  "description" : "Jwt token signed with the client_secret",
                  "type" : "boolean"
                },
                "queryName" : {
                  "description" : "Query param name to extract jwt token",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Constraint enabled",
                  "type" : "boolean"
                },
                "cookieName" : {
                  "description" : "Cookie name to extract jwt token",
                  "type" : "string"
                },
                "includeRequestAttributes" : {
                  "description" : "Jwt token should include verb and path",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "keyPairSigned" : {
            "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
            "type" : "boolean"
          },
          "cookieName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Cookie name to extract jwt token"
          },
          "queryName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Query param name to extract jwt token"
          },
          "headerName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to extract jwt token"
          },
          "secretSigned" : {
            "description" : "Jwt token signed with the client_secret",
            "type" : "boolean"
          },
          "maxJwtLifespanSecs" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "integer",
              "format" : "int64"
            } ],
            "description" : "Check if token does not have a long lifespan"
          },
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "includeRequestAttributes" : {
            "description" : "Jwt token should include verb and path",
            "type" : "boolean"
          }
        }
      },
      "Empty" : {
        "type" : "object",
        "description" : "an empty body. Useful for RPC like endpoints"
      },
      "otoroshi.models.ServiceGroupIdentifier" : {
        "type" : "string",
        "description" : "the id of a group prefixed by 'group_'"
      },
      "otoroshi.script.AccessValidatorRef" : {
        "description" : "References to access validation plugins",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "References to access validation plugins",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "References to access validation plugins",
              "properties" : {
                "enabled" : {
                  "description" : "Access validator plugins enabled",
                  "type" : "boolean"
                },
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Excluded paths"
                },
                "refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Enabled plugins"
                },
                "config" : {
                  "description" : "Access validator plugins configuration",
                  "type" : "object"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Access validator plugins enabled",
            "type" : "boolean"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          },
          "config" : {
            "description" : "Access validator plugins configuration",
            "type" : "object"
          }
        }
      },
      "otoroshi.ssl.pki.models.GenCertResponse" : {
        "description" : "Response for a certificate generation operation",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Response for a certificate generation operation",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Response for a certificate generation operation",
              "type" : "object",
              "properties" : {
                "csr" : {
                  "description" : "CSR (PEM encoded)",
                  "type" : "string"
                },
                "csrQuery" : {
                  "description" : "JSON generation query",
                  "type" : "object",
                  "properties" : {
                    "duration" : {
                      "description" : "Certificate lifespan",
                      "type" : "number"
                    },
                    "includeAIA" : {
                      "description" : "Include AIA extension (if generated from otoroshi CA)",
                      "type" : "boolean"
                    },
                    "signatureAlg" : {
                      "description" : "Signature algorithm",
                      "type" : "string"
                    },
                    "digestAlg" : {
                      "description" : "Digest algo",
                      "type" : "string"
                    },
                    "hosts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Certificate SANs"
                    },
                    "subject" : {
                      "description" : "Certificate subject",
                      "type" : "string"
                    },
                    "name" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Certificate name"
                    },
                    "client" : {
                      "description" : "Is cert client ?",
                      "type" : "boolean"
                    },
                    "existingSerialNumber" : {
                      "format" : "int64",
                      "description" : "",
                      "type" : "integer"
                    },
                    "ca" : {
                      "description" : "Is cert ca ?",
                      "type" : "boolean"
                    },
                    "key" : {
                      "description" : "Keypair specs",
                      "type" : "object",
                      "properties" : {
                        "algo" : {
                          "description" : "Keypair algorithm",
                          "type" : "string"
                        },
                        "size" : {
                          "format" : "int32",
                          "description" : "Keypair size",
                          "type" : "integer"
                        }
                      }
                    }
                  }
                },
                "serial" : {
                  "format" : "int64",
                  "description" : "Certificate serial number",
                  "type" : "integer"
                },
                "cert" : {
                  "description" : "Cert (PEM encoded)",
                  "type" : "string"
                },
                "caChain" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string",
                    "description" : "pem encoded X509 certificate"
                  },
                  "description" : "Ca chain (PEM encoded)"
                },
                "ca" : {
                  "description" : "Ca cert (PEM encoded)",
                  "type" : "string"
                },
                "key" : {
                  "description" : "Private key (PEM encoded)",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "ca" : {
            "description" : "Ca cert (PEM encoded)",
            "type" : "string"
          },
          "caChain" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "pem encoded X509 certificate"
            },
            "description" : "Ca chain (PEM encoded)"
          },
          "csrQuery" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
            } ],
            "description" : "JSON generation query"
          },
          "cert" : {
            "description" : "Cert (PEM encoded)",
            "type" : "string"
          },
          "serial" : {
            "format" : "int64",
            "description" : "Certificate serial number",
            "type" : "integer"
          },
          "key" : {
            "description" : "Private key (PEM encoded)",
            "type" : "string"
          },
          "csr" : {
            "description" : "CSR (PEM encoded)",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.PrivateAppsUser" : {
        "description" : "User session for private apps",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "User session for private apps",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "User session for private apps",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "lastRefresh" : {
                  "description" : "Session last refresh (if OAuth refresh_token supported)",
                  "type" : "number"
                },
                "profile" : {
                  "description" : "Session user profile",
                  "type" : "object"
                },
                "authConfigId" : {
                  "description" : "Auth module id that created the session",
                  "type" : "string"
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "token" : {
                  "description" : "Session tokens (from OAuth)",
                  "type" : "object"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "expiredAt" : {
                  "description" : "Session expiration date",
                  "type" : "number"
                },
                "createdAt" : {
                  "description" : "Creation date of the session",
                  "type" : "number"
                },
                "randomId" : {
                  "description" : "Session random id",
                  "type" : "string"
                },
                "name" : {
                  "description" : "Entity name",
                  "type" : "string"
                },
                "realm" : {
                  "description" : "Session realm name",
                  "type" : "string"
                },
                "email" : {
                  "description" : "Session user email",
                  "type" : "string"
                },
                "otoroshiData" : {
                  "description" : "Otoroshi oriented metadata",
                  "type" : "object"
                }
              }
            }
          }
        },
        "properties" : {
          "realm" : {
            "description" : "Session realm name",
            "type" : "string"
          },
          "token" : {
            "description" : "Session tokens (from OAuth)",
            "type" : "object"
          },
          "expiredAt" : {
            "description" : "Session expiration date",
            "type" : "number"
          },
          "profile" : {
            "description" : "Session user profile",
            "type" : "object"
          },
          "lastRefresh" : {
            "description" : "Session last refresh (if OAuth refresh_token supported)",
            "type" : "number"
          },
          "randomId" : {
            "description" : "Session random id",
            "type" : "string"
          },
          "email" : {
            "description" : "Session user email",
            "type" : "string"
          },
          "createdAt" : {
            "description" : "Creation date of the session",
            "type" : "number"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "authConfigId" : {
            "description" : "Auth module id that created the session",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "otoroshiData" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "Otoroshi oriented metadata"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          }
        }
      },
      "HostMetrics" : {
        "type" : "object",
        "description" : "Host metrics"
      },
      "AlertEventList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.events.AlertEvent"
        }
      },
      "otoroshi.models.HealthCheck" : {
        "description" : "Healthcheck settings for a service",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Healthcheck settings for a service",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Healthcheck settings for a service",
              "properties" : {
                "enabled" : {
                  "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                  "type" : "boolean"
                },
                "url" : {
                  "description" : "The URL to check",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Whether or not healthcheck is enabled on the current service descriptor",
            "type" : "boolean"
          },
          "url" : {
            "description" : "The URL to check",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.SnowMonkeyConfig" : {
        "description" : "Settings for the snow monkey (chaos engineering)",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for the snow monkey (chaos engineering)",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for the snow monkey (chaos engineering)",
              "type" : "object",
              "properties" : {
                "dryRun" : {
                  "description" : "Whether or not outages will actualy impact requests",
                  "type" : "boolean"
                },
                "targetGroups" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Groups impacted by Snow Monkey. If empty, all groups will be impacted"
                },
                "includeUserFacingDescriptors" : {
                  "description" : "Whether or not user facing apps. will be impacted by Snow Monkey",
                  "type" : "boolean"
                },
                "outageDurationTo" : {
                  "description" : "End of outage duration range",
                  "type" : "number"
                },
                "outageDurationFrom" : {
                  "description" : "Start of outage duration range",
                  "type" : "number"
                },
                "startTime" : {
                  "description" : "Start time of Snow Monkey each day",
                  "type" : "string"
                },
                "stopTime" : {
                  "description" : "Stop time of Snow Monkey each day",
                  "type" : "string"
                },
                "chaosConfig" : {
                  "description" : "Chaos settings",
                  "type" : "object",
                  "properties" : {
                    "badResponsesFaultConfig" : {
                      "description" : "Settings for bad responses",
                      "type" : "object",
                      "properties" : {
                        "responses" : {
                          "description" : "The possibles responses",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "status" : {
                                "format" : "int32",
                                "description" : "The HTTP status for the response",
                                "type" : "integer"
                              },
                              "body" : {
                                "description" : "The body of the HTTP response",
                                "type" : "string"
                              },
                              "headers" : {
                                "type" : "object",
                                "additionalProperties" : {
                                  "type" : "string"
                                },
                                "description" : "The HTTP headers of the response"
                              }
                            }
                          }
                        },
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        }
                      }
                    },
                    "largeResponseFaultConfig" : {
                      "description" : "Settings for large responses",
                      "type" : "object",
                      "properties" : {
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        },
                        "additionalResponseSize" : {
                          "format" : "int32",
                          "description" : "Add n 0 bytes",
                          "type" : "integer"
                        }
                      }
                    },
                    "latencyInjectionFaultConfig" : {
                      "description" : "Settings for latency injection",
                      "type" : "object",
                      "properties" : {
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        },
                        "from" : {
                          "description" : "The start range of latency added to the request",
                          "type" : "number"
                        },
                        "to" : {
                          "description" : "The end range of latency added to the request",
                          "type" : "number"
                        }
                      }
                    },
                    "largeRequestFaultConfig" : {
                      "description" : "Settings for large requests",
                      "type" : "object",
                      "properties" : {
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        },
                        "additionalRequestSize" : {
                          "format" : "int32",
                          "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                          "type" : "integer"
                        }
                      }
                    },
                    "enabled" : {
                      "description" : "Whether or not this config is enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "timesPerDay" : {
                  "format" : "int32",
                  "description" : "Number of time per day each service will be outage",
                  "type" : "integer"
                },
                "outageStrategy" : {
                  "description" : "",
                  "type" : "string",
                  "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
                },
                "enabled" : {
                  "description" : "Whether or not this config is enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "dryRun" : {
            "description" : "Whether or not outages will actualy impact requests",
            "type" : "boolean"
          },
          "outageDurationTo" : {
            "description" : "End of outage duration range",
            "type" : "number"
          },
          "chaosConfig" : {
            "description" : "Chaos settings",
            "$ref" : "#/components/schemas/otoroshi.models.ChaosConfig"
          },
          "timesPerDay" : {
            "format" : "int32",
            "description" : "Number of time per day each service will be outage",
            "type" : "integer"
          },
          "outageDurationFrom" : {
            "description" : "Start of outage duration range",
            "type" : "number"
          },
          "startTime" : {
            "description" : "Start time of Snow Monkey each day",
            "type" : "string"
          },
          "includeUserFacingDescriptors" : {
            "description" : "Whether or not user facing apps. will be impacted by Snow Monkey",
            "type" : "boolean"
          },
          "targetGroups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Groups impacted by Snow Monkey. If empty, all groups will be impacted"
          },
          "enabled" : {
            "description" : "Whether or not this config is enabled",
            "type" : "boolean"
          },
          "stopTime" : {
            "description" : "Stop time of Snow Monkey each day",
            "type" : "string"
          },
          "outageStrategy" : {
            "description" : "",
            "$ref" : "#/components/schemas/otoroshi.models.OutageStrategy"
          }
        }
      },
      "otoroshi.models.IndexSettings" : {
        "description" : "???",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "???",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "???",
              "type" : "object",
              "properties" : {
                "clientSide" : {
                  "description" : "???",
                  "type" : "boolean"
                },
                "interval" : {
                  "description" : "???",
                  "type" : "object",
                  "properties" : { }
                }
              }
            }
          }
        },
        "properties" : {
          "clientSide" : {
            "description" : "???",
            "type" : "boolean"
          },
          "interval" : {
            "description" : "???",
            "$ref" : "#/components/schemas/otoroshi.models.IndexSettingsInterval"
          }
        }
      },
      "otoroshi.auth.NameIDFormat" : {
        "description" : "The name ID Format to use for the subject",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "The name ID Format to use for the subject",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "The name ID Format to use for the subject",
              "properties" : { }
            }
          }
        },
        "properties" : { }
      },
      "otoroshi.models.ZoneMatch" : {
        "description" : "Match a target if in the same zone",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Match a target if in the same zone",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Match a target if in the same zone",
              "properties" : {
                "zone" : {
                  "description" : "Zone name",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "zone" : {
            "description" : "Zone name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          }
        }
      },
      "otoroshi.auth.GroupFilter" : {
        "description" : "Filter for a LDAP group",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Filter for a LDAP group",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Filter for a LDAP group",
              "type" : "object",
              "properties" : {
                "team" : {
                  "description" : "The team associated with this group",
                  "type" : "string"
                },
                "tenant" : {
                  "description" : "The tenant associated with this group",
                  "type" : "object",
                  "properties" : {
                    "canWrite" : {
                      "description" : "Can this access right write data",
                      "type" : "boolean"
                    },
                    "value" : {
                      "description" : "Access pattern",
                      "type" : "string"
                    },
                    "canRead" : {
                      "description" : "Can this access right read data",
                      "type" : "boolean"
                    }
                  }
                },
                "group" : {
                  "description" : "The LDAP group",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "group" : {
            "description" : "The LDAP group",
            "type" : "string"
          },
          "tenant" : {
            "description" : "The tenant associated with this group",
            "$ref" : "#/components/schemas/otoroshi.models.TenantAccess"
          },
          "team" : {
            "description" : "The team associated with this group",
            "type" : "string"
          }
        }
      },
      "CodeBody" : {
        "type" : "string",
        "description" : "Plugin scala code"
      },
      "otoroshi.models.AutoCert" : {
        "description" : "Settings to generate certificates on the fly",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings to generate certificates on the fly",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings to generate certificates on the fly",
              "type" : "object",
              "properties" : {
                "caRef" : {
                  "description" : "Generate cert from the following CA",
                  "type" : "string"
                },
                "allowed" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "allowed domains"
                },
                "replyNicely" : {
                  "description" : "Reply TLS error with an auto generated certificate for the domain",
                  "type" : "boolean"
                },
                "notAllowed" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "not allowed domains"
                },
                "enabled" : {
                  "description" : "Enable auto cert",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "allowed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "allowed domains"
          },
          "enabled" : {
            "description" : "Enable auto cert",
            "type" : "boolean"
          },
          "replyNicely" : {
            "description" : "Reply TLS error with an auto generated certificate for the domain",
            "type" : "boolean"
          },
          "notAllowed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "not allowed domains"
          },
          "caRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Generate cert from the following CA"
          }
        }
      },
      "CertValidResponse" : {
        "type" : "object",
        "description" : "Is certificate valid",
        "properties" : {
          "valid" : {
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.RestrictionPath" : {
        "description" : "Represent an http request on which restrictions will apply",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Represent an http request on which restrictions will apply",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Represent an http request on which restrictions will apply",
              "properties" : {
                "method" : {
                  "description" : "Method of the http request",
                  "type" : "string"
                },
                "path" : {
                  "description" : "Path of the http request",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "method" : {
            "description" : "Method of the http request",
            "type" : "string"
          },
          "path" : {
            "description" : "Path of the http request",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.GeolocationMatch" : {
        "description" : "Match a target if in the same geo location radius",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Match a target if in the same geo location radius",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Match a target if in the same geo location radius",
              "type" : "object",
              "properties" : {
                "positions" : {
                  "description" : "Possible positions",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "latitude" : {
                        "format" : "double",
                        "description" : "Latitude of the position",
                        "type" : "number"
                      },
                      "longitude" : {
                        "format" : "double",
                        "description" : "Longitude of the position",
                        "type" : "number"
                      },
                      "radius" : {
                        "format" : "double",
                        "description" : "Radius of the circle in meters",
                        "type" : "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "positions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.GeoPositionRadius"
            },
            "description" : "Possible positions"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          }
        }
      },
      "BulkResponseBody" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "the id of the entity"
            },
            "status" : {
              "type" : "integer",
              "description" : "operation status"
            },
            "error" : {
              "type" : "string",
              "description" : "the error of the operation if one"
            }
          },
          "required" : [ "uid", "status" ]
        }
      },
      "otoroshi.models.BadResponsesFaultConfig" : {
        "description" : "List of bad response settings",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "List of bad response settings",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "List of bad response settings",
              "type" : "object",
              "properties" : {
                "responses" : {
                  "description" : "The possibles responses",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "status" : {
                        "format" : "int32",
                        "description" : "The HTTP status for the response",
                        "type" : "integer"
                      },
                      "body" : {
                        "description" : "The body of the HTTP response",
                        "type" : "string"
                      },
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "The HTTP headers of the response"
                      }
                    }
                  }
                },
                "ratio" : {
                  "format" : "double",
                  "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                  "type" : "number"
                }
              }
            }
          }
        },
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "responses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.BadResponse"
            },
            "description" : "The possibles responses"
          }
        }
      },
      "otoroshi.models.Target" : {
        "description" : "A target model for a service (destination for forwarded requests)",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "A target model for a service (destination for forwarded requests)",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "A target model for a service (destination for forwarded requests)",
              "type" : "object",
              "properties" : {
                "predicate" : {
                  "description" : "Predicate to choose this target",
                  "oneOfConstraints" : [ {
                    "required" : [ "type" ]
                  }, {
                    "required" : [ "type", "dc" ]
                  }, {
                    "required" : [ "positions", "type" ]
                  }, {
                    "required" : [ "provider", "type" ]
                  }, {
                    "required" : [ "rack", "provider", "dataCenter", "zone", "type", "region" ]
                  }, {
                    "required" : [ "rack", "type" ]
                  }, {
                    "required" : [ "type", "region" ]
                  }, {
                    "required" : [ "zone", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "rack" : {
                      "description" : "Rack name",
                      "type" : "string"
                    },
                    "provider" : {
                      "description" : "Provider name",
                      "type" : "string"
                    },
                    "dataCenter" : {
                      "description" : "Datacenter name",
                      "type" : "string"
                    },
                    "zone" : {
                      "description" : "Zone name",
                      "type" : "string"
                    },
                    "positions" : {
                      "description" : "Possible positions",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "latitude" : {
                            "format" : "double",
                            "description" : "Latitude of the position",
                            "type" : "number"
                          },
                          "longitude" : {
                            "format" : "double",
                            "description" : "Longitude of the position",
                            "type" : "number"
                          },
                          "radius" : {
                            "format" : "double",
                            "description" : "Radius of the circle in meters",
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of predicate",
                      "type" : "string",
                      "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                    },
                    "region" : {
                      "description" : "Region name",
                      "type" : "string"
                    },
                    "dc" : {
                      "description" : "DC name",
                      "type" : "string"
                    }
                  }
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata for this target"
                },
                "protocol" : {
                  "description" : "Protocol for the target",
                  "type" : "string"
                },
                "scheme" : {
                  "description" : "The protocol used for communication. Can be http or https",
                  "type" : "string"
                },
                "mtlsConfig" : {
                  "description" : "TLS settings to contact this target",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "host" : {
                  "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                  "type" : "string"
                },
                "ipAddress" : {
                  "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                  "type" : "string"
                },
                "weight" : {
                  "format" : "int32",
                  "description" : "The weight of the target when choosing",
                  "type" : "integer"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Tags for this target"
                }
              }
            }
          }
        },
        "properties" : {
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Tags for this target"
          },
          "host" : {
            "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
            "type" : "string"
          },
          "weight" : {
            "format" : "int32",
            "description" : "The weight of the target when choosing",
            "type" : "integer"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata for this target"
          },
          "protocol" : {
            "description" : "Protocol for the target",
            "type" : "string"
          },
          "predicate" : {
            "description" : "Predicate to choose this target",
            "$ref" : "#/components/schemas/otoroshi.models.TargetPredicate"
          },
          "ipAddress" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI"
          },
          "mtlsConfig" : {
            "description" : "TLS settings to contact this target",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "scheme" : {
            "description" : "The protocol used for communication. Can be http or https",
            "type" : "string"
          }
        }
      },
      "SimpleAdminList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
        }
      },
      "otoroshi.models.Proxies" : {
        "description" : "Various web proxy settings for http client",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Various web proxy settings for http client",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Various web proxy settings for http client",
              "type" : "object",
              "properties" : {
                "auth" : {
                  "description" : "Web proxy used to call OAuth providers",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "clevercloud" : {
                  "description" : "Web proxy used to call clevercloud",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "authority" : {
                  "description" : "Web proxy used to check authorities",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "elastic" : {
                  "description" : "Web proxy used to call elastic",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "alertEmails" : {
                  "description" : "Web proxy used to send alert emails",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "services" : {
                  "description" : "Web proxy used to access services targets",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "eventsWebhooks" : {
                  "description" : "Web proxy used to call webhooks",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "jwk" : {
                  "description" : "Web proxy used to fetch jwks",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                }
              }
            }
          }
        },
        "properties" : {
          "elastic" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to call elastic"
          },
          "eventsWebhooks" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to call webhooks"
          },
          "jwk" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to fetch jwks"
          },
          "auth" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to call OAuth providers"
          },
          "clevercloud" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to call clevercloud"
          },
          "alertEmails" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to send alert emails"
          },
          "authority" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to check authorities"
          },
          "services" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to access services targets"
          }
        }
      },
      "otoroshi.models.ApiKeyRotation" : {
        "description" : "Settings for automatic apikey rotation with grace period",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for automatic apikey rotation with grace period",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for automatic apikey rotation with grace period",
              "type" : "object",
              "properties" : {
                "gracePeriod" : {
                  "format" : "int64",
                  "description" : "period (in hours) during which both secrets works",
                  "type" : "integer"
                },
                "rotationEvery" : {
                  "format" : "int64",
                  "description" : "Rotate every n hours",
                  "type" : "integer"
                },
                "nextSecret" : {
                  "description" : "Next client_secret value",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Rotation enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Rotation enabled",
            "type" : "boolean"
          },
          "rotationEvery" : {
            "format" : "int64",
            "description" : "Rotate every n hours",
            "type" : "integer"
          },
          "gracePeriod" : {
            "format" : "int64",
            "description" : "period (in hours) during which both secrets works",
            "type" : "integer"
          },
          "nextSecret" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Next client_secret value"
          }
        }
      },
      "otoroshi.utils.http.CacheConnectionSettings" : {
        "description" : "The settings for http cached connection at host level",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "The settings for http cached connection at host level",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "The settings for http cached connection at host level",
              "properties" : {
                "enabled" : {
                  "description" : "Enable Cached connections at host tevel",
                  "type" : "boolean"
                },
                "queueSize" : {
                  "format" : "int32",
                  "description" : "The size for the request queue",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Enable Cached connections at host tevel",
            "type" : "boolean"
          },
          "queueSize" : {
            "format" : "int32",
            "description" : "The size for the request queue",
            "type" : "integer"
          }
        }
      },
      "otoroshi.tcp.SniSettings" : {
        "description" : "SNI settings for a TCP proxy",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "SNI settings for a TCP proxy",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "SNI settings for a TCP proxy",
              "type" : "object",
              "properties" : {
                "forwardIfNoMatch" : {
                  "description" : "",
                  "type" : "boolean"
                },
                "enabled" : {
                  "description" : "SNI extraction enabled",
                  "type" : "boolean"
                },
                "forwardsTo" : {
                  "description" : "forwards call to",
                  "type" : "object",
                  "properties" : {
                    "port" : {
                      "format" : "int32",
                      "description" : "Target port",
                      "type" : "integer"
                    },
                    "ip" : {
                      "description" : "Target ip",
                      "type" : "string"
                    },
                    "host" : {
                      "description" : "Target host",
                      "type" : "string"
                    },
                    "tls" : {
                      "description" : "Use tls",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "SNI extraction enabled",
            "type" : "boolean"
          },
          "forwardIfNoMatch" : {
            "description" : "",
            "type" : "boolean"
          },
          "forwardsTo" : {
            "description" : "forwards call to",
            "$ref" : "#/components/schemas/otoroshi.tcp.TcpTarget"
          }
        }
      },
      "otoroshi.models.LoadBalancing" : {
        "type" : "object",
        "description" : "Loadbalancing strategy",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
          },
          "ratio" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "otoroshi.models.RedirectionSettings" : {
        "description" : "Settings for routing redirection",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for routing redirection",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for routing redirection",
              "properties" : {
                "enabled" : {
                  "description" : "Whether or not redirection is enabled",
                  "type" : "boolean"
                },
                "code" : {
                  "format" : "int32",
                  "description" : "The http redirect code",
                  "type" : "integer"
                },
                "to" : {
                  "description" : "The location for redirection",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Whether or not redirection is enabled",
            "type" : "boolean"
          },
          "code" : {
            "format" : "int32",
            "description" : "The http redirect code",
            "type" : "integer"
          },
          "to" : {
            "description" : "The location for redirection",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.OtoroshiAdmin" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
        } ]
      },
      "otoroshi.models.JwtVerifier" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.LocalJwtVerifier"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RefJwtVerifier"
        } ]
      },
      "otoroshi.auth.BasicAuthModuleConfig" : {
        "description" : "Authentication module that let you use otoroshi as the identity provider",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Authentication module that let you use otoroshi as the identity provider",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Authentication module that let you use otoroshi as the identity provider",
              "type" : "object",
              "properties" : {
                "sessionMaxAge" : {
                  "format" : "int32",
                  "description" : "max age for the session cookie in seconds",
                  "type" : "integer"
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "metadata of the module"
                },
                "sessionCookieValues" : {
                  "description" : "Settings for the session cookie",
                  "type" : "object",
                  "properties" : {
                    "httpOnly" : {
                      "description" : "Is cookie accessible on server side only",
                      "type" : "boolean"
                    },
                    "secure" : {
                      "description" : "Is cookie for https only",
                      "type" : "boolean"
                    }
                  }
                },
                "basicAuth" : {
                  "description" : "Use standard basic auth or web login form",
                  "type" : "boolean"
                },
                "name" : {
                  "description" : "name of the module",
                  "type" : "string"
                },
                "webauthn" : {
                  "description" : "Use webauthn for login",
                  "type" : "boolean"
                },
                "id" : {
                  "description" : "id of the module",
                  "type" : "string"
                },
                "_loc" : {
                  "description" : "location of the module",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "users" : {
                  "description" : "Users attached to the module",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "metadata" : {
                        "description" : "User metadata",
                        "type" : "object"
                      },
                      "password" : {
                        "description" : "User password (bcrypt hashed)",
                        "type" : "string"
                      },
                      "rights" : {
                        "description" : "User rights",
                        "type" : "object",
                        "properties" : {
                          "rights" : {
                            "description" : "Access rights of a user",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "teams" : {
                                  "description" : "Access rights on teams",
                                  "type" : "array",
                                  "items" : {
                                    "type" : "object",
                                    "properties" : {
                                      "canRead" : {
                                        "description" : "Can this access right read data",
                                        "type" : "boolean"
                                      },
                                      "value" : {
                                        "description" : "Access pattern",
                                        "type" : "string"
                                      },
                                      "canWrite" : {
                                        "description" : "Can this access right write data",
                                        "type" : "boolean"
                                      }
                                    }
                                  }
                                },
                                "tenant" : {
                                  "description" : "Access rights on organizations",
                                  "type" : "object",
                                  "properties" : {
                                    "canWrite" : {
                                      "description" : "Can this access right write data",
                                      "type" : "boolean"
                                    },
                                    "value" : {
                                      "description" : "Access pattern",
                                      "type" : "string"
                                    },
                                    "canRead" : {
                                      "description" : "Can this access right read data",
                                      "type" : "boolean"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "name" : {
                        "description" : "User name",
                        "type" : "string"
                      },
                      "webauthn" : {
                        "description" : "Webauthn details",
                        "type" : "object",
                        "properties" : {
                          "handle" : {
                            "description" : "Webauthn user handle",
                            "type" : "string"
                          },
                          "credentials" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "object"
                            },
                            "description" : "Webauthn credentials"
                          }
                        }
                      },
                      "email" : {
                        "description" : "User email",
                        "type" : "string"
                      },
                      "tags" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "User tags"
                      }
                    }
                  }
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "desc" : {
                  "description" : "description of the module",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "max age for the session cookie in seconds",
            "type" : "integer"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "metadata of the module"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "basicAuth" : {
            "description" : "Use standard basic auth or web login form",
            "type" : "boolean"
          },
          "name" : {
            "description" : "name of the module",
            "type" : "string"
          },
          "webauthn" : {
            "description" : "Use webauthn for login",
            "type" : "boolean"
          },
          "id" : {
            "description" : "id of the module",
            "type" : "string"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "_loc" : {
            "description" : "location of the module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.BasicAuthUser"
            },
            "description" : "Users attached to the module"
          },
          "desc" : {
            "description" : "description of the module",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          }
        }
      },
      "otoroshi.utils.mailer.EmailLocation" : {
        "description" : "Email location settings",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Email location settings",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Email location settings",
              "properties" : {
                "name" : {
                  "description" : "Destination name",
                  "type" : "string"
                },
                "email" : {
                  "description" : "Email address",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "name" : {
            "description" : "Destination name",
            "type" : "string"
          },
          "email" : {
            "description" : "Email address",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.RackMatch" : {
        "description" : "Match a target if in the same rack",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Match a target if in the same rack",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Match a target if in the same rack",
              "properties" : {
                "rack" : {
                  "description" : "Rack name",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "rack" : {
            "description" : "Rack name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          }
        }
      },
      "otoroshi.models.ESAlgoSettings" : {
        "description" : "Settings to use elliptic curve signing algorithm",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings to use elliptic curve signing algorithm",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings to use elliptic curve signing algorithm",
              "type" : "object",
              "properties" : {
                "privateKey" : {
                  "description" : "The EC private key. If used for verification, can be null",
                  "type" : "string"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                },
                "publicKey" : {
                  "description" : "The EC private key. If used for signing, can be null",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "privateKey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The EC private key. If used for verification, can be null"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "The EC private key. If used for signing, can be null",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.models.NoneGeolocationSettings" : {
        "type" : "object",
        "description" : "No geolocation extraction",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "none" ]
          }
        }
      },
      "WebAuthnRegistrationStartBody" : {
        "type" : "object",
        "description" : ""
      },
      "PatchDocument" : {
        "type" : "object",
        "description" : "A JSONPatch document as defined by RFC 6902",
        "required" : [ "op", "path" ],
        "properties" : {
          "op" : {
            "type" : "string",
            "description" : "The operation to be performed",
            "enum" : [ "add", "remove", "replace", "move", "copy", "test" ]
          },
          "path" : {
            "type" : "string",
            "description" : "A JSON-Pointer"
          },
          "value" : {
            "type" : "object",
            "description" : "The value to be used within the operations."
          },
          "from" : {
            "type" : "string",
            "description" : "A string containing a JSON Pointer value."
          }
        }
      },
      "otoroshi.models.Tenant" : {
        "description" : "An otoroshi model for an organization (otoroshi-ui)",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "An otoroshi model for an organization (otoroshi-ui)",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "An otoroshi model for an organization (otoroshi-ui)",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "name" : {
                  "description" : "Entity name",
                  "type" : "string"
                },
                "description" : {
                  "description" : "Entity description",
                  "type" : "string"
                },
                "id" : {
                  "description" : "Entity id",
                  "type" : "string"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                }
              }
            }
          }
        },
        "properties" : {
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "id" : {
            "description" : "Entity id",
            "$ref" : "#/components/schemas/otoroshi.models.TenantId"
          }
        }
      },
      "otoroshi.models.BackOfficeUser" : {
        "description" : "User session for otoroshi-ui admins",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "User session for otoroshi-ui admins",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "User session for otoroshi-ui admins",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "lastRefresh" : {
                  "description" : "Last refresh of the session (OAuth with refresh tokens)",
                  "type" : "number"
                },
                "profile" : {
                  "description" : "Session user profile",
                  "type" : "object"
                },
                "authConfigId" : {
                  "description" : "Session created from auth module id",
                  "type" : "string"
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "token" : {
                  "description" : "Session tokens (only if OAuth/OIDC)",
                  "type" : "object"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "createdAt" : {
                  "description" : "Creation date for the session",
                  "type" : "number"
                },
                "expiredAt" : {
                  "description" : "Expiration date for the session",
                  "type" : "number"
                },
                "randomId" : {
                  "description" : "Session user random id",
                  "type" : "string"
                },
                "simpleLogin" : {
                  "description" : "Session generated from a simple login module (like basic or ldap)",
                  "type" : "boolean"
                },
                "rights" : {
                  "description" : "Session user rights",
                  "type" : "object",
                  "properties" : {
                    "rights" : {
                      "description" : "Access rights of a user",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "teams" : {
                            "description" : "Access rights on teams",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          },
                          "tenant" : {
                            "description" : "Access rights on organizations",
                            "type" : "object",
                            "properties" : {
                              "canWrite" : {
                                "description" : "Can this access right write data",
                                "type" : "boolean"
                              },
                              "value" : {
                                "description" : "Access pattern",
                                "type" : "string"
                              },
                              "canRead" : {
                                "description" : "Can this access right read data",
                                "type" : "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "name" : {
                  "description" : "Session user name",
                  "type" : "string"
                },
                "email" : {
                  "description" : "User email",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "randomId" : {
            "description" : "Session user random id",
            "type" : "string"
          },
          "profile" : {
            "description" : "Session user profile",
            "type" : "object"
          },
          "authConfigId" : {
            "description" : "Session created from auth module id",
            "type" : "string"
          },
          "rights" : {
            "description" : "Session user rights",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "createdAt" : {
            "description" : "Creation date for the session",
            "type" : "number"
          },
          "token" : {
            "description" : "Session tokens (only if OAuth/OIDC)",
            "type" : "object"
          },
          "name" : {
            "description" : "Session user name",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "email" : {
            "description" : "User email",
            "type" : "string"
          },
          "simpleLogin" : {
            "description" : "Session generated from a simple login module (like basic or ldap)",
            "type" : "boolean"
          },
          "expiredAt" : {
            "description" : "Expiration date for the session",
            "type" : "number"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "lastRefresh" : {
            "description" : "Last refresh of the session (OAuth with refresh tokens)",
            "type" : "number"
          }
        }
      },
      "otoroshi.models.GeolocationSettings" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.IpStackGeolocationSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.MaxmindGeolocationSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.NoneGeolocationSettings"
        } ]
      },
      "otoroshi.events.AlertEvent" : {
        "type" : "object",
        "description" : "Alert trail event"
      },
      "otoroshi.models.ApiDescriptor" : {
        "description" : "Represent if a service exposes an API with an optional url to an openapi descriptor",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Represent if a service exposes an API with an optional url to an openapi descriptor",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Represent if a service exposes an API with an optional url to an openapi descriptor",
              "type" : "object",
              "properties" : {
                "exposeApi" : {
                  "description" : "Is this an API",
                  "type" : "boolean"
                },
                "openApiDescriptorUrl" : {
                  "description" : "openapi descriptor url",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "exposeApi" : {
            "description" : "Is this an API",
            "type" : "boolean"
          },
          "openApiDescriptorUrl" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "openapi descriptor url"
          }
        }
      },
      "otoroshi.auth.SessionCookieValues" : {
        "description" : "The configuration for session cookie",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "The configuration for session cookie",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "The configuration for session cookie",
              "properties" : {
                "httpOnly" : {
                  "description" : "Is cookie accessible on server side only",
                  "type" : "boolean"
                },
                "secure" : {
                  "description" : "Is cookie for https only",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "httpOnly" : {
            "description" : "Is cookie accessible on server side only",
            "type" : "boolean"
          },
          "secure" : {
            "description" : "Is cookie for https only",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.utils.letsencrypt.LetsEncryptSettings" : {
        "description" : "Settings for connection to a let's encrypt (or ACME) server",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for connection to a let's encrypt (or ACME) server",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for connection to a let's encrypt (or ACME) server",
              "properties" : {
                "privateKey" : {
                  "description" : "Let's encrypt (ACME) private key",
                  "type" : "string"
                },
                "contacts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Let's encrypt (ACME) contacts"
                },
                "emails" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Let's encrypt (ACME) contact emails"
                },
                "enabled" : {
                  "description" : "Let's encrypt (ACME) enabled",
                  "type" : "boolean"
                },
                "publicKey" : {
                  "description" : "Let's encrypt (ACME) public key",
                  "type" : "string"
                },
                "server" : {
                  "description" : "Let's encrypt (ACME) server",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "privateKey" : {
            "description" : "Let's encrypt (ACME) private key",
            "type" : "string"
          },
          "contacts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Let's encrypt (ACME) contacts"
          },
          "emails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Let's encrypt (ACME) contact emails"
          },
          "enabled" : {
            "description" : "Let's encrypt (ACME) enabled",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Let's encrypt (ACME) public key",
            "type" : "string"
          },
          "server" : {
            "description" : "Let's encrypt (ACME) server",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.ApiKeyRouteMatcher" : {
        "description" : "Routing settings based on apikeys metadata and tags",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Routing settings based on apikeys metadata and tags",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Routing settings based on apikeys metadata and tags",
              "properties" : {
                "oneTagIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "outing if one tag presents in apikey"
                },
                "noneMetaKeysIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if none meta keys presents in apikey"
                },
                "oneMetaIn" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Routing if one meta presents in apikey"
                },
                "oneMetaKeyIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if one meta key presents in apikey"
                },
                "allMetaKeysIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if all meta keys presents in apikey"
                },
                "noneTagIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if none tags presents in apikey"
                },
                "allTagsIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if all tags presents in apikey"
                },
                "allMetaIn" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Routing if all meta presents in apikey"
                },
                "noneMetaIn" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Routing if none meta presents in apikey"
                }
              }
            }
          }
        },
        "properties" : {
          "oneTagIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "outing if one tag presents in apikey"
          },
          "noneMetaKeysIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if none meta keys presents in apikey"
          },
          "oneMetaIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Routing if one meta presents in apikey"
          },
          "oneMetaKeyIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if one meta key presents in apikey"
          },
          "allMetaKeysIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if all meta keys presents in apikey"
          },
          "noneTagIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if none tags presents in apikey"
          },
          "allTagsIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if all tags presents in apikey"
          },
          "allMetaIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Routing if all meta presents in apikey"
          },
          "noneMetaIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Routing if none meta presents in apikey"
          }
        }
      },
      "otoroshi.models.Outage" : {
        "description" : "A snowmonkey outage model",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "A snowmonkey outage model",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "A snowmonkey outage model",
              "properties" : {
                "descriptorName" : {
                  "description" : "Service descriptor name",
                  "type" : "string"
                },
                "descriptorId" : {
                  "description" : "Service descriptor id",
                  "type" : "string"
                },
                "until" : {
                  "description" : "Outage ending date",
                  "type" : "string"
                },
                "duration" : {
                  "description" : "Outage duration",
                  "type" : "number"
                },
                "startedAt" : {
                  "description" : "Outage starting date",
                  "type" : "number"
                }
              }
            }
          }
        },
        "properties" : {
          "descriptorName" : {
            "description" : "Service descriptor name",
            "type" : "string"
          },
          "descriptorId" : {
            "description" : "Service descriptor id",
            "type" : "string"
          },
          "until" : {
            "description" : "Outage ending date",
            "type" : "string"
          },
          "duration" : {
            "description" : "Outage duration",
            "type" : "number"
          },
          "startedAt" : {
            "description" : "Outage starting date",
            "type" : "number"
          }
        }
      },
      "otoroshi.utils.mailer.SendgridSettings" : {
        "description" : "Settings for the sendgrid mailer",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for the sendgrid mailer",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for the sendgrid mailer",
              "type" : "object",
              "properties" : {
                "apiKey" : {
                  "description" : "Sendgrid apikey",
                  "type" : "string"
                },
                "to" : {
                  "description" : "Destination email address",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Destination name",
                        "type" : "string"
                      },
                      "email" : {
                        "description" : "Email address",
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "apiKey" : {
            "description" : "Sendgrid apikey",
            "type" : "string"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.EmailLocation"
            },
            "description" : "Destination email address"
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "ByteStreamBody" : {
        "type" : "string",
        "description" : ""
      },
      "play.api.libs.ws.DefaultWSProxyServer" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The hostname of the proxy server."
          },
          "port" : {
            "type" : "string",
            "description" : "The port of the proxy server."
          },
          "protocol" : {
            "type" : "string",
            "description" : "The protocol of the proxy server.  Use \"http\" or \"https\".  Defaults to \"http\" if not specified."
          },
          "principal" : {
            "type" : "string",
            "description" : "The principal (aka username) of the credentials for the proxy server."
          },
          "password" : {
            "type" : "string",
            "description" : "The password for the credentials for the proxy server."
          },
          "ntlmDomain" : {
            "type" : "string",
            "description" : "The ntlm domain for the proxy server."
          },
          "encoding" : {
            "type" : "string",
            "description" : "The realm's charset."
          },
          "nonProxyHosts" : {
            "type" : "string",
            "description" : "The non proxied hosts"
          }
        },
        "description" : "Proxy server"
      },
      "PemCertificateBody" : {
        "type" : "string",
        "description" : "PEM encoded certificate"
      },
      "otoroshi.models.LargeRequestFaultConfig" : {
        "description" : "Settings for a large request fault (chaos engineering)",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for a large request fault (chaos engineering)",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for a large request fault (chaos engineering)",
              "properties" : {
                "ratio" : {
                  "format" : "double",
                  "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                  "type" : "number"
                },
                "additionalRequestSize" : {
                  "format" : "int32",
                  "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "additionalRequestSize" : {
            "format" : "int32",
            "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
            "type" : "integer"
          }
        }
      },
      "OutagesList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.Outage"
        }
      },
      "otoroshi.script.PreRoutingRef" : {
        "description" : "References to pre-routing plugins",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "References to pre-routing plugins",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "References to pre-routing plugins",
              "properties" : {
                "enabled" : {
                  "description" : "pre-routing plugins enabled",
                  "type" : "boolean"
                },
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Excluded paths"
                },
                "refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Enabled plugins"
                },
                "config" : {
                  "description" : "pre-routing plugins configuration",
                  "type" : "object"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "pre-routing plugins enabled",
            "type" : "boolean"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          },
          "config" : {
            "description" : "pre-routing plugins configuration",
            "type" : "object"
          }
        }
      },
      "otoroshi.models.DataExporterConfig" : {
        "description" : "Module to export otoroshi specific events to whatever destination you want",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Module to export otoroshi specific events to whatever destination you want",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Module to export otoroshi specific events to whatever destination you want",
              "type" : "object",
              "properties" : {
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata"
                },
                "type" : {
                  "description" : "Type of data exporter",
                  "type" : "string",
                  "enum" : [ "kafka", "pulsar", "elastic", "webhook", "file", "mailer", "custom", "none", "console", "metrics" ]
                },
                "_loc" : {
                  "description" : "location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "enabled" : {
                  "description" : "Boolean",
                  "type" : "boolean"
                },
                "groupDuration" : {
                  "description" : "duration",
                  "type" : "number"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "jsonWorkers" : {
                  "format" : "int32",
                  "description" : "nb workers",
                  "type" : "integer"
                },
                "name" : {
                  "description" : "Name",
                  "type" : "string"
                },
                "groupSize" : {
                  "format" : "int32",
                  "description" : "Group size",
                  "type" : "integer"
                },
                "id" : {
                  "description" : "Id",
                  "type" : "string"
                },
                "projection" : {
                  "description" : "projection",
                  "type" : "object"
                },
                "filtering" : {
                  "description" : "filtering",
                  "type" : "object",
                  "properties" : {
                    "include" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      },
                      "description" : "Exclude the events matching one of those filters"
                    },
                    "exclude" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object"
                      },
                      "description" : "Include the events matching one of those filters"
                    }
                  }
                },
                "config" : {
                  "description" : "Data Exporter config",
                  "oneOfConstraints" : [ {
                    "required" : [ "servers", "keyPass", "mtlsConfig", "topic", "truststore", "keystore", "sendEvents", "type" ]
                  }, {
                    "required" : [ "mtlsConfig", "tlsTrustCertsFilePath", "namespace", "topic", "type", "uri", "tenant" ]
                  }, {
                    "required" : [ "type" ]
                  }, {
                    "required" : [ "clusterUri", "headers", "password", "indexSettings", "mtlsConfig", "index", "type", "applyTemplate", "version", "user" ]
                  }, {
                    "required" : [ "ref", "type", "config" ]
                  }, {
                    "required" : [ "path", "maxFileSize", "type" ]
                  }, {
                    "required" : [ "type", "labels" ]
                  }, {
                    "required" : [ "headers", "mtlsConfig", "type", "url" ]
                  }, {
                    "required" : [ "type" ]
                  }, {
                    "required" : [ "headers", "to", "type", "url" ]
                  }, {
                    "required" : [ "type" ]
                  }, {
                    "required" : [ "headers", "to", "type", "url" ]
                  }, {
                    "required" : [ "eu", "apiKey", "domain", "to", "type" ]
                  }, {
                    "required" : [ "apiKeyPrivate", "apiKeyPublic", "to", "type" ]
                  }, {
                    "required" : [ "type" ]
                  }, {
                    "required" : [ "apiKey", "to", "type" ]
                  }, {
                    "required" : [ "eu", "apiKey", "domain", "to", "type" ]
                  }, {
                    "required" : [ "apiKeyPrivate", "apiKeyPublic", "to", "type" ]
                  }, {
                    "required" : [ "type" ]
                  }, {
                    "required" : [ "apiKey", "to", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "clusterUri" : {
                      "description" : "Cluster URL",
                      "type" : "string"
                    },
                    "apiKey" : {
                      "description" : "Sendgrid apikey",
                      "type" : "string"
                    },
                    "indexSettings" : {
                      "description" : "???",
                      "type" : "object",
                      "properties" : {
                        "clientSide" : {
                          "description" : "???",
                          "type" : "boolean"
                        },
                        "interval" : {
                          "description" : "???",
                          "type" : "object",
                          "properties" : { }
                        }
                      }
                    },
                    "mtlsConfig" : {
                      "description" : "TLS config when calling webhook",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "tlsTrustCertsFilePath" : {
                      "description" : "Trusted cert path",
                      "type" : "string"
                    },
                    "apiKeyPrivate" : {
                      "description" : "Private key",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of mailer",
                      "type" : "string",
                      "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
                    },
                    "path" : {
                      "description" : "File path",
                      "type" : "string"
                    },
                    "ref" : {
                      "description" : "Script id",
                      "type" : "string"
                    },
                    "password" : {
                      "description" : "Elastic password",
                      "type" : "string"
                    },
                    "servers" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "URLs of the kafka servers"
                    },
                    "truststore" : {
                      "description" : "Optional truststore",
                      "type" : "string"
                    },
                    "keystore" : {
                      "description" : "Optional keystore",
                      "type" : "string"
                    },
                    "sendEvents" : {
                      "description" : "Send events to it, or just connect",
                      "type" : "boolean"
                    },
                    "applyTemplate" : {
                      "description" : "???",
                      "type" : "boolean"
                    },
                    "tenant" : {
                      "description" : "Pulsar tenant",
                      "type" : "string"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Sender headers"
                    },
                    "index" : {
                      "description" : "Index name",
                      "type" : "string"
                    },
                    "maxFileSize" : {
                      "format" : "int32",
                      "description" : "Max file size in bytes",
                      "type" : "integer"
                    },
                    "uri" : {
                      "description" : "Pulsar cluster url",
                      "type" : "string"
                    },
                    "version" : {
                      "description" : "???",
                      "type" : "string"
                    },
                    "url" : {
                      "description" : "Sender URL",
                      "type" : "string"
                    },
                    "labels" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Exposed labels"
                    },
                    "eu" : {
                      "description" : "European tenant",
                      "type" : "boolean"
                    },
                    "keyPass" : {
                      "description" : "Optional keypass",
                      "type" : "string"
                    },
                    "domain" : {
                      "description" : "Mailgun domain",
                      "type" : "string"
                    },
                    "namespace" : {
                      "description" : "Pulsar namespace",
                      "type" : "string"
                    },
                    "topic" : {
                      "description" : "Pulsar topic",
                      "type" : "string"
                    },
                    "apiKeyPublic" : {
                      "description" : "Public key",
                      "type" : "string"
                    },
                    "to" : {
                      "description" : "Destination email address",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "name" : {
                            "description" : "Destination name",
                            "type" : "string"
                          },
                          "email" : {
                            "description" : "Email address",
                            "type" : "string"
                          }
                        }
                      }
                    },
                    "config" : {
                      "description" : "Script config",
                      "type" : "object"
                    },
                    "user" : {
                      "description" : "Elastic user",
                      "type" : "string"
                    }
                  }
                },
                "sendWorkers" : {
                  "format" : "int32",
                  "description" : "send workers",
                  "type" : "integer"
                },
                "desc" : {
                  "description" : "Description",
                  "type" : "string"
                },
                "bufferSize" : {
                  "format" : "int32",
                  "description" : "buffer size",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "desc" : {
            "description" : "Description",
            "type" : "string"
          },
          "_loc" : {
            "description" : "location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "bufferSize" : {
            "format" : "int32",
            "description" : "buffer size",
            "type" : "integer"
          },
          "jsonWorkers" : {
            "format" : "int32",
            "description" : "nb workers",
            "type" : "integer"
          },
          "groupDuration" : {
            "description" : "duration",
            "type" : "number"
          },
          "groupSize" : {
            "format" : "int32",
            "description" : "Group size",
            "type" : "integer"
          },
          "type" : {
            "description" : "Type of data exporter",
            "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfigType"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "sendWorkers" : {
            "format" : "int32",
            "description" : "send workers",
            "type" : "integer"
          },
          "id" : {
            "description" : "Id",
            "type" : "string"
          },
          "name" : {
            "description" : "Name",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata"
          },
          "config" : {
            "description" : "Data Exporter config",
            "$ref" : "#/components/schemas/otoroshi.models.Exporter"
          },
          "projection" : {
            "description" : "projection",
            "type" : "object"
          },
          "enabled" : {
            "description" : "Boolean",
            "type" : "boolean"
          },
          "filtering" : {
            "description" : "filtering",
            "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfigFiltering"
          }
        }
      },
      "otoroshi.ssl.pki.models.GenKeyPairResponse" : {
        "description" : "Response for a keypair generation operation",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Response for a keypair generation operation",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Response for a keypair generation operation",
              "properties" : {
                "publicKey" : {
                  "description" : "Public key (PEM encoded)",
                  "type" : "string"
                },
                "privateKey" : {
                  "description" : "Private key (PEM encoded)",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "publicKey" : {
            "description" : "Public key (PEM encoded)",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (PEM encoded)",
            "type" : "string"
          }
        }
      },
      "BulkBody" : {
        "type" : "string",
        "description" : "Body composed of stringified JSON lines, each one representing an entity"
      },
      "PemCsrBody" : {
        "type" : "string",
        "description" : "PEM encoded csr"
      },
      "Unknown" : {
        "type" : "object",
        "description" : "value used by the openapi generator when no matching type found. Should be fixed in a near future."
      },
      "otoroshi.models.CustomHeadersAuthConstraints" : {
        "description" : "Settings to extract apikey from a custom headers",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings to extract apikey from a custom headers",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings to extract apikey from a custom headers",
              "type" : "object",
              "properties" : {
                "clientSecretHeaderName" : {
                  "description" : "Header name to find client_secret",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Constraint enabled",
                  "type" : "boolean"
                },
                "clientIdHeaderName" : {
                  "description" : "Header name to find client_id",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "clientIdHeaderName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to find client_id"
          },
          "clientSecretHeaderName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to find client_secret"
          }
        }
      },
      "otoroshi.models.TlsSettings" : {
        "description" : "Global TLS settings. The default domain that will be picked if no certificate matches the current request",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Global TLS settings. The default domain that will be picked if no certificate matches the current request",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Global TLS settings. The default domain that will be picked if no certificate matches the current request",
              "type" : "object",
              "properties" : {
                "randomIfNotFound" : {
                  "description" : "Use a random one",
                  "type" : "boolean"
                },
                "trustedCAsServer" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "List for CAs trusted by otoroshi when performing TLS termination"
                },
                "includeJdkCaClient" : {
                  "description" : "Use known JDK CAs to build trust when performing request from otoroshi to backends",
                  "type" : "boolean"
                },
                "defaultDomain" : {
                  "description" : "Default domain to choose if not found from current certificates",
                  "type" : "string"
                },
                "includeJdkCaServer" : {
                  "description" : "Use known JDK CAs to build trust for incoming request",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "trustedCAsServer" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List for CAs trusted by otoroshi when performing TLS termination"
          },
          "includeJdkCaClient" : {
            "description" : "Use known JDK CAs to build trust when performing request from otoroshi to backends",
            "type" : "boolean"
          },
          "randomIfNotFound" : {
            "description" : "Use a random one",
            "type" : "boolean"
          },
          "defaultDomain" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Default domain to choose if not found from current certificates"
          },
          "includeJdkCaServer" : {
            "description" : "Use known JDK CAs to build trust for incoming request",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.MetricsSettings" : {
        "description" : "Settings for metrics labels",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for metrics labels",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for metrics labels",
              "properties" : {
                "labels" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Exposed labels"
                }
              }
            }
          }
        },
        "properties" : {
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Exposed labels"
          }
        }
      },
      "otoroshi.models.Sign" : {
        "description" : "jwt token re-sign policy settings",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "jwt token re-sign policy settings",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "jwt token re-sign policy settings",
              "type" : "object",
              "properties" : {
                "algoSettings" : {
                  "description" : "Re-signing jwt token settings",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "proxy", "headers", "mtlsConfig", "type", "ttl", "url", "timeout" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings for http client",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "verificationSettings" : {
                  "description" : "Verification settings",
                  "type" : "object",
                  "properties" : {
                    "fields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields validation"
                    },
                    "arrayFields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields array validation"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "algoSettings" : {
            "description" : "Re-signing jwt token settings",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "verificationSettings" : {
            "description" : "Verification settings",
            "$ref" : "#/components/schemas/otoroshi.models.VerificationSettings"
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          }
        }
      },
      "otoroshi.models.PassThrough" : {
        "description" : "jwt token validation policicy that just validate the token",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "jwt token validation policicy that just validate the token",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "jwt token validation policicy that just validate the token",
              "type" : "object",
              "properties" : {
                "verificationSettings" : {
                  "description" : "Verification settings",
                  "type" : "object",
                  "properties" : {
                    "fields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields validation"
                    },
                    "arrayFields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields array validation"
                    }
                  }
                }
              }
            }
          }
        },
        "properties" : {
          "verificationSettings" : {
            "description" : "Verification settings",
            "$ref" : "#/components/schemas/otoroshi.models.VerificationSettings"
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          }
        }
      },
      "otoroshi.events.PulsarConfig" : {
        "description" : "Settings for connection to a pulsar cluster",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for connection to a pulsar cluster",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for connection to a pulsar cluster",
              "type" : "object",
              "properties" : {
                "mtlsConfig" : {
                  "description" : "TLS config to access the cluster",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "namespace" : {
                  "description" : "Pulsar namespace",
                  "type" : "string"
                },
                "tlsTrustCertsFilePath" : {
                  "description" : "Trusted cert path",
                  "type" : "string"
                },
                "topic" : {
                  "description" : "Pulsar topic",
                  "type" : "string"
                },
                "uri" : {
                  "description" : "Pulsar cluster url",
                  "type" : "string"
                },
                "tenant" : {
                  "description" : "Pulsar tenant",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "mtlsConfig" : {
            "description" : "TLS config to access the cluster",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "tlsTrustCertsFilePath" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Trusted cert path"
          },
          "namespace" : {
            "description" : "Pulsar namespace",
            "type" : "string"
          },
          "topic" : {
            "description" : "Pulsar topic",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "uri" : {
            "description" : "Pulsar cluster url",
            "type" : "string"
          },
          "tenant" : {
            "description" : "Pulsar tenant",
            "type" : "string"
          }
        }
      },
      "otoroshi.auth.SamlAuthModuleConfig" : {
        "description" : "Configuration of SAML Authentication module",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Configuration of SAML Authentication module",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Configuration of SAML Authentication module",
              "type" : "object",
              "properties" : {
                "validateSignature" : {
                  "description" : "Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider",
                  "type" : "boolean"
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata of the SAML module"
                },
                "ssoProtocolBinding" : {
                  "description" : "Protocol binding used to send login request to identity provider",
                  "type" : "object",
                  "properties" : { }
                },
                "sessionCookieValues" : {
                  "description" : "Settings for the session cookie",
                  "type" : "object",
                  "properties" : {
                    "httpOnly" : {
                      "description" : "Is cookie accessible on server side only",
                      "type" : "boolean"
                    },
                    "secure" : {
                      "description" : "Is cookie for https only",
                      "type" : "boolean"
                    }
                  }
                },
                "validatingCertificates" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Certificates used to validate SAML response signature"
                },
                "signature" : {
                  "description" : "Algorithm and canonicalization method to sign SAML documents",
                  "type" : "object",
                  "properties" : {
                    "canocalizationMethod" : {
                      "description" : "Canonicalization Method for XML Signatures",
                      "type" : "object",
                      "properties" : { }
                    },
                    "algorithm" : {
                      "description" : "Algorithm to sign documents or assertions",
                      "type" : "object",
                      "properties" : { }
                    }
                  }
                },
                "credentials" : {
                  "description" : "Certificates and private keys to sign and encrypt SAML documents/assertions",
                  "type" : "object",
                  "properties" : {
                    "signedDocuments" : {
                      "description" : "Indicates if SAML documents have to be sign before sending to identity provider",
                      "type" : "boolean"
                    },
                    "encryptedAssertions" : {
                      "description" : "Indicates if assertions have to be encrypt before sending to identity provider",
                      "type" : "boolean"
                    },
                    "signingKey" : {
                      "description" : "Pair of configuration used to sign documents",
                      "type" : "object",
                      "properties" : {
                        "privateKey" : {
                          "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                          "type" : "string"
                        },
                        "certificate" : {
                          "description" : "PEM certificate used to sign SAML requests send to identity provider",
                          "type" : "string"
                        },
                        "certId" : {
                          "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                          "type" : "string"
                        },
                        "useOtoroshiCertificate" : {
                          "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                          "type" : "boolean"
                        }
                      }
                    },
                    "encryptionKey" : {
                      "description" : "Pair of configuration used to encrypt assertions",
                      "type" : "object",
                      "properties" : {
                        "privateKey" : {
                          "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                          "type" : "string"
                        },
                        "certificate" : {
                          "description" : "PEM certificate used to sign SAML requests send to identity provider",
                          "type" : "string"
                        },
                        "certId" : {
                          "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                          "type" : "string"
                        },
                        "useOtoroshiCertificate" : {
                          "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                          "type" : "boolean"
                        }
                      }
                    }
                  }
                },
                "validateAssertions" : {
                  "description" : "Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider",
                  "type" : "boolean"
                },
                "_loc" : {
                  "description" : "Location of the SAML module",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "issuer" : {
                  "description" : "Issuer of the SAML requests",
                  "type" : "string"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "SAML module tags"
                },
                "sessionMaxAge" : {
                  "format" : "int32",
                  "description" : "Max age of the session",
                  "type" : "integer"
                },
                "usedNameIDAsEmail" : {
                  "description" : "Is name ID used as email ?",
                  "type" : "boolean"
                },
                "singleLogoutUrl" : {
                  "description" : "URL used by otoroshi to disconnect users from identity provider",
                  "type" : "string"
                },
                "name" : {
                  "description" : "Name of the SAML module",
                  "type" : "string"
                },
                "emailAttributeName" : {
                  "description" : "Field name to find email in user profile returned by identity provider",
                  "type" : "string"
                },
                "singleSignOnUrl" : {
                  "description" : "URL used by otoroshi to redirect users to identity provider login page",
                  "type" : "string"
                },
                "nameIDFormat" : {
                  "description" : "Format of the name ID",
                  "type" : "object",
                  "properties" : { }
                },
                "singleLogoutProtocolBinding" : {
                  "description" : "Protocol binding used by identity provider to logout users",
                  "type" : "object",
                  "properties" : { }
                },
                "id" : {
                  "description" : "Id of the SAML Auth module",
                  "type" : "string"
                },
                "desc" : {
                  "description" : "Description of the SAML Auth module",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "validateSignature" : {
            "description" : "Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider",
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata of the SAML module"
          },
          "ssoProtocolBinding" : {
            "description" : "Protocol binding used to send login request to identity provider",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLProtocolBinding"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "validatingCertificates" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Certificates used to validate SAML response signature"
          },
          "signature" : {
            "description" : "Algorithm and canonicalization method to sign SAML documents",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLSignature"
          },
          "credentials" : {
            "description" : "Certificates and private keys to sign and encrypt SAML documents/assertions",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLCredentials"
          },
          "validateAssertions" : {
            "description" : "Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider",
            "type" : "boolean"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "_loc" : {
            "description" : "Location of the SAML module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "issuer" : {
            "description" : "Issuer of the SAML requests",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "SAML module tags"
          },
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "Max age of the session",
            "type" : "integer"
          },
          "usedNameIDAsEmail" : {
            "description" : "Is name ID used as email ?",
            "type" : "boolean"
          },
          "singleLogoutUrl" : {
            "description" : "URL used by otoroshi to disconnect users from identity provider",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the SAML module",
            "type" : "string"
          },
          "emailAttributeName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Field name to find email in user profile returned by identity provider"
          },
          "singleSignOnUrl" : {
            "description" : "URL used by otoroshi to redirect users to identity provider login page",
            "type" : "string"
          },
          "nameIDFormat" : {
            "description" : "Format of the name ID",
            "$ref" : "#/components/schemas/otoroshi.auth.NameIDFormat"
          },
          "singleLogoutProtocolBinding" : {
            "description" : "Protocol binding used by identity provider to logout users",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLProtocolBinding"
          },
          "id" : {
            "description" : "Id of the SAML Auth module",
            "type" : "string"
          },
          "desc" : {
            "description" : "Description of the SAML Auth module",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.Restrictions" : {
        "description" : "Http requests restrictions for a service or an apikey",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Http requests restrictions for a service or an apikey",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Http requests restrictions for a service or an apikey",
              "type" : "object",
              "properties" : {
                "allowed" : {
                  "description" : "Allowed paths",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "method" : {
                        "description" : "Method of the http request",
                        "type" : "string"
                      },
                      "path" : {
                        "description" : "Path of the http request",
                        "type" : "string"
                      }
                    }
                  }
                },
                "allowLast" : {
                  "description" : "Evalute allowed paths after everything else",
                  "type" : "boolean"
                },
                "forbidden" : {
                  "description" : "Forbidden paths (return 403)",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "method" : {
                        "description" : "Method of the http request",
                        "type" : "string"
                      },
                      "path" : {
                        "description" : "Path of the http request",
                        "type" : "string"
                      }
                    }
                  }
                },
                "notFound" : {
                  "description" : "Not found paths (return 404)",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "method" : {
                        "description" : "Method of the http request",
                        "type" : "string"
                      },
                      "path" : {
                        "description" : "Path of the http request",
                        "type" : "string"
                      }
                    }
                  }
                },
                "enabled" : {
                  "description" : "Restrictions enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "forbidden" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.RestrictionPath"
            },
            "description" : "Forbidden paths (return 403)"
          },
          "allowed" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.RestrictionPath"
            },
            "description" : "Allowed paths"
          },
          "notFound" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.RestrictionPath"
            },
            "description" : "Not found paths (return 404)"
          },
          "allowLast" : {
            "description" : "Evalute allowed paths after everything else",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "Restrictions enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.events.StatsdConfig" : {
        "description" : "Settings for connection to a statsd agent",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for connection to a statsd agent",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for connection to a statsd agent",
              "properties" : {
                "datadog" : {
                  "description" : "Datadog agent",
                  "type" : "boolean"
                },
                "host" : {
                  "description" : "The host of the StatsD agent",
                  "type" : "string"
                },
                "port" : {
                  "format" : "int32",
                  "description" : "The port of the StatsD agent",
                  "type" : "integer"
                }
              }
            }
          }
        },
        "properties" : {
          "datadog" : {
            "description" : "Datadog agent",
            "type" : "boolean"
          },
          "host" : {
            "description" : "The host of the StatsD agent",
            "type" : "string"
          },
          "port" : {
            "format" : "int32",
            "description" : "The port of the StatsD agent",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.JWKSAlgoSettings" : {
        "description" : "Settings to use keypair from JWKS for verification",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings to use keypair from JWKS for verification",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings to use keypair from JWKS for verification",
              "type" : "object",
              "properties" : {
                "kty" : {
                  "description" : "Key type",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Http header when fetching JWKS"
                },
                "proxy" : {
                  "description" : "Web proxy for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "mtlsConfig" : {
                  "description" : "TLS settings for http client",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "ttl" : {
                  "description" : "Cache ttl",
                  "type" : "number"
                },
                "url" : {
                  "description" : "JWKS url",
                  "type" : "string"
                },
                "timeout" : {
                  "description" : "Timeout when fetching JWKS",
                  "type" : "number"
                }
              }
            }
          }
        },
        "properties" : {
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "proxy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy for http client"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "mtlsConfig" : {
            "description" : "TLS settings for http client",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          }
        }
      },
      "otoroshi.models.IpFiltering" : {
        "description" : "Settings for ip address filtering for a service or globally",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for ip address filtering for a service or globally",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for ip address filtering for a service or globally",
              "properties" : {
                "whitelist" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Whitelisted IP addresses"
                },
                "blacklist" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Blacklisted IP addresses"
                }
              }
            }
          }
        },
        "properties" : {
          "whitelist" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Whitelisted IP addresses"
          },
          "blacklist" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Blacklisted IP addresses"
          }
        }
      },
      "otoroshi.ssl.pki.models.GenCsrResponse" : {
        "description" : "Response for a csr generation operation",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Response for a csr generation operation",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Response for a csr generation operation",
              "properties" : {
                "csr" : {
                  "description" : "CSR (PEM encoded)",
                  "type" : "string"
                },
                "publicKey" : {
                  "description" : "Public key (PEM encoded)",
                  "type" : "string"
                },
                "privateKey" : {
                  "description" : "Private key (PEM encoded)",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "csr" : {
            "description" : "CSR (PEM encoded)",
            "type" : "string"
          },
          "publicKey" : {
            "description" : "Public key (PEM encoded)",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (PEM encoded)",
            "type" : "string"
          }
        }
      },
      "otoroshi.auth.SAMLProtocolBinding" : {
        "description" : "Protocol binding used during SAML requests",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Protocol binding used during SAML requests",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Protocol binding used during SAML requests",
              "properties" : { }
            }
          }
        },
        "properties" : { }
      },
      "otoroshi.models.MaxmindGeolocationSettings" : {
        "description" : "Settings for connection to a maxmind db",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for connection to a maxmind db",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for connection to a maxmind db",
              "properties" : {
                "enabled" : {
                  "description" : "Geolocation using maxmind db enabled",
                  "type" : "boolean"
                },
                "path" : {
                  "description" : "Maxmlind db file path",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "path" : {
            "description" : "Maxmlind db file path",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of geolocation",
            "type" : "string",
            "enum" : [ "none", "maxmind", "ipstack" ]
          },
          "enabled" : {
            "description" : "Geolocation using maxmind db enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.LatencyInjectionFaultConfig" : {
        "description" : "Settings for a latency injection fault (chaos engineering)",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for a latency injection fault (chaos engineering)",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for a latency injection fault (chaos engineering)",
              "properties" : {
                "ratio" : {
                  "format" : "double",
                  "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                  "type" : "number"
                },
                "from" : {
                  "description" : "The start range of latency added to the request",
                  "type" : "number"
                },
                "to" : {
                  "description" : "The end range of latency added to the request",
                  "type" : "number"
                }
              }
            }
          }
        },
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "from" : {
            "description" : "The start range of latency added to the request",
            "type" : "number"
          },
          "to" : {
            "description" : "The end range of latency added to the request",
            "type" : "number"
          }
        }
      },
      "otoroshi.models.RSAKPAlgoSettings" : {
        "description" : "Settings to use RSA signing algorithm from a certificate keypair",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings to use RSA signing algorithm from a certificate keypair",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings to use RSA signing algorithm from a certificate keypair",
              "properties" : {
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                },
                "certId" : {
                  "description" : "Certificate id",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.utils.mailer.MailerSettings" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.ConsoleMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.GenericMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailgunSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailjetSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.NoneMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.SendgridSettings"
        } ]
      },
      "otoroshi.auth.Oauth1ModuleConfig" : {
        "description" : "Configuration of OAuth 1.0 module",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Configuration of OAuth 1.0 module",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Configuration of OAuth 1.0 module",
              "type" : "object",
              "properties" : {
                "profileURL" : {
                  "description" : "URL fetch by otoroshi to get user information from identity provider",
                  "type" : "string"
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "The metadata of the OAuth 1 module"
                },
                "requestTokenURL" : {
                  "description" : "URL fetch to get a request token during the first step of the authorization OAuth 1 flow",
                  "type" : "string"
                },
                "authorizeURL" : {
                  "description" : "The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider",
                  "type" : "string"
                },
                "sessionCookieValues" : {
                  "description" : "Settings for the session cookie",
                  "type" : "object",
                  "properties" : {
                    "httpOnly" : {
                      "description" : "Is cookie accessible on server side only",
                      "type" : "boolean"
                    },
                    "secure" : {
                      "description" : "Is cookie for https only",
                      "type" : "boolean"
                    }
                  }
                },
                "httpMethod" : {
                  "description" : "Method used to fetch access and request token",
                  "type" : "object",
                  "properties" : { }
                },
                "_loc" : {
                  "description" : "The location of the OAuth 1 module",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "OAuth module tags"
                },
                "sessionMaxAge" : {
                  "format" : "int32",
                  "description" : "Max age of the session",
                  "type" : "integer"
                },
                "consumerSecret" : {
                  "description" : "Client secret obtained from identity provider configuration",
                  "type" : "string"
                },
                "accessTokenURL" : {
                  "description" : "Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow",
                  "type" : "string"
                },
                "name" : {
                  "description" : "The name of the OAuth 1 module",
                  "type" : "string"
                },
                "rightsOverride" : {
                  "description" : "Overrides user rights of users connected by OAuth1 module",
                  "additionalProperties" : {
                    "type" : "object",
                    "properties" : {
                      "rights" : {
                        "description" : "Access rights of a user",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "teams" : {
                              "description" : "Access rights on teams",
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "canRead" : {
                                    "description" : "Can this access right read data",
                                    "type" : "boolean"
                                  },
                                  "value" : {
                                    "description" : "Access pattern",
                                    "type" : "string"
                                  },
                                  "canWrite" : {
                                    "description" : "Can this access right write data",
                                    "type" : "boolean"
                                  }
                                }
                              }
                            },
                            "tenant" : {
                              "description" : "Access rights on organizations",
                              "type" : "object",
                              "properties" : {
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "type" : "object"
                },
                "callbackURL" : {
                  "description" : "The location where the identity provider returns a browser after the user finishes authenticating with their IDP",
                  "type" : "string"
                },
                "id" : {
                  "description" : "Id of the module",
                  "type" : "string"
                },
                "consumerKey" : {
                  "description" : "Client ID obtained on identity provider",
                  "type" : "string"
                },
                "desc" : {
                  "description" : "Description of the oauth 1 module",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "profileURL" : {
            "description" : "URL fetch by otoroshi to get user information from identity provider",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata of the OAuth 1 module"
          },
          "authorizeURL" : {
            "description" : "The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider",
            "type" : "string"
          },
          "requestTokenURL" : {
            "description" : "URL fetch to get a request token during the first step of the authorization OAuth 1 flow",
            "type" : "string"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "httpMethod" : {
            "description" : "Method used to fetch access and request token",
            "$ref" : "#/components/schemas/otoroshi.auth.OAuth1Provider"
          },
          "_loc" : {
            "description" : "The location of the OAuth 1 module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "OAuth module tags"
          },
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "Max age of the session",
            "type" : "integer"
          },
          "consumerSecret" : {
            "description" : "Client secret obtained from identity provider configuration",
            "type" : "string"
          },
          "accessTokenURL" : {
            "description" : "Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow",
            "type" : "string"
          },
          "name" : {
            "description" : "The name of the OAuth 1 module",
            "type" : "string"
          },
          "rightsOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/otoroshi.models.UserRights"
            },
            "description" : "Overrides user rights of users connected by OAuth1 module"
          },
          "callbackURL" : {
            "description" : "The location where the identity provider returns a browser after the user finishes authenticating with their IDP",
            "type" : "string"
          },
          "id" : {
            "description" : "Id of the module",
            "type" : "string"
          },
          "consumerKey" : {
            "description" : "Client ID obtained on identity provider",
            "type" : "string"
          },
          "desc" : {
            "description" : "Description of the oauth 1 module",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.InQueryParam" : {
        "description" : "JWT token location (query param)",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "JWT token location (query param)",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "JWT token location (query param)",
              "properties" : {
                "name" : {
                  "description" : "Query param name",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "name" : {
            "description" : "Query param name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          }
        }
      },
      "otoroshi.models.EntityLocation" : {
        "description" : "Location of any entity (teams and organization)",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Location of any entity (teams and organization)",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Location of any entity (teams and organization)",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "tenant" : {
            "description" : "Organization of the current entity",
            "$ref" : "#/components/schemas/otoroshi.models.TenantId"
          },
          "teams" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.TeamId"
            },
            "description" : "Teams of the current entity"
          }
        }
      },
      "otoroshi.events.AuditEvent" : {
        "type" : "object",
        "description" : "Audit trail event"
      },
      "otoroshi.models.ErrorTemplate" : {
        "description" : "Service descriptor error template",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Service descriptor error template",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Service descriptor error template",
              "properties" : {
                "template50x" : {
                  "description" : "The 50x error html template",
                  "type" : "string"
                },
                "templateMaintenance" : {
                  "description" : "The maintenance html template",
                  "type" : "string"
                },
                "templateBuild" : {
                  "description" : "The build html template",
                  "type" : "string"
                },
                "serviceId" : {
                  "description" : "Service id for this template",
                  "type" : "string"
                },
                "messages" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Map of messages"
                },
                "template40x" : {
                  "description" : "The 40x error html template",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "template50x" : {
            "description" : "The 50x error html template",
            "type" : "string"
          },
          "templateMaintenance" : {
            "description" : "The maintenance html template",
            "type" : "string"
          },
          "templateBuild" : {
            "description" : "The build html template",
            "type" : "string"
          },
          "serviceId" : {
            "description" : "Service id for this template",
            "type" : "string"
          },
          "messages" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Map of messages"
          },
          "template40x" : {
            "description" : "The 40x error html template",
            "type" : "string"
          }
        }
      },
      "otoroshi.utils.mailer.NoneMailerSettings" : {
        "description" : "Settings for the /dev/null mailer",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings for the /dev/null mailer",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings for the /dev/null mailer",
              "properties" : { }
            }
          }
        },
        "properties" : {
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "otoroshi.models.SecComInfoTokenVersion" : {
        "type" : "string",
        "enum" : [ "Legacy", "Latest" ],
        "description" : "Version of the info token"
      },
      "GlobalConfigImportBody" : {
        "type" : "object",
        "description" : ""
      },
      "otoroshi.auth.AuthModuleConfig" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.auth.BasicAuthModuleConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.auth.GenericOauth2ModuleConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.auth.LdapAuthModuleConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.auth.Oauth1ModuleConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.auth.SamlAuthModuleConfig"
        } ]
      },
      "otoroshi.utils.mailer.GenericMailerSettings" : {
        "description" : "Settings for the generic mailer (http requests)",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Settings for the generic mailer (http requests)",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Settings for the generic mailer (http requests)",
              "type" : "object",
              "properties" : {
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Sender headers"
                },
                "to" : {
                  "description" : "Destination email address",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Destination name",
                        "type" : "string"
                      },
                      "email" : {
                        "description" : "Email address",
                        "type" : "string"
                      }
                    }
                  }
                },
                "url" : {
                  "description" : "Sender URL",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Sender headers"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.EmailLocation"
            },
            "description" : "Destination email address"
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          },
          "url" : {
            "description" : "Sender URL",
            "type" : "string"
          }
        }
      },
      "Null" : {
        "type" : "object",
        "description" : "no value object, used to represent a None option value"
      },
      "TargetsList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.Target"
        }
      },
      "otoroshi.auth.Credential" : {
        "description" : "Pair of raw certificate, private key and certId for SAML protocol",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "Pair of raw certificate, private key and certId for SAML protocol",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "Pair of raw certificate, private key and certId for SAML protocol",
              "type" : "object",
              "properties" : {
                "privateKey" : {
                  "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                  "type" : "string"
                },
                "certificate" : {
                  "description" : "PEM certificate used to sign SAML requests send to identity provider",
                  "type" : "string"
                },
                "certId" : {
                  "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                  "type" : "string"
                },
                "useOtoroshiCertificate" : {
                  "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "certificate" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "PEM certificate used to sign SAML requests send to identity provider"
          },
          "privateKey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Private key of the certificate used to sign SAML requests send to identity provider"
          },
          "certId" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Id of the certificate used to sign SAML requests send to identity provider"
          },
          "useOtoroshiCertificate" : {
            "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.WebAuthnOtoroshiAdmin" : {
        "description" : "An otoroshi admin user that uses webauthn at login",
        "type" : "object",
        "openAPIV3Schema" : {
          "description" : "An otoroshi admin user that uses webauthn at login",
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object"
            },
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "spec" : {
              "description" : "An otoroshi admin user that uses webauthn at login",
              "type" : "object",
              "properties" : {
                "createdAt" : {
                  "description" : "User creation date",
                  "type" : "number"
                },
                "password" : {
                  "description" : "User password",
                  "type" : "string"
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "credentials" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object"
                  },
                  "description" : "User webauthn credentials"
                },
                "rights" : {
                  "description" : "User rights",
                  "type" : "object",
                  "properties" : {
                    "rights" : {
                      "description" : "Access rights of a user",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "teams" : {
                            "description" : "Access rights on teams",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          },
                          "tenant" : {
                            "description" : "Access rights on organizations",
                            "type" : "object",
                            "properties" : {
                              "canWrite" : {
                                "description" : "Can this access right write data",
                                "type" : "boolean"
                              },
                              "value" : {
                                "description" : "Access pattern",
                                "type" : "string"
                              },
                              "canRead" : {
                                "description" : "Can this access right read data",
                                "type" : "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "handle" : {
                  "description" : "User webauthn handle",
                  "type" : "string"
                },
                "typ" : {
                  "description" : "Admin kind",
                  "type" : "string",
                  "enum" : [ "SIMPLE", "WEBAUTHN" ]
                },
                "label" : {
                  "description" : "User label",
                  "type" : "string"
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "username" : {
                  "description" : "User username",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "createdAt" : {
            "description" : "User creation date",
            "type" : "number"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "password" : {
            "description" : "User password",
            "type" : "string"
          },
          "credentials" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "User webauthn credentials"
          },
          "rights" : {
            "description" : "User rights",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "typ" : {
            "description" : "User type",
            "$ref" : "#/components/schemas/otoroshi.models.OtoroshiAdminType"
          },
          "handle" : {
            "description" : "User webauthn handle",
            "type" : "string"
          },
          "label" : {
            "description" : "User label",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of admin",
            "type" : "string",
            "enum" : [ "simple", "webauthn" ]
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "username" : {
            "description" : "User username",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          }
        }
      },
      "PatchBody" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PatchDocument"
        }
      },
      "otoroshi.models.DataCenterMatch" : {
        "description" : "Match a target if in the same datacenter",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Match a target if in the same datacenter",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Match a target if in the same datacenter",
              "properties" : {
                "dc" : {
                  "description" : "DC name",
                  "type" : "string"
                }
              }
            }
          }
        },
        "properties" : {
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          },
          "dc" : {
            "description" : "DC name",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.JwtTokenLocation" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.InCookie"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.InHeader"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.InQueryParam"
        } ]
      },
      "otoroshi.models.HSAlgoSettings" : {
        "description" : "Settings to use HMAC-SHA signing algorithm",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings to use HMAC-SHA signing algorithm",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings to use HMAC-SHA signing algorithm",
              "properties" : {
                "size" : {
                  "format" : "int32",
                  "description" : "Size for SHA function",
                  "type" : "integer"
                },
                "secret" : {
                  "description" : "HMAC secret",
                  "type" : "string"
                },
                "base64" : {
                  "description" : "The secret is base64 encoded",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "size" : {
            "format" : "int32",
            "description" : "Size for SHA function",
            "type" : "integer"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.models.UserAgentSettings" : {
        "description" : "Settings to extract informations about user agent (for otoroshi events)",
        "type" : "object",
        "openAPIV3Schema" : {
          "type" : "object",
          "description" : "Settings to extract informations about user agent (for otoroshi events)",
          "properties" : {
            "apiVersion" : {
              "description" : "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
              "type" : "string"
            },
            "kind" : {
              "description" : "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
              "type" : "string"
            },
            "metadata" : {
              "type" : "object"
            },
            "spec" : {
              "type" : "object",
              "description" : "Settings to extract informations about user agent (for otoroshi events)",
              "properties" : {
                "enabled" : {
                  "description" : "User agent extraction enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "properties" : {
          "enabled" : {
            "description" : "User agent extraction enabled",
            "type" : "boolean"
          }
        }
      }
    },
    "securitySchemes" : {
      "otoroshi_auth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}
