{
  "banned": [ "otoroshi.controllers.BackOfficeController$SearchedService", "otoroshi.models.EntityLocationSupport", "otoroshi.auth.AuthModuleConfig", "otoroshi.auth.OAuth2ModuleConfig", "otoroshi.ssl.ClientCertificateValidator" ],
  "descriptions": {
    "entity_description.otoroshi.auth.BasicAuthModuleConfig": "Authentication module that let you use otoroshi as the identity provider",
    "entity_description.otoroshi.auth.BasicAuthUser": "A user model for the BasicAuthModuleConfig module",
    "entity_description.otoroshi.auth.Credential": "Pair of raw certificate, private key and certId for SAML protocol",
    "entity_description.otoroshi.auth.GenericOauth2ModuleConfig": "Authentication module that works with OAuth2/OIDC",
    "entity_description.otoroshi.auth.GroupFilter": "Filter for a LDAP group",
    "entity_description.otoroshi.auth.GroupRights": "User rights associated with a group",
    "entity_description.otoroshi.auth.LdapAuthModuleConfig": "Authentication module that works with LDAP",
    "entity_description.otoroshi.auth.NameIDFormat": "The name ID Format to use for the subject",
    "entity_description.otoroshi.auth.OAuth1Provider": "Method used to get request and access token",
    "entity_description.otoroshi.auth.Oauth1ModuleConfig": "Configuration of OAuth 1.0 module",
    "entity_description.otoroshi.auth.SAMLCanocalizationMethod": "Canonicalization Method for XML Signatures",
    "entity_description.otoroshi.auth.SAMLCredentials": "Used to sign, encrypt assertions and sign SAML documents",
    "entity_description.otoroshi.auth.SAMLProtocolBinding": "Protocol binding used during SAML requests",
    "entity_description.otoroshi.auth.SAMLSignature": "Algorithm and canocalization method used to sign SAML documents",
    "entity_description.otoroshi.auth.SAMLSignatureAlgorithm": "Algorithm to sign SAML requests",
    "entity_description.otoroshi.auth.SamlAuthModuleConfig": "Configuration of SAML Authentication module",
    "entity_description.otoroshi.auth.SessionCookieValues": "The configuration for session cookie",
    "entity_description.otoroshi.auth.WebAuthnDetails": "Handle and credentials for a webauthn user",
    "entity_description.otoroshi.events.HealthCheckEvent": "Events generated by health checks",
    "entity_description.otoroshi.events.KafkaConfig": "Settings for connection to a kafka cluster",
    "entity_description.otoroshi.events.PulsarConfig": "Settings for connection to a pulsar cluster",
    "entity_description.otoroshi.events.StatsdConfig": "Settings for connection to a statsd agent",
    "entity_description.otoroshi.models.ApiDescriptor": "Represent if a service exposes an API with an optional url to an openapi descriptor",
    "entity_description.otoroshi.models.ApiKey": "An otoroshi apikey that can allow you to access some services",
    "entity_description.otoroshi.models.ApiKeyConstraints": "Settings used to extract apikeys from http requests and routing traffic",
    "entity_description.otoroshi.models.ApiKeyRotation": "Settings for automatic apikey rotation with grace period",
    "entity_description.otoroshi.models.ApiKeyRouteMatcher": "Routing settings based on apikeys metadata and tags",
    "entity_description.otoroshi.models.AutoCert": "Settings to generate certificates on the fly",
    "entity_description.otoroshi.models.BackOfficeUser": "User session for otoroshi-ui admins",
    "entity_description.otoroshi.models.BadResponse": "Settings for a bad response return (chaos engineering)",
    "entity_description.otoroshi.models.BadResponsesFaultConfig": "List of bad response settings",
    "entity_description.otoroshi.models.BasicAuthConstraints": "Settings to extract apikey from a basic auth header like",
    "entity_description.otoroshi.models.Canary": "Settings for canary routing",
    "entity_description.otoroshi.models.ChaosConfig": "Settings to enable chaos engineering for a service",
    "entity_description.otoroshi.models.CleverCloudSettings": "Settings for connection to the clever-cloud api",
    "entity_description.otoroshi.models.ClientConfig": "Settings for the http client when http request is forwarded",
    "entity_description.otoroshi.models.ClientIdAuthConstraints": "Settings to extract apikey (using client_id only) from a header or query param",
    "entity_description.otoroshi.models.ConsoleSettings": "Data exporter that will log everything to the console",
    "entity_description.otoroshi.models.CorsSettings": "Settings for CORS support",
    "entity_description.otoroshi.models.CustomHeadersAuthConstraints": "Settings to extract apikey from a custom headers",
    "entity_description.otoroshi.models.CustomTimeouts": "Settings for custom timeouts for a specific path",
    "entity_description.otoroshi.models.DataCenterMatch": "Match a target if in the same datacenter",
    "entity_description.otoroshi.models.DataExporterConfig": "Module to export otoroshi specific events to whatever destination you want",
    "entity_description.otoroshi.models.DataExporterConfigFiltering": "Settings to match otoroshi events",
    "entity_description.otoroshi.models.DefaultToken": "Default jwt token when no other token validated",
    "entity_description.otoroshi.models.ESAlgoSettings": "Settings to use elliptic curve signing algorithm",
    "entity_description.otoroshi.models.ESKPAlgoSettings": "Settings to use elliptic curve signing algorithm from a certificate keypair",
    "entity_description.otoroshi.models.ElasticAnalyticsConfig": "Settings for connection to an elastic cluster",
    "entity_description.otoroshi.models.EntityLocation": "Location of any entity (teams and organization)",
    "entity_description.otoroshi.models.ErrorTemplate": "Service descriptor error template",
    "entity_description.otoroshi.models.ExporterRef": "Reference to a data exporter",
    "entity_description.otoroshi.models.FileSettings": "Settings for a file data exporter",
    "entity_description.otoroshi.models.GeoPositionRadius": "Geolocation radius",
    "entity_description.otoroshi.models.GeolocationMatch": "Match a target if in the same geo location radius",
    "entity_description.otoroshi.models.GlobalConfig": "The global config (dynamic) for otoroshi",
    "entity_description.otoroshi.models.GlobalJwtVerifier": "Otoroshi model for JWT token verifier",
    "entity_description.otoroshi.models.GlobalScripts": "Settings to apply plugins globally",
    "entity_description.otoroshi.models.HSAlgoSettings": "Settings to use HMAC-SHA signing algorithm",
    "entity_description.otoroshi.models.HealthCheck": "Healthcheck settings for a service",
    "entity_description.otoroshi.models.InCookie": "JWT token location (cookie)",
    "entity_description.otoroshi.models.InHeader": "JWT token location (header)",
    "entity_description.otoroshi.models.InQueryParam": "JWT token location (query param)",
    "entity_description.otoroshi.models.InfraProviderMatch": "Match a target if in the same infrastructure",
    "entity_description.otoroshi.models.IpFiltering": "Settings for ip address filtering for a service or globally",
    "entity_description.otoroshi.models.IpStackGeolocationSettings": "Settings for connection to IpStack",
    "entity_description.otoroshi.models.JWKSAlgoSettings": "Settings to use keypair from JWKS for verification",
    "entity_description.otoroshi.models.JwtAuthConstraints": "Settings to extract apikey from a jwt token",
    "entity_description.otoroshi.models.KidAlgoSettings": "Settings to find keypair based on header kid for verification",
    "entity_description.otoroshi.models.LargeRequestFaultConfig": "Settings for a large request fault (chaos engineering)",
    "entity_description.otoroshi.models.LargeResponseFaultConfig": "Settings for a large response fault (chaos engineering)",
    "entity_description.otoroshi.models.LatencyInjectionFaultConfig": "Settings for a latency injection fault (chaos engineering)",
    "entity_description.otoroshi.models.LocalJwtVerifier": "Local jwt verifier (deprecated)",
    "entity_description.otoroshi.models.MappingSettings": "Settings to transform a jwt token",
    "entity_description.otoroshi.models.MaxmindGeolocationSettings": "Settings for connection to a maxmind db",
    "entity_description.otoroshi.models.MetricsSettings": "Settings for metrics labels",
    "entity_description.otoroshi.models.NetworkLocationMatch": "Match a target if in the same network location",
    "entity_description.otoroshi.models.Outage": "A snowmonkey outage model",
    "entity_description.otoroshi.models.PassThrough": "jwt token validation policicy that just validate the token",
    "entity_description.otoroshi.models.PrivateAppsUser": "User session for private apps",
    "entity_description.otoroshi.models.Proxies": "Various web proxy settings for http client",
    "entity_description.otoroshi.models.RSAKPAlgoSettings": "Settings to use RSA signing algorithm from a certificate keypair",
    "entity_description.otoroshi.models.RSAlgoSettings": "Settings to use RSA signing algorithm",
    "entity_description.otoroshi.models.RackMatch": "Match a target if in the same rack",
    "entity_description.otoroshi.models.RedirectionSettings": "Settings for routing redirection",
    "entity_description.otoroshi.models.RefJwtVerifier": "Reference to a jwt verifier",
    "entity_description.otoroshi.models.RegionMatch": "Match a target if in the same region",
    "entity_description.otoroshi.models.RemainingQuotas": "Remaining quotas for an apikey",
    "entity_description.otoroshi.models.RestrictionPath": "Represent an http request on which restrictions will apply",
    "entity_description.otoroshi.models.Restrictions": "Http requests restrictions for a service or an apikey",
    "entity_description.otoroshi.models.SecComHeaders": "Header names for the otoroshi exchange protocol",
    "entity_description.otoroshi.models.ServiceDescriptor": "The otoroshi model for a service (handles routing)",
    "entity_description.otoroshi.models.ServiceGroup": "The otoroshi model for a group of services",
    "entity_description.otoroshi.models.Sign": "jwt token re-sign policy settings",
    "entity_description.otoroshi.models.SimpleOtoroshiAdmin": "An otoroshi admin user",
    "entity_description.otoroshi.models.SnowMonkeyConfig": "Settings for the snow monkey (chaos engineering)",
    "entity_description.otoroshi.models.Target": "A target model for a service (destination for forwarded requests)",
    "entity_description.otoroshi.models.Team": "An otoroshi model for a team of users in the organization (otoroshi-ui)",
    "entity_description.otoroshi.models.TeamAccess": "Access rights for teams",
    "entity_description.otoroshi.models.Tenant": "An otoroshi model for an organization (otoroshi-ui)",
    "entity_description.otoroshi.models.TenantAccess": "Access rights for organizations",
    "entity_description.otoroshi.models.TlsSettings": "Global TLS settings. The default domain that will be picked if no certificate matches the current request",
    "entity_description.otoroshi.models.Transform": "jwt token transformation policy settings",
    "entity_description.otoroshi.models.TransformSettings": "jwt token transformation settings",
    "entity_description.otoroshi.models.UserAgentSettings": "Settings to extract informations about user agent (for otoroshi events)",
    "entity_description.otoroshi.models.UserRight": "Represent a user right (teams, organizations) in otoroshi-ui",
    "entity_description.otoroshi.models.UserRights": "Represent a list of user rights",
    "entity_description.otoroshi.models.VerificationSettings": "jwt token verification settings",
    "entity_description.otoroshi.models.WebAuthnOtoroshiAdmin": "An otoroshi admin user that uses webauthn at login",
    "entity_description.otoroshi.models.Webhook": "Settings for webhook call",
    "entity_description.otoroshi.models.WeightedBestResponseTime": "Loadbalancing policy that route to best response time targets with a weight",
    "entity_description.otoroshi.models.ZoneMatch": "Match a target if in the same zone",
    "entity_description.otoroshi.script.AccessValidatorRef": "References to access validation plugins",
    "entity_description.otoroshi.script.PreRoutingRef": "References to pre-routing plugins",
    "entity_description.otoroshi.script.Script": "An otoroshi plugins stored as scala code in the otoroshi datastore",
    "entity_description.otoroshi.script.plugins.Plugins": "Settings for plugins (of any kind)",
    "entity_description.otoroshi.ssl.Cert": "The otoroshi model for X509 certificates",
    "entity_description.otoroshi.ssl.pki.models.GenCertResponse": "Response for a certificate generation operation",
    "entity_description.otoroshi.ssl.pki.models.GenCsrQuery": "Settings for generating a certificate",
    "entity_description.otoroshi.ssl.pki.models.GenCsrResponse": "Response for a csr generation operation",
    "entity_description.otoroshi.ssl.pki.models.GenKeyPairQuery": "Settings for generating a keypair",
    "entity_description.otoroshi.ssl.pki.models.GenKeyPairResponse": "Response for a keypair generation operation",
    "entity_description.otoroshi.ssl.pki.models.SignCertResponse": "Response for a certificate signing operation",
    "entity_description.otoroshi.tcp.SniSettings": "SNI settings for a TCP proxy",
    "entity_description.otoroshi.tcp.TcpRule": "Associate targets for a domain (SNI)",
    "entity_description.otoroshi.tcp.TcpService": "Model for a TCP proxy",
    "entity_description.otoroshi.tcp.TcpTarget": "Target for a TCP proxy",
    "entity_description.otoroshi.utils.gzip.GzipConfig": "Settings for gzip support",
    "entity_description.otoroshi.utils.http.MtlsConfig": "TLS settings for the http client",
    "entity_description.otoroshi.utils.letsencrypt.LetsEncryptSettings": "Settings for connection to a let's encrypt (or ACME) server",
    "entity_description.otoroshi.utils.mailer.ConsoleMailerSettings": "Settings for the console mailer",
    "entity_description.otoroshi.utils.mailer.EmailLocation": "Email location settings",
    "entity_description.otoroshi.utils.mailer.GenericMailerSettings": "Settings for the generic mailer (http requests)",
    "entity_description.otoroshi.utils.mailer.MailgunSettings": "Settings for the mailgun mailer",
    "entity_description.otoroshi.utils.mailer.MailjetSettings": "Settings for the mailjet mailer",
    "entity_description.otoroshi.utils.mailer.NoneMailerSettings": "Settings for the /dev/null mailer",
    "entity_description.otoroshi.utils.mailer.SendgridSettings": "Settings for the sendgrid mailer",
    "operations.otoroshi.controllers.PrivateAppsController.registerSession_privateapps": "Registers a private app session",
    "operations.otoroshi.controllers.PrivateAppsController.sendSelfUpdateLink_privateapps": "Send an email to a user to update its own settings",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.filterableEvents_analytics": "Events for a service, apikey or group",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.filterableStats_analytics": "Statistic for a service, apikey or group",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.globalStats_analytics": "Global statistic for your services",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.globalStatus_analytics": "Global status of your services",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.groupStatus_groups": "Statis for a group of services over time",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.serviceEvents_services": "Events for a service",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.serviceResponseTime_services": "Response time statistics for a service",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.serviceStats_services": "Statistics for a service",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.serviceStatus_services": "Status of a service over time",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.servicesStatus_analytics": "Status for some/all services over time",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.apiKeyQuotas_apikeys": "Consumed quotas for a specific apikey",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.bulkCreateAction_apikeys": "Create multiple ApiKeys at the same time",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.bulkDeleteAction_apikeys": "Delete multiple ApiKeys at the same time",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.bulkPatchAction_apikeys": "Update (using json-patch) multiple ApiKeys at the same time",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.bulkUpdateAction_apikeys": "Update multiple ApiKeys at the same time",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.createAction_apikeys": "Creates a ApiKey",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.deleteEntityAction_apikeys": "Deletes a specific ApiKey using its id",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.findAllEntitiesAction_apikeys": "Find all possible ApiKeys entities",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.findEntityByIdAction_apikeys": "Find a specific ApiKey using its id",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.patchEntityAction_apikeys": "Updates (using json-patch) a specific ApiKey using its id",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.resetApiKeyQuotas_apikeys": "Reset quotas consumption for an apikey",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.updateEntityAction_apikeys": "Updates a specific ApiKey using its id",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.bulkCreateAction_auth-modules": "Create multiple AuthModuleConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.bulkDeleteAction_auth-modules": "Delete multiple AuthModuleConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.bulkPatchAction_auth-modules": "Update (using json-patch) multiple AuthModuleConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.bulkUpdateAction_auth-modules": "Update multiple AuthModuleConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.createAction_auth-modules": "Creates a AuthModuleConfig",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.deleteEntityAction_auth-modules": "Deletes a specific AuthModuleConfig using its id",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.findAllEntitiesAction_auth-modules": "Find all possible AuthModuleConfigs entities",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.findEntityByIdAction_auth-modules": "Find a specific AuthModuleConfig using its id",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.finishRegistration_auth-modules": "Finishes the registration of a user",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.patchEntityAction_auth-modules": "Updates (using json-patch) a specific AuthModuleConfig using its id",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.startRegistration_auth-modules": "Stats the registration of a user",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.updateEntityAction_auth-modules": "Updates a specific AuthModuleConfig using its id",
    "operations.otoroshi.controllers.adminapi.CanaryController.resetServiceCanaryMembers_services": "Reset members of a canary campaign",
    "operations.otoroshi.controllers.adminapi.CanaryController.serviceCanaryMembers_services": "Get members of a canary campaign",
    "operations.otoroshi.controllers.adminapi.CertificatesController.bulkCreateAction_certificates": "Create multiple Certs at the same time",
    "operations.otoroshi.controllers.adminapi.CertificatesController.bulkDeleteAction_certificates": "Delete multiple Certs at the same time",
    "operations.otoroshi.controllers.adminapi.CertificatesController.bulkPatchAction_certificates": "Update (using json-patch) multiple Certs at the same time",
    "operations.otoroshi.controllers.adminapi.CertificatesController.bulkUpdateAction_certificates": "Update multiple Certs at the same time",
    "operations.otoroshi.controllers.adminapi.CertificatesController.createAction_certificates": "Creates a Cert",
    "operations.otoroshi.controllers.adminapi.CertificatesController.deleteEntityAction_certificates": "Deletes a specific Cert using its id",
    "operations.otoroshi.controllers.adminapi.CertificatesController.findAllEntitiesAction_certificates": "Find all possible Certs entities",
    "operations.otoroshi.controllers.adminapi.CertificatesController.findEntityByIdAction_certificates": "Find a specific Cert using its id",
    "operations.otoroshi.controllers.adminapi.CertificatesController.patchEntityAction_certificates": "Updates (using json-patch) a specific Cert using its id",
    "operations.otoroshi.controllers.adminapi.CertificatesController.renewCert_certificates": "Renew a certificates with the same attributes as the original one",
    "operations.otoroshi.controllers.adminapi.CertificatesController.updateEntityAction_certificates": "Updates a specific Cert using its id",
    "operations.otoroshi.controllers.adminapi.ClusterController.clearClusterMembers_cluster": "Clear cluster members from members statistics",
    "operations.otoroshi.controllers.adminapi.ClusterController.createLoginToken_cluster": "Api to create a distributed login token between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.createSession_cluster": "Api to create a distributed private apps session between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.getClusterMembers_cluster": "Get cluster members statistics",
    "operations.otoroshi.controllers.adminapi.ClusterController.getUserToken_cluster": "Api to get a distributed login token between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.internalState_cluster": "Api to get internal state from a leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.isLoginTokenValid_cluster": "Api to check a distributed login token between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.isSessionValid_cluster": "Api to create a distributed private apps session between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.liveCluster_cluster": "Api to get cluster statistics",
    "operations.otoroshi.controllers.adminapi.ClusterController.setUserToken_cluster": "Api to set a distributed login token between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.updateQuotas_cluster": "Api to push quotas usage from a worker to a leader",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.bulkCreateAction_data-exporters": "Create multiple DataExporterConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.bulkDeleteAction_data-exporters": "Delete multiple DataExporterConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.bulkPatchAction_data-exporters": "Update (using json-patch) multiple DataExporterConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.bulkUpdateAction_data-exporters": "Update multiple DataExporterConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.createAction_data-exporters": "Creates a DataExporterConfig",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.deleteEntityAction_data-exporters": "Deletes a specific DataExporterConfig using its id",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.findAllEntitiesAction_data-exporters": "Find all possible DataExporterConfigs entities",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.findEntityByIdAction_data-exporters": "Find a specific DataExporterConfig using its id",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.patchEntityAction_data-exporters": "Updates (using json-patch) a specific DataExporterConfig using its id",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.updateEntityAction_data-exporters": "Updates a specific DataExporterConfig using its id",
    "operations.otoroshi.controllers.adminapi.EventsController.alertEvents_events": "Get all events of type AlertEvent",
    "operations.otoroshi.controllers.adminapi.EventsController.auditEvents_events": "Get all events of type AuditEvent",
    "operations.otoroshi.controllers.adminapi.GlobalConfigController.globalConfig_globalconfig": "Get the global config",
    "operations.otoroshi.controllers.adminapi.GlobalConfigController.patchGlobalConfig_globalconfig": "Update (with json-patch) the global config",
    "operations.otoroshi.controllers.adminapi.GlobalConfigController.updateGlobalConfig_globalconfig": "Update the global config",
    "operations.otoroshi.controllers.adminapi.ImportExportController.fullExport_import-export": "Export all the content of the otoroshi datastore",
    "operations.otoroshi.controllers.adminapi.ImportExportController.fullImportFromFile_import-export": "Import the content of the otoroshi datastore (file)",
    "operations.otoroshi.controllers.adminapi.ImportExportController.fullImport_import-export": "Import the content of the otoroshi datastore (json)",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.bulkCreateAction_jwt-verifiers": "Create multiple GlobalJwtVerifiers at the same time",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.bulkDeleteAction_jwt-verifiers": "Delete multiple GlobalJwtVerifiers at the same time",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.bulkPatchAction_jwt-verifiers": "Update (using json-patch) multiple GlobalJwtVerifiers at the same time",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.bulkUpdateAction_jwt-verifiers": "Update multiple GlobalJwtVerifiers at the same time",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.createAction_jwt-verifiers": "Creates a GlobalJwtVerifier",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.deleteEntityAction_jwt-verifiers": "Deletes a specific GlobalJwtVerifier using its id",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.findAllEntitiesAction_jwt-verifiers": "Find all possible GlobalJwtVerifiers entities",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.findEntityByIdAction_jwt-verifiers": "Find a specific GlobalJwtVerifier using its id",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.patchEntityAction_jwt-verifiers": "Updates (using json-patch) a specific GlobalJwtVerifier using its id",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.updateEntityAction_jwt-verifiers": "Updates a specific GlobalJwtVerifier using its id",
    "operations.otoroshi.controllers.adminapi.PkiController.certificateData_pki": "Extract data from a certificate",
    "operations.otoroshi.controllers.adminapi.PkiController.certificateIsValid_pki": "Check if a certificate is valid (based on its own data)",
    "operations.otoroshi.controllers.adminapi.PkiController.genCert_pki": "Generates a certificate",
    "operations.otoroshi.controllers.adminapi.PkiController.genCsr_pki": "Generates a CSR",
    "operations.otoroshi.controllers.adminapi.PkiController.genKeyPair_pki": "Generates a keypair",
    "operations.otoroshi.controllers.adminapi.PkiController.genLetsEncryptCert_pki": "Generates a certificates using Let's Encrypt or any ACME compatible system",
    "operations.otoroshi.controllers.adminapi.PkiController.genSelfSignedCA_pki": "Generates a self signed CA",
    "operations.otoroshi.controllers.adminapi.PkiController.genSelfSignedCert_pki": "Generates a self signed certificates",
    "operations.otoroshi.controllers.adminapi.PkiController.genSubCA_pki": "Generates a sub-CA",
    "operations.otoroshi.controllers.adminapi.PkiController.importCertFromP12_pki": "Import de .p12 file as client certificates",
    "operations.otoroshi.controllers.adminapi.PkiController.signCert_pki": "Sign a certificate based on a CSR",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.bulkCreateAction_scripts": "Create multiple otoroshi.script.Scripts at the same time",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.bulkDeleteAction_scripts": "Delete multiple otoroshi.script.Scripts at the same time",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.bulkPatchAction_scripts": "Update (using json-patch) multiple otoroshi.script.Scripts at the same time",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.bulkUpdateAction_scripts": "Update multiple otoroshi.script.Scripts at the same time",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.compileScript_scripts": "Trigger script compilation of the server",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.createAction_scripts": "Creates a otoroshi.script.Script",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.deleteEntityAction_scripts": "Deletes a specific otoroshi.script.Script using its id",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.findAllEntitiesAction_scripts": "Find all possible otoroshi.script.Scripts entities",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.findAllScriptsList_scripts": "Search plugins based on type of plugin",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.findEntityByIdAction_scripts": "Find a specific otoroshi.script.Script using its id",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.patchEntityAction_scripts": "Updates (using json-patch) a specific otoroshi.script.Script using its id",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.updateEntityAction_scripts": "Updates a specific otoroshi.script.Script using its id",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.bulkCreateAction_groups": "Create multiple ServiceGroups at the same time",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.bulkDeleteAction_groups": "Delete multiple ServiceGroups at the same time",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.bulkPatchAction_groups": "Update (using json-patch) multiple ServiceGroups at the same time",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.bulkUpdateAction_groups": "Update multiple ServiceGroups at the same time",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.createAction_groups": "Creates a ServiceGroup",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.deleteEntityAction_groups": "Deletes a specific ServiceGroup using its id",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.findAllEntitiesAction_groups": "Find all possible ServiceGroups entities",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.findEntityByIdAction_groups": "Find a specific ServiceGroup using its id",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.patchEntityAction_groups": "Updates (using json-patch) a specific ServiceGroup using its id",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.serviceGroupServices_groups": "Get the services from a service group",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.updateEntityAction_groups": "Updates a specific ServiceGroup using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.allLines_lines": "Get all lines of work (prod, preprod, etc)",
    "operations.otoroshi.controllers.adminapi.ServicesController.bulkCreateAction_services": "Create multiple ServiceDescriptors at the same time",
    "operations.otoroshi.controllers.adminapi.ServicesController.bulkDeleteAction_services": "Delete multiple ServiceDescriptors at the same time",
    "operations.otoroshi.controllers.adminapi.ServicesController.bulkPatchAction_services": "Update (using json-patch) multiple ServiceDescriptors at the same time",
    "operations.otoroshi.controllers.adminapi.ServicesController.bulkUpdateAction_services": "Update multiple ServiceDescriptors at the same time",
    "operations.otoroshi.controllers.adminapi.ServicesController.createAction_services": "Creates a ServiceDescriptor",
    "operations.otoroshi.controllers.adminapi.ServicesController.createServiceTemplate_services": "Creates an error template for the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.deleteEntityAction_services": "Deletes a specific ServiceDescriptor using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.deleteServiceTemplate_services": "Deletes the error template for the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.findAllEntitiesAction_services": "Find all possible ServiceDescriptors entities",
    "operations.otoroshi.controllers.adminapi.ServicesController.findEntityByIdAction_services": "Find a specific ServiceDescriptor using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.patchEntityAction_services": "Updates (using json-patch) a specific ServiceDescriptor using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceAddTarget_services": "Adds a target to the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceDeleteTarget_services": "Deletes a target to the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceHealth_services": "Get healthcheck status for the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceTargets_services": "Get targets of the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceTemplate_services": "Get the error template for the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.servicesForALine_lines": "Get all service for a line of work",
    "operations.otoroshi.controllers.adminapi.ServicesController.updateEntityAction_services": "Updates a specific ServiceDescriptor using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.updateServiceTargets_services": "Update the target of the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.updateServiceTemplate_services": "Update the error template of the current service",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyConfig_snowmonkey": "Get the snowmonkey config",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyOutages_snowmonkey": "Get the current snowmonkey outages",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.patchSnowMonkey_snowmonkey": "Updates (using json-patch) the snowmonkey configuration",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.resetSnowMonkey_snowmonkey": "Reset the snowmonkey outages",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.startSnowMonkey_snowmonkey": "Start the snowmonkey of all otoroshi instances",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.stopSnowMonkey_snowmonkey": "Stop the snowmonkey of all otoroshi instances",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.updateSnowMonkey_snowmonkey": "Updates the snowmonkey configuration",
    "operations.otoroshi.controllers.adminapi.StatsController.globalLiveStats_live": "Get global live statis",
    "operations.otoroshi.controllers.adminapi.StatsController.hostMetrics_live": "Get local host metrics",
    "operations.otoroshi.controllers.adminapi.StatsController.serviceLiveStats_live": "Get live stats for a specific service",
    "operations.otoroshi.controllers.adminapi.StatsController.serviceLiveStats_services": "Get live stats for a specific service",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.bulkCreateAction_tcp": "Create multiple TcpServices at the same time",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.bulkDeleteAction_tcp": "Delete multiple TcpServices at the same time",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.bulkPatchAction_tcp": "Update (using json-patch) multiple TcpServices at the same time",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.bulkUpdateAction_tcp": "Update multiple TcpServices at the same time",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.createAction_tcp": "Creates a TcpService",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.deleteEntityAction_tcp": "Deletes a specific TcpService using its id",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.findAllEntitiesAction_tcp": "Find all possible TcpServices entities",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.findEntityByIdAction_tcp": "Find a specific TcpService using its id",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.patchEntityAction_tcp": "Updates (using json-patch) a specific TcpService using its id",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.updateEntityAction_tcp": "Updates a specific TcpService using its id",
    "operations.otoroshi.controllers.adminapi.TeamsController.bulkCreateAction_teams": "Create multiple Teams at the same time",
    "operations.otoroshi.controllers.adminapi.TeamsController.bulkDeleteAction_teams": "Delete multiple Teams at the same time",
    "operations.otoroshi.controllers.adminapi.TeamsController.bulkPatchAction_teams": "Update (using json-patch) multiple Teams at the same time",
    "operations.otoroshi.controllers.adminapi.TeamsController.bulkUpdateAction_teams": "Update multiple Teams at the same time",
    "operations.otoroshi.controllers.adminapi.TeamsController.createAction_teams": "Creates a Team",
    "operations.otoroshi.controllers.adminapi.TeamsController.deleteEntityAction_teams": "Deletes a specific Team using its id",
    "operations.otoroshi.controllers.adminapi.TeamsController.findAllEntitiesAction_teams": "Find all possible Teams entities",
    "operations.otoroshi.controllers.adminapi.TeamsController.findEntityByIdAction_teams": "Find a specific Team using its id",
    "operations.otoroshi.controllers.adminapi.TeamsController.patchEntityAction_teams": "Updates (using json-patch) a specific Team using its id",
    "operations.otoroshi.controllers.adminapi.TeamsController.updateEntityAction_teams": "Updates a specific Team using its id",
    "operations.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_admins": "Creates a new Template from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_tcp": "Creates a new Template from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_templates": "Creates a new Template from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_apikeys": "Creates a new ApiKey from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_templates": "Creates a new ApiKey from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateAuthModule_auth-modules": "Creates a new AuthModule from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateCertificate_certificates": "Creates a new Certificate from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateDataExporterConfig_data-exporters": "Creates a new DataExporterConfig from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateGlobalConfig_globalconfig": "Creates a new GlobalConfig from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateJwtVerifier_jwt-verifiers": "Creates a new JwtVerifier from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateScript_scripts": "Creates a new Script from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_groups": "Creates a new ServiceGroup from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_templates": "Creates a new ServiceGroup from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateService_services": "Creates a new Service from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateService_templates": "Creates a new Service from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateSimpleAdmin_admins": "Creates a new SimpleAdmin from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_tcp": "Creates a new TcpService from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_templates": "Creates a new TcpService from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateTeam_teams": "Creates a new Team from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateTenant_organizations": "Creates a new Tenant from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateWebauthnAdmin_admins": "Creates a new WebauthnAdmin from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.templateSpec_analytics": "Returns a template that extract possible fields out of a Gateway event",
    "operations.otoroshi.controllers.adminapi.TenantsController.bulkCreateAction_organizations": "Create multiple Tenants at the same time",
    "operations.otoroshi.controllers.adminapi.TenantsController.bulkDeleteAction_organizations": "Delete multiple Tenants at the same time",
    "operations.otoroshi.controllers.adminapi.TenantsController.bulkPatchAction_organizations": "Update (using json-patch) multiple Tenants at the same time",
    "operations.otoroshi.controllers.adminapi.TenantsController.bulkUpdateAction_organizations": "Update multiple Tenants at the same time",
    "operations.otoroshi.controllers.adminapi.TenantsController.createAction_organizations": "Creates a Tenant",
    "operations.otoroshi.controllers.adminapi.TenantsController.deleteEntityAction_organizations": "Deletes a specific Tenant using its id",
    "operations.otoroshi.controllers.adminapi.TenantsController.findAllEntitiesAction_organizations": "Find all possible Tenants entities",
    "operations.otoroshi.controllers.adminapi.TenantsController.findEntityByIdAction_organizations": "Find a specific Tenant using its id",
    "operations.otoroshi.controllers.adminapi.TenantsController.patchEntityAction_organizations": "Updates (using json-patch) a specific Tenant using its id",
    "operations.otoroshi.controllers.adminapi.TenantsController.updateEntityAction_organizations": "Updates a specific Tenant using its id",
    "operations.otoroshi.controllers.adminapi.UsersController.deleteAdmin_admins": "Deletes an admin",
    "operations.otoroshi.controllers.adminapi.UsersController.discardAllPrivateAppsSessions_apps-sessions": "Discard all private apps sessions",
    "operations.otoroshi.controllers.adminapi.UsersController.discardAllSessions_admin-sessions": "Discard all admin sessions (otoroshi-ui)",
    "operations.otoroshi.controllers.adminapi.UsersController.discardPrivateAppsSession_apps-sessions": "Discard a specific private apps session",
    "operations.otoroshi.controllers.adminapi.UsersController.discardSession_admin-sessions": "Discard a specific admin session (otoroshi-ui)",
    "operations.otoroshi.controllers.adminapi.UsersController.privateAppsSessions_apps-sessions": "Return all private apps sessions",
    "operations.otoroshi.controllers.adminapi.UsersController.registerSimpleAdmin_admins": "Register an admin user",
    "operations.otoroshi.controllers.adminapi.UsersController.registerWebAuthnAdmin_admins": "Register a webauthn admin user",
    "operations.otoroshi.controllers.adminapi.UsersController.sessions_admin-sessions": "Returns all admin sessions",
    "operations.otoroshi.controllers.adminapi.UsersController.simpleAdmins_admins": "Returns all admins",
    "operations.otoroshi.controllers.adminapi.UsersController.updateAdmin_admins": "Updates an admin",
    "operations.otoroshi.controllers.adminapi.UsersController.updateWebAuthnAdmin_admins": "Updates a webauthn admin",
    "operations.otoroshi.controllers.adminapi.UsersController.webAuthnAdmins_admins": "Returns all webauthn admin",
    "operations.otoroshi.controllers.adminapi.UsersController.webAuthnDeleteAdmin_admins": "Deletes a webauthn admin",
    "operations_input_entity.otoroshi.controllers.PrivateAppsController.registerSession_privateapps": "Empty",
    "operations_input_entity.otoroshi.controllers.PrivateAppsController.sendSelfUpdateLink_privateapps": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.AnalyticsController.servicesStatus_analytics": "ServiceDescriptorList",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkCreateAction_apikeys": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkPatchAction_apikeys": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkUpdateAction_apikeys": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.createAction_apikeys": "otoroshi.models.ApiKey",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.patchEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.updateEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkCreateAction_auth-modules": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkPatchAction_auth-modules": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkUpdateAction_auth-modules": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.createAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.finishRegistration_auth-modules": "WebAuthnRegistrationFinishBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.patchEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.startRegistration_auth-modules": "WebAuthnRegistrationStartBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.updateEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.bulkCreateAction_certificates": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.bulkPatchAction_certificates": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.bulkUpdateAction_certificates": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.createAction_certificates": "otoroshi.ssl.Cert",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.patchEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.renewCert_certificates": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.updateEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_input_entity.otoroshi.controllers.adminapi.ClusterController.createLoginToken_cluster": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.ClusterController.createSession_cluster": "otoroshi.models.PrivateAppsUser",
    "operations_input_entity.otoroshi.controllers.adminapi.ClusterController.setUserToken_cluster": "UserTokenBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ClusterController.updateQuotas_cluster": "UpdateQuotasBody",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkCreateAction_data-exporters": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkPatchAction_data-exporters": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkUpdateAction_data-exporters": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.createAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.patchEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.updateEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.GlobalConfigController.patchGlobalConfig_globalconfig": "PatchBody",
    "operations_input_entity.otoroshi.controllers.adminapi.GlobalConfigController.updateGlobalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.ImportExportController.fullImportFromFile_import-export": "GlobalConfigImportBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ImportExportController.fullImport_import-export": "GlobalConfigImportBody",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkCreateAction_jwt-verifiers": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkPatchAction_jwt-verifiers": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkUpdateAction_jwt-verifiers": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.createAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.patchEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.updateEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.certificateData_pki": "PemCertificateBody",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.certificateIsValid_pki": "otoroshi.ssl.Cert",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genCert_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genCsr_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genKeyPair_pki": "otoroshi.ssl.pki.models.GenKeyPairQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genLetsEncryptCert_pki": "LetsEncryptCertBody",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genSelfSignedCA_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genSelfSignedCert_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genSubCA_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.importCertFromP12_pki": "ByteStreamBody",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.signCert_pki": "PemCsrBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkCreateAction_scripts": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkPatchAction_scripts": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkUpdateAction_scripts": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.compileScript_scripts": "CodeBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.createAction_scripts": "otoroshi.script.Script",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.patchEntityAction_scripts": "otoroshi.script.Script",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.updateEntityAction_scripts": "otoroshi.script.Script",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkCreateAction_groups": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkPatchAction_groups": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkUpdateAction_groups": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.createAction_groups": "otoroshi.models.ServiceGroup",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.patchEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.updateEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.bulkCreateAction_services": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.bulkPatchAction_services": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.bulkUpdateAction_services": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.createAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.createServiceTemplate_services": "otoroshi.models.ErrorTemplate",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.patchEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.serviceAddTarget_services": "otoroshi.models.Target",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.updateEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.updateServiceTargets_services": "otoroshi.models.Target",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.updateServiceTemplate_services": "otoroshi.models.ErrorTemplate",
    "operations_input_entity.otoroshi.controllers.adminapi.SnowMonkeyController.patchSnowMonkey_snowmonkey": "PatchBody",
    "operations_input_entity.otoroshi.controllers.adminapi.SnowMonkeyController.startSnowMonkey_snowmonkey": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.SnowMonkeyController.stopSnowMonkey_snowmonkey": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.SnowMonkeyController.updateSnowMonkey_snowmonkey": "otoroshi.models.SnowMonkeyConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkCreateAction_tcp": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkPatchAction_tcp": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkUpdateAction_tcp": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.createAction_tcp": "otoroshi.tcp.TcpService",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.patchEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.updateEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.bulkCreateAction_teams": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.bulkPatchAction_teams": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.bulkUpdateAction_teams": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.createAction_teams": "otoroshi.models.Team",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.patchEntityAction_teams": "otoroshi.models.Team",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.updateEntityAction_teams": "otoroshi.models.Team",
    "operations_input_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_admins": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_tcp": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_templates": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.bulkCreateAction_organizations": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.bulkPatchAction_organizations": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.bulkUpdateAction_organizations": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.createAction_organizations": "otoroshi.models.Tenant",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.patchEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.updateEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_input_entity.otoroshi.controllers.adminapi.UsersController.registerSimpleAdmin_admins": "otoroshi.models.SimpleOtoroshiAdmin",
    "operations_input_entity.otoroshi.controllers.adminapi.UsersController.registerWebAuthnAdmin_admins": "otoroshi.models.WebAuthnOtoroshiAdmin",
    "operations_input_entity.otoroshi.controllers.adminapi.UsersController.updateAdmin_admins": "otoroshi.models.SimpleOtoroshiAdmin",
    "operations_input_entity.otoroshi.controllers.adminapi.UsersController.updateWebAuthnAdmin_admins": "otoroshi.models.WebAuthnOtoroshiAdmin",
    "operations_response_entity.otoroshi.controllers.PrivateAppsController.registerSession_privateapps": "Empty",
    "operations_response_entity.otoroshi.controllers.PrivateAppsController.sendSelfUpdateLink_privateapps": "Empty",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.filterableEvents_analytics": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.filterableStats_analytics": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.globalStats_analytics": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.globalStatus_analytics": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.groupStatus_groups": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.serviceEvents_services": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.serviceResponseTime_services": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.serviceStats_services": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.serviceStatus_services": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.servicesStatus_analytics": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.apiKeyQuotas_apikeys": "otoroshi.models.RemainingQuotas",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkCreateAction_apikeys": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkDeleteAction_apikeys": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkPatchAction_apikeys": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkUpdateAction_apikeys": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.createAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.deleteEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.findAllEntitiesAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.findEntityByIdAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.patchEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.resetApiKeyQuotas_apikeys": "otoroshi.models.RemainingQuotas",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.updateEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkCreateAction_auth-modules": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkDeleteAction_auth-modules": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkPatchAction_auth-modules": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkUpdateAction_auth-modules": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.createAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.deleteEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.findAllEntitiesAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.findEntityByIdAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.finishRegistration_auth-modules": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.patchEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.startRegistration_auth-modules": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.updateEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.CanaryController.resetServiceCanaryMembers_services": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.CanaryController.serviceCanaryMembers_services": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.bulkCreateAction_certificates": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.bulkDeleteAction_certificates": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.bulkPatchAction_certificates": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.bulkUpdateAction_certificates": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.createAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.deleteEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.findAllEntitiesAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.findEntityByIdAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.patchEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.renewCert_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.updateEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.clearClusterMembers_cluster": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.createLoginToken_cluster": "TokenResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.createSession_cluster": "otoroshi.models.PrivateAppsUser",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.getClusterMembers_cluster": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.getUserToken_cluster": "TokenResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.internalState_cluster": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.isLoginTokenValid_cluster": "TokenResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.isSessionValid_cluster": "otoroshi.models.PrivateAppsUser",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.liveCluster_cluster": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.setUserToken_cluster": "TokenResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.updateQuotas_cluster": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkCreateAction_data-exporters": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkDeleteAction_data-exporters": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkPatchAction_data-exporters": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkUpdateAction_data-exporters": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.createAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.deleteEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.findAllEntitiesAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.findEntityByIdAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.patchEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.updateEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.EventsController.alertEvents_events": "AlertEventList",
    "operations_response_entity.otoroshi.controllers.adminapi.EventsController.auditEvents_events": "AuditEventList",
    "operations_response_entity.otoroshi.controllers.adminapi.GlobalConfigController.globalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.GlobalConfigController.patchGlobalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.GlobalConfigController.updateGlobalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.ImportExportController.fullExport_import-export": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ImportExportController.fullImportFromFile_import-export": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.ImportExportController.fullImport_import-export": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkCreateAction_jwt-verifiers": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkDeleteAction_jwt-verifiers": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkPatchAction_jwt-verifiers": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkUpdateAction_jwt-verifiers": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.createAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.deleteEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.findAllEntitiesAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.findEntityByIdAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.patchEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.updateEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.certificateData_pki": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.certificateIsValid_pki": "CertValidResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genCert_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genCsr_pki": "otoroshi.ssl.pki.models.GenCsrResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genKeyPair_pki": "otoroshi.ssl.pki.models.GenKeyPairResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genLetsEncryptCert_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genSelfSignedCA_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genSelfSignedCert_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genSubCA_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.importCertFromP12_pki": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.signCert_pki": "otoroshi.ssl.pki.models.SignCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkCreateAction_scripts": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkDeleteAction_scripts": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkPatchAction_scripts": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkUpdateAction_scripts": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.compileScript_scripts": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.createAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.deleteEntityAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.findAllEntitiesAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.findAllScriptsList_scripts": "ScriptsList",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.findEntityByIdAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.patchEntityAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.updateEntityAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkCreateAction_groups": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkDeleteAction_groups": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkPatchAction_groups": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkUpdateAction_groups": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.createAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.deleteEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.findAllEntitiesAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.findEntityByIdAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.patchEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.serviceGroupServices_groups": "ServiceDescriptorList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.updateEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.allLines_lines": "StringList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.bulkCreateAction_services": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.bulkDeleteAction_services": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.bulkPatchAction_services": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.bulkUpdateAction_services": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.createAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.createServiceTemplate_services": "otoroshi.models.ErrorTemplate",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.deleteEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.deleteServiceTemplate_services": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.findAllEntitiesAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.findEntityByIdAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.patchEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceAddTarget_services": "otoroshi.models.Target",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceDeleteTarget_services": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceHealth_services": "HealthCheckEventList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceTargets_services": "TargetsList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceTemplate_services": "ErrorTemplateList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.servicesForALine_lines": "ServiceDescriptorList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.updateEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.updateServiceTargets_services": "otoroshi.models.Target",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.updateServiceTemplate_services": "otoroshi.models.ErrorTemplate",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyConfig_snowmonkey": "otoroshi.models.SnowMonkeyConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyOutages_snowmonkey": "OutagesList",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.patchSnowMonkey_snowmonkey": "otoroshi.models.SnowMonkeyConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.resetSnowMonkey_snowmonkey": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.startSnowMonkey_snowmonkey": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.stopSnowMonkey_snowmonkey": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.updateSnowMonkey_snowmonkey": "otoroshi.models.SnowMonkeyConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.StatsController.globalLiveStats_live": "LiveStats",
    "operations_response_entity.otoroshi.controllers.adminapi.StatsController.hostMetrics_live": "HostMetrics",
    "operations_response_entity.otoroshi.controllers.adminapi.StatsController.serviceLiveStats_live": "LiveStats",
    "operations_response_entity.otoroshi.controllers.adminapi.StatsController.serviceLiveStats_services": "LiveStats",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkCreateAction_tcp": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkDeleteAction_tcp": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkPatchAction_tcp": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkUpdateAction_tcp": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.createAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.deleteEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.findAllEntitiesAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.findEntityByIdAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.patchEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.updateEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.bulkCreateAction_teams": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.bulkDeleteAction_teams": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.bulkPatchAction_teams": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.bulkUpdateAction_teams": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.createAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.deleteEntityAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.findAllEntitiesAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.findEntityByIdAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.patchEntityAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.updateEntityAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_admins": "otoroshi.models.OtoroshiAdmin",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_templates": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_templates": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateAuthModule_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateCertificate_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateDataExporterConfig_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateGlobalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateJwtVerifier_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateScript_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_templates": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateService_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateService_templates": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateSimpleAdmin_admins": "otoroshi.models.SimpleOtoroshiAdmin",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_templates": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateTeam_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateTenant_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateWebauthnAdmin_admins": "otoroshi.models.SimpleOtoroshiAdmin",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.templateSpec_analytics": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.bulkCreateAction_organizations": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.bulkDeleteAction_organizations": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.bulkPatchAction_organizations": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.bulkUpdateAction_organizations": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.createAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.deleteEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.findAllEntitiesAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.findEntityByIdAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.patchEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.updateEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.deleteAdmin_admins": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.discardAllPrivateAppsSessions_apps-sessions": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.discardAllSessions_admin-sessions": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.discardPrivateAppsSession_apps-sessions": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.discardSession_admin-sessions": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.privateAppsSessions_apps-sessions": "otoroshi.models.PrivateAppsUser",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.registerSimpleAdmin_admins": "otoroshi.models.SimpleOtoroshiAdmin",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.registerWebAuthnAdmin_admins": "otoroshi.models.WebAuthnOtoroshiAdmin",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.sessions_admin-sessions": "otoroshi.models.BackOfficeUser",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.simpleAdmins_admins": "SimpleAdminList",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.updateAdmin_admins": "otoroshi.models.SimpleOtoroshiAdmin",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.updateWebAuthnAdmin_admins": "otoroshi.models.WebAuthnOtoroshiAdmin",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.webAuthnAdmins_admins": "WebauthnAdminList",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.webAuthnDeleteAdmin_admins": "Done",
    "otoroshi.auth.BasicAuthModuleConfig.basicAuth": "Use standard basic auth or web login form",
    "otoroshi.auth.BasicAuthModuleConfig.desc": "description of the module",
    "otoroshi.auth.BasicAuthModuleConfig.id": "id of the module",
    "otoroshi.auth.BasicAuthModuleConfig.location": "location of the module",
    "otoroshi.auth.BasicAuthModuleConfig.metadata": "metadata of the module",
    "otoroshi.auth.BasicAuthModuleConfig.name": "name of the module",
    "otoroshi.auth.BasicAuthModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.BasicAuthModuleConfig.sessionMaxAge": "max age for the session cookie in seconds",
    "otoroshi.auth.BasicAuthModuleConfig.tags": "Entity tags",
    "otoroshi.auth.BasicAuthModuleConfig.users": "Users attached to the module",
    "otoroshi.auth.BasicAuthModuleConfig.webauthn": "Use webauthn for login",
    "otoroshi.auth.BasicAuthUser.email": "User email",
    "otoroshi.auth.BasicAuthUser.metadata": "User metadata",
    "otoroshi.auth.BasicAuthUser.name": "User name",
    "otoroshi.auth.BasicAuthUser.password": "User password (bcrypt hashed)",
    "otoroshi.auth.BasicAuthUser.rights": "User rights",
    "otoroshi.auth.BasicAuthUser.tags": "User tags",
    "otoroshi.auth.BasicAuthUser.webauthn": "Webauthn details",
    "otoroshi.auth.Credential.certId": "Id of the certificate used to sign SAML requests send to identity provider",
    "otoroshi.auth.Credential.certificate": "PEM certificate used to sign SAML requests send to identity provider",
    "otoroshi.auth.Credential.privateKey": "Private key of the certificate used to sign SAML requests send to identity provider",
    "otoroshi.auth.Credential.useOtoroshiCertificate": "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
    "otoroshi.auth.GenericOauth2ModuleConfig.accessTokenField": "Field name to get access token",
    "otoroshi.auth.GenericOauth2ModuleConfig.apiKeyMetaField": "Field name to extract apikey metadata",
    "otoroshi.auth.GenericOauth2ModuleConfig.apiKeyTagsField": "Field name to extract apikey tags",
    "otoroshi.auth.GenericOauth2ModuleConfig.authorizeUrl": "OAuth authorize URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.callbackUrl": "Otoroshi callback URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.claims": "The claims of the token",
    "otoroshi.auth.GenericOauth2ModuleConfig.clientId": "OAuth Client id",
    "otoroshi.auth.GenericOauth2ModuleConfig.clientSecret": "OAuth Client secret",
    "otoroshi.auth.GenericOauth2ModuleConfig.dataOverride": "Overiddes user data. Object with email as key",
    "otoroshi.auth.GenericOauth2ModuleConfig.desc": "Description of the config",
    "otoroshi.auth.GenericOauth2ModuleConfig.emailField": "Field name to get email from user profile",
    "otoroshi.auth.GenericOauth2ModuleConfig.extraMetadata": "Add metadata to user. Object with email as key",
    "otoroshi.auth.GenericOauth2ModuleConfig.id": "Unique id of the config",
    "otoroshi.auth.GenericOauth2ModuleConfig.introspectionUrl": "URL to introspect access_token",
    "otoroshi.auth.GenericOauth2ModuleConfig.jwtVerifier": "Algo. settings to verify JWT token",
    "otoroshi.auth.GenericOauth2ModuleConfig.location": "Location of the module",
    "otoroshi.auth.GenericOauth2ModuleConfig.loginUrl": "OAuth login URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.logoutUrl": "OAuth logout URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.metadata": "Metadata of the module",
    "otoroshi.auth.GenericOauth2ModuleConfig.mtlsConfig": "TLS config. for the module (for server accessed endpoints like tokenUrl, introspectionUrl, etc)",
    "otoroshi.auth.GenericOauth2ModuleConfig.name": "Name of the config",
    "otoroshi.auth.GenericOauth2ModuleConfig.nameField": "Field name to get name from user profile",
    "otoroshi.auth.GenericOauth2ModuleConfig.oidConfig": "URL of the OIDC config. file",
    "otoroshi.auth.GenericOauth2ModuleConfig.otoroshiDataField": "Field name to get otoroshi metadata from. You can specify sub fields using | as separator",
    "otoroshi.auth.GenericOauth2ModuleConfig.proxy": "Web proxy configuration for the module's http client",
    "otoroshi.auth.GenericOauth2ModuleConfig.readProfileFromToken": "The user profile will be read from the JWT token in id_token",
    "otoroshi.auth.GenericOauth2ModuleConfig.refreshTokens": "Refresh token support",
    "otoroshi.auth.GenericOauth2ModuleConfig.rightsOverride": "Overrides user rights. Object with email as key",
    "otoroshi.auth.GenericOauth2ModuleConfig.scope": "The scope of the token",
    "otoroshi.auth.GenericOauth2ModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.GenericOauth2ModuleConfig.sessionMaxAge": "max age for the session cookie in seconds",
    "otoroshi.auth.GenericOauth2ModuleConfig.superAdmins": "This module produces only super admins",
    "otoroshi.auth.GenericOauth2ModuleConfig.tags": "Entity tags",
    "otoroshi.auth.GenericOauth2ModuleConfig.tokenUrl": "OAuth token URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.useCookie": "Use cookies for redirection",
    "otoroshi.auth.GenericOauth2ModuleConfig.useJson": "Use JSON or URL Form Encoded as payload with the OAuth provider",
    "otoroshi.auth.GenericOauth2ModuleConfig.userInfoUrl": "OAuth userinfo to get user profile",
    "otoroshi.auth.GroupFilter.group": "The LDAP group",
    "otoroshi.auth.GroupFilter.team": "The team associated with this group",
    "otoroshi.auth.GroupFilter.tenant": "The tenant associated with this group",
    "otoroshi.auth.GroupRights.userRights": "The user rights associated with this group",
    "otoroshi.auth.GroupRights.users": "The users associated with this group",
    "otoroshi.auth.LdapAuthModuleConfig.adminPassword": "The admin password",
    "otoroshi.auth.LdapAuthModuleConfig.adminUsername": "The admin username",
    "otoroshi.auth.LdapAuthModuleConfig.allowEmptyPassword": "Allow empty password access",
    "otoroshi.auth.LdapAuthModuleConfig.basicAuth": "Use standard basic auth or web login form",
    "otoroshi.auth.LdapAuthModuleConfig.dataOverride": "Overiddes user data. Object with email as key",
    "otoroshi.auth.LdapAuthModuleConfig.desc": "Description of the config",
    "otoroshi.auth.LdapAuthModuleConfig.emailField": "Field name to get email from user profile",
    "otoroshi.auth.LdapAuthModuleConfig.extraMetadata": "Add metadata to user. Object with email as key",
    "otoroshi.auth.LdapAuthModuleConfig.groupFilters": "LDAP group filters",
    "otoroshi.auth.LdapAuthModuleConfig.groupRights": "Rights associated with groups",
    "otoroshi.auth.LdapAuthModuleConfig.id": "Unique id of the config",
    "otoroshi.auth.LdapAuthModuleConfig.location": "Location of the module",
    "otoroshi.auth.LdapAuthModuleConfig.metadata": "Metadata of the module",
    "otoroshi.auth.LdapAuthModuleConfig.metadataField": "Field name to get metadata from user profile",
    "otoroshi.auth.LdapAuthModuleConfig.name": "Name of the config",
    "otoroshi.auth.LdapAuthModuleConfig.nameField": "Field name to get name from user profile",
    "otoroshi.auth.LdapAuthModuleConfig.rightsOverride": "Overrides user rights. Object with email as key",
    "otoroshi.auth.LdapAuthModuleConfig.searchBase": "LDAP search base",
    "otoroshi.auth.LdapAuthModuleConfig.searchFilter": "Filter for users",
    "otoroshi.auth.LdapAuthModuleConfig.serverUrls": "LDAP server list of url",
    "otoroshi.auth.LdapAuthModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.LdapAuthModuleConfig.sessionMaxAge": "Max age of the session",
    "otoroshi.auth.LdapAuthModuleConfig.superAdmins": "This module produces only super admins",
    "otoroshi.auth.LdapAuthModuleConfig.tags": "Entity tags",
    "otoroshi.auth.LdapAuthModuleConfig.userBase": "LDAP user base DN",
    "otoroshi.auth.Oauth1ModuleConfig.accessTokenURL": "Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow",
    "otoroshi.auth.Oauth1ModuleConfig.authorizeURL": "The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider",
    "otoroshi.auth.Oauth1ModuleConfig.callbackURL": "The location where the identity provider returns a browser after the user finishes authenticating with their IDP",
    "otoroshi.auth.Oauth1ModuleConfig.consumerKey": "Client ID obtained on identity provider",
    "otoroshi.auth.Oauth1ModuleConfig.consumerSecret": "Client secret obtained from identity provider configuration",
    "otoroshi.auth.Oauth1ModuleConfig.desc": "Description of the oauth 1 module",
    "otoroshi.auth.Oauth1ModuleConfig.httpMethod": "Method used to fetch access and request token",
    "otoroshi.auth.Oauth1ModuleConfig.id": "Id of the module",
    "otoroshi.auth.Oauth1ModuleConfig.location": "The location of the OAuth 1 module",
    "otoroshi.auth.Oauth1ModuleConfig.metadata": "The metadata of the OAuth 1 module",
    "otoroshi.auth.Oauth1ModuleConfig.name": "The name of the OAuth 1 module",
    "otoroshi.auth.Oauth1ModuleConfig.profileURL": "URL fetch by otoroshi to get user information from identity provider",
    "otoroshi.auth.Oauth1ModuleConfig.requestTokenURL": "URL fetch to get a request token during the first step of the authorization OAuth 1 flow",
    "otoroshi.auth.Oauth1ModuleConfig.rightsOverride": "Overrides user rights of users connected by OAuth1 module",
    "otoroshi.auth.Oauth1ModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.Oauth1ModuleConfig.sessionMaxAge": "Max age of the session",
    "otoroshi.auth.Oauth1ModuleConfig.tags": "OAuth module tags",
    "otoroshi.auth.SAMLCredentials.encryptedAssertions": "Indicates if assertions have to be encrypt before sending to identity provider",
    "otoroshi.auth.SAMLCredentials.encryptionKey": "Pair of configuration used to encrypt assertions",
    "otoroshi.auth.SAMLCredentials.signedDocuments": "Indicates if SAML documents have to be sign before sending to identity provider",
    "otoroshi.auth.SAMLCredentials.signingKey": "Pair of configuration used to sign documents",
    "otoroshi.auth.SAMLSignature.algorithm": "Algorithm to sign documents or assertions",
    "otoroshi.auth.SAMLSignature.canocalizationMethod": "Canonicalization Method for XML Signatures",
    "otoroshi.auth.SamlAuthModuleConfig.credentials": "Certificates and private keys to sign and encrypt SAML documents/assertions",
    "otoroshi.auth.SamlAuthModuleConfig.desc": "Description of the SAML Auth module",
    "otoroshi.auth.SamlAuthModuleConfig.emailAttributeName": "Field name to find email in user profile returned by identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.id": "Id of the SAML Auth module",
    "otoroshi.auth.SamlAuthModuleConfig.issuer": "Issuer of the SAML requests",
    "otoroshi.auth.SamlAuthModuleConfig.location": "Location of the SAML module",
    "otoroshi.auth.SamlAuthModuleConfig.metadata": "Metadata of the SAML module",
    "otoroshi.auth.SamlAuthModuleConfig.name": "Name of the SAML module",
    "otoroshi.auth.SamlAuthModuleConfig.nameIDFormat": "Format of the name ID",
    "otoroshi.auth.SamlAuthModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.SamlAuthModuleConfig.sessionMaxAge": "Max age of the session",
    "otoroshi.auth.SamlAuthModuleConfig.signature": "Algorithm and canonicalization method to sign SAML documents",
    "otoroshi.auth.SamlAuthModuleConfig.singleLogoutProtocolBinding": "Protocol binding used by identity provider to logout users",
    "otoroshi.auth.SamlAuthModuleConfig.singleLogoutUrl": "URL used by otoroshi to disconnect users from identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.singleSignOnUrl": "URL used by otoroshi to redirect users to identity provider login page",
    "otoroshi.auth.SamlAuthModuleConfig.ssoProtocolBinding": "Protocol binding used to send login request to identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.tags": "SAML module tags",
    "otoroshi.auth.SamlAuthModuleConfig.usedNameIDAsEmail": "Is name ID used as email ?",
    "otoroshi.auth.SamlAuthModuleConfig.validateAssertions": "Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.validateSignature": "Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.validatingCertificates": "Certificates used to validate SAML response signature",
    "otoroshi.auth.SessionCookieValues.httpOnly": "Is cookie accessible on server side only",
    "otoroshi.auth.SessionCookieValues.secure": "Is cookie for https only",
    "otoroshi.auth.WebAuthnDetails.credentials": "Webauthn credentials",
    "otoroshi.auth.WebAuthnDetails.handle": "Webauthn user handle",
    "otoroshi.events.HealthCheckEvent.duration": "Duration of the call",
    "otoroshi.events.HealthCheckEvent.error": "Error if any",
    "otoroshi.events.HealthCheckEvent.health": "Health status",
    "otoroshi.events.HealthCheckEvent.logicCheck": "Did the service respond with the logic check",
    "otoroshi.events.HealthCheckEvent.status": "Check status",
    "otoroshi.events.HealthCheckEvent.url": "Checked url",
    "otoroshi.events.KafkaConfig.keyPass": "Optional keypass",
    "otoroshi.events.KafkaConfig.keystore": "Optional keystore",
    "otoroshi.events.KafkaConfig.mtlsConfig": "TLS config to access the cluster",
    "otoroshi.events.KafkaConfig.sendEvents": "Send events to it, or just connect",
    "otoroshi.events.KafkaConfig.servers": "URLs of the kafka servers",
    "otoroshi.events.KafkaConfig.topic": "Optional kafka topic (otoroshi-events by default)",
    "otoroshi.events.KafkaConfig.truststore": "Optional truststore",
    "otoroshi.events.PulsarConfig.mtlsConfig": "TLS config to access the cluster",
    "otoroshi.events.PulsarConfig.namespace": "Pulsar namespace",
    "otoroshi.events.PulsarConfig.tenant": "Pulsar tenant",
    "otoroshi.events.PulsarConfig.tlsTrustCertsFilePath": "Trusted cert path",
    "otoroshi.events.PulsarConfig.topic": "Pulsar topic",
    "otoroshi.events.PulsarConfig.uri": "Pulsar cluster url",
    "otoroshi.events.StatsdConfig.datadog": "Datadog agent",
    "otoroshi.events.StatsdConfig.host": "The host of the StatsD agent",
    "otoroshi.events.StatsdConfig.port": "The port of the StatsD agent",
    "otoroshi.models.ApiDescriptor.exposeApi": "Is this an API",
    "otoroshi.models.ApiDescriptor.openApiDescriptorUrl": "openapi descriptor url",
    "otoroshi.models.ApiKey.allowClientIdOnly": "This apikey can be used juste with the client_id value",
    "otoroshi.models.ApiKey.authorizedEntities": "The group/service ids (prefixed by group_ or service_ on which the key is authorized",
    "otoroshi.models.ApiKey.clientId": "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
    "otoroshi.models.ApiKey.clientName": "The name of the api key, for humans ;-)",
    "otoroshi.models.ApiKey.clientSecret": "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
    "otoroshi.models.ApiKey.constrainedServicesOnly": "This apikey can only be used on services that constrained their apikey routing",
    "otoroshi.models.ApiKey.dailyQuota": "Authorized number of calls per day",
    "otoroshi.models.ApiKey.description": "Description of this apikey",
    "otoroshi.models.ApiKey.enabled": "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
    "otoroshi.models.ApiKey.location": "The location of the apikey",
    "otoroshi.models.ApiKey.metadata": "Bunch of metadata for the key",
    "otoroshi.models.ApiKey.monthlyQuota": "Authorized number of calls per month",
    "otoroshi.models.ApiKey.readOnly": "The apikey only allow access for GET, HEAD and OPTIONS verbs",
    "otoroshi.models.ApiKey.restrictions": "Apikey restrictions settings",
    "otoroshi.models.ApiKey.rotation": "Apikey rotation settings",
    "otoroshi.models.ApiKey.tags": "Apikey tags",
    "otoroshi.models.ApiKey.throttlingQuota": "Authorized number of calls per second, measured on 10 seconds",
    "otoroshi.models.ApiKey.validUntil": "Date until when the apikey is valid",
    "otoroshi.models.ApiKeyConstraints.basicAuth": "Settings to extract basic auth style apikey",
    "otoroshi.models.ApiKeyConstraints.clientIdAuth": "Settings to extract client_id only apikey",
    "otoroshi.models.ApiKeyConstraints.customHeadersAuth": "Settings to extract apikey from custom headers",
    "otoroshi.models.ApiKeyConstraints.jwtAuth": "Settings to extract apikey from jwt token",
    "otoroshi.models.ApiKeyConstraints.routing": "Routing settings for this apikey",
    "otoroshi.models.ApiKeyRotation.enabled": "Rotation enabled",
    "otoroshi.models.ApiKeyRotation.gracePeriod": "period (in hours) during which both secrets works",
    "otoroshi.models.ApiKeyRotation.nextSecret": "Next client_secret value",
    "otoroshi.models.ApiKeyRotation.rotationEvery": "Rotate every n hours",
    "otoroshi.models.ApiKeyRouteMatcher.allMetaIn": "Routing if all meta presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.allMetaKeysIn": "Routing if all meta keys presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.allTagsIn": "Routing if all tags presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.noneMetaIn": "Routing if none meta presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.noneMetaKeysIn": "Routing if none meta keys presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.noneTagIn": "Routing if none tags presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.oneMetaIn": "Routing if one meta presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.oneMetaKeyIn": "Routing if one meta key presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.oneTagIn": "outing if one tag presents in apikey",
    "otoroshi.models.AutoCert.allowed": "allowed domains",
    "otoroshi.models.AutoCert.caRef": "Generate cert from the following CA",
    "otoroshi.models.AutoCert.enabled": "Enable auto cert",
    "otoroshi.models.AutoCert.notAllowed": "not allowed domains",
    "otoroshi.models.AutoCert.replyNicely": "Reply TLS error with an auto generated certificate for the domain",
    "otoroshi.models.BackOfficeUser.authConfigId": "Session created from auth module id",
    "otoroshi.models.BackOfficeUser.createdAt": "Creation date for the session",
    "otoroshi.models.BackOfficeUser.email": "User email",
    "otoroshi.models.BackOfficeUser.expiredAt": "Expiration date for the session",
    "otoroshi.models.BackOfficeUser.lastRefresh": "Last refresh of the session (OAuth with refresh tokens)",
    "otoroshi.models.BackOfficeUser.location": "Entity location",
    "otoroshi.models.BackOfficeUser.metadata": "Entity metadata",
    "otoroshi.models.BackOfficeUser.name": "Session user name",
    "otoroshi.models.BackOfficeUser.profile": "Session user profile",
    "otoroshi.models.BackOfficeUser.randomId": "Session user random id",
    "otoroshi.models.BackOfficeUser.rights": "Session user rights",
    "otoroshi.models.BackOfficeUser.simpleLogin": "Session generated from a simple login module (like basic or ldap)",
    "otoroshi.models.BackOfficeUser.tags": "Entity tags",
    "otoroshi.models.BackOfficeUser.token": "Session tokens (only if OAuth/OIDC)",
    "otoroshi.models.BadResponse.body": "The body of the HTTP response",
    "otoroshi.models.BadResponse.headers": "The HTTP headers of the response",
    "otoroshi.models.BadResponse.status": "The HTTP status for the response",
    "otoroshi.models.BadResponsesFaultConfig.ratio": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
    "otoroshi.models.BadResponsesFaultConfig.responses": "The possibles responses",
    "otoroshi.models.BasicAuthConstraints.enabled": "Constraint enabled",
    "otoroshi.models.BasicAuthConstraints.headerName": "Header name to get client_id:client_secret base64 encoded",
    "otoroshi.models.BasicAuthConstraints.queryName": "Query param name to get client_id:client_secret base64 encoded",
    "otoroshi.models.Canary.enabled": "Use canary mode for this service",
    "otoroshi.models.Canary.root": "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
    "otoroshi.models.Canary.targets": "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
    "otoroshi.models.Canary.traffic": "Ratio of traffic that will be sent to canary targets.",
    "otoroshi.models.ChaosConfig.badResponsesFaultConfig": "Settings for bad responses",
    "otoroshi.models.ChaosConfig.enabled": "Whether or not this config is enabled",
    "otoroshi.models.ChaosConfig.largeRequestFaultConfig": "Settings for large requests",
    "otoroshi.models.ChaosConfig.largeResponseFaultConfig": "Settings for large responses",
    "otoroshi.models.ChaosConfig.latencyInjectionFaultConfig": "Settings for latency injection",
    "otoroshi.models.CleverCloudSettings.consumerKey": "Clever-Cloud oauth consumer key",
    "otoroshi.models.CleverCloudSettings.consumerSecret": "Clever-Cloud oauth consumer secret",
    "otoroshi.models.CleverCloudSettings.orgaId": "Clever-Cloud organization id",
    "otoroshi.models.CleverCloudSettings.secret": "Clever-Cloud oauth secret",
    "otoroshi.models.CleverCloudSettings.token": "Clever-Cloud oauth token",
    "otoroshi.models.ClientConfig.backoffFactor": "Specify the factor to multiply the delay for each retry",
    "otoroshi.models.ClientConfig.callAndStreamTimeout": "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
    "otoroshi.models.ClientConfig.callTimeout": "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
    "otoroshi.models.ClientConfig.connectionTimeout": "Timeout at connection",
    "otoroshi.models.ClientConfig.customTimeouts": "Custom timeouts per path",
    "otoroshi.models.ClientConfig.globalTimeout": "Specify how long the global call (with retries) should last at most in milliseconds",
    "otoroshi.models.ClientConfig.idleTimeout": "Timeout on idle connection",
    "otoroshi.models.ClientConfig.maxErrors": "Specify how many errors can pass before opening the circuit breaker",
    "otoroshi.models.ClientConfig.proxy": "Web proxy settings for http client",
    "otoroshi.models.ClientConfig.retries": "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
    "otoroshi.models.ClientConfig.retryInitialDelay": "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
    "otoroshi.models.ClientConfig.sampleInterval": "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
    "otoroshi.models.ClientConfig.useCircuitBreaker": "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
    "otoroshi.models.ClientIdAuthConstraints.enabled": "Constraint enabled",
    "otoroshi.models.ClientIdAuthConstraints.headerName": "Header name to find client_id",
    "otoroshi.models.ClientIdAuthConstraints.queryName": "Query param name to find client_id",
    "otoroshi.models.CorsSettings.allowCredentials": "Allow to pass credentials",
    "otoroshi.models.CorsSettings.allowHeaders": "The cors allowed headers",
    "otoroshi.models.CorsSettings.allowMethods": "The cors allowed methods",
    "otoroshi.models.CorsSettings.allowOrigin": "The cors allowed origin",
    "otoroshi.models.CorsSettings.enabled": "Whether or not cors is enabled",
    "otoroshi.models.CorsSettings.excludedPatterns": "The cors excluded patterns",
    "otoroshi.models.CorsSettings.exposeHeaders": "The cors exposed header",
    "otoroshi.models.CorsSettings.maxAge": "Cors max age",
    "otoroshi.models.CustomHeadersAuthConstraints.clientIdHeaderName": "Header name to find client_id",
    "otoroshi.models.CustomHeadersAuthConstraints.clientSecretHeaderName": "Header name to find client_secret",
    "otoroshi.models.CustomHeadersAuthConstraints.enabled": "Constraint enabled",
    "otoroshi.models.CustomTimeouts.callAndStreamTimeout": "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
    "otoroshi.models.CustomTimeouts.callTimeout": "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
    "otoroshi.models.CustomTimeouts.connectionTimeout": "Timeout at connection",
    "otoroshi.models.CustomTimeouts.globalTimeout": "Specify how long the global call (with retries) should last at most in milliseconds",
    "otoroshi.models.CustomTimeouts.idleTimeout": "Timeout on idle connection",
    "otoroshi.models.CustomTimeouts.path": "path on which this configuration works",
    "otoroshi.models.DataCenterMatch.dc": "DC name",
    "otoroshi.models.DataExporterConfig.bufferSize": "buffer size",
    "otoroshi.models.DataExporterConfig.config": "Data Exporter config",
    "otoroshi.models.DataExporterConfig.desc": "Description",
    "otoroshi.models.DataExporterConfig.enabled": "Boolean",
    "otoroshi.models.DataExporterConfig.filtering": "filtering",
    "otoroshi.models.DataExporterConfig.groupDuration": "duration",
    "otoroshi.models.DataExporterConfig.groupSize": "Group size",
    "otoroshi.models.DataExporterConfig.id": "Id",
    "otoroshi.models.DataExporterConfig.jsonWorkers": "nb workers",
    "otoroshi.models.DataExporterConfig.location": "location",
    "otoroshi.models.DataExporterConfig.metadata": "Metadata",
    "otoroshi.models.DataExporterConfig.name": "Name",
    "otoroshi.models.DataExporterConfig.projection": "projection",
    "otoroshi.models.DataExporterConfig.sendWorkers": "send workers",
    "otoroshi.models.DataExporterConfig.tags": "Entity tags",
    "otoroshi.models.DataExporterConfig.typ": "Type of data exporter",
    "otoroshi.models.DataExporterConfigFiltering.exclude": "Include the events matching one of those filters",
    "otoroshi.models.DataExporterConfigFiltering.include": "Exclude the events matching one of those filters",
    "otoroshi.models.DefaultToken.strict": "If the token already exists in the request, then fail",
    "otoroshi.models.DefaultToken.token": "The default token",
    "otoroshi.models.DefaultToken.verificationSettings": "Verification settings",
    "otoroshi.models.ESAlgoSettings.privateKey": "The EC private key. If used for verification, can be null",
    "otoroshi.models.ESAlgoSettings.publicKey": "The EC private key. If used for signing, can be null",
    "otoroshi.models.ESAlgoSettings.size": "SHA function size",
    "otoroshi.models.ESKPAlgoSettings.certId": "Certificate id to use the keypair",
    "otoroshi.models.ESKPAlgoSettings.size": "Size of the key",
    "otoroshi.models.ElasticAnalyticsConfig.clusterUri": "Cluster URL",
    "otoroshi.models.ElasticAnalyticsConfig.headers": "Additionnal headers in the http request",
    "otoroshi.models.ElasticAnalyticsConfig.index": "Index name",
    "otoroshi.models.ElasticAnalyticsConfig.mtlsConfig": "TLS settings for the http client",
    "otoroshi.models.ElasticAnalyticsConfig.password": "Elastic password",
    "otoroshi.models.ElasticAnalyticsConfig.type": "Object type",
    "otoroshi.models.ElasticAnalyticsConfig.user": "Elastic user",
    "otoroshi.models.EntityLocation.teams": "Teams of the current entity",
    "otoroshi.models.EntityLocation.tenant": "Organization of the current entity",
    "otoroshi.models.ErrorTemplate.messages": "Map of messages",
    "otoroshi.models.ErrorTemplate.serviceId": "Service id for this template",
    "otoroshi.models.ErrorTemplate.template40x": "The 40x error html template",
    "otoroshi.models.ErrorTemplate.template50x": "The 50x error html template",
    "otoroshi.models.ErrorTemplate.templateBuild": "The build html template",
    "otoroshi.models.ErrorTemplate.templateMaintenance": "The maintenance html template",
    "otoroshi.models.ExporterRef.config": "Script config",
    "otoroshi.models.ExporterRef.ref": "Script id",
    "otoroshi.models.FileSettings.maxFileSize": "Max file size in bytes",
    "otoroshi.models.FileSettings.path": "File path",
    "otoroshi.models.GeoPositionRadius.latitude": "Latitude of the position",
    "otoroshi.models.GeoPositionRadius.longitude": "Longitude of the position",
    "otoroshi.models.GeoPositionRadius.radius": "Radius of the circle in meters",
    "otoroshi.models.GeolocationMatch.positions": "Possible positions",
    "otoroshi.models.GlobalConfig.alertsEmails": "Email addresses that will receive all Otoroshi alert events",
    "otoroshi.models.GlobalConfig.alertsWebhooks": "Webhook that will receive all Otoroshi alert events",
    "otoroshi.models.GlobalConfig.analyticsWebhooks": "Webhook that will receive all internal Otoroshi events",
    "otoroshi.models.GlobalConfig.apiReadOnly": "If enabled, Admin API won't be able to write/update/delete entities",
    "otoroshi.models.GlobalConfig.autoCert": "Auto certs settings",
    "otoroshi.models.GlobalConfig.autoLinkToDefaultGroup": "If not defined, every new service descriptor will be added to the default group",
    "otoroshi.models.GlobalConfig.backOfficeAuthRef": "Id of the auth module used for otoroshi-ui login",
    "otoroshi.models.GlobalConfig.cleverSettings": "Optional CleverCloud configuration",
    "otoroshi.models.GlobalConfig.elasticReadsConfig": "Config. for elastic reads",
    "otoroshi.models.GlobalConfig.elasticWritesConfigs": "Configs. for Elastic writes",
    "otoroshi.models.GlobalConfig.enableEmbeddedMetrics": "Enable embedded metrics",
    "otoroshi.models.GlobalConfig.endlessIpAddresses": "IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros",
    "otoroshi.models.GlobalConfig.geolocationSettings": "Settings for geolocation extraction",
    "otoroshi.models.GlobalConfig.ipFiltering": "Global ip filtering settings",
    "otoroshi.models.GlobalConfig.kafkaConfig": "Global kafka settings. deprecated",
    "otoroshi.models.GlobalConfig.letsEncryptSettings": "Let's encrypt (ACME) settings",
    "otoroshi.models.GlobalConfig.limitConcurrentRequests": "If enabled, Otoroshi will reject new request if too much at the same time",
    "otoroshi.models.GlobalConfig.lines": "Possibles lines for Otoroshi",
    "otoroshi.models.GlobalConfig.logAnalyticsOnServer": "Log analytics event on the server",
    "otoroshi.models.GlobalConfig.mailerSettings": "Optional mailer configuration",
    "otoroshi.models.GlobalConfig.maintenanceMode": "Global maintenant mode",
    "otoroshi.models.GlobalConfig.maxConcurrentRequests": "The number of authorized request processed at the same time",
    "otoroshi.models.GlobalConfig.maxHttp10ResponseSize": "The max size in bytes of an HTTP 1.0 response",
    "otoroshi.models.GlobalConfig.maxLogsSize": "Number of events kept locally",
    "otoroshi.models.GlobalConfig.maxWebhookSize": "Max number of items in webhooks",
    "otoroshi.models.GlobalConfig.metadata": "Entity metadata",
    "otoroshi.models.GlobalConfig.middleFingers": "Use middle finger emoji as a response character for endless HTTP responses",
    "otoroshi.models.GlobalConfig.otoroshiId": "Unique id for this otoroshi instance",
    "otoroshi.models.GlobalConfig.perIpThrottlingQuota": "Authorized number of calls per second globally per IP address, measured on 10 seconds",
    "otoroshi.models.GlobalConfig.plugins": "global plugins settings",
    "otoroshi.models.GlobalConfig.proxies": "Web proxies settings",
    "otoroshi.models.GlobalConfig.scripts": "global plugins settings. will be deprecated soon",
    "otoroshi.models.GlobalConfig.snowMonkeyConfig": "Snowmonky settings",
    "otoroshi.models.GlobalConfig.statsdConfig": "Statsd settings (agent connection)",
    "otoroshi.models.GlobalConfig.streamEntityOnly": "HTTP will be streamed only. Doesn't work with old browsers",
    "otoroshi.models.GlobalConfig.tags": "Entity tags",
    "otoroshi.models.GlobalConfig.throttlingQuota": "Authorized number of calls per second globally, measured on 10 seconds",
    "otoroshi.models.GlobalConfig.tlsSettings": "TLS settings",
    "otoroshi.models.GlobalConfig.u2fLoginOnly": "If enabled, login to backoffice through Auth0 will be disabled",
    "otoroshi.models.GlobalConfig.useAkkaHttpClient": "Globally use akka http client for everything",
    "otoroshi.models.GlobalConfig.useCircuitBreakers": "If enabled, services will be authorized to use circuit breakers",
    "otoroshi.models.GlobalConfig.userAgentSettings": "Settings for useragent extraction",
    "otoroshi.models.GlobalJwtVerifier.algoSettings": "Algo settings of the verifier",
    "otoroshi.models.GlobalJwtVerifier.desc": "Verifier description",
    "otoroshi.models.GlobalJwtVerifier.id": "Verifier id",
    "otoroshi.models.GlobalJwtVerifier.location": "Entity location",
    "otoroshi.models.GlobalJwtVerifier.metadata": "Entity metadata",
    "otoroshi.models.GlobalJwtVerifier.name": "Verifier name",
    "otoroshi.models.GlobalJwtVerifier.source": "Where to find the jwt token",
    "otoroshi.models.GlobalJwtVerifier.strategy": "The strategy of the verifier",
    "otoroshi.models.GlobalJwtVerifier.strict": "Does it fail if JWT not found",
    "otoroshi.models.GlobalJwtVerifier.tags": "Entity tags",
    "otoroshi.models.GlobalScripts.enabled": "Global scripts enabled",
    "otoroshi.models.GlobalScripts.jobConfig": "jobs enabled",
    "otoroshi.models.GlobalScripts.jobRefs": "running jobs",
    "otoroshi.models.GlobalScripts.preRouteConfig": "pre-route config",
    "otoroshi.models.GlobalScripts.preRouteRefs": "pre-route plugins enabled",
    "otoroshi.models.GlobalScripts.sinkConfig": "sinks config",
    "otoroshi.models.GlobalScripts.sinkRefs": "sinks enabled",
    "otoroshi.models.GlobalScripts.transformersConfig": "transformers config",
    "otoroshi.models.GlobalScripts.transformersRefs": "transformers enabled",
    "otoroshi.models.GlobalScripts.validatorConfig": "validator config",
    "otoroshi.models.GlobalScripts.validatorRefs": "validator enabled",
    "otoroshi.models.HSAlgoSettings.base64": "The secret is base64 encoded",
    "otoroshi.models.HSAlgoSettings.secret": "HMAC secret",
    "otoroshi.models.HSAlgoSettings.size": "Size for SHA function",
    "otoroshi.models.HealthCheck.enabled": "Whether or not healthcheck is enabled on the current service descriptor",
    "otoroshi.models.HealthCheck.url": "The URL to check",
    "otoroshi.models.InCookie.name": "Cookie name",
    "otoroshi.models.InHeader.name": "Header name",
    "otoroshi.models.InHeader.remove": "Remove from value",
    "otoroshi.models.InQueryParam.name": "Query param name",
    "otoroshi.models.InfraProviderMatch.provider": "provider name",
    "otoroshi.models.IpFiltering.blacklist": "Blacklisted IP addresses",
    "otoroshi.models.IpFiltering.whitelist": "Whitelisted IP addresses",
    "otoroshi.models.IpStackGeolocationSettings.apikey": "IpStack apikey",
    "otoroshi.models.IpStackGeolocationSettings.enabled": "enable ipstack geolocation",
    "otoroshi.models.IpStackGeolocationSettings.timeout": "API call timeout",
    "otoroshi.models.JWKSAlgoSettings.headers": "Http header when fetching JWKS",
    "otoroshi.models.JWKSAlgoSettings.kty": "Key type",
    "otoroshi.models.JWKSAlgoSettings.mtlsConfig": "TLS settings for http client",
    "otoroshi.models.JWKSAlgoSettings.proxy": "Web proxy for http client",
    "otoroshi.models.JWKSAlgoSettings.timeout": "Timeout when fetching JWKS",
    "otoroshi.models.JWKSAlgoSettings.ttl": "Cache ttl",
    "otoroshi.models.JWKSAlgoSettings.url": "JWKS url",
    "otoroshi.models.JwtAuthConstraints.cookieName": "Cookie name to extract jwt token",
    "otoroshi.models.JwtAuthConstraints.enabled": "Constraint enabled",
    "otoroshi.models.JwtAuthConstraints.headerName": "Header name to extract jwt token",
    "otoroshi.models.JwtAuthConstraints.includeRequestAttributes": "Jwt token should include verb and path",
    "otoroshi.models.JwtAuthConstraints.keyPairSigned": "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
    "otoroshi.models.JwtAuthConstraints.maxJwtLifespanSecs": "Check if token does not have a long lifespan",
    "otoroshi.models.JwtAuthConstraints.queryName": "Query param name to extract jwt token",
    "otoroshi.models.JwtAuthConstraints.secretSigned": "Jwt token signed with the client_secret",
    "otoroshi.models.KidAlgoSettings.onlyExposedCerts": "Use only exposed certs",
    "otoroshi.models.LargeRequestFaultConfig.additionalRequestSize": "The size added to the request body in bytes. Added payload will be spaces only.",
    "otoroshi.models.LargeRequestFaultConfig.ratio": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
    "otoroshi.models.LargeResponseFaultConfig.additionalResponseSize": "Add n 0 bytes",
    "otoroshi.models.LargeResponseFaultConfig.ratio": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
    "otoroshi.models.LatencyInjectionFaultConfig.from": "The start range of latency added to the request",
    "otoroshi.models.LatencyInjectionFaultConfig.ratio": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
    "otoroshi.models.LatencyInjectionFaultConfig.to": "The end range of latency added to the request",
    "otoroshi.models.LocalJwtVerifier.algoSettings": "Algo settings",
    "otoroshi.models.LocalJwtVerifier.enabled": "Verifier enabled",
    "otoroshi.models.LocalJwtVerifier.excludedPatterns": "Verifier excluded paths",
    "otoroshi.models.LocalJwtVerifier.source": "Token source",
    "otoroshi.models.LocalJwtVerifier.strategy": "Token strategy",
    "otoroshi.models.LocalJwtVerifier.strict": "Strict token verification",
    "otoroshi.models.MappingSettings.map": "Change values",
    "otoroshi.models.MappingSettings.remove": "Remove some token claims",
    "otoroshi.models.MappingSettings.values": "Add values",
    "otoroshi.models.MaxmindGeolocationSettings.enabled": "Geolocation using maxmind db enabled",
    "otoroshi.models.MaxmindGeolocationSettings.path": "Maxmlind db file path",
    "otoroshi.models.MetricsSettings.labels": "Exposed labels",
    "otoroshi.models.NetworkLocationMatch.dataCenter": "Datacenter name",
    "otoroshi.models.NetworkLocationMatch.provider": "Provider name",
    "otoroshi.models.NetworkLocationMatch.rack": "Rack name",
    "otoroshi.models.NetworkLocationMatch.region": "Region name",
    "otoroshi.models.NetworkLocationMatch.zone": "Zone name",
    "otoroshi.models.Outage.descriptorId": "Service descriptor id",
    "otoroshi.models.Outage.descriptorName": "Service descriptor name",
    "otoroshi.models.Outage.duration": "Outage duration",
    "otoroshi.models.Outage.startedAt": "Outage starting date",
    "otoroshi.models.Outage.until": "Outage ending date",
    "otoroshi.models.PassThrough.verificationSettings": "Verification settings",
    "otoroshi.models.PrivateAppsUser.authConfigId": "Auth module id that created the session",
    "otoroshi.models.PrivateAppsUser.createdAt": "Creation date of the session",
    "otoroshi.models.PrivateAppsUser.email": "Session user email",
    "otoroshi.models.PrivateAppsUser.expiredAt": "Session expiration date",
    "otoroshi.models.PrivateAppsUser.lastRefresh": "Session last refresh (if OAuth refresh_token supported)",
    "otoroshi.models.PrivateAppsUser.location": "Entity location",
    "otoroshi.models.PrivateAppsUser.metadata": "Entity metadata",
    "otoroshi.models.PrivateAppsUser.name": "Entity name",
    "otoroshi.models.PrivateAppsUser.otoroshiData": "Otoroshi oriented metadata",
    "otoroshi.models.PrivateAppsUser.profile": "Session user profile",
    "otoroshi.models.PrivateAppsUser.randomId": "Session random id",
    "otoroshi.models.PrivateAppsUser.realm": "Session realm name",
    "otoroshi.models.PrivateAppsUser.tags": "Entity tags",
    "otoroshi.models.PrivateAppsUser.token": "Session tokens (from OAuth)",
    "otoroshi.models.Proxies.alertEmails": "Web proxy used to send alert emails",
    "otoroshi.models.Proxies.auth": "Web proxy used to call OAuth providers",
    "otoroshi.models.Proxies.authority": "Web proxy used to check authorities",
    "otoroshi.models.Proxies.clevercloud": "Web proxy used to call clevercloud",
    "otoroshi.models.Proxies.elastic": "Web proxy used to call elastic",
    "otoroshi.models.Proxies.eventsWebhooks": "Web proxy used to call webhooks",
    "otoroshi.models.Proxies.jwk": "Web proxy used to fetch jwks",
    "otoroshi.models.Proxies.services": "Web proxy used to access services targets",
    "otoroshi.models.RSAKPAlgoSettings.certId": "Certificate id",
    "otoroshi.models.RSAKPAlgoSettings.size": "SHA function size",
    "otoroshi.models.RSAlgoSettings.privateKey": "Private key (for signing)",
    "otoroshi.models.RSAlgoSettings.publicKey": "Public key (for verification)",
    "otoroshi.models.RSAlgoSettings.size": "SHA function size",
    "otoroshi.models.RackMatch.rack": "Rack name",
    "otoroshi.models.RedirectionSettings.code": "The http redirect code",
    "otoroshi.models.RedirectionSettings.enabled": "Whether or not redirection is enabled",
    "otoroshi.models.RedirectionSettings.to": "The location for redirection",
    "otoroshi.models.RefJwtVerifier.enabled": "Verifier enabled",
    "otoroshi.models.RefJwtVerifier.excludedPatterns": "Verifier excluded paths",
    "otoroshi.models.RefJwtVerifier.ids": "Verifiers ids",
    "otoroshi.models.RegionMatch.region": "Region name",
    "otoroshi.models.RemainingQuotas.authorizedCallsPerDay": "Number of authorized call per day",
    "otoroshi.models.RemainingQuotas.authorizedCallsPerMonth": "Number of authorized call per month",
    "otoroshi.models.RemainingQuotas.authorizedCallsPerSec": "Number of authorized call per second",
    "otoroshi.models.RemainingQuotas.currentCallsPerDay": "Current number of call per day",
    "otoroshi.models.RemainingQuotas.currentCallsPerMonth": "Current number of call per month",
    "otoroshi.models.RemainingQuotas.currentCallsPerSec": "Current number of call per second",
    "otoroshi.models.RemainingQuotas.remainingCallsPerDay": "Remaining number of call per day",
    "otoroshi.models.RemainingQuotas.remainingCallsPerMonth": "Remaining number of call per month",
    "otoroshi.models.RemainingQuotas.remainingCallsPerSec": "Remaining number of call per second",
    "otoroshi.models.RestrictionPath.method": "Method of the http request",
    "otoroshi.models.RestrictionPath.path": "Path of the http request",
    "otoroshi.models.Restrictions.allowLast": "Evalute allowed paths after everything else",
    "otoroshi.models.Restrictions.allowed": "Allowed paths",
    "otoroshi.models.Restrictions.enabled": "Restrictions enabled",
    "otoroshi.models.Restrictions.forbidden": "Forbidden paths (return 403)",
    "otoroshi.models.Restrictions.notFound": "Not found paths (return 404)",
    "otoroshi.models.SecComHeaders.claimRequestName": "Header name where the info token will be",
    "otoroshi.models.SecComHeaders.stateRequestName": "Header name where the validation token will be",
    "otoroshi.models.SecComHeaders.stateResponseName": "Header name where the validation token respondewill be",
    "otoroshi.models.ServiceDescriptor.accessValidator": "Service access validatiors",
    "otoroshi.models.ServiceDescriptor.additionalHeaders": "Specify headers that will be added to each client request. Useful to add authentication",
    "otoroshi.models.ServiceDescriptor.additionalHeadersOut": "Specify headers that will be added to each client response",
    "otoroshi.models.ServiceDescriptor.allowHttp10": "Allow HTTP/1.0 requests",
    "otoroshi.models.ServiceDescriptor.api": "Api exposition settings",
    "otoroshi.models.ServiceDescriptor.apiKeyConstraints": "Routing and extraction constraints for the apikeyh",
    "otoroshi.models.ServiceDescriptor.authConfigRef": "A reference to a global auth module config",
    "otoroshi.models.ServiceDescriptor.buildMode": "Display a construction page when a user try to use the service",
    "otoroshi.models.ServiceDescriptor.canary": "Canary settings",
    "otoroshi.models.ServiceDescriptor.chaosConfig": "Chaos engineering settings",
    "otoroshi.models.ServiceDescriptor.clientConfig": "Http client settings",
    "otoroshi.models.ServiceDescriptor.clientValidatorRef": "A reference to validation authority",
    "otoroshi.models.ServiceDescriptor.cors": "CORS settings",
    "otoroshi.models.ServiceDescriptor.description": "Entity description",
    "otoroshi.models.ServiceDescriptor.detectApiKeySooner": "Detect if an apikey is present but do not fail if not",
    "otoroshi.models.ServiceDescriptor.domain": "The domain on which the service is available.",
    "otoroshi.models.ServiceDescriptor.enabled": "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
    "otoroshi.models.ServiceDescriptor.enforceSecureCommunication": "When enabled, Otoroshi will try to exchange headers with downstream service to ensure no one else can use the service from outside",
    "otoroshi.models.ServiceDescriptor.env": "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
    "otoroshi.models.ServiceDescriptor.forceHttps": "Will force redirection to https:// if not present",
    "otoroshi.models.ServiceDescriptor.groups": "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group",
    "otoroshi.models.ServiceDescriptor.gzip": "GZIP settings",
    "otoroshi.models.ServiceDescriptor.handleLegacyDomain": "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
    "otoroshi.models.ServiceDescriptor.headersVerification": "Specify headers that will be verified after routing.",
    "otoroshi.models.ServiceDescriptor.healthCheck": "Healthcheck settings",
    "otoroshi.models.ServiceDescriptor.hosts": "Possible hosts for the service",
    "otoroshi.models.ServiceDescriptor.id": "A unique random string to identify your service",
    "otoroshi.models.ServiceDescriptor.ipFiltering": "Ip filtering settings",
    "otoroshi.models.ServiceDescriptor.issueCert": "Flag to automatically issue a cert for this service",
    "otoroshi.models.ServiceDescriptor.issueCertCA": "CA for cert issuance",
    "otoroshi.models.ServiceDescriptor.jwtVerifier": "JWT verifiers settings",
    "otoroshi.models.ServiceDescriptor.letsEncrypt": "Flag to automatically issue a let's encrypt (ACME) cert for this service",
    "otoroshi.models.ServiceDescriptor.localHost": "The host used localy, mainly localhost:xxxx",
    "otoroshi.models.ServiceDescriptor.localScheme": "The scheme used localy, mainly http",
    "otoroshi.models.ServiceDescriptor.location": "Entity location",
    "otoroshi.models.ServiceDescriptor.logAnalyticsOnServer": "Log analytics event on the server",
    "otoroshi.models.ServiceDescriptor.maintenanceMode": "Display a maintainance page when a user try to use the service",
    "otoroshi.models.ServiceDescriptor.matchingHeaders": "Specify headers that MUST be present on client request to route it. Useful to implement versioning",
    "otoroshi.models.ServiceDescriptor.matchingRoot": "The root path on which the service is available",
    "otoroshi.models.ServiceDescriptor.metadata": "Just a bunch of random properties",
    "otoroshi.models.ServiceDescriptor.missingOnlyHeadersIn": "Add header on client request if they are not present",
    "otoroshi.models.ServiceDescriptor.missingOnlyHeadersOut": "Add header on client response if they are not present",
    "otoroshi.models.ServiceDescriptor.name": "The name of your service. Only for debug and human readability purposes",
    "otoroshi.models.ServiceDescriptor.overrideHost": "Host header will be overriden with Host of the target",
    "otoroshi.models.ServiceDescriptor.paths": "Matching paths on request",
    "otoroshi.models.ServiceDescriptor.plugins": "Plugins enabled for this service. will replace separate plugins fields in a near future",
    "otoroshi.models.ServiceDescriptor.preRouting": "Pre routing plugin settings",
    "otoroshi.models.ServiceDescriptor.privateApp": "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
    "otoroshi.models.ServiceDescriptor.privatePatterns": "If you define a public pattern that is a little bit too much, you can make some of public URL private again",
    "otoroshi.models.ServiceDescriptor.publicPatterns": "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'",
    "otoroshi.models.ServiceDescriptor.readOnly": "Service only accepts GET, HEAD and OPTIONS requests",
    "otoroshi.models.ServiceDescriptor.redirectToLocal": "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
    "otoroshi.models.ServiceDescriptor.redirection": "Redirection settings",
    "otoroshi.models.ServiceDescriptor.removeHeadersIn": "Remove headers on client request",
    "otoroshi.models.ServiceDescriptor.removeHeadersOut": "Remove headers on client response",
    "otoroshi.models.ServiceDescriptor.restrictions": "Restriction settings",
    "otoroshi.models.ServiceDescriptor.root": "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
    "otoroshi.models.ServiceDescriptor.secComAlgoChallengeBackToOto": "Algorithm to verify challenge token coming from the backend",
    "otoroshi.models.ServiceDescriptor.secComAlgoChallengeOtoToBack": "Algorithm to sign challenge token to the backend",
    "otoroshi.models.ServiceDescriptor.secComAlgoInfoToken": "Algorithm to verify/sign challenge token coming from/to the backend",
    "otoroshi.models.ServiceDescriptor.secComExcludedPatterns": "URI patterns excluded from secured communications",
    "otoroshi.models.ServiceDescriptor.secComHeaders": "Header names for sec. com. protocol",
    "otoroshi.models.ServiceDescriptor.secComInfoTokenVersion": "Version of the info token",
    "otoroshi.models.ServiceDescriptor.secComSettings": "Sec. com. settings",
    "otoroshi.models.ServiceDescriptor.secComTtl": "TTL for the info token",
    "otoroshi.models.ServiceDescriptor.secComUseSameAlgo": "Use the same algo for info token, challenge token signing, challenge token verification",
    "otoroshi.models.ServiceDescriptor.secComVersion": "Version of the sec. com.",
    "otoroshi.models.ServiceDescriptor.securityExcludedPatterns": "Exclude some paths",
    "otoroshi.models.ServiceDescriptor.sendInfoToken": "Should otoroshi send info token",
    "otoroshi.models.ServiceDescriptor.sendOtoroshiHeadersBack": "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
    "otoroshi.models.ServiceDescriptor.sendStateChallenge": "Should otoroshi send challenge token",
    "otoroshi.models.ServiceDescriptor.strictlyPrivate": "When strictly private, private app session will not pass apikey filters",
    "otoroshi.models.ServiceDescriptor.stripPath": "Strip matching path in the forwarded request path",
    "otoroshi.models.ServiceDescriptor.subdomain": "The subdomain on which the service is available",
    "otoroshi.models.ServiceDescriptor.tags": "Entity tags",
    "otoroshi.models.ServiceDescriptor.targets": "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
    "otoroshi.models.ServiceDescriptor.targetsLoadBalancing": "Loadbalancing strategy",
    "otoroshi.models.ServiceDescriptor.tcpUdpTunneling": "Enabled TCP/UDP tunneling through websocket connection",
    "otoroshi.models.ServiceDescriptor.transformerConfig": "Transformer plugins configuration",
    "otoroshi.models.ServiceDescriptor.transformerRefs": "Enabled transformer plugins",
    "otoroshi.models.ServiceDescriptor.useAkkaHttpClient": "Use akka http client for this service",
    "otoroshi.models.ServiceDescriptor.useNewWSClient": "Use akka http client for this service on websocket calls",
    "otoroshi.models.ServiceDescriptor.userFacing": "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
    "otoroshi.models.ServiceDescriptor.xForwardedHeaders": "Send X-Forwarded-* headers",
    "otoroshi.models.ServiceGroup.description": "Entity description",
    "otoroshi.models.ServiceGroup.id": "A unique random string to identify your service",
    "otoroshi.models.ServiceGroup.location": "Entity location",
    "otoroshi.models.ServiceGroup.metadata": "Just a bunch of random properties",
    "otoroshi.models.ServiceGroup.name": "The name of your service. Only for debug and human readability purposes",
    "otoroshi.models.ServiceGroup.tags": "Entity tags",
    "otoroshi.models.Sign.algoSettings": "Re-signing jwt token settings",
    "otoroshi.models.Sign.verificationSettings": "Verification settings",
    "otoroshi.models.SimpleOtoroshiAdmin.createdAt": "User creation date",
    "otoroshi.models.SimpleOtoroshiAdmin.label": "User label",
    "otoroshi.models.SimpleOtoroshiAdmin.location": "Entity location",
    "otoroshi.models.SimpleOtoroshiAdmin.metadata": "Entity metadata",
    "otoroshi.models.SimpleOtoroshiAdmin.password": "User password (bcrypt hashed)",
    "otoroshi.models.SimpleOtoroshiAdmin.rights": "User rights",
    "otoroshi.models.SimpleOtoroshiAdmin.tags": "Entity tags",
    "otoroshi.models.SimpleOtoroshiAdmin.typ": "Type of user",
    "otoroshi.models.SimpleOtoroshiAdmin.username": "User username",
    "otoroshi.models.SnowMonkeyConfig.chaosConfig": "Chaos settings",
    "otoroshi.models.SnowMonkeyConfig.dryRun": "Whether or not outages will actualy impact requests",
    "otoroshi.models.SnowMonkeyConfig.enabled": "Whether or not this config is enabled",
    "otoroshi.models.SnowMonkeyConfig.includeUserFacingDescriptors": "Whether or not user facing apps. will be impacted by Snow Monkey",
    "otoroshi.models.SnowMonkeyConfig.outageDurationFrom": "Start of outage duration range",
    "otoroshi.models.SnowMonkeyConfig.outageDurationTo": "End of outage duration range",
    "otoroshi.models.SnowMonkeyConfig.outageStrategy": "",
    "otoroshi.models.SnowMonkeyConfig.startTime": "Start time of Snow Monkey each day",
    "otoroshi.models.SnowMonkeyConfig.stopTime": "Stop time of Snow Monkey each day",
    "otoroshi.models.SnowMonkeyConfig.targetGroups": "Groups impacted by Snow Monkey. If empty, all groups will be impacted",
    "otoroshi.models.SnowMonkeyConfig.timesPerDay": "Number of time per day each service will be outage",
    "otoroshi.models.Target.host": "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
    "otoroshi.models.Target.ipAddress": "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
    "otoroshi.models.Target.metadata": "???",
    "otoroshi.models.Target.mtlsConfig": "TLS settings to contact this target",
    "otoroshi.models.Target.predicate": "Predicate to choose this target",
    "otoroshi.models.Target.protocol": "Protocol for the target",
    "otoroshi.models.Target.scheme": "The protocol used for communication. Can be http or https",
    "otoroshi.models.Target.tags": "???",
    "otoroshi.models.Target.weight": "The weight of the target when choosing",
    "otoroshi.models.Team.description": "Entity description",
    "otoroshi.models.Team.id": "Entity id",
    "otoroshi.models.Team.metadata": "Entity metadata",
    "otoroshi.models.Team.name": "Entity name",
    "otoroshi.models.Team.tags": "Entity tags",
    "otoroshi.models.Team.tenant": "Entity organization",
    "otoroshi.models.TeamAccess.canRead": "Can this access right read data",
    "otoroshi.models.TeamAccess.canWrite": "Can this access right write data",
    "otoroshi.models.TeamAccess.value": "Access pattern",
    "otoroshi.models.Tenant.description": "Entity description",
    "otoroshi.models.Tenant.id": "Entity id",
    "otoroshi.models.Tenant.metadata": "Entity metadata",
    "otoroshi.models.Tenant.name": "Entity name",
    "otoroshi.models.Tenant.tags": "Entity tags",
    "otoroshi.models.TenantAccess.canRead": "Can this access right read data",
    "otoroshi.models.TenantAccess.canWrite": "Can this access right write data",
    "otoroshi.models.TenantAccess.value": "Access pattern",
    "otoroshi.models.TlsSettings.defaultDomain": "Default domain to choose if not found from current certificates",
    "otoroshi.models.TlsSettings.includeJdkCaClient": "???",
    "otoroshi.models.TlsSettings.includeJdkCaServer": "???",
    "otoroshi.models.TlsSettings.randomIfNotFound": "Use a random one",
    "otoroshi.models.Transform.algoSettings": "Algorithm settings for re-signing token",
    "otoroshi.models.Transform.transformSettings": "Transformation settings",
    "otoroshi.models.Transform.verificationSettings": "Verification settings",
    "otoroshi.models.TransformSettings.location": "Location of the token",
    "otoroshi.models.TransformSettings.mappingSettings": "Token mapping settings",
    "otoroshi.models.UserAgentSettings.enabled": "User agent extraction enabled",
    "otoroshi.models.UserRight.teams": "Access rights on teams",
    "otoroshi.models.UserRight.tenant": "Access rights on organizations",
    "otoroshi.models.UserRights.rights": "Access rights of a user",
    "otoroshi.models.VerificationSettings.arrayFields": "Fields array validation",
    "otoroshi.models.VerificationSettings.fields": "Fields validation",
    "otoroshi.models.WebAuthnOtoroshiAdmin.createdAt": "User creation date",
    "otoroshi.models.WebAuthnOtoroshiAdmin.credentials": "User webauthn credentials",
    "otoroshi.models.WebAuthnOtoroshiAdmin.handle": "User webauthn handle",
    "otoroshi.models.WebAuthnOtoroshiAdmin.label": "User label",
    "otoroshi.models.WebAuthnOtoroshiAdmin.location": "Entity location",
    "otoroshi.models.WebAuthnOtoroshiAdmin.metadata": "Entity metadata",
    "otoroshi.models.WebAuthnOtoroshiAdmin.password": "User password",
    "otoroshi.models.WebAuthnOtoroshiAdmin.rights": "User rights",
    "otoroshi.models.WebAuthnOtoroshiAdmin.tags": "Entity tags",
    "otoroshi.models.WebAuthnOtoroshiAdmin.typ": "User type",
    "otoroshi.models.WebAuthnOtoroshiAdmin.username": "User username",
    "otoroshi.models.Webhook.headers": "Headers to authorize the call or whatever",
    "otoroshi.models.Webhook.mtlsConfig": "TLS config when calling webhook",
    "otoroshi.models.Webhook.url": "The URL where events are posted",
    "otoroshi.models.WeightedBestResponseTime.ratio": "Weight ratio",
    "otoroshi.models.ZoneMatch.zone": "Zone name",
    "otoroshi.script.AccessValidatorRef.config": "Access validator plugins configuration",
    "otoroshi.script.AccessValidatorRef.enabled": "Access validator plugins enabled",
    "otoroshi.script.AccessValidatorRef.excludedPatterns": "Excluded paths",
    "otoroshi.script.AccessValidatorRef.refs": "Enabled plugins",
    "otoroshi.script.PreRoutingRef.config": "pre-routing plugins configuration",
    "otoroshi.script.PreRoutingRef.enabled": "pre-routing plugins enabled",
    "otoroshi.script.PreRoutingRef.excludedPatterns": "Excluded paths",
    "otoroshi.script.PreRoutingRef.refs": "Enabled plugins",
    "otoroshi.script.Script.code": "The code of the script",
    "otoroshi.script.Script.desc": "The description of the script",
    "otoroshi.script.Script.id": "The id of the script",
    "otoroshi.script.Script.location": "Entity location",
    "otoroshi.script.Script.metadata": "Entity metadata",
    "otoroshi.script.Script.name": "The name of the script",
    "otoroshi.script.Script.tags": "Entity tags",
    "otoroshi.script.Script.type": "Plugin type",
    "otoroshi.script.plugins.Plugins.config": "Plugins configuration",
    "otoroshi.script.plugins.Plugins.enabled": "Plugins enabled",
    "otoroshi.script.plugins.Plugins.excluded": "Excluded paths",
    "otoroshi.script.plugins.Plugins.refs": "Enabled plugins",
    "otoroshi.ssl.Cert.autoRenew": "Auto renew cert",
    "otoroshi.ssl.Cert.ca": "Is cert a CA ?",
    "otoroshi.ssl.Cert.caRef": "Reference to the CA (if any)",
    "otoroshi.ssl.Cert.chain": "Certicates chain (PEM encoded)",
    "otoroshi.ssl.Cert.client": "Is cert a client cert ?",
    "otoroshi.ssl.Cert.description": "Entity description",
    "otoroshi.ssl.Cert.domain": "Certificate domain",
    "otoroshi.ssl.Cert.entityMetadata": "Entity metadata",
    "otoroshi.ssl.Cert.exposed": "Is the cert exposed (public key exposed in jwks.json)",
    "otoroshi.ssl.Cert.from": "Start date",
    "otoroshi.ssl.Cert.id": "Entity id",
    "otoroshi.ssl.Cert.keypair": "Is cert used for its keypair only ?",
    "otoroshi.ssl.Cert.letsEncrypt": "Let's encrypt (ACME) generated",
    "otoroshi.ssl.Cert.location": "Entity location",
    "otoroshi.ssl.Cert.name": "Entity name",
    "otoroshi.ssl.Cert.password": "Certificate password",
    "otoroshi.ssl.Cert.privateKey": "Certificate private key (PEM encoded)",
    "otoroshi.ssl.Cert.revoked": "Certificate is revoked",
    "otoroshi.ssl.Cert.sans": "Certificate SANs",
    "otoroshi.ssl.Cert.selfSigned": "Is cert self signed",
    "otoroshi.ssl.Cert.subject": "Certificate subject",
    "otoroshi.ssl.Cert.tags": "Entity tags",
    "otoroshi.ssl.Cert.to": "Stop date",
    "otoroshi.ssl.Cert.valid": "Is cert valid",
    "otoroshi.ssl.pki.models.GenCertResponse.ca": "Ca cert (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.caChain": "Ca chain (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.cert": "Cert (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.csr": "CSR (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.csrQuery": "JSON generation query",
    "otoroshi.ssl.pki.models.GenCertResponse.key": "Private key (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.serial": "Certificate serial number",
    "otoroshi.ssl.pki.models.GenCsrQuery.ca": "Is cert ca ?",
    "otoroshi.ssl.pki.models.GenCsrQuery.client": "Is cert client ?",
    "otoroshi.ssl.pki.models.GenCsrQuery.digestAlg": "Digest algo",
    "otoroshi.ssl.pki.models.GenCsrQuery.duration": "Certificate lifespan",
    "otoroshi.ssl.pki.models.GenCsrQuery.existingSerialNumber": "",
    "otoroshi.ssl.pki.models.GenCsrQuery.hosts": "Certificate SANs",
    "otoroshi.ssl.pki.models.GenCsrQuery.includeAIA": "Include AIA extension (if generated from otoroshi CA)",
    "otoroshi.ssl.pki.models.GenCsrQuery.key": "Keypair specs",
    "otoroshi.ssl.pki.models.GenCsrQuery.name": "Certificate name",
    "otoroshi.ssl.pki.models.GenCsrQuery.signatureAlg": "Signature algorithm",
    "otoroshi.ssl.pki.models.GenCsrQuery.subject": "Certificate subject",
    "otoroshi.ssl.pki.models.GenCsrResponse.csr": "CSR (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCsrResponse.privateKey": "Private key (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCsrResponse.publicKey": "Public key (PEM encoded)",
    "otoroshi.ssl.pki.models.GenKeyPairQuery.algo": "Keypair algorithm",
    "otoroshi.ssl.pki.models.GenKeyPairQuery.size": "Keypair size",
    "otoroshi.ssl.pki.models.GenKeyPairResponse.privateKey": "Private key (PEM encoded)",
    "otoroshi.ssl.pki.models.GenKeyPairResponse.publicKey": "Public key (PEM encoded)",
    "otoroshi.ssl.pki.models.SignCertResponse.ca": "Ca cert (PEM encoded)",
    "otoroshi.ssl.pki.models.SignCertResponse.cert": "Cert (PEM encoded)",
    "otoroshi.ssl.pki.models.SignCertResponse.csr": "CSR (PEM encoded)",
    "otoroshi.tcp.SniSettings.enabled": "SNI extraction enabled",
    "otoroshi.tcp.SniSettings.forwardIfNoMatch": "",
    "otoroshi.tcp.SniSettings.forwardsTo": "forwards call to",
    "otoroshi.tcp.TcpRule.domain": "match on SNI domain",
    "otoroshi.tcp.TcpRule.targets": "TCP targets",
    "otoroshi.tcp.TcpService.clientAuth": "Use client authentication",
    "otoroshi.tcp.TcpService.description": "Entity description",
    "otoroshi.tcp.TcpService.enabled": "Service enabled",
    "otoroshi.tcp.TcpService.id": "Entity id",
    "otoroshi.tcp.TcpService.interface": "Network interface",
    "otoroshi.tcp.TcpService.location": "Entity location",
    "otoroshi.tcp.TcpService.metadata": "Entity metadata",
    "otoroshi.tcp.TcpService.name": "Entity name",
    "otoroshi.tcp.TcpService.port": "network port",
    "otoroshi.tcp.TcpService.rules": "Routing rules",
    "otoroshi.tcp.TcpService.sni": "SNI settings",
    "otoroshi.tcp.TcpService.tags": "Entity tags",
    "otoroshi.tcp.TcpService.tls": "TLS mode",
    "otoroshi.tcp.TcpTarget.host": "Target host",
    "otoroshi.tcp.TcpTarget.ip": "Target ip",
    "otoroshi.tcp.TcpTarget.port": "Target port",
    "otoroshi.tcp.TcpTarget.tls": "Use tls",
    "otoroshi.utils.gzip.GzipConfig.blackList": "blocklisted content types",
    "otoroshi.utils.gzip.GzipConfig.bufferSize": "Buffer size in bytes",
    "otoroshi.utils.gzip.GzipConfig.chunkedThreshold": "Chunk size",
    "otoroshi.utils.gzip.GzipConfig.compressionLevel": "Compression level (0 - 9)",
    "otoroshi.utils.gzip.GzipConfig.enabled": "Gzip enabled",
    "otoroshi.utils.gzip.GzipConfig.excludedPatterns": "Excluded paths",
    "otoroshi.utils.gzip.GzipConfig.whiteList": "allow listed content types",
    "otoroshi.utils.http.MtlsConfig.certs": "Trusted cert. ids",
    "otoroshi.utils.http.MtlsConfig.loose": "Loose verification",
    "otoroshi.utils.http.MtlsConfig.mtls": "Enabled",
    "otoroshi.utils.http.MtlsConfig.trustAll": "Trust any certificate",
    "otoroshi.utils.http.MtlsConfig.trustedCerts": "Trusted cert. ids",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.contacts": "Let's encrypt (ACME) contacts",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.emails": "Let's encrypt (ACME) contact emails",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.enabled": "Let's encrypt (ACME) enabled",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.privateKey": "Let's encrypt (ACME) private key",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.publicKey": "Let's encrypt (ACME) public key",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.server": "Let's encrypt (ACME) server",
    "otoroshi.utils.mailer.EmailLocation.email": "Email address",
    "otoroshi.utils.mailer.EmailLocation.name": "Destination name",
    "otoroshi.utils.mailer.GenericMailerSettings.headers": "Sender headers",
    "otoroshi.utils.mailer.GenericMailerSettings.to": "Destination email address",
    "otoroshi.utils.mailer.GenericMailerSettings.url": "Sender URL",
    "otoroshi.utils.mailer.MailgunSettings.apiKey": "Mailgun apikey",
    "otoroshi.utils.mailer.MailgunSettings.domain": "Mailgun domain",
    "otoroshi.utils.mailer.MailgunSettings.eu": "European tenant",
    "otoroshi.utils.mailer.MailgunSettings.to": "Destination email address",
    "otoroshi.utils.mailer.MailjetSettings.apiKeyPrivate": "Private key",
    "otoroshi.utils.mailer.MailjetSettings.apiKeyPublic": "Public key",
    "otoroshi.utils.mailer.MailjetSettings.to": "Destination email address",
    "otoroshi.utils.mailer.SendgridSettings.apiKey": "Sendgrid apikey",
    "otoroshi.utils.mailer.SendgridSettings.to": "Destination email address",
    "tags.admin-sessions": "All api endpoints about admin-session",
    "tags.admins": "All api endpoints about admins",
    "tags.analytics": "All api endpoints about analytics",
    "tags.apikeys": "All api endpoints about apikeys",
    "tags.apps-sessions": "All api endpoints about apps-sessions",
    "tags.auth-modules": "All api endpoints about auth-modules",
    "tags.certificates": "All api endpoints about certificates",
    "tags.cluster": "All api endpoints about cluster",
    "tags.data-exporters": "All api endpoints about data-exporters",
    "tags.events": "All api endpoints about events",
    "tags.globalconfig": "All api endpoints about globalconfig",
    "tags.groups": "All api endpoints about groups",
    "tags.import-export": "All api endpoints about import-export",
    "tags.jwt-verifiers": "All api endpoints about jwt-verifiers",
    "tags.lines": "All api endpoints about lines",
    "tags.live": "All api endpoints about live",
    "tags.organizations": "All api endpoints about organizations",
    "tags.pki": "All api endpoints about pki",
    "tags.privateapps": "All api endpoints about privateapps",
    "tags.scripts": "All api endpoints about scripts",
    "tags.services": "All api endpoints about services",
    "tags.snowmonkey": "All api endpoints about snowmonkey",
    "tags.tcp": "All api endpoints about tcp",
    "tags.teams": "All api endpoints about teams",
    "tags.templates": "All api endpoints about templates "
  },
  "add_schemas":   {
    "otoroshi.auth.AuthModuleConfig" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.auth.BasicAuthModuleConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.auth.GenericOauth2ModuleConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.auth.LdapAuthModuleConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.auth.Oauth1ModuleConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.auth.SamlAuthModuleConfig"
      } ]
    },
    "play.api.libs.ws.WSProxyServer" : {
      "type" : "object",
      "properties" : { },
      "description" : "Proxy server"
    },
    "PatchDocument" : {
      "type" : "object",
      "description" : "A JSONPatch document as defined by RFC 6902",
      "required" : [ "op", "path" ],
      "properties" : {
        "op" : {
          "type" : "string",
          "description" : "The operation to be performed",
          "enum" : [ "add", "remove", "replace", "move", "copy", "test" ]
        },
        "path" : {
          "type" : "string",
          "description" : "A JSON-Pointer"
        },
        "value" : {
          "type" : "object",
          "description" : "The value to be used within the operations."
        },
        "from" : {
          "type" : "string",
          "description" : "A string containing a JSON Pointer value."
        }
      }
    },
    "PatchBody" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/PatchDocument"
      }
    },
    "BulkBody" : {
      "type" : "string",
      "description" : "Body composed of stringified JSON lines, each one representing an entity"
    },
    "Unknown" : {
      "type" : "object",
      "description" : "value used by the openapi generator when no matching type found. Should be fixed in a near future."
    },
    "Any" : {
      "oneOf" : [ {
        "type" : "object"
      }, {
        "type" : "array"
      }, {
        "type" : "string"
      }, {
        "type" : "boolean"
      }, {
        "type" : "number"
      }, {
        "type" : "integer"
      } ]
    },
    "Null" : {
      "type" : "object",
      "description" : "no value object, used to represent a None option value"
    },
    "Empty" : {
      "type" : "object",
      "description" : "an empty body. Useful for RPC like endpoints"
    },
    "ErrorResponse" : {
      "type" : "object",
      "description" : "Typical error returned by otoroshi",
      "properties" : {
        "error" : {
          "type" : "string",
          "description" : "the error name"
        },
        "error_description" : {
          "type" : "string",
          "description" : "A short description of the error if one"
        },
        "Otoroshi-Error" : {
          "type" : "string",
          "description" : "sometimes, the error name is here"
        },
        "Otoroshi-Error-Msg" : {
          "type" : "string",
          "description" : "sometimes, the error description is here"
        }
      }
    },
    "BulkResponseBody" : {
      "type" : "array",
      "items" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "the id of the entity"
          },
          "status" : {
            "type" : "integer",
            "description" : "operation status"
          },
          "error" : {
            "type" : "string",
            "description" : "the error of the operation if one"
          }
        },
        "required" : [ "uid", "status" ]
      }
    },
    "otoroshi.models.AlgoSettings" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.ESAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ESKPAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.HSAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.JWKSAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.KidAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RSAKPAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RSAlgoSettings"
      } ]
    },
    "otoroshi.models.ServiceDescriptorIdentifier" : {
      "type" : "string",
      "description" : "the id of a service prefixed by 'service_'"
    },
    "otoroshi.models.ServiceGroupIdentifier" : {
      "type" : "string",
      "description" : "the id of a group prefixed by 'group_'"
    },
    "otoroshi.models.EntityIdentifier" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptorIdentifier"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ServiceGroupIdentifier"
      } ]
    },
    "otoroshi.models.DataExporterConfigType" : {
      "type" : "string",
      "enum" : [ "kafka", "pulsar", "elastic", "webhook", "file", "mailer", "custom", "none", "console", "metrics" ],
      "description" : "Type of data exporter"
    },
    "otoroshi.models.Exporter" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.events.KafkaConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.events.PulsarConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ConsoleSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ElasticAnalyticsConfig"
      }, {
        "$ref" : "#/components/schemas/Null"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ExporterRef"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.FileSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.MetricsSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.Webhook"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.ConsoleMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.GenericMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailgunSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailjetSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.NoneMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.SendgridSettings"
      } ]
    },
    "otoroshi.models.JwtTokenLocation" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.InCookie"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.InHeader"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.InQueryParam"
      } ]
    },
    "otoroshi.models.VerifierStrategy" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.DefaultToken"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.PassThrough"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.Sign"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.Transform"
      } ]
    },
    "otoroshi.models.OtoroshiAdmin" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
      } ]
    },
    "otoroshi.models.TargetPredicate" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.AlwaysMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.DataCenterMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.GeolocationMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.InfraProviderMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.NetworkLocationMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RackMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RegionMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ZoneMatch"
      } ]
    },
    "otoroshi.models.TenantId" : {
      "type" : "string",
      "description" : "organization id"
    },
    "otoroshi.models.TeamId" : {
      "type" : "string",
      "description" : "team id"
    },
    "otoroshi.models.AlwaysMatch" : {
      "type" : "object",
      "description" : "Always select target",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Always" ]
        }
      }
    },
    "otoroshi.models.SecComInfoTokenVersion" : {
      "type" : "string",
      "enum" : [ "Legacy", "Latest" ],
      "description" : "Version of the info token"
    },
    "otoroshi.models.SecComVersion" : {
      "type" : "string",
      "enum" : [ "V1", "v2" ],
      "description" : "Version of the challenge token"
    },
    "otoroshi.models.LoadBalancing" : {
      "type" : "object",
      "description" : "Loadbalancing strategy",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
        },
        "ratio" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "otoroshi.models.JwtVerifier" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.LocalJwtVerifier"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RefJwtVerifier"
      } ]
    },
    "otoroshi.models.OtoroshiAdminType" : {
      "type" : "string",
      "enum" : [ "SIMPLE", "WEBAUTHN" ],
      "description" : "Admin kind"
    },
    "otoroshi.script.PluginType" : {
      "type" : "string",
      "enum" : [ "app", "transformer", "validator", "preroute", "sink", "listener", "job", "exporter" ],
      "description" : "Plugin kind"
    },
    "otoroshi.ssl.ClientAuth" : {
      "type" : "string",
      "enum" : [ "Need", "None", "Want" ],
      "description" : "Client authentication mode"
    },
    "otoroshi.tcp.TlsMode" : {
      "type" : "string",
      "enum" : [ "Disabled", "Enabled", "PassThrough" ],
      "description" : "TLS mode"
    },
    "otoroshi.models.GeolocationSettings" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.IpStackGeolocationSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.MaxmindGeolocationSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.NoneGeolocationSettings"
      } ]
    },
    "otoroshi.models.NoneGeolocationSettings" : {
      "type" : "object",
      "description" : "No geolocation extraction",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "none" ]
        }
      }
    },
    "otoroshi.utils.mailer.MailerSettings" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.ConsoleMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.GenericMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailgunSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailjetSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.NoneMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.SendgridSettings"
      } ]
    },
    "otoroshi.models.OutageStrategy" : {
      "type" : "string",
      "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
    },
    "WebAuthnRegistrationFinishBody" : {
      "type" : "object",
      "description" : ""
    },
    "WebAuthnRegistrationStartBody" : {
      "type" : "object",
      "description" : ""
    },
    "UserTokenBody" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        }
      }
    },
    "ByteStreamBody" : {
      "type" : "string",
      "description" : ""
    },
    "GlobalConfigImportBody" : {
      "type" : "object",
      "description" : ""
    },
    "PemCertificateBody" : {
      "type" : "string",
      "description" : "PEM encoded certificate"
    },
    "PemCsrBody" : {
      "type" : "string",
      "description" : "PEM encoded csr"
    },
    "UpdateQuotasBody" : {
      "type" : "string",
      "description" : ""
    },
    "LetsEncryptCertBody" : {
      "type" : "object",
      "description" : "PEM encoded certificate"
    },
    "CodeBody" : {
      "type" : "string",
      "description" : "Plugin scala code"
    },
    "Done" : {
      "type" : "object",
      "description" : "operation is done",
      "properties" : {
        "done" : {
          "type" : "boolean"
        }
      }
    },
    "StringList" : {
      "type" : "array",
      "items" : {
        "type" : "string"
      }
    },
    "OutagesList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.Outage"
      }
    },
    "ScriptsList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.script.Script"
      }
    },
    "WebauthnAdminList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
      }
    },
    "SimpleAdminList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
      }
    },
    "AlertEventList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.events.AlertEvent"
      }
    },
    "AuditEventList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.events.AuditEvent"
      }
    },
    "TargetsList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.Target"
      }
    },
    "ErrorTemplateList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
      }
    },
    "HealthCheckEventList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.events.HealthCheckEvent"
      }
    },
    "LiveStats" : {
      "type" : "object",
      "description" : "Service live stats"
    },
    "HostMetrics" : {
      "type" : "object",
      "description" : "Host metrics"
    },
    "CertValidResponse" : {
      "type" : "object",
      "description" : "Is certificate valid",
      "properties" : {
        "valid" : {
          "type" : "boolean"
        }
      }
    },
    "ServiceDescriptorList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
      }
    },
    "otoroshi.events.AuditEvent" : {
      "type" : "object",
      "description" : "Audit trail event"
    },
    "otoroshi.events.AlertEvent" : {
      "type" : "object",
      "description" : "Alert trail event"
    },
    "TokenResponse" : {
      "type" : "object",
      "description" : "User login token response",
      "properties" : {
        "valid" : {
          "type" : "string"
        }
      }
    }
  },
  "merge_schemas":   {
    "otoroshi.auth.AuthModuleConfig" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the type of the module",
          "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
        }
      }
    },
    "otoroshi.models.VerifierStrategy" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of strategy",
          "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
        }
      }
    },
    "otoroshi.models.AlgoSettings" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of algosettings",
          "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
        }
      }
    },
    "otoroshi.models.JwtTokenLocation" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of location",
          "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
        }
      }
    },
    "otoroshi.models.OtoroshiAdmin" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of admin",
          "enum" : [ "simple", "webauthn" ]
        }
      }
    },
    "otoroshi.models.TargetPredicate" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of predicate",
          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
        }
      }
    },
    "otoroshi.models.JwtVerifier" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of verifier",
          "enum" : [ "global", "local", "ref" ]
        }
      }
    },
    "otoroshi.models.GeolocationSettings" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of geolocation",
          "enum" : [ "none", "maxmind", "ipstack" ]
        }
      }
    },
    "otoroshi.utils.mailer.MailerSettings" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of mailer",
          "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
        }
      }
    },
    "otoroshi.models.Exporter" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of exporter",
          "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
        }
      }
    }
  }
}
