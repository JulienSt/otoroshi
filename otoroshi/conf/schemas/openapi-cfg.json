{
  "banned": [ "otoroshi.controllers.BackOfficeController$SearchedService", "otoroshi.models.EntityLocationSupport", "otoroshi.auth.AuthModuleConfig", "otoroshi.auth.OAuth2ModuleConfig", "otoroshi.ssl.ClientCertificateValidator", "otoroshi.next.models.KvStoredNgBackendDataStore", "otoroshi.storage.RedisLikeWrapper", "otoroshi.plugins.log4j.Log4jExpressionPart", "otoroshi.plugins.jobs.kubernetes.KubernetesSecret", "otoroshi.plugins.jobs.kubernetes.KubernetesIngressClassParameters", "otoroshi.plugins.jobs.kubernetes.KubernetesNamespace", "otoroshi.plugins.jobs.kubernetes.KubernetesPod", "otoroshi.plugins.jobs.kubernetes.KubernetesOpenshiftDnsOperatorServer", "otoroshi.plugins.jobs.kubernetes.KubernetesCertSecret", "otoroshi.plugins.jobs.kubernetes.KubernetesOtoroshiResource" ],
  "descriptions": {
    "entity_description.otoroshi.auth.BasicAuthModuleConfig": "Authentication module that let you use otoroshi as the identity provider",
    "entity_description.otoroshi.auth.BasicAuthUser": "A user model for the BasicAuthModuleConfig module",
    "entity_description.otoroshi.auth.Credential": "Pair of raw certificate, private key and certId for SAML protocol",
    "entity_description.otoroshi.auth.GenericOauth2ModuleConfig": "Authentication module that works with OAuth2/OIDC",
    "entity_description.otoroshi.auth.GroupFilter": "Filter for a LDAP group",
    "entity_description.otoroshi.auth.GroupRights": "User rights associated with a group",
    "entity_description.otoroshi.auth.LdapAuthModuleConfig": "Authentication module that works with LDAP",
    "entity_description.otoroshi.auth.NameIDFormat": "The name ID Format to use for the subject",
    "entity_description.otoroshi.auth.OAuth1Provider": "Method used to get request and access token",
    "entity_description.otoroshi.auth.Oauth1ModuleConfig": "Configuration of OAuth 1.0 module",
    "entity_description.otoroshi.auth.PKCEConfig": "Settings for PKCE challenge (OAuth 2.1)",
    "entity_description.otoroshi.auth.SAMLCanocalizationMethod": "Canonicalization Method for XML Signatures",
    "entity_description.otoroshi.auth.SAMLCredentials": "Used to sign, encrypt assertions and sign SAML documents",
    "entity_description.otoroshi.auth.SAMLProtocolBinding": "Protocol binding used during SAML requests",
    "entity_description.otoroshi.auth.SAMLSignature": "Algorithm and canocalization method used to sign SAML documents",
    "entity_description.otoroshi.auth.SAMLSignatureAlgorithm": "Algorithm to sign SAML requests",
    "entity_description.otoroshi.auth.SamlAuthModuleConfig": "Configuration of SAML Authentication module",
    "entity_description.otoroshi.auth.SessionCookieValues": "The configuration for session cookie",
    "entity_description.otoroshi.auth.UserValidator": "Validate if a user is valid or not (for auth) based on a JsonPath and an expected value",
    "entity_description.otoroshi.auth.WebAuthnDetails": "Handle and credentials for a webauthn user",
    "entity_description.otoroshi.env.Env": "The main otoroshi technical context containing everything to make otoroshi work",
    "entity_description.otoroshi.events.HealthCheckEvent": "Events generated by health checks",
    "entity_description.otoroshi.events.KafkaConfig": "Settings for connection to a kafka cluster",
    "entity_description.otoroshi.events.PulsarConfig": "Settings for connection to a pulsar cluster",
    "entity_description.otoroshi.events.StatsdConfig": "Settings for connection to a statsd agent",
    "entity_description.otoroshi.gateway.CircuitBreakersHolder": "Internal component to hold current circuit breakers and their configuration",
    "entity_description.otoroshi.models.ApiDescriptor": "Represent if a service exposes an API with an optional url to an openapi descriptor",
    "entity_description.otoroshi.models.ApiKey": "An otoroshi apikey that can allow you to access some services",
    "entity_description.otoroshi.models.ApiKeyConstraints": "Settings used to extract apikeys from http requests and routing traffic",
    "entity_description.otoroshi.models.ApiKeyRotation": "Settings for automatic apikey rotation with grace period",
    "entity_description.otoroshi.models.ApiKeyRouteMatcher": "Routing settings based on apikeys metadata and tags",
    "entity_description.otoroshi.models.AutoCert": "Settings to generate certificates on the fly",
    "entity_description.otoroshi.models.BackOfficeUser": "User session for otoroshi-ui admins",
    "entity_description.otoroshi.models.BadResponse": "Settings for a bad response return (chaos engineering)",
    "entity_description.otoroshi.models.BadResponsesFaultConfig": "List of bad response settings",
    "entity_description.otoroshi.models.BasicAuthConstraints": "Settings to extract apikey from a basic auth header like",
    "entity_description.otoroshi.models.Canary": "Settings for canary routing",
    "entity_description.otoroshi.models.ChaosConfig": "Settings to enable chaos engineering for a service",
    "entity_description.otoroshi.models.CleverCloudSettings": "Settings for connection to the clever-cloud api",
    "entity_description.otoroshi.models.ClientConfig": "Settings for the http client when http request is forwarded",
    "entity_description.otoroshi.models.ClientIdAuthConstraints": "Settings to extract apikey (using client_id only) from a header or query param",
    "entity_description.otoroshi.models.ConsoleSettings": "Data exporter that will log everything to the console",
    "entity_description.otoroshi.models.CorsSettings": "Settings for CORS support",
    "entity_description.otoroshi.models.CustomHeadersAuthConstraints": "Settings to extract apikey from a custom headers",
    "entity_description.otoroshi.models.CustomTimeouts": "Settings for custom timeouts for a specific path",
    "entity_description.otoroshi.models.DataCenterMatch": "Match a target if in the same datacenter",
    "entity_description.otoroshi.models.DataExporterConfig": "Module to export otoroshi specific events to whatever destination you want",
    "entity_description.otoroshi.models.DataExporterConfigFiltering": "Settings to match otoroshi events",
    "entity_description.otoroshi.models.DefaultTemplates": "The template that will be merged with newly created entities",
    "entity_description.otoroshi.models.DefaultToken": "Default jwt token when no other token validated",
    "entity_description.otoroshi.models.ESAlgoSettings": "Settings to use elliptic curve signing algorithm",
    "entity_description.otoroshi.models.ESKPAlgoSettings": "Settings to use elliptic curve signing algorithm from a certificate keypair",
    "entity_description.otoroshi.models.ElasticAnalyticsConfig": "Settings for connection to an elastic cluster",
    "entity_description.otoroshi.models.EntityLocation": "Location of any entity (teams and organization)",
    "entity_description.otoroshi.models.ErrorTemplate": "Service descriptor error template",
    "entity_description.otoroshi.models.ExporterRef": "Reference to a data exporter",
    "entity_description.otoroshi.models.FileSettings": "Settings for a file data exporter",
    "entity_description.otoroshi.models.GeoPositionRadius": "Geolocation radius",
    "entity_description.otoroshi.models.GeolocationMatch": "Match a target if in the same geo location radius",
    "entity_description.otoroshi.models.GlobalConfig": "The global config (dynamic) for otoroshi",
    "entity_description.otoroshi.models.GlobalJwtVerifier": "Otoroshi model for JWT token verifier",
    "entity_description.otoroshi.models.GlobalScripts": "Settings to apply plugins globally",
    "entity_description.otoroshi.models.HSAlgoSettings": "Settings to use HMAC-SHA signing algorithm",
    "entity_description.otoroshi.models.HealthCheck": "Healthcheck settings for a service",
    "entity_description.otoroshi.models.InCookie": "JWT token location (cookie)",
    "entity_description.otoroshi.models.InHeader": "JWT token location (header)",
    "entity_description.otoroshi.models.InQueryParam": "JWT token location (query param)",
    "entity_description.otoroshi.models.IndexSettings": "Elasticseach indexation settings",
    "entity_description.otoroshi.models.IndexSettingsInterval": "Elasticseach indexation interval",
    "entity_description.otoroshi.models.InfraProviderMatch": "Match a target if in the same infrastructure",
    "entity_description.otoroshi.models.IpFiltering": "Settings for ip address filtering for a service or globally",
    "entity_description.otoroshi.models.IpStackGeolocationSettings": "Settings for connection to IpStack",
    "entity_description.otoroshi.models.JWKSAlgoSettings": "Settings to use keypair from JWKS for verification",
    "entity_description.otoroshi.models.JwtAuthConstraints": "Settings to extract apikey from a jwt token",
    "entity_description.otoroshi.models.KidAlgoSettings": "Settings to find keypair based on header kid for verification",
    "entity_description.otoroshi.models.LargeRequestFaultConfig": "Settings for a large request fault (chaos engineering)",
    "entity_description.otoroshi.models.LargeResponseFaultConfig": "Settings for a large response fault (chaos engineering)",
    "entity_description.otoroshi.models.LatencyInjectionFaultConfig": "Settings for a latency injection fault (chaos engineering)",
    "entity_description.otoroshi.models.LocalJwtVerifier": "Local jwt verifier (deprecated)",
    "entity_description.otoroshi.models.MappingSettings": "Settings to transform a jwt token",
    "entity_description.otoroshi.models.MaxmindGeolocationSettings": "Settings for connection to a maxmind db",
    "entity_description.otoroshi.models.MetricsSettings": "Settings for metrics labels",
    "entity_description.otoroshi.models.NetworkLocationMatch": "Match a target if in the same network location",
    "entity_description.otoroshi.models.Outage": "A snowmonkey outage model",
    "entity_description.otoroshi.models.PassThrough": "jwt token validation policicy that just validate the token",
    "entity_description.otoroshi.models.PrivateAppsUser": "User session for private apps",
    "entity_description.otoroshi.models.Proxies": "Various web proxy settings for http client",
    "entity_description.otoroshi.models.QuotasAlmostExceededSettings": "Settings for apikey quotas alerts",
    "entity_description.otoroshi.models.RSAKPAlgoSettings": "Settings to use RSA signing algorithm from a certificate keypair",
    "entity_description.otoroshi.models.RSAlgoSettings": "Settings to use RSA signing algorithm",
    "entity_description.otoroshi.models.RackMatch": "Match a target if in the same rack",
    "entity_description.otoroshi.models.RedirectionSettings": "Settings for routing redirection",
    "entity_description.otoroshi.models.RefJwtVerifier": "Reference to a jwt verifier",
    "entity_description.otoroshi.models.RegionMatch": "Match a target if in the same region",
    "entity_description.otoroshi.models.RemainingQuotas": "Remaining quotas for an apikey",
    "entity_description.otoroshi.models.RestrictionPath": "Represent an http request on which restrictions will apply",
    "entity_description.otoroshi.models.Restrictions": "Http requests restrictions for a service or an apikey",
    "entity_description.otoroshi.models.SecComHeaders": "Header names for the otoroshi exchange protocol",
    "entity_description.otoroshi.models.ServiceDescriptor": "The otoroshi model for a service (handles routing)",
    "entity_description.otoroshi.models.ServiceGroup": "The otoroshi model for a group of services",
    "entity_description.otoroshi.models.Sign": "jwt token re-sign policy settings",
    "entity_description.otoroshi.models.SimpleOtoroshiAdmin": "An otoroshi admin user",
    "entity_description.otoroshi.models.SnowMonkeyConfig": "Settings for the snow monkey (chaos engineering)",
    "entity_description.otoroshi.models.Target": "A target model for a service (destination for forwarded requests)",
    "entity_description.otoroshi.models.Team": "An otoroshi model for a team of users in the organization (otoroshi-ui)",
    "entity_description.otoroshi.models.TeamAccess": "Access rights for teams",
    "entity_description.otoroshi.models.Tenant": "An otoroshi model for an organization (otoroshi-ui)",
    "entity_description.otoroshi.models.TenantAccess": "Access rights for organizations",
    "entity_description.otoroshi.models.TlsSettings": "Global TLS settings. The default domain that will be picked if no certificate matches the current request",
    "entity_description.otoroshi.models.Transform": "jwt token transformation policy settings",
    "entity_description.otoroshi.models.TransformSettings": "jwt token transformation settings",
    "entity_description.otoroshi.models.UserAgentSettings": "Settings to extract informations about user agent (for otoroshi events)",
    "entity_description.otoroshi.models.UserRight": "Represent a user right (teams, organizations) in otoroshi-ui",
    "entity_description.otoroshi.models.UserRights": "Represent a list of user rights",
    "entity_description.otoroshi.models.VerificationSettings": "jwt token verification settings",
    "entity_description.otoroshi.models.WebAuthnOtoroshiAdmin": "An otoroshi admin user that uses webauthn at login",
    "entity_description.otoroshi.models.Webhook": "Settings for webhook call",
    "entity_description.otoroshi.models.WeightedBestResponseTime": "Loadbalancing policy that route to best response time targets with a weight",
    "entity_description.otoroshi.models.ZoneMatch": "Match a target if in the same zone",
    "entity_description.otoroshi.next.models.KvNgRouteDataStore": "Datastore for routes",
    "entity_description.otoroshi.next.models.KvNgServiceDataStore": "Datastore for services",
    "entity_description.otoroshi.next.models.KvStoredNgTargetDataStore": "Datastore for targets",
    "entity_description.otoroshi.next.models.NgBackend": "A backend representation with it's targets, load balancing and general settings",
    "entity_description.otoroshi.next.models.NgCacheConnectionSettings": "The settings for http cached connection at host level",
    "entity_description.otoroshi.next.models.NgClientConfig": "Settings for the http client when http request is forwarded",
    "entity_description.otoroshi.next.models.NgContextualPlugins": "The plugins that will be triggered for the current request",
    "entity_description.otoroshi.next.models.NgCustomTimeouts": "Custom timeouts per path",
    "entity_description.otoroshi.next.models.NgDomainAndPath": "A string representing a domain and an optional path",
    "entity_description.otoroshi.next.models.NgFrontend": "Representation of how a request will be matched to a route",
    "entity_description.otoroshi.next.models.NgMatchedRoute": "A matched route in the new router",
    "entity_description.otoroshi.next.models.NgMatchedRoutes": "A set of matched routes in the new router",
    "entity_description.otoroshi.next.models.NgMinimalBackend": "A backend representation with it's minimal attributes",
    "entity_description.otoroshi.next.models.NgMinimalRoute": "A route representation with it's minimal attributes",
    "entity_description.otoroshi.next.models.NgPluginInstance": "The current configuration and target for a plugin",
    "entity_description.otoroshi.next.models.NgPluginInstanceConfig": "The current configuration for a plugin",
    "entity_description.otoroshi.next.models.NgPlugins": "A set of NgPluginInstance",
    "entity_description.otoroshi.next.models.NgRoute": "A routing primitive representing how a request is matched and where the request is forwarded",
    "entity_description.otoroshi.next.models.NgRouteDataStore": "The datastore for routes",
    "entity_description.otoroshi.next.models.NgRouteDomainAndPathWrapper": "Internal api",
    "entity_description.otoroshi.next.models.NgSelectedBackendTarget": "The current target",
    "entity_description.otoroshi.next.models.NgService": "A composition of multiple routes with the same plugins",
    "entity_description.otoroshi.next.models.NgServiceDataStore": "The datastore for services",
    "entity_description.otoroshi.next.models.NgTarget": "A target where incoming requests will be forwarded",
    "entity_description.otoroshi.next.models.NgTlsConfig": "TLS settings for the http client",
    "entity_description.otoroshi.next.models.NgTreeNodePath": "A node of the tree router",
    "entity_description.otoroshi.next.models.NgTreeRouter": "A very efficient router with a tree structure",
    "entity_description.otoroshi.next.models.NgTreeRouter_Test": "Internal api",
    "entity_description.otoroshi.next.models.RoutingStrategy": "The routing strategy",
    "entity_description.otoroshi.next.models.StoredNgBackend": "A backend that can be stored in the otoroshi datastore",
    "entity_description.otoroshi.next.models.StoredNgBackendDataStore": "The datastore for backend",
    "entity_description.otoroshi.next.models.StoredNgTarget": "A target that can be stored in the otoroshi datastore",
    "entity_description.otoroshi.next.models.StoredNgTargetDataStore": "The datastore for targets",
    "entity_description.otoroshi.next.plugins.AdditionalHeadersIn": "Plugin that add headers on a request",
    "entity_description.otoroshi.next.plugins.AdditionalHeadersOut": "Plugin that add headers on a response",
    "entity_description.otoroshi.next.plugins.AllowHttpMethods": "Plugin that only allow calls with specific http methods",
    "entity_description.otoroshi.next.plugins.ApikeyCalls": "Plugin to use apikeys",
    "entity_description.otoroshi.next.plugins.ApikeyQuotas": "Plugin to apply quotas en apikeys",
    "entity_description.otoroshi.next.plugins.AuthModule": "Plugin to use auth. modules",
    "entity_description.otoroshi.next.plugins.BuildMode": "Plugin for build more",
    "entity_description.otoroshi.next.plugins.CanaryMode": "Plugin for canary mode",
    "entity_description.otoroshi.next.plugins.ContextValidation": "Plugin for context validation",
    "entity_description.otoroshi.next.plugins.ContextValidationConfig": "Configuration for ContextValidation",
    "entity_description.otoroshi.next.plugins.ContextValidator": "Plugin for context validation",
    "entity_description.otoroshi.next.plugins.Cors": "Plugin to use cors",
    "entity_description.otoroshi.next.plugins.DisableHttp10": "Plugin to disable HTTP/1.0",
    "entity_description.otoroshi.next.plugins.EndlessHttpResponse": "Plugin for endless response",
    "entity_description.otoroshi.next.plugins.ForceHttpsTraffic": "Plugin to force https",
    "entity_description.otoroshi.next.plugins.GlobalMaintenanceMode": "Plugin for maintainance mode",
    "entity_description.otoroshi.next.plugins.GlobalPerIpAddressThrottling": "Plugin for ip address throttling",
    "entity_description.otoroshi.next.plugins.GlobalPerIpAddressThrottlingQuotas": "Plugin for ip address quotas",
    "entity_description.otoroshi.next.plugins.GlobalThrottling": "Plugin for throttling",
    "entity_description.otoroshi.next.plugins.GzipResponseCompressor": "Plugin for gzip compression",
    "entity_description.otoroshi.next.plugins.HeadersValidation": "Plugin to validate headers",
    "entity_description.otoroshi.next.plugins.Http2Caller": "Experimental plugin",
    "entity_description.otoroshi.next.plugins.IpAddressAllowedList": "Plugin to allow only some ip addresses",
    "entity_description.otoroshi.next.plugins.IpAddressBlockList": "Plugin to block only some ip addresses",
    "entity_description.otoroshi.next.plugins.JQ": "Plugin to transform body with JQ filters",
    "entity_description.otoroshi.next.plugins.JQConfig": "Configuration for JQ",
    "entity_description.otoroshi.next.plugins.JQRequest": "Plugin to transform body with JQ filters",
    "entity_description.otoroshi.next.plugins.JQRequestConfig": "Configuration for JQRequest",
    "entity_description.otoroshi.next.plugins.JQResponse": "Plugin to transform body with JQ filters",
    "entity_description.otoroshi.next.plugins.JQResponseConfig": "Configuration for JQResponse",
    "entity_description.otoroshi.next.plugins.JsonToXmlRequest": "Plugin to transform json body to xml",
    "entity_description.otoroshi.next.plugins.JsonToXmlResponse": "Plugin to transform json body to xml",
    "entity_description.otoroshi.next.plugins.JsonTransform": "Plugin to transform json response",
    "entity_description.otoroshi.next.plugins.JsonTransformConfig": "Configuration for JsonTransform",
    "entity_description.otoroshi.next.plugins.JwtVerification": "Plugin to verify jwt token",
    "entity_description.otoroshi.next.plugins.Keys": "Internal api",
    "entity_description.otoroshi.next.plugins.MaintenanceMode": "Plugin for maintainance mode",
    "entity_description.otoroshi.next.plugins.MissingHeadersIn": "Plugin to add headers to a request",
    "entity_description.otoroshi.next.plugins.MissingHeadersOut": "Plugin to add headers to a response",
    "entity_description.otoroshi.next.plugins.MockResponse": "Plugin to mock responses",
    "entity_description.otoroshi.next.plugins.MockResponses": "Plugin to mock responses",
    "entity_description.otoroshi.next.plugins.MockResponsesConfig": "Configuration for MockResponses",
    "entity_description.otoroshi.next.plugins.NgAllowedMethodsConfig": "Configuration for AllowHttpMethods",
    "entity_description.otoroshi.next.plugins.NgApikeyCallsConfig": "Configuration for ApikeyCalls",
    "entity_description.otoroshi.next.plugins.NgApikeyExtractorBasic": "Configuration for ApikeyCalls",
    "entity_description.otoroshi.next.plugins.NgApikeyExtractorClientId": "Configuration for ApikeyCalls",
    "entity_description.otoroshi.next.plugins.NgApikeyExtractorCustomHeaders": "Configuration for ApikeyCalls",
    "entity_description.otoroshi.next.plugins.NgApikeyExtractorJwt": "Configuration for ApikeyCalls",
    "entity_description.otoroshi.next.plugins.NgApikeyExtractors": "Configuration for ApikeyCalls",
    "entity_description.otoroshi.next.plugins.NgApikeyMatcher": "Configuration for ApikeyCalls",
    "entity_description.otoroshi.next.plugins.NgAuthModuleConfig": "Configuration for AuthModule",
    "entity_description.otoroshi.next.plugins.NgBadResponse": "Configuration for SnowMonkeyChaos",
    "entity_description.otoroshi.next.plugins.NgBadResponsesFaultConfig": "Configuration for SnowMonkeyChaos",
    "entity_description.otoroshi.next.plugins.NgCanarySettings": "Configuration for CanaryMode",
    "entity_description.otoroshi.next.plugins.NgChaosConfig": "Configuration for SnowMonkeyChaos",
    "entity_description.otoroshi.next.plugins.NgCorsSettings": "Configuration for Cors",
    "entity_description.otoroshi.next.plugins.NgEndlessHttpResponseConfig": "Configuration for EndlessHttpResponse",
    "entity_description.otoroshi.next.plugins.NgFaultConfig": "Configuration for SnowMonkeyChaos",
    "entity_description.otoroshi.next.plugins.NgGzipConfig": "Configuration for Gzip",
    "entity_description.otoroshi.next.plugins.NgHeaderNamesConfig": "Configuration for headers plugins",
    "entity_description.otoroshi.next.plugins.NgHeaderValuesConfig": "Configuration for headers plugins",
    "entity_description.otoroshi.next.plugins.NgIpAddressesConfig": "Configuration for ip address related plugins",
    "entity_description.otoroshi.next.plugins.NgJwtVerificationConfig": "Configuration for JwtVerification",
    "entity_description.otoroshi.next.plugins.NgLargeRequestFaultConfig": "Configuration for SnowMonkeyChaos",
    "entity_description.otoroshi.next.plugins.NgLargeResponseFaultConfig": "Configuration for SnowMonkeyChaos",
    "entity_description.otoroshi.next.plugins.NgLatencyInjectionFaultConfig": "Configuration for SnowMonkeyChaos",
    "entity_description.otoroshi.next.plugins.NgOtoroshiChallengeConfig": "Configuration for OtoroshiChallenge",
    "entity_description.otoroshi.next.plugins.NgOtoroshiChallengeKeys": "Configuration for OtoroshiChallenge",
    "entity_description.otoroshi.next.plugins.NgOtoroshiInfoConfig": "Configuration for OtoroshiInfos",
    "entity_description.otoroshi.next.plugins.NgPublicPrivatePathsConfig": "Configuration for PublicPrivatePaths",
    "entity_description.otoroshi.next.plugins.NgRedirectionSettings": "Configuration for Redirection",
    "entity_description.otoroshi.next.plugins.NgRestrictionPath": "Configuration for NgRestrictions",
    "entity_description.otoroshi.next.plugins.NgRestrictions": "Plugin to apply routing restrictions",
    "entity_description.otoroshi.next.plugins.NoopSpanExporter": "Internal api",
    "entity_description.otoroshi.next.plugins.OtoroshiChallenge": "Plugin for otoroshi challenge",
    "entity_description.otoroshi.next.plugins.OtoroshiInfos": "Plugin for otoroshi info token",
    "entity_description.otoroshi.next.plugins.OverrideHost": "Plugin to override backend host header",
    "entity_description.otoroshi.next.plugins.PublicPrivatePaths": "Plugin to define public and private paths",
    "entity_description.otoroshi.next.plugins.QueryTransformer": "Plugin to transform query string",
    "entity_description.otoroshi.next.plugins.QueryTransformerConfig": "Configuration for QueryTransformer",
    "entity_description.otoroshi.next.plugins.RBAC": "Plugin to apply RBAC",
    "entity_description.otoroshi.next.plugins.RBACConfig": "Configuration for RBAC",
    "entity_description.otoroshi.next.plugins.ReadOnlyCalls": "Plugin for readonly calls",
    "entity_description.otoroshi.next.plugins.Redirection": "Plugin to perform redirections",
    "entity_description.otoroshi.next.plugins.RemoveHeadersIn": "Plugin to remove headers from request",
    "entity_description.otoroshi.next.plugins.RemoveHeadersOut": "Plugin to remove headers from response",
    "entity_description.otoroshi.next.plugins.RobotConfig": "Configuration for Robots",
    "entity_description.otoroshi.next.plugins.Robots": "Plugin to handle search engine bots",
    "entity_description.otoroshi.next.plugins.RoutingRestrictions": "Configuration for NgRestrictions",
    "entity_description.otoroshi.next.plugins.SOAPAction": "Plugin to call SOAP service",
    "entity_description.otoroshi.next.plugins.SOAPActionConfig": "Configuration for SOAPAction",
    "entity_description.otoroshi.next.plugins.SdkWrapper": "Internal api",
    "entity_description.otoroshi.next.plugins.SendOtoroshiHeadersBack": "Plugin to enrich response header with otoroshi infos",
    "entity_description.otoroshi.next.plugins.SnowMonkeyChaos": "Plugin to induce chaos",
    "entity_description.otoroshi.next.plugins.StaticResponse": "Plugin to return static responses",
    "entity_description.otoroshi.next.plugins.StaticResponseConfig": "Configuration for StaticResponse",
    "entity_description.otoroshi.next.plugins.TcpTunnel": "Plugin to have tcp tunnels over websockets",
    "entity_description.otoroshi.next.plugins.UdpTunnel": "Plugin to have udp tunnels over websockets",
    "entity_description.otoroshi.next.plugins.W3CTracing": "Plugin to have distributed tracing",
    "entity_description.otoroshi.next.plugins.W3CTracingConfig": "Configuration for W3CTracing",
    "entity_description.otoroshi.next.plugins.W3CTracingConfigKind": "Configuration for W3CTracing",
    "entity_description.otoroshi.next.plugins.XForwardedHeaders": "Plugin to add X-Forwarded headers in a request",
    "entity_description.otoroshi.next.plugins.XmlToJsonRequest": "Plugin to transform xml body into json",
    "entity_description.otoroshi.next.plugins.XmlToJsonResponse": "Plugin to transform xml body into json",
    "entity_description.otoroshi.next.plugins.api.NgAccess": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgAccessContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgAccessValidator": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgAfterRequestContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgBeforeRequestContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgCachedConfigContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgMergedAccessValidator": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgMergedPreRouting": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgMergedRequestTransformer": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgMergedResponseTransformer": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgNamedPlugin": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPlugin": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPluginCategory": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPluginConfig": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPluginHelper": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPluginHttpRequest": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPluginHttpResponse": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPluginVisibility": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPluginWrapper": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPreRouting": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPreRoutingContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPreRoutingError": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPreRoutingErrorRaw": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgPreRoutingErrorWithResult": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgRequestOrigin": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgRequestSink": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgRequestSinkContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgRequestTransformer": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgRouteMatcher": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgRouteMatcherContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgStep": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgTransformerErrorContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgTransformerRequestContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgTransformerResponseContext": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgTunnelHandler": "Internal api",
    "entity_description.otoroshi.next.plugins.api.NgTunnelHandlerContext": "Internal api",
    "entity_description.otoroshi.next.plugins.wrappers.AccessValidatorWrapper": "Internal api",
    "entity_description.otoroshi.next.plugins.wrappers.CompositeWrapper": "Internal api",
    "entity_description.otoroshi.next.plugins.wrappers.PreRoutingWrapper": "Internal api",
    "entity_description.otoroshi.next.plugins.wrappers.RequestSinkWrapper": "Internal api",
    "entity_description.otoroshi.next.plugins.wrappers.RequestTransformerWrapper": "Internal api",
    "entity_description.otoroshi.next.proxy.NgExecutionReport": "Internal api",
    "entity_description.otoroshi.next.proxy.NgReportPluginSequence": "Internal api",
    "entity_description.otoroshi.next.proxy.NgReportPluginSequenceItem": "Internal api",
    "entity_description.otoroshi.plugins.JsonPathUtils": "Internal api",
    "entity_description.otoroshi.plugins.Keys": "Internal api",
    "entity_description.otoroshi.plugins.accesslog.AccessLog": "Plugin that log access",
    "entity_description.otoroshi.plugins.accesslog.AccessLogJson": "Plugin that log access in json",
    "entity_description.otoroshi.plugins.accesslog.KafkaAccessLog": "Plugin that log access in a kafka topic",
    "entity_description.otoroshi.plugins.apikeys.ApiKeyAllowedOnThisServiceValidator": "Plugin that validates apikey for specific services",
    "entity_description.otoroshi.plugins.apikeys.ApikeyAuthModule": "Plugin that authenticate a website based on apikeys",
    "entity_description.otoroshi.plugins.apikeys.BiscuitConf": "Configuration for the biscuit plugin",
    "entity_description.otoroshi.plugins.apikeys.CertificateAsApikey": "Plugin to use a certificate as an apikey",
    "entity_description.otoroshi.plugins.apikeys.ClientCredentialFlow": "Plugin that provide the OAuth2 client_credentials flow",
    "entity_description.otoroshi.plugins.apikeys.ClientCredentialFlowBody": "Internal api",
    "entity_description.otoroshi.plugins.apikeys.ClientCredentialFlowExtractor": "Internal api",
    "entity_description.otoroshi.plugins.apikeys.ClientCredentialService": "Plugin that provide the OAuth2 client_credentials flow",
    "entity_description.otoroshi.plugins.apikeys.HasAllowedApiKeyValidator": "Plugin that validates apikey",
    "entity_description.otoroshi.plugins.authcallers.BasicAuthCaller": "Plugin that can call a basic auth. backend",
    "entity_description.otoroshi.plugins.authcallers.BasicAuthCallerConfig": "Configuration for BasicAuthCaller",
    "entity_description.otoroshi.plugins.authcallers.ForceRetryException": "Internal api",
    "entity_description.otoroshi.plugins.authcallers.OAuth2Caller": "Plugin that can call an oauth2 client_credentials flow or password flow backend",
    "entity_description.otoroshi.plugins.authcallers.OAuth2CallerConfig": "Configuration for OAuth2Caller",
    "entity_description.otoroshi.plugins.authcallers.OAuth2Kind": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.AccessValidatorContext": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.BiscuitConfig": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.BiscuitExtractor": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.BiscuitHelper": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.BiscuitToken": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.BiscuitValidator": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.PreRoutingVerifierContext": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.PubKeyBiscuitToken": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.SealedBiscuitToken": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.VerificationContext": "Internal api",
    "entity_description.otoroshi.plugins.biscuit.vavr_implicits": "Internal api",
    "entity_description.otoroshi.plugins.cache.ResponseCache": "Plugin that can cache http responses",
    "entity_description.otoroshi.plugins.cache.ResponseCacheConfig": "Configuration for ResponseCache",
    "entity_description.otoroshi.plugins.cache.ResponseCacheFilterConfig": "Configuration for ResponseCache",
    "entity_description.otoroshi.plugins.clientcert.ClientCertChainHeader": "Plugin that can pass client certificates as header to the backends",
    "entity_description.otoroshi.plugins.clientcert.HasClientCertMatchingApikeyValidator": "Plugin that validates client certificates",
    "entity_description.otoroshi.plugins.clientcert.HasClientCertMatchingHttpValidator": "Plugin that validates client certificates",
    "entity_description.otoroshi.plugins.clientcert.HasClientCertMatchingValidator": "Plugin that validates client certificates",
    "entity_description.otoroshi.plugins.clientcert.HasClientCertValidator": "Plugin that validates client certificates",
    "entity_description.otoroshi.plugins.clientcert.SubIss": "Internal api",
    "entity_description.otoroshi.plugins.composite.CompositePlugin": "Internal api",
    "entity_description.otoroshi.plugins.core.DefaultPlugins": "Internal api",
    "entity_description.otoroshi.plugins.core.apikeys.BasicAuthApikeyExtractor": "Internal api",
    "entity_description.otoroshi.plugins.core.apikeys.ClientIdApikeyExtractor": "Internal api",
    "entity_description.otoroshi.plugins.core.apikeys.CustomHeadersApikeyExtractor": "Internal api",
    "entity_description.otoroshi.plugins.core.apikeys.JwtApikeyExtractor": "Internal api",
    "entity_description.otoroshi.plugins.defer.DeferPlugin": "Plugin that defers http responses",
    "entity_description.otoroshi.plugins.discovery.DiscoveryHelper": "Internal api",
    "entity_description.otoroshi.plugins.discovery.DiscoveryJob": "Plugin that add services discovery to otoroshi",
    "entity_description.otoroshi.plugins.discovery.DiscoveryJobRegistrationId": "Internal api",
    "entity_description.otoroshi.plugins.discovery.DiscoveryJobServiceId": "Internal api",
    "entity_description.otoroshi.plugins.discovery.DiscoverySelfRegistrationSink": "Plugin that add services discovery to otoroshi",
    "entity_description.otoroshi.plugins.discovery.DiscoverySelfRegistrationTransformer": "Plugin that add services discovery to otoroshi",
    "entity_description.otoroshi.plugins.discovery.DiscoveryTargetsSelector": "Internal api",
    "entity_description.otoroshi.plugins.discovery.SelfRegistrationConfig": "Internal api",
    "entity_description.otoroshi.plugins.envoy.EnvoyControlPlane": "Experimental plugin",
    "entity_description.otoroshi.plugins.external.ExternalHttpValidator": "Plugin that validates call based on an external http service",
    "entity_description.otoroshi.plugins.external.ExternalHttpValidatorConfig": "Configuration for ExternalHttpValidator",
    "entity_description.otoroshi.plugins.geoloc.GeolocationInfoEndpoint": "Plugin that send geolocation infos to the client through an endpoint",
    "entity_description.otoroshi.plugins.geoloc.GeolocationInfoHeader": "Plugin that send geolocation infos to the backend through a header",
    "entity_description.otoroshi.plugins.geoloc.IpStackGeolocationHelper": "Internal api",
    "entity_description.otoroshi.plugins.geoloc.IpStackGeolocationInfoExtractor": "Plugin that extracts geolocation based on ipstack",
    "entity_description.otoroshi.plugins.geoloc.MaxMindGeolocationHelper": "Internal api",
    "entity_description.otoroshi.plugins.geoloc.MaxMindGeolocationInfoExtractor": "Plugin that extracts geolocation based on maxmind db",
    "entity_description.otoroshi.plugins.hmac.HMACCallerPlugin": "Plugin that can call an hmac protected backend",
    "entity_description.otoroshi.plugins.hmac.HMACUtils": "Internal api",
    "entity_description.otoroshi.plugins.hmac.HMACValidator": "Plugin that can validate an hmac call",
    "entity_description.otoroshi.plugins.izanami.IzanamiCanary": "Plugin that can route on different target paths based on an izanami experiment",
    "entity_description.otoroshi.plugins.izanami.IzanamiCanaryConfig": "Configuration for IzanamiCanary",
    "entity_description.otoroshi.plugins.izanami.IzanamiCanaryRoutingConfig": "Configuration for IzanamiCanary",
    "entity_description.otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute": "Configuration for IzanamiCanary",
    "entity_description.otoroshi.plugins.izanami.IzanamiProxy": "Plugin to proxy izanami",
    "entity_description.otoroshi.plugins.izanami.IzanamiProxyConfig": "Configuration for IzanamiProxy",
    "entity_description.otoroshi.plugins.jobs.kubernetes.CRDContext": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.ClientSupport": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.FailedCrdParsing": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.IngressSupport": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesAdmissionWebhookCRDValidator": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesAdmissionWebhookSidecarInjector": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesCRDsJob": "Plugin to import entities from kubernetes CRDs",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesCertSyncJob": "Plugin to sync kubernetes certificates with otoroshi",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesClient": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesConfig": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesConfigMap": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesDeployment": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesEndpoint": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesEntity": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesIngress": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesIngressClass": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesIngressControllerJob": "Plugin to sync kubernetes ingresses with otoroshi",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesIngressSyncJob": "Plugin to sync kubernetes ingresses with otoroshi",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesIngressToDescriptor": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesMutatingWebhookConfiguration": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesOpenshiftDnsOperator": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesOtoroshiCRDsControllerJob": "Plugin to import entities from kubernetes CRDs",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesService": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesSupport": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesToOtoroshiCertSyncJob": "Plugin to sync otoroshi certificates with kubernetes",
    "entity_description.otoroshi.plugins.jobs.kubernetes.KubernetesValidatingWebhookConfiguration": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.OtoAnnotationConfig": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.OtoResHolder": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext": "Internal api",
    "entity_description.otoroshi.plugins.jobs.kubernetes.OtoroshiToKubernetesCertSyncJob": "Internal api",
    "entity_description.otoroshi.plugins.jq.JqBodyTransformer": "Plugin to transform http body using jq filters",
    "entity_description.otoroshi.plugins.jsoup.HtmlPatcher": "Plugin to transform html response body",
    "entity_description.otoroshi.plugins.jwt.JwtUserExtractor": "Plugin to extract user from jwt token",
    "entity_description.otoroshi.plugins.log4j.Log4ShellFilter": "Plugin to mitigate Log4Shell attacks",
    "entity_description.otoroshi.plugins.log4j.Log4jExpression": "Internal api",
    "entity_description.otoroshi.plugins.log4j.Log4jExpressionParser": "Internal api",
    "entity_description.otoroshi.plugins.log4j.Log4jExpressionText": "Internal api",
    "entity_description.otoroshi.plugins.loggers.BodyLogger": "Plugin to log http bodies",
    "entity_description.otoroshi.plugins.loggers.BodyLoggerConfig": "Configuration for BodyLogger",
    "entity_description.otoroshi.plugins.loggers.BodyLoggerFilterConfig": "Configuration for BodyLogger",
    "entity_description.otoroshi.plugins.loggers.RequestBodyEvent": "Internal api",
    "entity_description.otoroshi.plugins.loggers.ResponseBodyEvent": "Internal api",
    "entity_description.otoroshi.plugins.metrics.PrometheusEndpoint": "Plugin to expose metrics collected by PrometheusServiceMetrics",
    "entity_description.otoroshi.plugins.metrics.PrometheusServiceMetrics": "Plugin to collect service metrics",
    "entity_description.otoroshi.plugins.metrics.PrometheusSupport": "Plugin to collect service metrics",
    "entity_description.otoroshi.plugins.metrics.ServiceMetrics": "Plugin to collect service metrics",
    "entity_description.otoroshi.plugins.mirror.MirroringEvent": "Internal api",
    "entity_description.otoroshi.plugins.mirror.MirroringPlugin": "Plugin to mirror calls",
    "entity_description.otoroshi.plugins.mirror.MirroringPluginConfig": "Configuration for MirroringPlugin",
    "entity_description.otoroshi.plugins.mirror.RequestContext": "Internal api",
    "entity_description.otoroshi.plugins.oauth1.OAuth1CallerPlugin": "Plugin to call OAuth1 protected backends",
    "entity_description.otoroshi.plugins.oidc.OIDCAccessTokenAsApikey": "Plugin to use OIDC token as apikey",
    "entity_description.otoroshi.plugins.oidc.OIDCAccessTokenValidator": "Plugin to validate OIDC token ",
    "entity_description.otoroshi.plugins.oidc.OIDCHeaders": "Plugin to pass OIDC related info as headers",
    "entity_description.otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig": "Internal api",
    "entity_description.otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfigMode": "Internal api",
    "entity_description.otoroshi.plugins.oidc.ThirdPartyApiKeyConfig": "Internal api",
    "entity_description.otoroshi.plugins.oidc.ThirdPartyApiKeyConfigType": "Internal api",
    "entity_description.otoroshi.plugins.quotas.InstanceQuotas": "Internal api",
    "entity_description.otoroshi.plugins.quotas.ServiceQuotas": "Internal api",
    "entity_description.otoroshi.plugins.quotas.ServiceQuotasConfig": "Internal api",
    "entity_description.otoroshi.plugins.security.SecurityTxt": "Plugin that serves /.well-known/security.txt resources",
    "entity_description.otoroshi.plugins.static.StaticResponse": "Plugin that serves static responses",
    "entity_description.otoroshi.plugins.useragent.UserAgentExtractor": "Plugin that extract user-agent related infos",
    "entity_description.otoroshi.plugins.useragent.UserAgentHelper": "Internal api",
    "entity_description.otoroshi.plugins.useragent.UserAgentInfoEndpoint": "Plugin that return user-agent infos on an endpoint",
    "entity_description.otoroshi.plugins.useragent.UserAgentInfoHeader": "Plugin that pass user-agent infos in headers",
    "entity_description.otoroshi.plugins.users.HasAllowedUsersValidator": "Plugin that validates current user",
    "entity_description.otoroshi.plugins.workflow.WorkflowEndpoint": "Experimental plugin",
    "entity_description.otoroshi.plugins.workflow.WorkflowJob": "Experimental plugin",
    "entity_description.otoroshi.script.AccessContext": "Context for AccessValidation plugins",
    "entity_description.otoroshi.script.AccessValidatorRef": "References to access validation plugins",
    "entity_description.otoroshi.script.PreRoutingContext": "Context for preroutes plugins",
    "entity_description.otoroshi.script.PreRoutingRef": "References to pre-routing plugins",
    "entity_description.otoroshi.script.Script": "An otoroshi plugins stored as scala code in the otoroshi datastore",
    "entity_description.otoroshi.script.plugins.Plugins": "Settings for plugins (of any kind)",
    "entity_description.otoroshi.ssl.Cert": "The otoroshi model for X509 certificates",
    "entity_description.otoroshi.ssl.pki.models.GenCertResponse": "Response for a certificate generation operation",
    "entity_description.otoroshi.ssl.pki.models.GenCsrQuery": "Settings for generating a certificate",
    "entity_description.otoroshi.ssl.pki.models.GenCsrResponse": "Response for a csr generation operation",
    "entity_description.otoroshi.ssl.pki.models.GenKeyPairQuery": "Settings for generating a keypair",
    "entity_description.otoroshi.ssl.pki.models.GenKeyPairResponse": "Response for a keypair generation operation",
    "entity_description.otoroshi.ssl.pki.models.SignCertResponse": "Response for a certificate signing operation",
    "entity_description.otoroshi.storage.RedisLike": "A redis like representation of a datastore",
    "entity_description.otoroshi.storage.drivers.cassandra.NewCassandraRedis": "Cassandra storage implementation",
    "entity_description.otoroshi.storage.drivers.inmemory.ModernSwappableInMemoryRedis": "In-memory storage implementation",
    "entity_description.otoroshi.storage.drivers.inmemory.SwappableInMemoryRedis": "In-memory storage implementation",
    "entity_description.otoroshi.storage.drivers.lettuce.LettuceRedis": "Redis storage implementation",
    "entity_description.otoroshi.storage.drivers.lettuce.LettuceRedisCluster": "Redis cluster storage implementation",
    "entity_description.otoroshi.storage.drivers.lettuce.LettuceRedisStandaloneAndSentinels": "Redis sentinel storage implementation",
    "entity_description.otoroshi.storage.drivers.leveldb.LevelDbRedis": "Mongo DB storage implementation",
    "entity_description.otoroshi.storage.drivers.mongo.MongoRedis": "Mongo DB storage implementation",
    "entity_description.otoroshi.storage.drivers.reactivepg.ReactivePgRedis": "Postgresql storage implementation",
    "entity_description.otoroshi.storage.drivers.rediscala.RedisCPStore": "Specific redis mode storage implementation",
    "entity_description.otoroshi.storage.drivers.rediscala.RedisClusterStore": "Specific redis mode storage implementation",
    "entity_description.otoroshi.storage.drivers.rediscala.RedisCommandsStore": "Specific redis mode storage implementation",
    "entity_description.otoroshi.storage.drivers.rediscala.RedisLFStore": "Specific redis mode storage implementation",
    "entity_description.otoroshi.storage.drivers.rediscala.RedisMCPStore": "Specific redis mode storage implementation",
    "entity_description.otoroshi.storage.drivers.rediscala.RedisSentinelLFStore": "Specific redis mode storage implementation",
    "entity_description.otoroshi.storage.drivers.rediscala.RedisSentinelStore": "Specific redis mode storage implementation",
    "entity_description.otoroshi.tcp.SniSettings": "SNI settings for a TCP proxy",
    "entity_description.otoroshi.tcp.TcpRule": "Associate targets for a domain (SNI)",
    "entity_description.otoroshi.tcp.TcpService": "Model for a TCP proxy",
    "entity_description.otoroshi.tcp.TcpTarget": "Target for a TCP proxy",
    "entity_description.otoroshi.utils.ConcurrentMutableTypedMap": "A concurrent map with typed keys",
    "entity_description.otoroshi.utils.TypedMap": "A map with typed keys",
    "entity_description.otoroshi.utils.gzip.GzipConfig": "Settings for gzip support",
    "entity_description.otoroshi.utils.http.CacheConnectionSettings": "The settings for http cached connection at host level",
    "entity_description.otoroshi.utils.http.DN": "A representation of a Distinguished Name",
    "entity_description.otoroshi.utils.http.MtlsConfig": "TLS settings for the http client",
    "entity_description.otoroshi.utils.letsencrypt.LetsEncryptSettings": "Settings for connection to a let's encrypt (or ACME) server",
    "entity_description.otoroshi.utils.mailer.ConsoleMailerSettings": "Settings for the console mailer",
    "entity_description.otoroshi.utils.mailer.EmailLocation": "Email location settings",
    "entity_description.otoroshi.utils.mailer.GenericMailerSettings": "Settings for the generic mailer (http requests)",
    "entity_description.otoroshi.utils.mailer.MailgunSettings": "Settings for the mailgun mailer",
    "entity_description.otoroshi.utils.mailer.MailjetSettings": "Settings for the mailjet mailer",
    "entity_description.otoroshi.utils.mailer.NoneMailerSettings": "Settings for the /dev/null mailer",
    "entity_description.otoroshi.utils.mailer.SendgridSettings": "Settings for the sendgrid mailer",
    "operations.otoroshi.controllers.PrivateAppsController.registerSession_privateapps": "Registers a private app session",
    "operations.otoroshi.controllers.PrivateAppsController.sendSelfUpdateLink_privateapps": "Send an email to a user to update its own settings",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.filterableEvents_analytics": "???",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.filterableStats_analytics": "???",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.globalStats_analytics": "???",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.globalStatus_analytics": "???",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.groupStatus_groups": "Statis for a group of services over time",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.serviceEvents_services": "Events for a service",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.serviceResponseTime_services": "Response time statistics for a service",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.serviceStats_services": "Statistics for a service",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.serviceStatus_services": "Status of a service over time",
    "operations.otoroshi.controllers.adminapi.AnalyticsController.servicesStatus_analytics": "???",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.apiKeyQuotas_apikeys": "Consumed quotas for a specific apikey",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.bulkCreateAction_apikeys": "Create multiple ApiKeys at the same time",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.bulkDeleteAction_apikeys": "Delete multiple ApiKeys at the same time",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.bulkPatchAction_apikeys": "Update (using json-patch) multiple ApiKeys at the same time",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.bulkUpdateAction_apikeys": "Update multiple ApiKeys at the same time",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.createAction_apikeys": "Creates a ApiKey",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.deleteEntityAction_apikeys": "Deletes a specific ApiKey using its id",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.findAllEntitiesAction_apikeys": "Find all possible ApiKeys entities",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.findEntityByIdAction_apikeys": "Find a specific ApiKey using its id",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.patchEntityAction_apikeys": "Updates (using json-patch) a specific ApiKey using its id",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.resetApiKeyQuotas_apikeys": "Reset quotas consumption for an apikey",
    "operations.otoroshi.controllers.adminapi.ApiKeysController.updateEntityAction_apikeys": "Updates a specific ApiKey using its id",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.bulkCreateAction_auth-modules": "Create multiple AuthModuleConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.bulkDeleteAction_auth-modules": "Delete multiple AuthModuleConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.bulkPatchAction_auth-modules": "Update (using json-patch) multiple AuthModuleConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.bulkUpdateAction_auth-modules": "Update multiple AuthModuleConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.createAction_auth-modules": "Creates a AuthModuleConfig",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.deleteEntityAction_auth-modules": "Deletes a specific AuthModuleConfig using its id",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.findAllEntitiesAction_auth-modules": "Find all possible AuthModuleConfigs entities",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.findEntityByIdAction_auth-modules": "Find a specific AuthModuleConfig using its id",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.finishRegistration_auth-modules": "Finishes the registration of a user",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.patchEntityAction_auth-modules": "Updates (using json-patch) a specific AuthModuleConfig using its id",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.startRegistration_auth-modules": "Stats the registration of a user",
    "operations.otoroshi.controllers.adminapi.AuthModulesController.updateEntityAction_auth-modules": "Updates a specific AuthModuleConfig using its id",
    "operations.otoroshi.controllers.adminapi.CanaryController.resetServiceCanaryMembers_services": "Reset members of a canary campaign",
    "operations.otoroshi.controllers.adminapi.CanaryController.serviceCanaryMembers_services": "Get members of a canary campaign",
    "operations.otoroshi.controllers.adminapi.CertificatesController.bulkCreateAction_certificates": "Create multiple Certs at the same time",
    "operations.otoroshi.controllers.adminapi.CertificatesController.bulkDeleteAction_certificates": "Delete multiple Certs at the same time",
    "operations.otoroshi.controllers.adminapi.CertificatesController.bulkPatchAction_certificates": "Update (using json-patch) multiple Certs at the same time",
    "operations.otoroshi.controllers.adminapi.CertificatesController.bulkUpdateAction_certificates": "Update multiple Certs at the same time",
    "operations.otoroshi.controllers.adminapi.CertificatesController.createAction_certificates": "Creates a Cert",
    "operations.otoroshi.controllers.adminapi.CertificatesController.deleteEntityAction_certificates": "Deletes a specific Cert using its id",
    "operations.otoroshi.controllers.adminapi.CertificatesController.findAllEntitiesAction_certificates": "Find all possible Certs entities",
    "operations.otoroshi.controllers.adminapi.CertificatesController.findEntityByIdAction_certificates": "Find a specific Cert using its id",
    "operations.otoroshi.controllers.adminapi.CertificatesController.patchEntityAction_certificates": "Updates (using json-patch) a specific Cert using its id",
    "operations.otoroshi.controllers.adminapi.CertificatesController.renewCert_certificates": "Renew a certificates with the same attributes as the original one",
    "operations.otoroshi.controllers.adminapi.CertificatesController.updateEntityAction_certificates": "Updates a specific Cert using its id",
    "operations.otoroshi.controllers.adminapi.ClusterController.clearClusterMembers_cluster": "Clear cluster members from members statistics",
    "operations.otoroshi.controllers.adminapi.ClusterController.createLoginToken_cluster": "Api to create a distributed login token between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.createSession_cluster": "Api to create a distributed private apps session between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.getClusterMembers_cluster": "Get cluster members statistics",
    "operations.otoroshi.controllers.adminapi.ClusterController.getUserToken_cluster": "Api to get a distributed login token between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.internalState_cluster": "Api to get internal state from a leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.isLoginTokenValid_cluster": "Api to check a distributed login token between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.isSessionValid_cluster": "Api to create a distributed private apps session between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.liveCluster_cluster": "Api to get cluster statistics",
    "operations.otoroshi.controllers.adminapi.ClusterController.setUserToken_cluster": "Api to set a distributed login token between worker and leader",
    "operations.otoroshi.controllers.adminapi.ClusterController.updateQuotas_cluster": "Api to push quotas usage from a worker to a leader",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.bulkCreateAction_data-exporters": "Create multiple DataExporterConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.bulkDeleteAction_data-exporters": "Delete multiple DataExporterConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.bulkPatchAction_data-exporters": "Update (using json-patch) multiple DataExporterConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.bulkUpdateAction_data-exporters": "Update multiple DataExporterConfigs at the same time",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.createAction_data-exporters": "Creates a DataExporterConfig",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.deleteEntityAction_data-exporters": "Deletes a specific DataExporterConfig using its id",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.findAllEntitiesAction_data-exporters": "Find all possible DataExporterConfigs entities",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.findEntityByIdAction_data-exporters": "Find a specific DataExporterConfig using its id",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.patchEntityAction_data-exporters": "Updates (using json-patch) a specific DataExporterConfig using its id",
    "operations.otoroshi.controllers.adminapi.DataExporterConfigController.updateEntityAction_data-exporters": "Updates a specific DataExporterConfig using its id",
    "operations.otoroshi.controllers.adminapi.EventsController.alertEvents_events": "???",
    "operations.otoroshi.controllers.adminapi.EventsController.auditEvents_events": "???",
    "operations.otoroshi.controllers.adminapi.GlobalConfigController.globalConfig_globalconfig": "Get the global config",
    "operations.otoroshi.controllers.adminapi.GlobalConfigController.patchGlobalConfig_globalconfig": "Update (with json-patch) the global config",
    "operations.otoroshi.controllers.adminapi.GlobalConfigController.updateGlobalConfig_globalconfig": "Update the global config",
    "operations.otoroshi.controllers.adminapi.ImportExportController.fullExport_import-export": "Export all the content of the otoroshi datastore",
    "operations.otoroshi.controllers.adminapi.ImportExportController.fullImportFromFile_import-export": "Import the content of the otoroshi datastore (file)",
    "operations.otoroshi.controllers.adminapi.ImportExportController.fullImport_import-export": "Import the content of the otoroshi datastore (json)",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.bulkCreateAction_jwt-verifiers": "Create multiple GlobalJwtVerifiers at the same time",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.bulkDeleteAction_jwt-verifiers": "Delete multiple GlobalJwtVerifiers at the same time",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.bulkPatchAction_jwt-verifiers": "Update (using json-patch) multiple GlobalJwtVerifiers at the same time",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.bulkUpdateAction_jwt-verifiers": "Update multiple GlobalJwtVerifiers at the same time",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.createAction_jwt-verifiers": "Creates a GlobalJwtVerifier",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.deleteEntityAction_jwt-verifiers": "Deletes a specific GlobalJwtVerifier using its id",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.findAllEntitiesAction_jwt-verifiers": "Find all possible GlobalJwtVerifiers entities",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.findEntityByIdAction_jwt-verifiers": "Find a specific GlobalJwtVerifier using its id",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.patchEntityAction_jwt-verifiers": "Updates (using json-patch) a specific GlobalJwtVerifier using its id",
    "operations.otoroshi.controllers.adminapi.JwtVerifierController.updateEntityAction_jwt-verifiers": "Updates a specific GlobalJwtVerifier using its id",
    "operations.otoroshi.controllers.adminapi.PkiController.certificateData_pki": "Extract data from a certificate",
    "operations.otoroshi.controllers.adminapi.PkiController.certificateIsValid_pki": "Check if a certificate is valid (based on its own data)",
    "operations.otoroshi.controllers.adminapi.PkiController.genCert_pki": "Generates a certificate",
    "operations.otoroshi.controllers.adminapi.PkiController.genCsr_pki": "Generates a CSR",
    "operations.otoroshi.controllers.adminapi.PkiController.genKeyPair_pki": "Generates a keypair",
    "operations.otoroshi.controllers.adminapi.PkiController.genLetsEncryptCert_pki": "Generates a certificates using Let's Encrypt or any ACME compatible system",
    "operations.otoroshi.controllers.adminapi.PkiController.genSelfSignedCA_pki": "Generates a self signed CA",
    "operations.otoroshi.controllers.adminapi.PkiController.genSelfSignedCert_pki": "Generates a self signed certificates",
    "operations.otoroshi.controllers.adminapi.PkiController.genSubCA_pki": "Generates a sub-CA",
    "operations.otoroshi.controllers.adminapi.PkiController.importBundle_certificates": "Import PEM bundle as otoroshi certificates",
    "operations.otoroshi.controllers.adminapi.PkiController.importCertFromP12_pki": "Import de .p12 file as client certificates",
    "operations.otoroshi.controllers.adminapi.PkiController.signCert_pki": "Sign a certificate based on a CSR",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.bulkCreateAction_scripts": "Create multiple otoroshi.script.Scripts at the same time",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.bulkDeleteAction_scripts": "Delete multiple otoroshi.script.Scripts at the same time",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.bulkPatchAction_scripts": "Update (using json-patch) multiple otoroshi.script.Scripts at the same time",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.bulkUpdateAction_scripts": "Update multiple otoroshi.script.Scripts at the same time",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.compileScript_scripts": "Trigger script compilation of the server",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.createAction_scripts": "Creates a otoroshi.script.Script",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.deleteEntityAction_scripts": "Deletes a specific otoroshi.script.Script using its id",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.findAllEntitiesAction_scripts": "Find all possible otoroshi.script.Scripts entities",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.findAllScriptsList_scripts": "Search plugins based on type of plugin",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.findEntityByIdAction_scripts": "Find a specific otoroshi.script.Script using its id",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.patchEntityAction_scripts": "Updates (using json-patch) a specific otoroshi.script.Script using its id",
    "operations.otoroshi.controllers.adminapi.ScriptApiController.updateEntityAction_scripts": "Updates a specific otoroshi.script.Script using its id",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.bulkCreateAction_groups": "Create multiple ServiceGroups at the same time",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.bulkDeleteAction_groups": "Delete multiple ServiceGroups at the same time",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.bulkPatchAction_groups": "Update (using json-patch) multiple ServiceGroups at the same time",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.bulkUpdateAction_groups": "Update multiple ServiceGroups at the same time",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.createAction_groups": "Creates a ServiceGroup",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.deleteEntityAction_groups": "Deletes a specific ServiceGroup using its id",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.findAllEntitiesAction_groups": "Find all possible ServiceGroups entities",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.findEntityByIdAction_groups": "Find a specific ServiceGroup using its id",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.patchEntityAction_groups": "Updates (using json-patch) a specific ServiceGroup using its id",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.serviceGroupServices_groups": "Get the services from a service group",
    "operations.otoroshi.controllers.adminapi.ServiceGroupController.updateEntityAction_groups": "Updates a specific ServiceGroup using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.allLines_lines": "Get all lines of work (prod, preprod, etc)",
    "operations.otoroshi.controllers.adminapi.ServicesController.bulkCreateAction_services": "Create multiple ServiceDescriptors at the same time",
    "operations.otoroshi.controllers.adminapi.ServicesController.bulkDeleteAction_services": "Delete multiple ServiceDescriptors at the same time",
    "operations.otoroshi.controllers.adminapi.ServicesController.bulkPatchAction_services": "Update (using json-patch) multiple ServiceDescriptors at the same time",
    "operations.otoroshi.controllers.adminapi.ServicesController.bulkUpdateAction_services": "Update multiple ServiceDescriptors at the same time",
    "operations.otoroshi.controllers.adminapi.ServicesController.createAction_services": "Creates a ServiceDescriptor",
    "operations.otoroshi.controllers.adminapi.ServicesController.createServiceTemplate_services": "Creates an error template for the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.deleteEntityAction_services": "Deletes a specific ServiceDescriptor using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.deleteServiceTemplate_services": "Deletes the error template for the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.findAllEntitiesAction_services": "Find all possible ServiceDescriptors entities",
    "operations.otoroshi.controllers.adminapi.ServicesController.findEntityByIdAction_services": "Find a specific ServiceDescriptor using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.patchEntityAction_services": "Updates (using json-patch) a specific ServiceDescriptor using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceAddTarget_services": "Adds a target to the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceDeleteTarget_services": "Deletes a target to the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceHealth_services": "Get healthcheck status for the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceTargets_services": "Get targets of the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.serviceTemplate_services": "Get the error template for the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.servicesForALine_lines": "Get all service for a line of work",
    "operations.otoroshi.controllers.adminapi.ServicesController.updateEntityAction_services": "Updates a specific ServiceDescriptor using its id",
    "operations.otoroshi.controllers.adminapi.ServicesController.updateServiceTargets_services": "Update the target of the current service",
    "operations.otoroshi.controllers.adminapi.ServicesController.updateServiceTemplate_services": "Update the error template of the current service",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyConfig_snowmonkey": "Get the snowmonkey config",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyOutages_snowmonkey": "Get the current snowmonkey outages",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.patchSnowMonkey_snowmonkey": "Updates (using json-patch) the snowmonkey configuration",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.resetSnowMonkey_snowmonkey": "Reset the snowmonkey outages",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.startSnowMonkey_snowmonkey": "Start the snowmonkey of all otoroshi instances",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.stopSnowMonkey_snowmonkey": "Stop the snowmonkey of all otoroshi instances",
    "operations.otoroshi.controllers.adminapi.SnowMonkeyController.updateSnowMonkey_snowmonkey": "Updates the snowmonkey configuration",
    "operations.otoroshi.controllers.adminapi.StatsController.globalLiveStats_live": "Get global live statis",
    "operations.otoroshi.controllers.adminapi.StatsController.hostMetrics_live": "Get local host metrics",
    "operations.otoroshi.controllers.adminapi.StatsController.serviceLiveStats_live": "Get live stats for a specific service",
    "operations.otoroshi.controllers.adminapi.StatsController.serviceLiveStats_services": "Get live stats for a specific service",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.bulkCreateAction_tcp": "Create multiple TcpServices at the same time",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.bulkDeleteAction_tcp": "Delete multiple TcpServices at the same time",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.bulkPatchAction_tcp": "Update (using json-patch) multiple TcpServices at the same time",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.bulkUpdateAction_tcp": "Update multiple TcpServices at the same time",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.createAction_tcp": "Creates a TcpService",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.deleteEntityAction_tcp": "Deletes a specific TcpService using its id",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.findAllEntitiesAction_tcp": "Find all possible TcpServices entities",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.findEntityByIdAction_tcp": "Find a specific TcpService using its id",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.patchEntityAction_tcp": "Updates (using json-patch) a specific TcpService using its id",
    "operations.otoroshi.controllers.adminapi.TcpServiceApiController.updateEntityAction_tcp": "Updates a specific TcpService using its id",
    "operations.otoroshi.controllers.adminapi.TeamsController.bulkCreateAction_teams": "Create multiple Teams at the same time",
    "operations.otoroshi.controllers.adminapi.TeamsController.bulkDeleteAction_teams": "Delete multiple Teams at the same time",
    "operations.otoroshi.controllers.adminapi.TeamsController.bulkPatchAction_teams": "Update (using json-patch) multiple Teams at the same time",
    "operations.otoroshi.controllers.adminapi.TeamsController.bulkUpdateAction_teams": "Update multiple Teams at the same time",
    "operations.otoroshi.controllers.adminapi.TeamsController.createAction_teams": "Creates a Team",
    "operations.otoroshi.controllers.adminapi.TeamsController.deleteEntityAction_teams": "Deletes a specific Team using its id",
    "operations.otoroshi.controllers.adminapi.TeamsController.findAllEntitiesAction_teams": "Find all possible Teams entities",
    "operations.otoroshi.controllers.adminapi.TeamsController.findEntityByIdAction_teams": "Find a specific Team using its id",
    "operations.otoroshi.controllers.adminapi.TeamsController.patchEntityAction_teams": "Updates (using json-patch) a specific Team using its id",
    "operations.otoroshi.controllers.adminapi.TeamsController.updateEntityAction_teams": "Updates a specific Team using its id",
    "operations.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_admins": "Creates a new Template from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_tcp": "Creates a new Template from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_templates": "Creates a new Template from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_apikeys": "Creates a new ApiKey from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_templates": "Creates a new ApiKey from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateAuthModule_auth-modules": "Creates a new AuthModule from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateCertificate_certificates": "Creates a new Certificate from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateDataExporterConfig_data-exporters": "Creates a new DataExporterConfig from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateGlobalConfig_globalconfig": "Creates a new GlobalConfig from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateJwtVerifier_jwt-verifiers": "Creates a new JwtVerifier from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateResources_templates": "Creates a new Resources from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateScript_scripts": "Creates a new Script from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_groups": "Creates a new ServiceGroup from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_templates": "Creates a new ServiceGroup from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateService_services": "Creates a new Service from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateService_templates": "Creates a new Service from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateSimpleAdmin_admins": "Creates a new SimpleAdmin from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_tcp": "Creates a new TcpService from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_templates": "Creates a new TcpService from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateTeam_teams": "Creates a new Team from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateTenant_organizations": "Creates a new Tenant from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.initiateWebauthnAdmin_admins": "Creates a new WebauthnAdmin from a template",
    "operations.otoroshi.controllers.adminapi.TemplatesController.templateSpec_analytics": "???",
    "operations.otoroshi.controllers.adminapi.TenantsController.bulkCreateAction_organizations": "Create multiple Tenants at the same time",
    "operations.otoroshi.controllers.adminapi.TenantsController.bulkDeleteAction_organizations": "Delete multiple Tenants at the same time",
    "operations.otoroshi.controllers.adminapi.TenantsController.bulkPatchAction_organizations": "Update (using json-patch) multiple Tenants at the same time",
    "operations.otoroshi.controllers.adminapi.TenantsController.bulkUpdateAction_organizations": "Update multiple Tenants at the same time",
    "operations.otoroshi.controllers.adminapi.TenantsController.createAction_organizations": "Creates a Tenant",
    "operations.otoroshi.controllers.adminapi.TenantsController.deleteEntityAction_organizations": "Deletes a specific Tenant using its id",
    "operations.otoroshi.controllers.adminapi.TenantsController.findAllEntitiesAction_organizations": "Find all possible Tenants entities",
    "operations.otoroshi.controllers.adminapi.TenantsController.findEntityByIdAction_organizations": "Find a specific Tenant using its id",
    "operations.otoroshi.controllers.adminapi.TenantsController.patchEntityAction_organizations": "Updates (using json-patch) a specific Tenant using its id",
    "operations.otoroshi.controllers.adminapi.TenantsController.updateEntityAction_organizations": "Updates a specific Tenant using its id",
    "operations.otoroshi.controllers.adminapi.UsersController.deleteAdmin_admins": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.discardAllPrivateAppsSessions_apps-sessions": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.discardAllSessions_admin-sessions": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.discardPrivateAppsSession_apps-sessions": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.discardSession_admin-sessions": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.privateAppsSessions_apps-sessions": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.registerSimpleAdmin_admins": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.registerWebAuthnAdmin_admins": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.sessions_admin-sessions": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.simpleAdmins_admins": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.updateAdmin_admins": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.updateWebAuthnAdmin_admins": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.webAuthnAdmins_admins": "???",
    "operations.otoroshi.controllers.adminapi.UsersController.webAuthnDeleteAdmin_admins": "???",
    "operations.otoroshi.next.controllers.NgPluginsController.categories_experimental": "???",
    "operations.otoroshi.next.controllers.NgPluginsController.form_experimental": "???",
    "operations.otoroshi.next.controllers.NgPluginsController.forms_experimental": "???",
    "operations.otoroshi.next.controllers.NgPluginsController.plugins_experimental": "???",
    "operations.otoroshi.next.controllers.NgPluginsController.steps_experimental": "???",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.bulkCreateAction_experimental": "Create multiple StoredNgBackends at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.bulkDeleteAction_experimental": "Delete multiple StoredNgBackends at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.bulkPatchAction_experimental": "Update (using json-patch) multiple StoredNgBackends at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.bulkUpdateAction_experimental": "Update multiple StoredNgBackends at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.createAction_experimental": "Creates a StoredNgBackend",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.deleteEntityAction_experimental": "Deletes a specific StoredNgBackend using its id",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.findAllEntitiesAction_experimental": "Find all possible StoredNgBackends entities",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.findEntityByIdAction_experimental": "Find a specific StoredNgBackend using its id",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.form_experimental": "The form description of the current controllers entity",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.initiateStoredNgBackend_experimental": "Generates a new backend template",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.patchEntityAction_experimental": "Updates (using json-patch) a specific StoredNgBackend using its id",
    "operations.otoroshi.next.controllers.adminapi.NgBackendsController.updateEntityAction_experimental": "Updates a specific StoredNgBackend using its id",
    "operations.otoroshi.next.controllers.adminapi.NgFrontendsController.form_experimental": "The form description of the current controllers entity",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.bulkCreateAction_experimental": "Create multiple NgRoutes at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.bulkDeleteAction_experimental": "Delete multiple NgRoutes at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.bulkPatchAction_experimental": "Update (using json-patch) multiple NgRoutes at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.bulkUpdateAction_experimental": "Update multiple NgRoutes at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.createAction_experimental": "Creates a NgRoute",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.deleteEntityAction_experimental": "Deletes a specific NgRoute using its id",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.domainsAndCertificates_experimental": "???",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.findAllEntitiesAction_experimental": "Find all possible NgRoutes entities",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.findEntityByIdAction_experimental": "Find a specific NgRoute using its id",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.form_experimental": "The form description of the current controllers entity",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.initiateRoute_experimental": "Creates a new template for a route",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.patchEntityAction_experimental": "Updates (using json-patch) a specific NgRoute using its id",
    "operations.otoroshi.next.controllers.adminapi.NgRoutesController.updateEntityAction_experimental": "Updates a specific NgRoute using its id",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.bulkCreateAction_experimental": "Create multiple NgServices at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.bulkDeleteAction_experimental": "Delete multiple NgServices at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.bulkPatchAction_experimental": "Update (using json-patch) multiple NgServices at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.bulkUpdateAction_experimental": "Update multiple NgServices at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.createAction_experimental": "Creates a NgService",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.deleteEntityAction_experimental": "Deletes a specific NgService using its id",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.findAllEntitiesAction_experimental": "Find all possible NgServices entities",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.findEntityByIdAction_experimental": "Find a specific NgService using its id",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.form_experimental": "The form description of the current controllers entity",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.fromOpenapi_experimental": "Generates a service based on an openapi spec.",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.initiateService_experimental": "Creates a new template for a service",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.patchEntityAction_experimental": "Updates (using json-patch) a specific NgService using its id",
    "operations.otoroshi.next.controllers.adminapi.NgServicesController.updateEntityAction_experimental": "Updates a specific NgService using its id",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.bulkCreateAction_experimental": "Create multiple StoredNgTargets at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.bulkDeleteAction_experimental": "Delete multiple StoredNgTargets at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.bulkPatchAction_experimental": "Update (using json-patch) multiple StoredNgTargets at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.bulkUpdateAction_experimental": "Update multiple StoredNgTargets at the same time",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.createAction_experimental": "Creates a StoredNgTarget",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.deleteEntityAction_experimental": "Deletes a specific StoredNgTarget using its id",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.findAllEntitiesAction_experimental": "Find all possible StoredNgTargets entities",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.findEntityByIdAction_experimental": "Find a specific StoredNgTarget using its id",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.form_experimental": "The form description of the current controllers entity",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.initiateStoredNgTarget_experimental": "Creates a new template for a target",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.patchEntityAction_experimental": "Updates (using json-patch) a specific StoredNgTarget using its id",
    "operations.otoroshi.next.controllers.adminapi.NgTargetsController.updateEntityAction_experimental": "Updates a specific StoredNgTarget using its id",
    "operations_input_entity.otoroshi.controllers.PrivateAppsController.registerSession_privateapps": "Empty",
    "operations_input_entity.otoroshi.controllers.PrivateAppsController.sendSelfUpdateLink_privateapps": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.AnalyticsController.servicesStatus_analytics": "???",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkCreateAction_apikeys": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkPatchAction_apikeys": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkUpdateAction_apikeys": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.createAction_apikeys": "otoroshi.models.ApiKey",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.patchEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_input_entity.otoroshi.controllers.adminapi.ApiKeysController.updateEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkCreateAction_auth-modules": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkPatchAction_auth-modules": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkUpdateAction_auth-modules": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.createAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.finishRegistration_auth-modules": "WebAuthnRegistrationFinishBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.patchEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.startRegistration_auth-modules": "WebAuthnRegistrationStartBody",
    "operations_input_entity.otoroshi.controllers.adminapi.AuthModulesController.updateEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.bulkCreateAction_certificates": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.bulkPatchAction_certificates": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.bulkUpdateAction_certificates": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.createAction_certificates": "otoroshi.ssl.Cert",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.patchEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.renewCert_certificates": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.CertificatesController.updateEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_input_entity.otoroshi.controllers.adminapi.ClusterController.createLoginToken_cluster": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.ClusterController.createSession_cluster": "otoroshi.models.PrivateAppsUser",
    "operations_input_entity.otoroshi.controllers.adminapi.ClusterController.setUserToken_cluster": "UserTokenBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ClusterController.updateQuotas_cluster": "UpdateQuotasBody",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkCreateAction_data-exporters": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkPatchAction_data-exporters": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkUpdateAction_data-exporters": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.createAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.patchEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.DataExporterConfigController.updateEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.GlobalConfigController.patchGlobalConfig_globalconfig": "PatchBody",
    "operations_input_entity.otoroshi.controllers.adminapi.GlobalConfigController.updateGlobalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.ImportExportController.fullImportFromFile_import-export": "GlobalConfigImportBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ImportExportController.fullImport_import-export": "GlobalConfigImportBody",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkCreateAction_jwt-verifiers": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkPatchAction_jwt-verifiers": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkUpdateAction_jwt-verifiers": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.createAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.patchEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_input_entity.otoroshi.controllers.adminapi.JwtVerifierController.updateEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.certificateData_pki": "PemCertificateBody",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.certificateIsValid_pki": "otoroshi.ssl.Cert",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genCert_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genCsr_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genKeyPair_pki": "otoroshi.ssl.pki.models.GenKeyPairQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genLetsEncryptCert_pki": "LetsEncryptCertBody",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genSelfSignedCA_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genSelfSignedCert_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.genSubCA_pki": "otoroshi.ssl.pki.models.GenCsrQuery",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.importBundle_certificates": "text plain PEM bundle",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.importCertFromP12_pki": "ByteStreamBody",
    "operations_input_entity.otoroshi.controllers.adminapi.PkiController.signCert_pki": "PemCsrBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkCreateAction_scripts": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkPatchAction_scripts": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkUpdateAction_scripts": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.compileScript_scripts": "CodeBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.createAction_scripts": "otoroshi.script.Script",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.patchEntityAction_scripts": "otoroshi.script.Script",
    "operations_input_entity.otoroshi.controllers.adminapi.ScriptApiController.updateEntityAction_scripts": "otoroshi.script.Script",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkCreateAction_groups": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkPatchAction_groups": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkUpdateAction_groups": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.createAction_groups": "otoroshi.models.ServiceGroup",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.patchEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_input_entity.otoroshi.controllers.adminapi.ServiceGroupController.updateEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.bulkCreateAction_services": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.bulkPatchAction_services": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.bulkUpdateAction_services": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.createAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.createServiceTemplate_services": "otoroshi.models.ErrorTemplate",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.patchEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.serviceAddTarget_services": "otoroshi.models.Target",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.updateEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.updateServiceTargets_services": "otoroshi.models.Target",
    "operations_input_entity.otoroshi.controllers.adminapi.ServicesController.updateServiceTemplate_services": "otoroshi.models.ErrorTemplate",
    "operations_input_entity.otoroshi.controllers.adminapi.SnowMonkeyController.patchSnowMonkey_snowmonkey": "PatchBody",
    "operations_input_entity.otoroshi.controllers.adminapi.SnowMonkeyController.startSnowMonkey_snowmonkey": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.SnowMonkeyController.stopSnowMonkey_snowmonkey": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.SnowMonkeyController.updateSnowMonkey_snowmonkey": "otoroshi.models.SnowMonkeyConfig",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkCreateAction_tcp": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkPatchAction_tcp": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkUpdateAction_tcp": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.createAction_tcp": "otoroshi.tcp.TcpService",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.patchEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_input_entity.otoroshi.controllers.adminapi.TcpServiceApiController.updateEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.bulkCreateAction_teams": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.bulkPatchAction_teams": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.bulkUpdateAction_teams": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.createAction_teams": "otoroshi.models.Team",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.patchEntityAction_teams": "otoroshi.models.Team",
    "operations_input_entity.otoroshi.controllers.adminapi.TeamsController.updateEntityAction_teams": "otoroshi.models.Team",
    "operations_input_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_admins": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_tcp": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_templates": "Empty",
    "operations_input_entity.otoroshi.controllers.adminapi.TemplatesController.initiateResources_templates": "Initial resources template",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.bulkCreateAction_organizations": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.bulkPatchAction_organizations": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.bulkUpdateAction_organizations": "BulkBody",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.createAction_organizations": "otoroshi.models.Tenant",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.patchEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_input_entity.otoroshi.controllers.adminapi.TenantsController.updateEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_input_entity.otoroshi.controllers.adminapi.UsersController.registerSimpleAdmin_admins": "???",
    "operations_input_entity.otoroshi.controllers.adminapi.UsersController.registerWebAuthnAdmin_admins": "???",
    "operations_input_entity.otoroshi.controllers.adminapi.UsersController.updateAdmin_admins": "???",
    "operations_input_entity.otoroshi.controllers.adminapi.UsersController.updateWebAuthnAdmin_admins": "???",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgBackendsController.bulkCreateAction_experimental": "BulkBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgBackendsController.bulkPatchAction_experimental": "BulkPatchBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgBackendsController.bulkUpdateAction_experimental": "BulkBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgBackendsController.createAction_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgBackendsController.patchEntityAction_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgBackendsController.updateEntityAction_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgRoutesController.bulkCreateAction_experimental": "BulkBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgRoutesController.bulkPatchAction_experimental": "BulkPatchBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgRoutesController.bulkUpdateAction_experimental": "BulkBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgRoutesController.createAction_experimental": "otoroshi.next.models.NgRoute",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgRoutesController.patchEntityAction_experimental": "otoroshi.next.models.NgRoute",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgRoutesController.updateEntityAction_experimental": "otoroshi.next.models.NgRoute",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgServicesController.bulkCreateAction_experimental": "BulkBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgServicesController.bulkPatchAction_experimental": "BulkPatchBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgServicesController.bulkUpdateAction_experimental": "BulkBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgServicesController.createAction_experimental": "otoroshi.next.models.NgService",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgServicesController.fromOpenapi_experimental": "ServiceFromOpenApiBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgServicesController.patchEntityAction_experimental": "otoroshi.next.models.NgService",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgServicesController.updateEntityAction_experimental": "otoroshi.next.models.NgService",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgTargetsController.bulkCreateAction_experimental": "BulkBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgTargetsController.bulkPatchAction_experimental": "BulkPatchBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgTargetsController.bulkUpdateAction_experimental": "BulkBody",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgTargetsController.createAction_experimental": "otoroshi.next.models.StoredNgTarget",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgTargetsController.patchEntityAction_experimental": "otoroshi.next.models.StoredNgTarget",
    "operations_input_entity.otoroshi.next.controllers.adminapi.NgTargetsController.updateEntityAction_experimental": "otoroshi.next.models.StoredNgTarget",
    "operations_response_entity.otoroshi.controllers.PrivateAppsController.registerSession_privateapps": "Empty",
    "operations_response_entity.otoroshi.controllers.PrivateAppsController.sendSelfUpdateLink_privateapps": "Empty",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.filterableEvents_analytics": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.filterableStats_analytics": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.globalStats_analytics": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.globalStatus_analytics": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.groupStatus_groups": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.serviceEvents_services": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.serviceResponseTime_services": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.serviceStats_services": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.serviceStatus_services": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AnalyticsController.servicesStatus_analytics": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.apiKeyQuotas_apikeys": "otoroshi.models.RemainingQuotas",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkCreateAction_apikeys": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkDeleteAction_apikeys": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkPatchAction_apikeys": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.bulkUpdateAction_apikeys": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.createAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.deleteEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.findAllEntitiesAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.findEntityByIdAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.patchEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.resetApiKeyQuotas_apikeys": "otoroshi.models.RemainingQuotas",
    "operations_response_entity.otoroshi.controllers.adminapi.ApiKeysController.updateEntityAction_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkCreateAction_auth-modules": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkDeleteAction_auth-modules": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkPatchAction_auth-modules": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.bulkUpdateAction_auth-modules": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.createAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.deleteEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.findAllEntitiesAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.findEntityByIdAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.finishRegistration_auth-modules": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.patchEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.startRegistration_auth-modules": "Unknown",
    "operations_response_entity.otoroshi.controllers.adminapi.AuthModulesController.updateEntityAction_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.CanaryController.resetServiceCanaryMembers_services": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.CanaryController.serviceCanaryMembers_services": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.bulkCreateAction_certificates": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.bulkDeleteAction_certificates": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.bulkPatchAction_certificates": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.bulkUpdateAction_certificates": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.createAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.deleteEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.findAllEntitiesAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.findEntityByIdAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.patchEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.renewCert_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.CertificatesController.updateEntityAction_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.clearClusterMembers_cluster": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.createLoginToken_cluster": "TokenResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.createSession_cluster": "otoroshi.models.PrivateAppsUser",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.getClusterMembers_cluster": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.getUserToken_cluster": "TokenResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.internalState_cluster": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.isLoginTokenValid_cluster": "TokenResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.isSessionValid_cluster": "otoroshi.models.PrivateAppsUser",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.liveCluster_cluster": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.setUserToken_cluster": "TokenResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ClusterController.updateQuotas_cluster": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkCreateAction_data-exporters": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkDeleteAction_data-exporters": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkPatchAction_data-exporters": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.bulkUpdateAction_data-exporters": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.createAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.deleteEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.findAllEntitiesAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.findEntityByIdAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.patchEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.DataExporterConfigController.updateEntityAction_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.EventsController.alertEvents_events": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.EventsController.auditEvents_events": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.GlobalConfigController.globalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.GlobalConfigController.patchGlobalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.GlobalConfigController.updateGlobalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.ImportExportController.fullExport_import-export": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ImportExportController.fullImportFromFile_import-export": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.ImportExportController.fullImport_import-export": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkCreateAction_jwt-verifiers": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkDeleteAction_jwt-verifiers": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkPatchAction_jwt-verifiers": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.bulkUpdateAction_jwt-verifiers": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.createAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.deleteEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.findAllEntitiesAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.findEntityByIdAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.patchEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.JwtVerifierController.updateEntityAction_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.certificateData_pki": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.certificateIsValid_pki": "CertValidResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genCert_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genCsr_pki": "otoroshi.ssl.pki.models.GenCsrResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genKeyPair_pki": "otoroshi.ssl.pki.models.GenKeyPairResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genLetsEncryptCert_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genSelfSignedCA_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genSelfSignedCert_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.genSubCA_pki": "otoroshi.ssl.pki.models.GenCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.importBundle_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.importCertFromP12_pki": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.PkiController.signCert_pki": "otoroshi.ssl.pki.models.SignCertResponse",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkCreateAction_scripts": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkDeleteAction_scripts": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkPatchAction_scripts": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.bulkUpdateAction_scripts": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.compileScript_scripts": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.createAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.deleteEntityAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.findAllEntitiesAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.findAllScriptsList_scripts": "ScriptsList",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.findEntityByIdAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.patchEntityAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ScriptApiController.updateEntityAction_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkCreateAction_groups": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkDeleteAction_groups": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkPatchAction_groups": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.bulkUpdateAction_groups": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.createAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.deleteEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.findAllEntitiesAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.findEntityByIdAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.patchEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.serviceGroupServices_groups": "ServiceDescriptorList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServiceGroupController.updateEntityAction_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.allLines_lines": "StringList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.bulkCreateAction_services": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.bulkDeleteAction_services": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.bulkPatchAction_services": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.bulkUpdateAction_services": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.createAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.createServiceTemplate_services": "otoroshi.models.ErrorTemplate",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.deleteEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.deleteServiceTemplate_services": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.findAllEntitiesAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.findEntityByIdAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.patchEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceAddTarget_services": "otoroshi.models.Target",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceDeleteTarget_services": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceHealth_services": "HealthCheckEventList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceTargets_services": "TargetsList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.serviceTemplate_services": "ErrorTemplateList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.servicesForALine_lines": "ServiceDescriptorList",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.updateEntityAction_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.updateServiceTargets_services": "otoroshi.models.Target",
    "operations_response_entity.otoroshi.controllers.adminapi.ServicesController.updateServiceTemplate_services": "otoroshi.models.ErrorTemplate",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyConfig_snowmonkey": "otoroshi.models.SnowMonkeyConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyOutages_snowmonkey": "OutagesList",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.patchSnowMonkey_snowmonkey": "otoroshi.models.SnowMonkeyConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.resetSnowMonkey_snowmonkey": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.startSnowMonkey_snowmonkey": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.stopSnowMonkey_snowmonkey": "Done",
    "operations_response_entity.otoroshi.controllers.adminapi.SnowMonkeyController.updateSnowMonkey_snowmonkey": "otoroshi.models.SnowMonkeyConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.StatsController.globalLiveStats_live": "LiveStats",
    "operations_response_entity.otoroshi.controllers.adminapi.StatsController.hostMetrics_live": "HostMetrics",
    "operations_response_entity.otoroshi.controllers.adminapi.StatsController.serviceLiveStats_live": "LiveStats",
    "operations_response_entity.otoroshi.controllers.adminapi.StatsController.serviceLiveStats_services": "LiveStats",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkCreateAction_tcp": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkDeleteAction_tcp": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkPatchAction_tcp": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.bulkUpdateAction_tcp": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.createAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.deleteEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.findAllEntitiesAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.findEntityByIdAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.patchEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TcpServiceApiController.updateEntityAction_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.bulkCreateAction_teams": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.bulkDeleteAction_teams": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.bulkPatchAction_teams": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.bulkUpdateAction_teams": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.createAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.deleteEntityAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.findAllEntitiesAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.findEntityByIdAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.patchEntityAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TeamsController.updateEntityAction_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_admins": "otoroshi.models.OtoroshiAdmin",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_templates": "Any",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_apikeys": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_templates": "otoroshi.models.ApiKey",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateAuthModule_auth-modules": "otoroshi.auth.AuthModuleConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateCertificate_certificates": "otoroshi.ssl.Cert",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateDataExporterConfig_data-exporters": "otoroshi.models.DataExporterConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateGlobalConfig_globalconfig": "otoroshi.models.GlobalConfig",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateJwtVerifier_jwt-verifiers": "otoroshi.models.GlobalJwtVerifier",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateResources_templates": "Initial resources template",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateScript_scripts": "otoroshi.script.Script",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_groups": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_templates": "otoroshi.models.ServiceGroup",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateService_services": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateService_templates": "otoroshi.models.ServiceDescriptor",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateSimpleAdmin_admins": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_tcp": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_templates": "otoroshi.tcp.TcpService",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateTeam_teams": "otoroshi.models.Team",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateTenant_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.initiateWebauthnAdmin_admins": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.TemplatesController.templateSpec_analytics": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.bulkCreateAction_organizations": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.bulkDeleteAction_organizations": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.bulkPatchAction_organizations": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.bulkUpdateAction_organizations": "BulkResponseBody",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.createAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.deleteEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.findAllEntitiesAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.findEntityByIdAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.patchEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.TenantsController.updateEntityAction_organizations": "otoroshi.models.Tenant",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.deleteAdmin_admins": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.discardAllPrivateAppsSessions_apps-sessions": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.discardAllSessions_admin-sessions": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.discardPrivateAppsSession_apps-sessions": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.discardSession_admin-sessions": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.privateAppsSessions_apps-sessions": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.registerSimpleAdmin_admins": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.registerWebAuthnAdmin_admins": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.sessions_admin-sessions": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.simpleAdmins_admins": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.updateAdmin_admins": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.updateWebAuthnAdmin_admins": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.webAuthnAdmins_admins": "???",
    "operations_response_entity.otoroshi.controllers.adminapi.UsersController.webAuthnDeleteAdmin_admins": "???",
    "operations_response_entity.otoroshi.next.controllers.NgPluginsController.categories_experimental": "???",
    "operations_response_entity.otoroshi.next.controllers.NgPluginsController.form_experimental": "???",
    "operations_response_entity.otoroshi.next.controllers.NgPluginsController.forms_experimental": "???",
    "operations_response_entity.otoroshi.next.controllers.NgPluginsController.plugins_experimental": "???",
    "operations_response_entity.otoroshi.next.controllers.NgPluginsController.steps_experimental": "???",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.bulkCreateAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.bulkDeleteAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.bulkPatchAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.bulkUpdateAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.createAction_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.deleteEntityAction_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.findAllEntitiesAction_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.findEntityByIdAction_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.form_experimental": "The form description of the current controllers entity",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.initiateStoredNgBackend_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.patchEntityAction_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgBackendsController.updateEntityAction_experimental": "otoroshi.next.models.StoredNgBackend",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgFrontendsController.form_experimental": "The form description of the current controllers entity",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.bulkCreateAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.bulkDeleteAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.bulkPatchAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.bulkUpdateAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.createAction_experimental": "otoroshi.next.models.NgRoute",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.deleteEntityAction_experimental": "otoroshi.next.models.NgRoute",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.domainsAndCertificates_experimental": "???",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.findAllEntitiesAction_experimental": "otoroshi.next.models.NgRoute",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.findEntityByIdAction_experimental": "otoroshi.next.models.NgRoute",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.form_experimental": "The form description of the current controllers entity",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.initiateRoute_experimental": "otoroshi.next.models.NgRoute",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.patchEntityAction_experimental": "otoroshi.next.models.NgRoute",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgRoutesController.updateEntityAction_experimental": "otoroshi.next.models.NgRoute",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.bulkCreateAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.bulkDeleteAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.bulkPatchAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.bulkUpdateAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.createAction_experimental": "otoroshi.next.models.NgService",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.deleteEntityAction_experimental": "otoroshi.next.models.NgService",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.findAllEntitiesAction_experimental": "otoroshi.next.models.NgService",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.findEntityByIdAction_experimental": "otoroshi.next.models.NgService",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.form_experimental": "The form description of the current controllers entity",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.fromOpenapi_experimental": "otoroshi.next.models.NgService",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.initiateService_experimental": "otoroshi.next.models.NgService",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.patchEntityAction_experimental": "otoroshi.next.models.NgService",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgServicesController.updateEntityAction_experimental": "otoroshi.next.models.NgService",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.bulkCreateAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.bulkDeleteAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.bulkPatchAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.bulkUpdateAction_experimental": "BulkResponseBody",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.createAction_experimental": "otoroshi.next.models.StoredNgTarget",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.deleteEntityAction_experimental": "otoroshi.next.models.StoredNgTarget",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.findAllEntitiesAction_experimental": "otoroshi.next.models.StoredNgTarget",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.findEntityByIdAction_experimental": "otoroshi.next.models.StoredNgTarget",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.form_experimental": "The form description of the current controllers entity",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.initiateStoredNgTarget_experimental": "otoroshi.next.models.StoredNgTarget",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.patchEntityAction_experimental": "otoroshi.next.models.StoredNgTarget",
    "operations_response_entity.otoroshi.next.controllers.adminapi.NgTargetsController.updateEntityAction_experimental": "otoroshi.next.models.StoredNgTarget",
    "otoroshi.auth.BasicAuthModuleConfig.basicAuth": "Use standard basic auth or web login form",
    "otoroshi.auth.BasicAuthModuleConfig.desc": "description of the module",
    "otoroshi.auth.BasicAuthModuleConfig.id": "id of the module",
    "otoroshi.auth.BasicAuthModuleConfig.location": "location of the module",
    "otoroshi.auth.BasicAuthModuleConfig.metadata": "metadata of the module",
    "otoroshi.auth.BasicAuthModuleConfig.name": "name of the module",
    "otoroshi.auth.BasicAuthModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.BasicAuthModuleConfig.sessionMaxAge": "max age for the session cookie in seconds",
    "otoroshi.auth.BasicAuthModuleConfig.tags": "Entity tags",
    "otoroshi.auth.BasicAuthModuleConfig.userValidators": "Validators that will check if the current user is authorized after successful login",
    "otoroshi.auth.BasicAuthModuleConfig.users": "Users attached to the module",
    "otoroshi.auth.BasicAuthModuleConfig.webauthn": "Use webauthn for login",
    "otoroshi.auth.BasicAuthUser.email": "User email",
    "otoroshi.auth.BasicAuthUser.metadata": "User metadata",
    "otoroshi.auth.BasicAuthUser.name": "User name",
    "otoroshi.auth.BasicAuthUser.password": "User password (bcrypt hashed)",
    "otoroshi.auth.BasicAuthUser.rights": "User rights",
    "otoroshi.auth.BasicAuthUser.tags": "User tags",
    "otoroshi.auth.BasicAuthUser.webauthn": "Webauthn details",
    "otoroshi.auth.Credential.certId": "Id of the certificate used to sign SAML requests send to identity provider",
    "otoroshi.auth.Credential.certificate": "PEM certificate used to sign SAML requests send to identity provider",
    "otoroshi.auth.Credential.privateKey": "Private key of the certificate used to sign SAML requests send to identity provider",
    "otoroshi.auth.Credential.useOtoroshiCertificate": "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
    "otoroshi.auth.GenericOauth2ModuleConfig.accessTokenField": "Field name to get access token",
    "otoroshi.auth.GenericOauth2ModuleConfig.apiKeyMetaField": "Field name to extract apikey metadata",
    "otoroshi.auth.GenericOauth2ModuleConfig.apiKeyTagsField": "Field name to extract apikey tags",
    "otoroshi.auth.GenericOauth2ModuleConfig.authorizeUrl": "OAuth authorize URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.callbackUrl": "Otoroshi callback URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.claims": "The claims of the token",
    "otoroshi.auth.GenericOauth2ModuleConfig.clientId": "OAuth Client id",
    "otoroshi.auth.GenericOauth2ModuleConfig.clientSecret": "OAuth Client secret",
    "otoroshi.auth.GenericOauth2ModuleConfig.dataOverride": "Overiddes user data. Object with email as key",
    "otoroshi.auth.GenericOauth2ModuleConfig.desc": "Description of the config",
    "otoroshi.auth.GenericOauth2ModuleConfig.emailField": "Field name to get email from user profile",
    "otoroshi.auth.GenericOauth2ModuleConfig.extraMetadata": "Add metadata to user. Object with email as key",
    "otoroshi.auth.GenericOauth2ModuleConfig.id": "Unique id of the config",
    "otoroshi.auth.GenericOauth2ModuleConfig.introspectionUrl": "URL to introspect access_token",
    "otoroshi.auth.GenericOauth2ModuleConfig.jwtVerifier": "Algo. settings to verify JWT token",
    "otoroshi.auth.GenericOauth2ModuleConfig.location": "Location of the module",
    "otoroshi.auth.GenericOauth2ModuleConfig.loginUrl": "OAuth login URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.logoutUrl": "OAuth logout URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.metadata": "Metadata of the module",
    "otoroshi.auth.GenericOauth2ModuleConfig.mtlsConfig": "TLS config. for the module (for server accessed endpoints like tokenUrl, introspectionUrl, etc)",
    "otoroshi.auth.GenericOauth2ModuleConfig.name": "Name of the config",
    "otoroshi.auth.GenericOauth2ModuleConfig.nameField": "Field name to get name from user profile",
    "otoroshi.auth.GenericOauth2ModuleConfig.noWildcardRedirectURI": "Manage redirection without query params for exact string comparison (OAuth 2.1)",
    "otoroshi.auth.GenericOauth2ModuleConfig.oidConfig": "URL of the OIDC config. file",
    "otoroshi.auth.GenericOauth2ModuleConfig.otoroshiDataField": "Field name to get otoroshi metadata from. You can specify sub fields using | as separator",
    "otoroshi.auth.GenericOauth2ModuleConfig.otoroshiRightsField": "Field in user profile to find otoroshi UI rights",
    "otoroshi.auth.GenericOauth2ModuleConfig.pkce": "Use PKCE challenge (OAuth 2.1)",
    "otoroshi.auth.GenericOauth2ModuleConfig.proxy": "Web proxy configuration for the module's http client",
    "otoroshi.auth.GenericOauth2ModuleConfig.readProfileFromToken": "The user profile will be read from the JWT token in id_token",
    "otoroshi.auth.GenericOauth2ModuleConfig.refreshTokens": "Refresh token support",
    "otoroshi.auth.GenericOauth2ModuleConfig.rightsOverride": "Overrides user rights. Object with email as key",
    "otoroshi.auth.GenericOauth2ModuleConfig.scope": "The scope of the token",
    "otoroshi.auth.GenericOauth2ModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.GenericOauth2ModuleConfig.sessionMaxAge": "max age for the session cookie in seconds",
    "otoroshi.auth.GenericOauth2ModuleConfig.superAdmins": "This module produces only super admins",
    "otoroshi.auth.GenericOauth2ModuleConfig.tags": "Entity tags",
    "otoroshi.auth.GenericOauth2ModuleConfig.tokenUrl": "OAuth token URL",
    "otoroshi.auth.GenericOauth2ModuleConfig.useCookie": "Use cookies for redirection",
    "otoroshi.auth.GenericOauth2ModuleConfig.useJson": "Use JSON or URL Form Encoded as payload with the OAuth provider",
    "otoroshi.auth.GenericOauth2ModuleConfig.userInfoUrl": "OAuth userinfo to get user profile",
    "otoroshi.auth.GenericOauth2ModuleConfig.userValidators": "Validators that will check if the current user is authorized after successful login",
    "otoroshi.auth.GroupFilter.group": "The LDAP group",
    "otoroshi.auth.GroupFilter.team": "The team associated with this group",
    "otoroshi.auth.GroupFilter.tenant": "The tenant associated with this group",
    "otoroshi.auth.GroupRights.userRights": "The user rights associated with this group",
    "otoroshi.auth.GroupRights.users": "The users associated with this group",
    "otoroshi.auth.LdapAuthModuleConfig.adminPassword": "The admin password",
    "otoroshi.auth.LdapAuthModuleConfig.adminUsername": "The admin username",
    "otoroshi.auth.LdapAuthModuleConfig.allowEmptyPassword": "Allow empty password access",
    "otoroshi.auth.LdapAuthModuleConfig.basicAuth": "Use standard basic auth or web login form",
    "otoroshi.auth.LdapAuthModuleConfig.dataOverride": "Overiddes user data. Object with email as key",
    "otoroshi.auth.LdapAuthModuleConfig.desc": "Description of the config",
    "otoroshi.auth.LdapAuthModuleConfig.emailField": "Field name to get email from user profile",
    "otoroshi.auth.LdapAuthModuleConfig.extraMetadata": "Add metadata to user. Object with email as key",
    "otoroshi.auth.LdapAuthModuleConfig.extractProfile": "Extract profile from LDAP profile",
    "otoroshi.auth.LdapAuthModuleConfig.extractProfileFilter": "Only include LDAP properties matching",
    "otoroshi.auth.LdapAuthModuleConfig.extractProfileFilterNot": "Exclude LDAP properties matching",
    "otoroshi.auth.LdapAuthModuleConfig.groupFilters": "LDAP group filters",
    "otoroshi.auth.LdapAuthModuleConfig.groupRights": "Rights associated with groups",
    "otoroshi.auth.LdapAuthModuleConfig.id": "Unique id of the config",
    "otoroshi.auth.LdapAuthModuleConfig.location": "Location of the module",
    "otoroshi.auth.LdapAuthModuleConfig.metadata": "Metadata of the module",
    "otoroshi.auth.LdapAuthModuleConfig.metadataField": "Field name to get metadata from user profile",
    "otoroshi.auth.LdapAuthModuleConfig.name": "Name of the config",
    "otoroshi.auth.LdapAuthModuleConfig.nameField": "Field name to get name from user profile",
    "otoroshi.auth.LdapAuthModuleConfig.rightsOverride": "Overrides user rights. Object with email as key",
    "otoroshi.auth.LdapAuthModuleConfig.searchBase": "LDAP search base",
    "otoroshi.auth.LdapAuthModuleConfig.searchFilter": "Filter for users",
    "otoroshi.auth.LdapAuthModuleConfig.serverUrls": "LDAP server list of url",
    "otoroshi.auth.LdapAuthModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.LdapAuthModuleConfig.sessionMaxAge": "Max age of the session",
    "otoroshi.auth.LdapAuthModuleConfig.superAdmins": "This module produces only super admins",
    "otoroshi.auth.LdapAuthModuleConfig.tags": "Entity tags",
    "otoroshi.auth.LdapAuthModuleConfig.userBase": "LDAP user base DN",
    "otoroshi.auth.LdapAuthModuleConfig.userValidators": "Validators that will check if the current user is authorized after successful login",
    "otoroshi.auth.Oauth1ModuleConfig.accessTokenURL": "Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow",
    "otoroshi.auth.Oauth1ModuleConfig.authorizeURL": "The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider",
    "otoroshi.auth.Oauth1ModuleConfig.callbackURL": "The location where the identity provider returns a browser after the user finishes authenticating with their IDP",
    "otoroshi.auth.Oauth1ModuleConfig.consumerKey": "Client ID obtained on identity provider",
    "otoroshi.auth.Oauth1ModuleConfig.consumerSecret": "Client secret obtained from identity provider configuration",
    "otoroshi.auth.Oauth1ModuleConfig.desc": "Description of the oauth 1 module",
    "otoroshi.auth.Oauth1ModuleConfig.httpMethod": "Method used to fetch access and request token",
    "otoroshi.auth.Oauth1ModuleConfig.id": "Id of the module",
    "otoroshi.auth.Oauth1ModuleConfig.location": "The location of the OAuth 1 module",
    "otoroshi.auth.Oauth1ModuleConfig.metadata": "The metadata of the OAuth 1 module",
    "otoroshi.auth.Oauth1ModuleConfig.name": "The name of the OAuth 1 module",
    "otoroshi.auth.Oauth1ModuleConfig.profileURL": "URL fetch by otoroshi to get user information from identity provider",
    "otoroshi.auth.Oauth1ModuleConfig.requestTokenURL": "URL fetch to get a request token during the first step of the authorization OAuth 1 flow",
    "otoroshi.auth.Oauth1ModuleConfig.rightsOverride": "Overrides user rights of users connected by OAuth1 module",
    "otoroshi.auth.Oauth1ModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.Oauth1ModuleConfig.sessionMaxAge": "Max age of the session",
    "otoroshi.auth.Oauth1ModuleConfig.tags": "OAuth module tags",
    "otoroshi.auth.Oauth1ModuleConfig.userValidators": "Validators that will check if the current user is authorized after successful login",
    "otoroshi.auth.PKCEConfig.algorithm": "Hashing algorithm used in PKCE challenge",
    "otoroshi.auth.PKCEConfig.enabled": "Is PKCE challenge enabled",
    "otoroshi.auth.SAMLCredentials.encryptedAssertions": "Indicates if assertions have to be encrypt before sending to identity provider",
    "otoroshi.auth.SAMLCredentials.encryptionKey": "Pair of configuration used to encrypt assertions",
    "otoroshi.auth.SAMLCredentials.signedDocuments": "Indicates if SAML documents have to be sign before sending to identity provider",
    "otoroshi.auth.SAMLCredentials.signingKey": "Pair of configuration used to sign documents",
    "otoroshi.auth.SAMLSignature.algorithm": "Algorithm to sign documents or assertions",
    "otoroshi.auth.SAMLSignature.canocalizationMethod": "Canonicalization Method for XML Signatures",
    "otoroshi.auth.SamlAuthModuleConfig.credentials": "Certificates and private keys to sign and encrypt SAML documents/assertions",
    "otoroshi.auth.SamlAuthModuleConfig.desc": "Description of the SAML Auth module",
    "otoroshi.auth.SamlAuthModuleConfig.emailAttributeName": "Field name to find email in user profile returned by identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.id": "Id of the SAML Auth module",
    "otoroshi.auth.SamlAuthModuleConfig.issuer": "Issuer of the SAML requests",
    "otoroshi.auth.SamlAuthModuleConfig.location": "Location of the SAML module",
    "otoroshi.auth.SamlAuthModuleConfig.metadata": "Metadata of the SAML module",
    "otoroshi.auth.SamlAuthModuleConfig.name": "Name of the SAML module",
    "otoroshi.auth.SamlAuthModuleConfig.nameIDFormat": "Format of the name ID",
    "otoroshi.auth.SamlAuthModuleConfig.sessionCookieValues": "Settings for the session cookie",
    "otoroshi.auth.SamlAuthModuleConfig.sessionMaxAge": "Max age of the session",
    "otoroshi.auth.SamlAuthModuleConfig.signature": "Algorithm and canonicalization method to sign SAML documents",
    "otoroshi.auth.SamlAuthModuleConfig.singleLogoutProtocolBinding": "Protocol binding used by identity provider to logout users",
    "otoroshi.auth.SamlAuthModuleConfig.singleLogoutUrl": "URL used by otoroshi to disconnect users from identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.singleSignOnUrl": "URL used by otoroshi to redirect users to identity provider login page",
    "otoroshi.auth.SamlAuthModuleConfig.ssoProtocolBinding": "Protocol binding used to send login request to identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.tags": "SAML module tags",
    "otoroshi.auth.SamlAuthModuleConfig.usedNameIDAsEmail": "Is name ID used as email ?",
    "otoroshi.auth.SamlAuthModuleConfig.userValidators": "Validators that will check if the current user is authorized after successful login",
    "otoroshi.auth.SamlAuthModuleConfig.validateAssertions": "Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.validateSignature": "Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider",
    "otoroshi.auth.SamlAuthModuleConfig.validatingCertificates": "Certificates used to validate SAML response signature",
    "otoroshi.auth.SessionCookieValues.httpOnly": "Is cookie accessible on server side only",
    "otoroshi.auth.SessionCookieValues.secure": "Is cookie for https only",
    "otoroshi.auth.UserValidator.path": "The JSON Path that will be checked",
    "otoroshi.auth.UserValidator.value": "The expected value at the previously defined path",
    "otoroshi.auth.WebAuthnDetails.credentials": "Webauthn credentials",
    "otoroshi.auth.WebAuthnDetails.handle": "Webauthn user handle",
    "otoroshi.env.Env.circuitBeakersHolder": "The current instance of circuit breakers holder",
    "otoroshi.events.HealthCheckEvent.duration": "Duration of the call",
    "otoroshi.events.HealthCheckEvent.error": "Error if any",
    "otoroshi.events.HealthCheckEvent.health": "Health status",
    "otoroshi.events.HealthCheckEvent.logicCheck": "Did the service respond with the logic check",
    "otoroshi.events.HealthCheckEvent.status": "Check status",
    "otoroshi.events.HealthCheckEvent.url": "Checked url",
    "otoroshi.events.KafkaConfig.keyPass": "Optional keypass",
    "otoroshi.events.KafkaConfig.keystore": "Optional keystore",
    "otoroshi.events.KafkaConfig.mtlsConfig": "TLS config to access the cluster",
    "otoroshi.events.KafkaConfig.sendEvents": "Send events to it, or just connect",
    "otoroshi.events.KafkaConfig.servers": "URLs of the kafka servers",
    "otoroshi.events.KafkaConfig.topic": "Optional kafka topic (otoroshi-events by default)",
    "otoroshi.events.KafkaConfig.truststore": "Optional truststore",
    "otoroshi.events.PulsarConfig.mtlsConfig": "TLS config to access the cluster",
    "otoroshi.events.PulsarConfig.namespace": "Pulsar namespace",
    "otoroshi.events.PulsarConfig.tenant": "Pulsar tenant",
    "otoroshi.events.PulsarConfig.tlsTrustCertsFilePath": "Trusted cert path",
    "otoroshi.events.PulsarConfig.topic": "Pulsar topic",
    "otoroshi.events.PulsarConfig.uri": "Pulsar cluster url",
    "otoroshi.events.StatsdConfig.datadog": "Datadog agent",
    "otoroshi.events.StatsdConfig.host": "The host of the StatsD agent",
    "otoroshi.events.StatsdConfig.port": "The port of the StatsD agent",
    "otoroshi.models.ApiDescriptor.exposeApi": "Is this an API",
    "otoroshi.models.ApiDescriptor.openApiDescriptorUrl": "openapi descriptor url",
    "otoroshi.models.ApiKey.allowClientIdOnly": "This apikey can be used juste with the client_id value",
    "otoroshi.models.ApiKey.authorizedEntities": "The group/service ids (prefixed by group_ or service_ on which the key is authorized",
    "otoroshi.models.ApiKey.clientId": "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
    "otoroshi.models.ApiKey.clientName": "The name of the api key, for humans ;-)",
    "otoroshi.models.ApiKey.clientSecret": "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
    "otoroshi.models.ApiKey.constrainedServicesOnly": "This apikey can only be used on services that constrained their apikey routing",
    "otoroshi.models.ApiKey.dailyQuota": "Authorized number of calls per day",
    "otoroshi.models.ApiKey.description": "Description of this apikey",
    "otoroshi.models.ApiKey.enabled": "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
    "otoroshi.models.ApiKey.location": "The location of the apikey",
    "otoroshi.models.ApiKey.metadata": "Bunch of metadata for the key",
    "otoroshi.models.ApiKey.monthlyQuota": "Authorized number of calls per month",
    "otoroshi.models.ApiKey.readOnly": "The apikey only allow access for GET, HEAD and OPTIONS verbs",
    "otoroshi.models.ApiKey.restrictions": "Apikey restrictions settings",
    "otoroshi.models.ApiKey.rotation": "Apikey rotation settings",
    "otoroshi.models.ApiKey.tags": "Apikey tags",
    "otoroshi.models.ApiKey.throttlingQuota": "Authorized number of calls per second, measured on 10 seconds",
    "otoroshi.models.ApiKey.validUntil": "Date until when the apikey is valid",
    "otoroshi.models.ApiKeyConstraints.basicAuth": "Settings to extract basic auth style apikey",
    "otoroshi.models.ApiKeyConstraints.clientIdAuth": "Settings to extract client_id only apikey",
    "otoroshi.models.ApiKeyConstraints.customHeadersAuth": "Settings to extract apikey from custom headers",
    "otoroshi.models.ApiKeyConstraints.jwtAuth": "Settings to extract apikey from jwt token",
    "otoroshi.models.ApiKeyConstraints.routing": "Routing settings for this apikey",
    "otoroshi.models.ApiKeyRotation.enabled": "Rotation enabled",
    "otoroshi.models.ApiKeyRotation.gracePeriod": "period (in hours) during which both secrets works",
    "otoroshi.models.ApiKeyRotation.nextSecret": "Next client_secret value",
    "otoroshi.models.ApiKeyRotation.rotationEvery": "Rotate every n hours",
    "otoroshi.models.ApiKeyRouteMatcher.allMetaIn": "Routing if all meta presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.allMetaKeysIn": "Routing if all meta keys presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.allTagsIn": "Routing if all tags presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.noneMetaIn": "Routing if none meta presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.noneMetaKeysIn": "Routing if none meta keys presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.noneTagIn": "Routing if none tags presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.oneMetaIn": "Routing if one meta presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.oneMetaKeyIn": "Routing if one meta key presents in apikey",
    "otoroshi.models.ApiKeyRouteMatcher.oneTagIn": "outing if one tag presents in apikey",
    "otoroshi.models.AutoCert.allowed": "allowed domains",
    "otoroshi.models.AutoCert.caRef": "Generate cert from the following CA",
    "otoroshi.models.AutoCert.enabled": "Enable auto cert",
    "otoroshi.models.AutoCert.notAllowed": "not allowed domains",
    "otoroshi.models.AutoCert.replyNicely": "Reply TLS error with an auto generated certificate for the domain",
    "otoroshi.models.BackOfficeUser.authConfigId": "Session created from auth module id",
    "otoroshi.models.BackOfficeUser.createdAt": "Creation date for the session",
    "otoroshi.models.BackOfficeUser.email": "User email",
    "otoroshi.models.BackOfficeUser.expiredAt": "Expiration date for the session",
    "otoroshi.models.BackOfficeUser.lastRefresh": "Last refresh of the session (OAuth with refresh tokens)",
    "otoroshi.models.BackOfficeUser.location": "Entity location",
    "otoroshi.models.BackOfficeUser.metadata": "Entity metadata",
    "otoroshi.models.BackOfficeUser.name": "Session user name",
    "otoroshi.models.BackOfficeUser.profile": "Session user profile",
    "otoroshi.models.BackOfficeUser.randomId": "Session user random id",
    "otoroshi.models.BackOfficeUser.rights": "Session user rights",
    "otoroshi.models.BackOfficeUser.simpleLogin": "Session generated from a simple login module (like basic or ldap)",
    "otoroshi.models.BackOfficeUser.tags": "Entity tags",
    "otoroshi.models.BackOfficeUser.token": "Session tokens (only if OAuth/OIDC)",
    "otoroshi.models.BadResponse.body": "The body of the HTTP response",
    "otoroshi.models.BadResponse.headers": "The HTTP headers of the response",
    "otoroshi.models.BadResponse.status": "The HTTP status for the response",
    "otoroshi.models.BadResponsesFaultConfig.ratio": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
    "otoroshi.models.BadResponsesFaultConfig.responses": "The possibles responses",
    "otoroshi.models.BasicAuthConstraints.enabled": "Constraint enabled",
    "otoroshi.models.BasicAuthConstraints.headerName": "Header name to get client_id:client_secret base64 encoded",
    "otoroshi.models.BasicAuthConstraints.queryName": "Query param name to get client_id:client_secret base64 encoded",
    "otoroshi.models.Canary.enabled": "Use canary mode for this service",
    "otoroshi.models.Canary.root": "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
    "otoroshi.models.Canary.targets": "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
    "otoroshi.models.Canary.traffic": "Ratio of traffic that will be sent to canary targets.",
    "otoroshi.models.ChaosConfig.badResponsesFaultConfig": "Settings for bad responses",
    "otoroshi.models.ChaosConfig.enabled": "Whether or not this config is enabled",
    "otoroshi.models.ChaosConfig.largeRequestFaultConfig": "Settings for large requests",
    "otoroshi.models.ChaosConfig.largeResponseFaultConfig": "Settings for large responses",
    "otoroshi.models.ChaosConfig.latencyInjectionFaultConfig": "Settings for latency injection",
    "otoroshi.models.CleverCloudSettings.consumerKey": "Clever-Cloud oauth consumer key",
    "otoroshi.models.CleverCloudSettings.consumerSecret": "Clever-Cloud oauth consumer secret",
    "otoroshi.models.CleverCloudSettings.orgaId": "Clever-Cloud organization id",
    "otoroshi.models.CleverCloudSettings.secret": "Clever-Cloud oauth secret",
    "otoroshi.models.CleverCloudSettings.token": "Clever-Cloud oauth token",
    "otoroshi.models.ClientConfig.backoffFactor": "Specify the factor to multiply the delay for each retry",
    "otoroshi.models.ClientConfig.cacheConnectionSettings": "Cached connection settings",
    "otoroshi.models.ClientConfig.callAndStreamTimeout": "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
    "otoroshi.models.ClientConfig.callTimeout": "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
    "otoroshi.models.ClientConfig.connectionTimeout": "Timeout at connection",
    "otoroshi.models.ClientConfig.customTimeouts": "Custom timeouts per path",
    "otoroshi.models.ClientConfig.globalTimeout": "Specify how long the global call (with retries) should last at most in milliseconds",
    "otoroshi.models.ClientConfig.idleTimeout": "Timeout on idle connection",
    "otoroshi.models.ClientConfig.maxErrors": "Specify how many errors can pass before opening the circuit breaker",
    "otoroshi.models.ClientConfig.proxy": "Web proxy settings for http client",
    "otoroshi.models.ClientConfig.retries": "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
    "otoroshi.models.ClientConfig.retryInitialDelay": "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
    "otoroshi.models.ClientConfig.sampleInterval": "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
    "otoroshi.models.ClientConfig.useCircuitBreaker": "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
    "otoroshi.models.ClientIdAuthConstraints.enabled": "Constraint enabled",
    "otoroshi.models.ClientIdAuthConstraints.headerName": "Header name to find client_id",
    "otoroshi.models.ClientIdAuthConstraints.queryName": "Query param name to find client_id",
    "otoroshi.models.CorsSettings.allowCredentials": "Allow to pass credentials",
    "otoroshi.models.CorsSettings.allowHeaders": "The cors allowed headers",
    "otoroshi.models.CorsSettings.allowMethods": "The cors allowed methods",
    "otoroshi.models.CorsSettings.allowOrigin": "The cors allowed origin",
    "otoroshi.models.CorsSettings.enabled": "Whether or not cors is enabled",
    "otoroshi.models.CorsSettings.excludedPatterns": "The cors excluded patterns",
    "otoroshi.models.CorsSettings.exposeHeaders": "The cors exposed header",
    "otoroshi.models.CorsSettings.maxAge": "Cors max age",
    "otoroshi.models.CustomHeadersAuthConstraints.clientIdHeaderName": "Header name to find client_id",
    "otoroshi.models.CustomHeadersAuthConstraints.clientSecretHeaderName": "Header name to find client_secret",
    "otoroshi.models.CustomHeadersAuthConstraints.enabled": "Constraint enabled",
    "otoroshi.models.CustomTimeouts.callAndStreamTimeout": "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
    "otoroshi.models.CustomTimeouts.callTimeout": "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
    "otoroshi.models.CustomTimeouts.connectionTimeout": "Timeout at connection",
    "otoroshi.models.CustomTimeouts.globalTimeout": "Specify how long the global call (with retries) should last at most in milliseconds",
    "otoroshi.models.CustomTimeouts.idleTimeout": "Timeout on idle connection",
    "otoroshi.models.CustomTimeouts.path": "path on which this configuration works",
    "otoroshi.models.DataCenterMatch.dc": "DC name",
    "otoroshi.models.DataExporterConfig.bufferSize": "buffer size",
    "otoroshi.models.DataExporterConfig.config": "Data Exporter config",
    "otoroshi.models.DataExporterConfig.desc": "Description",
    "otoroshi.models.DataExporterConfig.enabled": "Boolean",
    "otoroshi.models.DataExporterConfig.filtering": "filtering",
    "otoroshi.models.DataExporterConfig.groupDuration": "duration",
    "otoroshi.models.DataExporterConfig.groupSize": "Group size",
    "otoroshi.models.DataExporterConfig.id": "Id",
    "otoroshi.models.DataExporterConfig.jsonWorkers": "nb workers",
    "otoroshi.models.DataExporterConfig.location": "location",
    "otoroshi.models.DataExporterConfig.metadata": "Metadata",
    "otoroshi.models.DataExporterConfig.name": "Name",
    "otoroshi.models.DataExporterConfig.projection": "projection",
    "otoroshi.models.DataExporterConfig.sendWorkers": "send workers",
    "otoroshi.models.DataExporterConfig.tags": "Entity tags",
    "otoroshi.models.DataExporterConfig.typ": "Type of data exporter",
    "otoroshi.models.DataExporterConfigFiltering.exclude": "Include the events matching one of those filters",
    "otoroshi.models.DataExporterConfigFiltering.include": "Exclude the events matching one of those filters",
    "otoroshi.models.DefaultTemplates.apikey": "the template for the apikey entities",
    "otoroshi.models.DefaultTemplates.authConfig": "the template for the authConfig entities",
    "otoroshi.models.DefaultTemplates.backend": "the template for the backend entities",
    "otoroshi.models.DefaultTemplates.certificate": "the template for the certificate entities",
    "otoroshi.models.DefaultTemplates.dataExporter": "the template for the dataExporter entities",
    "otoroshi.models.DefaultTemplates.descriptor": "the template for the descriptor entities",
    "otoroshi.models.DefaultTemplates.group": "the template for the group entities",
    "otoroshi.models.DefaultTemplates.route": "the template for the route entities",
    "otoroshi.models.DefaultTemplates.script": "the template for the script entities",
    "otoroshi.models.DefaultTemplates.service": "the template for the service entities",
    "otoroshi.models.DefaultTemplates.target": "the template for the target entities",
    "otoroshi.models.DefaultTemplates.tcpService": "the template for the tcpService entities",
    "otoroshi.models.DefaultTemplates.team": "the template for the team entities",
    "otoroshi.models.DefaultTemplates.template": "the template for the template entities",
    "otoroshi.models.DefaultTemplates.tenant": "the template for the tenant entities",
    "otoroshi.models.DefaultTemplates.verifier": "the template for the verifier entities",
    "otoroshi.models.DefaultToken.strict": "If the token already exists in the request, then fail",
    "otoroshi.models.DefaultToken.token": "The default token",
    "otoroshi.models.DefaultToken.verificationSettings": "Verification settings",
    "otoroshi.models.ESAlgoSettings.privateKey": "The EC private key. If used for verification, can be null",
    "otoroshi.models.ESAlgoSettings.publicKey": "The EC private key. If used for signing, can be null",
    "otoroshi.models.ESAlgoSettings.size": "SHA function size",
    "otoroshi.models.ESKPAlgoSettings.certId": "Certificate id to use the keypair",
    "otoroshi.models.ESKPAlgoSettings.size": "Size of the key",
    "otoroshi.models.ElasticAnalyticsConfig.applyTemplate": "Enable template creation/update",
    "otoroshi.models.ElasticAnalyticsConfig.clusterUri": "Cluster URL",
    "otoroshi.models.ElasticAnalyticsConfig.headers": "Additionnal headers in the http request",
    "otoroshi.models.ElasticAnalyticsConfig.index": "Index name",
    "otoroshi.models.ElasticAnalyticsConfig.indexSettings": "Indexation settings",
    "otoroshi.models.ElasticAnalyticsConfig.mtlsConfig": "TLS settings for the http client",
    "otoroshi.models.ElasticAnalyticsConfig.password": "Elastic password",
    "otoroshi.models.ElasticAnalyticsConfig.type": "Object type",
    "otoroshi.models.ElasticAnalyticsConfig.user": "Elasticsearch user",
    "otoroshi.models.ElasticAnalyticsConfig.version": "Version of Elasticsearch",
    "otoroshi.models.EntityLocation.teams": "Teams of the current entity",
    "otoroshi.models.EntityLocation.tenant": "Organization of the current entity",
    "otoroshi.models.ErrorTemplate.messages": "Map of messages",
    "otoroshi.models.ErrorTemplate.serviceId": "Service id for this template",
    "otoroshi.models.ErrorTemplate.template40x": "The 40x error html template",
    "otoroshi.models.ErrorTemplate.template50x": "The 50x error html template",
    "otoroshi.models.ErrorTemplate.templateBuild": "The build html template",
    "otoroshi.models.ErrorTemplate.templateMaintenance": "The maintenance html template",
    "otoroshi.models.ExporterRef.config": "Script config",
    "otoroshi.models.ExporterRef.ref": "Script id",
    "otoroshi.models.FileSettings.maxFileSize": "Max file size in bytes",
    "otoroshi.models.FileSettings.path": "File path",
    "otoroshi.models.GeoPositionRadius.latitude": "Latitude of the position",
    "otoroshi.models.GeoPositionRadius.longitude": "Longitude of the position",
    "otoroshi.models.GeoPositionRadius.radius": "Radius of the circle in meters",
    "otoroshi.models.GeolocationMatch.positions": "Possible positions",
    "otoroshi.models.GlobalConfig.alertsEmails": "Email addresses that will receive all Otoroshi alert events",
    "otoroshi.models.GlobalConfig.alertsWebhooks": "Webhook that will receive all Otoroshi alert events",
    "otoroshi.models.GlobalConfig.analyticsWebhooks": "Webhook that will receive all internal Otoroshi events",
    "otoroshi.models.GlobalConfig.apiReadOnly": "If enabled, Admin API won't be able to write/update/delete entities",
    "otoroshi.models.GlobalConfig.autoCert": "Auto certs settings",
    "otoroshi.models.GlobalConfig.autoLinkToDefaultGroup": "If not defined, every new service descriptor will be added to the default group",
    "otoroshi.models.GlobalConfig.backOfficeAuthRef": "Id of the auth module used for otoroshi-ui login",
    "otoroshi.models.GlobalConfig.cleverSettings": "Optional CleverCloud configuration",
    "otoroshi.models.GlobalConfig.elasticReadsConfig": "Config. for elastic reads",
    "otoroshi.models.GlobalConfig.elasticWritesConfigs": "Configs. for Elastic writes",
    "otoroshi.models.GlobalConfig.enableEmbeddedMetrics": "Enable embedded metrics",
    "otoroshi.models.GlobalConfig.endlessIpAddresses": "IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros",
    "otoroshi.models.GlobalConfig.geolocationSettings": "Settings for geolocation extraction",
    "otoroshi.models.GlobalConfig.ipFiltering": "Global ip filtering settings",
    "otoroshi.models.GlobalConfig.kafkaConfig": "Global kafka settings. deprecated",
    "otoroshi.models.GlobalConfig.letsEncryptSettings": "Let's encrypt (ACME) settings",
    "otoroshi.models.GlobalConfig.limitConcurrentRequests": "If enabled, Otoroshi will reject new request if too much at the same time",
    "otoroshi.models.GlobalConfig.lines": "Possibles lines for Otoroshi",
    "otoroshi.models.GlobalConfig.logAnalyticsOnServer": "Log analytics event on the server",
    "otoroshi.models.GlobalConfig.mailerSettings": "Optional mailer configuration",
    "otoroshi.models.GlobalConfig.maintenanceMode": "Global maintenant mode",
    "otoroshi.models.GlobalConfig.maxConcurrentRequests": "The number of authorized request processed at the same time",
    "otoroshi.models.GlobalConfig.maxHttp10ResponseSize": "The max size in bytes of an HTTP 1.0 response",
    "otoroshi.models.GlobalConfig.maxLogsSize": "Number of events kept locally",
    "otoroshi.models.GlobalConfig.maxWebhookSize": "Max number of items in webhooks",
    "otoroshi.models.GlobalConfig.metadata": "Entity metadata",
    "otoroshi.models.GlobalConfig.middleFingers": "Use middle finger emoji as a response character for endless HTTP responses",
    "otoroshi.models.GlobalConfig.otoroshiId": "Unique id for this otoroshi instance",
    "otoroshi.models.GlobalConfig.perIpThrottlingQuota": "Authorized number of calls per second globally per IP address, measured on 10 seconds",
    "otoroshi.models.GlobalConfig.plugins": "global plugins settings",
    "otoroshi.models.GlobalConfig.proxies": "Web proxies settings",
    "otoroshi.models.GlobalConfig.quotasSettings": "Settings to generate alert when an apikey almost exceeded or exceeded its quotas",
    "otoroshi.models.GlobalConfig.scripts": "global plugins settings. will be deprecated soon",
    "otoroshi.models.GlobalConfig.snowMonkeyConfig": "Snowmonky settings",
    "otoroshi.models.GlobalConfig.statsdConfig": "Statsd settings (agent connection)",
    "otoroshi.models.GlobalConfig.streamEntityOnly": "HTTP will be streamed only. Doesn't work with old browsers",
    "otoroshi.models.GlobalConfig.tags": "Entity tags",
    "otoroshi.models.GlobalConfig.templates": "The otoroshi default templates for entities",
    "otoroshi.models.GlobalConfig.throttlingQuota": "Authorized number of calls per second globally, measured on 10 seconds",
    "otoroshi.models.GlobalConfig.tlsSettings": "TLS settings",
    "otoroshi.models.GlobalConfig.trustXForwarded": "Use X-Forwarded-* headers for routing",
    "otoroshi.models.GlobalConfig.u2fLoginOnly": "If enabled, login to backoffice through Auth0 will be disabled",
    "otoroshi.models.GlobalConfig.useAkkaHttpClient": "Globally use akka http client for everything",
    "otoroshi.models.GlobalConfig.useCircuitBreakers": "If enabled, services will be authorized to use circuit breakers",
    "otoroshi.models.GlobalConfig.userAgentSettings": "Settings for useragent extraction",
    "otoroshi.models.GlobalJwtVerifier.algoSettings": "Algo settings of the verifier",
    "otoroshi.models.GlobalJwtVerifier.desc": "Verifier description",
    "otoroshi.models.GlobalJwtVerifier.id": "Verifier id",
    "otoroshi.models.GlobalJwtVerifier.location": "Entity location",
    "otoroshi.models.GlobalJwtVerifier.metadata": "Entity metadata",
    "otoroshi.models.GlobalJwtVerifier.name": "Verifier name",
    "otoroshi.models.GlobalJwtVerifier.source": "Where to find the jwt token",
    "otoroshi.models.GlobalJwtVerifier.strategy": "The strategy of the verifier",
    "otoroshi.models.GlobalJwtVerifier.strict": "Does it fail if JWT not found",
    "otoroshi.models.GlobalJwtVerifier.tags": "Entity tags",
    "otoroshi.models.GlobalScripts.enabled": "Global scripts enabled",
    "otoroshi.models.GlobalScripts.jobConfig": "jobs enabled",
    "otoroshi.models.GlobalScripts.jobRefs": "running jobs",
    "otoroshi.models.GlobalScripts.preRouteConfig": "pre-route config",
    "otoroshi.models.GlobalScripts.preRouteRefs": "pre-route plugins enabled",
    "otoroshi.models.GlobalScripts.sinkConfig": "sinks config",
    "otoroshi.models.GlobalScripts.sinkRefs": "sinks enabled",
    "otoroshi.models.GlobalScripts.transformersConfig": "transformers config",
    "otoroshi.models.GlobalScripts.transformersRefs": "transformers enabled",
    "otoroshi.models.GlobalScripts.validatorConfig": "validator config",
    "otoroshi.models.GlobalScripts.validatorRefs": "validator enabled",
    "otoroshi.models.HSAlgoSettings.base64": "The secret is base64 encoded",
    "otoroshi.models.HSAlgoSettings.secret": "HMAC secret",
    "otoroshi.models.HSAlgoSettings.size": "Size for SHA function",
    "otoroshi.models.HealthCheck.enabled": "Whether or not healthcheck is enabled on the current service descriptor",
    "otoroshi.models.HealthCheck.url": "The URL to check",
    "otoroshi.models.InCookie.name": "Cookie name",
    "otoroshi.models.InHeader.name": "Header name",
    "otoroshi.models.InHeader.remove": "Remove from value",
    "otoroshi.models.InQueryParam.name": "Query param name",
    "otoroshi.models.IndexSettings.clientSide": "Enable index splitting on client side",
    "otoroshi.models.IndexSettings.interval": "Index splitting interval",
    "otoroshi.models.InfraProviderMatch.provider": "provider name",
    "otoroshi.models.IpFiltering.blacklist": "Blacklisted IP addresses",
    "otoroshi.models.IpFiltering.whitelist": "Whitelisted IP addresses",
    "otoroshi.models.IpStackGeolocationSettings.apikey": "IpStack apikey",
    "otoroshi.models.IpStackGeolocationSettings.enabled": "enable ipstack geolocation",
    "otoroshi.models.IpStackGeolocationSettings.timeout": "API call timeout",
    "otoroshi.models.JWKSAlgoSettings.headers": "Http header when fetching JWKS",
    "otoroshi.models.JWKSAlgoSettings.kty": "Key type",
    "otoroshi.models.JWKSAlgoSettings.mtlsConfig": "TLS settings for http client",
    "otoroshi.models.JWKSAlgoSettings.proxy": "Web proxy for http client",
    "otoroshi.models.JWKSAlgoSettings.timeout": "Timeout when fetching JWKS",
    "otoroshi.models.JWKSAlgoSettings.ttl": "Cache ttl",
    "otoroshi.models.JWKSAlgoSettings.url": "JWKS url",
    "otoroshi.models.JwtAuthConstraints.cookieName": "Cookie name to extract jwt token",
    "otoroshi.models.JwtAuthConstraints.enabled": "Constraint enabled",
    "otoroshi.models.JwtAuthConstraints.headerName": "Header name to extract jwt token",
    "otoroshi.models.JwtAuthConstraints.includeRequestAttributes": "Jwt token should include verb and path",
    "otoroshi.models.JwtAuthConstraints.keyPairSigned": "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
    "otoroshi.models.JwtAuthConstraints.maxJwtLifespanSecs": "Check if token does not have a long lifespan",
    "otoroshi.models.JwtAuthConstraints.queryName": "Query param name to extract jwt token",
    "otoroshi.models.JwtAuthConstraints.secretSigned": "Jwt token signed with the client_secret",
    "otoroshi.models.KidAlgoSettings.onlyExposedCerts": "Use only exposed certs",
    "otoroshi.models.LargeRequestFaultConfig.additionalRequestSize": "The size added to the request body in bytes. Added payload will be spaces only.",
    "otoroshi.models.LargeRequestFaultConfig.ratio": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
    "otoroshi.models.LargeResponseFaultConfig.additionalResponseSize": "Add n 0 bytes",
    "otoroshi.models.LargeResponseFaultConfig.ratio": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
    "otoroshi.models.LatencyInjectionFaultConfig.from": "The start range of latency added to the request",
    "otoroshi.models.LatencyInjectionFaultConfig.ratio": "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
    "otoroshi.models.LatencyInjectionFaultConfig.to": "The end range of latency added to the request",
    "otoroshi.models.LocalJwtVerifier.algoSettings": "Algo settings",
    "otoroshi.models.LocalJwtVerifier.enabled": "Verifier enabled",
    "otoroshi.models.LocalJwtVerifier.excludedPatterns": "Verifier excluded paths",
    "otoroshi.models.LocalJwtVerifier.source": "Token source",
    "otoroshi.models.LocalJwtVerifier.strategy": "Token strategy",
    "otoroshi.models.LocalJwtVerifier.strict": "Strict token verification",
    "otoroshi.models.MappingSettings.map": "Change values",
    "otoroshi.models.MappingSettings.remove": "Remove some token claims",
    "otoroshi.models.MappingSettings.values": "Add values",
    "otoroshi.models.MaxmindGeolocationSettings.enabled": "Geolocation using maxmind db enabled",
    "otoroshi.models.MaxmindGeolocationSettings.path": "Maxmlind db file path",
    "otoroshi.models.MetricsSettings.labels": "Exposed labels",
    "otoroshi.models.NetworkLocationMatch.dataCenter": "Datacenter name",
    "otoroshi.models.NetworkLocationMatch.provider": "Provider name",
    "otoroshi.models.NetworkLocationMatch.rack": "Rack name",
    "otoroshi.models.NetworkLocationMatch.region": "Region name",
    "otoroshi.models.NetworkLocationMatch.zone": "Zone name",
    "otoroshi.models.Outage.descriptorId": "Service descriptor id",
    "otoroshi.models.Outage.descriptorName": "Service descriptor name",
    "otoroshi.models.Outage.duration": "Outage duration",
    "otoroshi.models.Outage.startedAt": "Outage starting date",
    "otoroshi.models.Outage.until": "Outage ending date",
    "otoroshi.models.PassThrough.verificationSettings": "Verification settings",
    "otoroshi.models.PrivateAppsUser.authConfigId": "Auth module id that created the session",
    "otoroshi.models.PrivateAppsUser.createdAt": "Creation date of the session",
    "otoroshi.models.PrivateAppsUser.email": "Session user email",
    "otoroshi.models.PrivateAppsUser.expiredAt": "Session expiration date",
    "otoroshi.models.PrivateAppsUser.lastRefresh": "Session last refresh (if OAuth refresh_token supported)",
    "otoroshi.models.PrivateAppsUser.location": "Entity location",
    "otoroshi.models.PrivateAppsUser.metadata": "Entity metadata",
    "otoroshi.models.PrivateAppsUser.name": "Entity name",
    "otoroshi.models.PrivateAppsUser.otoroshiData": "Otoroshi oriented metadata",
    "otoroshi.models.PrivateAppsUser.profile": "Session user profile",
    "otoroshi.models.PrivateAppsUser.randomId": "Session random id",
    "otoroshi.models.PrivateAppsUser.realm": "Session realm name",
    "otoroshi.models.PrivateAppsUser.tags": "Entity tags",
    "otoroshi.models.PrivateAppsUser.token": "Session tokens (from OAuth)",
    "otoroshi.models.Proxies.alertEmails": "Web proxy used to send alert emails",
    "otoroshi.models.Proxies.auth": "Web proxy used to call OAuth providers",
    "otoroshi.models.Proxies.authority": "Web proxy used to check authorities",
    "otoroshi.models.Proxies.clevercloud": "Web proxy used to call clevercloud",
    "otoroshi.models.Proxies.elastic": "Web proxy used to call elastic",
    "otoroshi.models.Proxies.eventsWebhooks": "Web proxy used to call webhooks",
    "otoroshi.models.Proxies.jwk": "Web proxy used to fetch jwks",
    "otoroshi.models.Proxies.services": "Web proxy used to access services targets",
    "otoroshi.models.QuotasAlmostExceededSettings.dailyQuotasThreshold": "The daily quotas threshold before generating alert",
    "otoroshi.models.QuotasAlmostExceededSettings.enabled": "Is quotas alert enabled",
    "otoroshi.models.QuotasAlmostExceededSettings.monthlyQuotasThreshold": "The monthly quotas threshold before generating alert",
    "otoroshi.models.RSAKPAlgoSettings.certId": "Certificate id",
    "otoroshi.models.RSAKPAlgoSettings.size": "SHA function size",
    "otoroshi.models.RSAlgoSettings.privateKey": "Private key (for signing)",
    "otoroshi.models.RSAlgoSettings.publicKey": "Public key (for verification)",
    "otoroshi.models.RSAlgoSettings.size": "SHA function size",
    "otoroshi.models.RackMatch.rack": "Rack name",
    "otoroshi.models.RedirectionSettings.code": "The http redirect code",
    "otoroshi.models.RedirectionSettings.enabled": "Whether or not redirection is enabled",
    "otoroshi.models.RedirectionSettings.to": "The location for redirection",
    "otoroshi.models.RefJwtVerifier.enabled": "Verifier enabled",
    "otoroshi.models.RefJwtVerifier.excludedPatterns": "Verifier excluded paths",
    "otoroshi.models.RefJwtVerifier.ids": "Verifiers ids",
    "otoroshi.models.RegionMatch.region": "Region name",
    "otoroshi.models.RemainingQuotas.authorizedCallsPerDay": "Number of authorized call per day",
    "otoroshi.models.RemainingQuotas.authorizedCallsPerMonth": "Number of authorized call per month",
    "otoroshi.models.RemainingQuotas.authorizedCallsPerSec": "Number of authorized call per second",
    "otoroshi.models.RemainingQuotas.currentCallsPerDay": "Current number of call per day",
    "otoroshi.models.RemainingQuotas.currentCallsPerMonth": "Current number of call per month",
    "otoroshi.models.RemainingQuotas.currentCallsPerSec": "Current number of call per second",
    "otoroshi.models.RemainingQuotas.remainingCallsPerDay": "Remaining number of call per day",
    "otoroshi.models.RemainingQuotas.remainingCallsPerMonth": "Remaining number of call per month",
    "otoroshi.models.RemainingQuotas.remainingCallsPerSec": "Remaining number of call per second",
    "otoroshi.models.RestrictionPath.method": "Method of the http request",
    "otoroshi.models.RestrictionPath.path": "Path of the http request",
    "otoroshi.models.Restrictions.allowLast": "Evalute allowed paths after everything else",
    "otoroshi.models.Restrictions.allowed": "Allowed paths",
    "otoroshi.models.Restrictions.enabled": "Restrictions enabled",
    "otoroshi.models.Restrictions.forbidden": "Forbidden paths (return 403)",
    "otoroshi.models.Restrictions.notFound": "Not found paths (return 404)",
    "otoroshi.models.SecComHeaders.claimRequestName": "Header name where the info token will be",
    "otoroshi.models.SecComHeaders.stateRequestName": "Header name where the validation token will be",
    "otoroshi.models.SecComHeaders.stateResponseName": "Header name where the validation token respondewill be",
    "otoroshi.models.ServiceDescriptor.accessValidator": "Service access validatiors",
    "otoroshi.models.ServiceDescriptor.additionalHeaders": "Specify headers that will be added to each client request. Useful to add authentication",
    "otoroshi.models.ServiceDescriptor.additionalHeadersOut": "Specify headers that will be added to each client response",
    "otoroshi.models.ServiceDescriptor.allowHttp10": "Allow HTTP/1.0 requests",
    "otoroshi.models.ServiceDescriptor.api": "Api exposition settings",
    "otoroshi.models.ServiceDescriptor.apiKeyConstraints": "Routing and extraction constraints for the apikeyh",
    "otoroshi.models.ServiceDescriptor.authConfigRef": "A reference to a global auth module config",
    "otoroshi.models.ServiceDescriptor.buildMode": "Display a construction page when a user try to use the service",
    "otoroshi.models.ServiceDescriptor.canary": "Canary settings",
    "otoroshi.models.ServiceDescriptor.chaosConfig": "Chaos engineering settings",
    "otoroshi.models.ServiceDescriptor.clientConfig": "Http client settings",
    "otoroshi.models.ServiceDescriptor.clientValidatorRef": "A reference to validation authority",
    "otoroshi.models.ServiceDescriptor.cors": "CORS settings",
    "otoroshi.models.ServiceDescriptor.description": "Entity description",
    "otoroshi.models.ServiceDescriptor.detectApiKeySooner": "Detect if an apikey is present but do not fail if not",
    "otoroshi.models.ServiceDescriptor.domain": "The domain on which the service is available.",
    "otoroshi.models.ServiceDescriptor.enabled": "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
    "otoroshi.models.ServiceDescriptor.enforceSecureCommunication": "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
    "otoroshi.models.ServiceDescriptor.env": "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
    "otoroshi.models.ServiceDescriptor.forceHttps": "Will force redirection to https:// if not present",
    "otoroshi.models.ServiceDescriptor.groups": "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group",
    "otoroshi.models.ServiceDescriptor.gzip": "GZIP settings",
    "otoroshi.models.ServiceDescriptor.handleLegacyDomain": "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
    "otoroshi.models.ServiceDescriptor.headersVerification": "Specify headers that will be verified after routing.",
    "otoroshi.models.ServiceDescriptor.healthCheck": "Healthcheck settings",
    "otoroshi.models.ServiceDescriptor.hosts": "Possible hosts for the service",
    "otoroshi.models.ServiceDescriptor.id": "A unique random string to identify your service",
    "otoroshi.models.ServiceDescriptor.ipFiltering": "Ip filtering settings",
    "otoroshi.models.ServiceDescriptor.issueCert": "Flag to automatically issue a cert for this service",
    "otoroshi.models.ServiceDescriptor.issueCertCA": "CA for cert issuance",
    "otoroshi.models.ServiceDescriptor.jwtVerifier": "JWT verifiers settings",
    "otoroshi.models.ServiceDescriptor.letsEncrypt": "Flag to automatically issue a let's encrypt (ACME) cert for this service",
    "otoroshi.models.ServiceDescriptor.localHost": "The host used localy, mainly localhost:xxxx",
    "otoroshi.models.ServiceDescriptor.localScheme": "The scheme used localy, mainly http",
    "otoroshi.models.ServiceDescriptor.location": "Entity location",
    "otoroshi.models.ServiceDescriptor.logAnalyticsOnServer": "Log analytics event on the server",
    "otoroshi.models.ServiceDescriptor.maintenanceMode": "Display a maintainance page when a user try to use the service",
    "otoroshi.models.ServiceDescriptor.matchingHeaders": "Specify headers that MUST be present on client request to route it. Useful to implement versioning",
    "otoroshi.models.ServiceDescriptor.matchingRoot": "The root path on which the service is available",
    "otoroshi.models.ServiceDescriptor.metadata": "Just a bunch of random properties",
    "otoroshi.models.ServiceDescriptor.missingOnlyHeadersIn": "Add header on client request if they are not present",
    "otoroshi.models.ServiceDescriptor.missingOnlyHeadersOut": "Add header on client response if they are not present",
    "otoroshi.models.ServiceDescriptor.name": "The name of your service. Only for debug and human readability purposes",
    "otoroshi.models.ServiceDescriptor.overrideHost": "Host header will be overriden with Host of the target",
    "otoroshi.models.ServiceDescriptor.paths": "Matching paths on request",
    "otoroshi.models.ServiceDescriptor.plugins": "Plugins enabled for this service. will replace separate plugins fields in a near future",
    "otoroshi.models.ServiceDescriptor.preRouting": "Pre routing plugin settings",
    "otoroshi.models.ServiceDescriptor.privateApp": "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
    "otoroshi.models.ServiceDescriptor.privatePatterns": "If you define a public pattern that is a little bit too much, you can make some of public URL private again",
    "otoroshi.models.ServiceDescriptor.publicPatterns": "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'",
    "otoroshi.models.ServiceDescriptor.readOnly": "Service only accepts GET, HEAD and OPTIONS requests",
    "otoroshi.models.ServiceDescriptor.redirectToLocal": "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
    "otoroshi.models.ServiceDescriptor.redirection": "Redirection settings",
    "otoroshi.models.ServiceDescriptor.removeHeadersIn": "Remove headers on client request",
    "otoroshi.models.ServiceDescriptor.removeHeadersOut": "Remove headers on client response",
    "otoroshi.models.ServiceDescriptor.restrictions": "Restriction settings",
    "otoroshi.models.ServiceDescriptor.root": "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
    "otoroshi.models.ServiceDescriptor.secComAlgoChallengeBackToOto": "Algorithm to verify challenge token coming from the backend",
    "otoroshi.models.ServiceDescriptor.secComAlgoChallengeOtoToBack": "Algorithm to sign challenge token to the backend",
    "otoroshi.models.ServiceDescriptor.secComAlgoInfoToken": "Algorithm to verify/sign challenge token coming from/to the backend",
    "otoroshi.models.ServiceDescriptor.secComExcludedPatterns": "URI patterns excluded from secured communications",
    "otoroshi.models.ServiceDescriptor.secComHeaders": "Header names for sec. com. protocol",
    "otoroshi.models.ServiceDescriptor.secComInfoTokenVersion": "Version of the info token",
    "otoroshi.models.ServiceDescriptor.secComSettings": "Sec. com. settings",
    "otoroshi.models.ServiceDescriptor.secComTtl": "TTL for the info token",
    "otoroshi.models.ServiceDescriptor.secComUseSameAlgo": "Use the same algo for info token, challenge token signing, challenge token verification",
    "otoroshi.models.ServiceDescriptor.secComVersion": "Version of the sec. com.",
    "otoroshi.models.ServiceDescriptor.securityExcludedPatterns": "Exclude some paths",
    "otoroshi.models.ServiceDescriptor.sendInfoToken": "Should otoroshi send info token",
    "otoroshi.models.ServiceDescriptor.sendOtoroshiHeadersBack": "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
    "otoroshi.models.ServiceDescriptor.sendStateChallenge": "Should otoroshi send challenge token",
    "otoroshi.models.ServiceDescriptor.strictlyPrivate": "When strictly private, private app session will not pass apikey filters",
    "otoroshi.models.ServiceDescriptor.stripPath": "Strip matching path in the forwarded request path",
    "otoroshi.models.ServiceDescriptor.subdomain": "The subdomain on which the service is available",
    "otoroshi.models.ServiceDescriptor.tags": "Entity tags",
    "otoroshi.models.ServiceDescriptor.targets": "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
    "otoroshi.models.ServiceDescriptor.targetsLoadBalancing": "Loadbalancing strategy",
    "otoroshi.models.ServiceDescriptor.tcpUdpTunneling": "Enabled TCP/UDP tunneling through websocket connection",
    "otoroshi.models.ServiceDescriptor.transformerConfig": "Transformer plugins configuration",
    "otoroshi.models.ServiceDescriptor.transformerRefs": "Enabled transformer plugins",
    "otoroshi.models.ServiceDescriptor.useAkkaHttpClient": "Use akka http client for this service",
    "otoroshi.models.ServiceDescriptor.useNewWSClient": "Use akka http client for this service on websocket calls",
    "otoroshi.models.ServiceDescriptor.userFacing": "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
    "otoroshi.models.ServiceDescriptor.xForwardedHeaders": "Send X-Forwarded-* headers",
    "otoroshi.models.ServiceGroup.description": "Entity description",
    "otoroshi.models.ServiceGroup.id": "A unique random string to identify your service",
    "otoroshi.models.ServiceGroup.location": "Entity location",
    "otoroshi.models.ServiceGroup.metadata": "Just a bunch of random properties",
    "otoroshi.models.ServiceGroup.name": "The name of your service. Only for debug and human readability purposes",
    "otoroshi.models.ServiceGroup.tags": "Entity tags",
    "otoroshi.models.Sign.algoSettings": "Re-signing jwt token settings",
    "otoroshi.models.Sign.verificationSettings": "Verification settings",
    "otoroshi.models.SimpleOtoroshiAdmin.createdAt": "User creation date",
    "otoroshi.models.SimpleOtoroshiAdmin.label": "User label",
    "otoroshi.models.SimpleOtoroshiAdmin.location": "Entity location",
    "otoroshi.models.SimpleOtoroshiAdmin.metadata": "Entity metadata",
    "otoroshi.models.SimpleOtoroshiAdmin.password": "User password (bcrypt hashed)",
    "otoroshi.models.SimpleOtoroshiAdmin.rights": "User rights",
    "otoroshi.models.SimpleOtoroshiAdmin.tags": "Entity tags",
    "otoroshi.models.SimpleOtoroshiAdmin.typ": "Type of user",
    "otoroshi.models.SimpleOtoroshiAdmin.username": "User username",
    "otoroshi.models.SnowMonkeyConfig.chaosConfig": "Chaos settings",
    "otoroshi.models.SnowMonkeyConfig.dryRun": "Whether or not outages will actualy impact requests",
    "otoroshi.models.SnowMonkeyConfig.enabled": "Whether or not this config is enabled",
    "otoroshi.models.SnowMonkeyConfig.includeUserFacingDescriptors": "Whether or not user facing apps. will be impacted by Snow Monkey",
    "otoroshi.models.SnowMonkeyConfig.outageDurationFrom": "Start of outage duration range",
    "otoroshi.models.SnowMonkeyConfig.outageDurationTo": "End of outage duration range",
    "otoroshi.models.SnowMonkeyConfig.outageStrategy": "",
    "otoroshi.models.SnowMonkeyConfig.startTime": "Start time of Snow Monkey each day",
    "otoroshi.models.SnowMonkeyConfig.stopTime": "Stop time of Snow Monkey each day",
    "otoroshi.models.SnowMonkeyConfig.targetGroups": "Groups impacted by Snow Monkey. If empty, all groups will be impacted",
    "otoroshi.models.SnowMonkeyConfig.timesPerDay": "Number of time per day each service will be outage",
    "otoroshi.models.Target.host": "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
    "otoroshi.models.Target.ipAddress": "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
    "otoroshi.models.Target.metadata": "Metadata for this target",
    "otoroshi.models.Target.mtlsConfig": "TLS settings to contact this target",
    "otoroshi.models.Target.predicate": "Predicate to choose this target",
    "otoroshi.models.Target.protocol": "Protocol for the target",
    "otoroshi.models.Target.scheme": "The protocol used for communication. Can be http or https",
    "otoroshi.models.Target.tags": "Tags for this target",
    "otoroshi.models.Target.weight": "The weight of the target when choosing",
    "otoroshi.models.Team.description": "Entity description",
    "otoroshi.models.Team.id": "Entity id",
    "otoroshi.models.Team.metadata": "Entity metadata",
    "otoroshi.models.Team.name": "Entity name",
    "otoroshi.models.Team.tags": "Entity tags",
    "otoroshi.models.Team.tenant": "Entity organization",
    "otoroshi.models.TeamAccess.canRead": "Can this access right read data",
    "otoroshi.models.TeamAccess.canWrite": "Can this access right write data",
    "otoroshi.models.TeamAccess.value": "Access pattern",
    "otoroshi.models.Tenant.description": "Entity description",
    "otoroshi.models.Tenant.id": "Entity id",
    "otoroshi.models.Tenant.metadata": "Entity metadata",
    "otoroshi.models.Tenant.name": "Entity name",
    "otoroshi.models.Tenant.tags": "Entity tags",
    "otoroshi.models.TenantAccess.canRead": "Can this access right read data",
    "otoroshi.models.TenantAccess.canWrite": "Can this access right write data",
    "otoroshi.models.TenantAccess.value": "Access pattern",
    "otoroshi.models.TlsSettings.defaultDomain": "Default domain to choose if not found from current certificates",
    "otoroshi.models.TlsSettings.includeJdkCaClient": "Use known JDK CAs to build trust when performing request from otoroshi to backends",
    "otoroshi.models.TlsSettings.includeJdkCaServer": "Use known JDK CAs to build trust for incoming request",
    "otoroshi.models.TlsSettings.randomIfNotFound": "Use a random one",
    "otoroshi.models.TlsSettings.trustedCAsServer": "List for CAs trusted by otoroshi when performing TLS termination",
    "otoroshi.models.Transform.algoSettings": "Algorithm settings for re-signing token",
    "otoroshi.models.Transform.transformSettings": "Transformation settings",
    "otoroshi.models.Transform.verificationSettings": "Verification settings",
    "otoroshi.models.TransformSettings.location": "Location of the token",
    "otoroshi.models.TransformSettings.mappingSettings": "Token mapping settings",
    "otoroshi.models.UserAgentSettings.enabled": "User agent extraction enabled",
    "otoroshi.models.UserRight.teams": "Access rights on teams",
    "otoroshi.models.UserRight.tenant": "Access rights on organizations",
    "otoroshi.models.UserRights.rights": "Access rights of a user",
    "otoroshi.models.VerificationSettings.arrayFields": "Fields array validation",
    "otoroshi.models.VerificationSettings.fields": "Fields validation",
    "otoroshi.models.WebAuthnOtoroshiAdmin.createdAt": "User creation date",
    "otoroshi.models.WebAuthnOtoroshiAdmin.credentials": "User webauthn credentials",
    "otoroshi.models.WebAuthnOtoroshiAdmin.handle": "User webauthn handle",
    "otoroshi.models.WebAuthnOtoroshiAdmin.label": "User label",
    "otoroshi.models.WebAuthnOtoroshiAdmin.location": "Entity location",
    "otoroshi.models.WebAuthnOtoroshiAdmin.metadata": "Entity metadata",
    "otoroshi.models.WebAuthnOtoroshiAdmin.password": "User password",
    "otoroshi.models.WebAuthnOtoroshiAdmin.rights": "User rights",
    "otoroshi.models.WebAuthnOtoroshiAdmin.tags": "Entity tags",
    "otoroshi.models.WebAuthnOtoroshiAdmin.typ": "User type",
    "otoroshi.models.WebAuthnOtoroshiAdmin.username": "User username",
    "otoroshi.models.Webhook.headers": "Headers to authorize the call or whatever",
    "otoroshi.models.Webhook.mtlsConfig": "TLS config when calling webhook",
    "otoroshi.models.Webhook.url": "The URL where events are posted",
    "otoroshi.models.WeightedBestResponseTime.ratio": "Weight ratio",
    "otoroshi.models.ZoneMatch.zone": "Zone name",
    "otoroshi.next.models.KvNgRouteDataStore._env": "The current env",
    "otoroshi.next.models.KvNgRouteDataStore.redisCli": "The current datastore access",
    "otoroshi.next.models.KvNgServiceDataStore._env": "The current env",
    "otoroshi.next.models.KvNgServiceDataStore.redisCli": "The current datastore access",
    "otoroshi.next.models.KvStoredNgTargetDataStore._env": "The current env",
    "otoroshi.next.models.KvStoredNgTargetDataStore.redisCli": "The current datastore access",
    "otoroshi.next.models.NgBackend.client": "Client config. of the backend",
    "otoroshi.next.models.NgBackend.healthCheck": "Healthcheck config og the backend",
    "otoroshi.next.models.NgBackend.loadBalancing": "Loadbalancing config og the backend",
    "otoroshi.next.models.NgBackend.rewrite": "Does the backend performs a full url rewrite ?",
    "otoroshi.next.models.NgBackend.root": "The root path of the backend or the full rewrite path",
    "otoroshi.next.models.NgBackend.targetRefs": "List of NgStoredBackend ids",
    "otoroshi.next.models.NgBackend.targets": "The targets of the backend",
    "otoroshi.next.models.NgCacheConnectionSettings.enabled": "Is cached connection enabled",
    "otoroshi.next.models.NgCacheConnectionSettings.queueSize": "How much request can be queue before dropping it",
    "otoroshi.next.models.NgClientConfig.backoffFactor": "Specify the factor to multiply the delay for each retry",
    "otoroshi.next.models.NgClientConfig.cacheConnectionSettings": "Cached connection settings",
    "otoroshi.next.models.NgClientConfig.callAndStreamTimeout": "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
    "otoroshi.next.models.NgClientConfig.callTimeout": "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
    "otoroshi.next.models.NgClientConfig.connectionTimeout": "Timeout at connection",
    "otoroshi.next.models.NgClientConfig.customTimeouts": "Custom timeouts per path",
    "otoroshi.next.models.NgClientConfig.globalTimeout": "Specify how long the global call (with retries) should last at most in milliseconds",
    "otoroshi.next.models.NgClientConfig.idleTimeout": "Timeout on idle connection",
    "otoroshi.next.models.NgClientConfig.maxErrors": "Specify how many errors can pass before opening the circuit breaker",
    "otoroshi.next.models.NgClientConfig.proxy": "Web proxy settings for http client",
    "otoroshi.next.models.NgClientConfig.retries": "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
    "otoroshi.next.models.NgClientConfig.retryInitialDelay": "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
    "otoroshi.next.models.NgClientConfig.sampleInterval": "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
    "otoroshi.next.models.NgContextualPlugins._env": "The current env",
    "otoroshi.next.models.NgContextualPlugins.nextPluginsMerge": "Try to merge synchronous and contiguous plugins",
    "otoroshi.next.models.NgCustomTimeouts.callAndStreamTimeout": "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
    "otoroshi.next.models.NgCustomTimeouts.callTimeout": "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
    "otoroshi.next.models.NgCustomTimeouts.connectionTimeout": "Timeout at connection",
    "otoroshi.next.models.NgCustomTimeouts.globalTimeout": "Specify how long the global call (with retries) should last at most in milliseconds",
    "otoroshi.next.models.NgCustomTimeouts.idleTimeout": "Timeout on idle connection",
    "otoroshi.next.models.NgCustomTimeouts.path": "path on which this configuration works",
    "otoroshi.next.models.NgDomainAndPath.raw": "the raw value of the domain and path",
    "otoroshi.next.models.NgFrontend.domains": "The domain and path that will be matched",
    "otoroshi.next.models.NgFrontend.exact": "Match on exact path ?",
    "otoroshi.next.models.NgFrontend.headers": "the headers that will be matched",
    "otoroshi.next.models.NgFrontend.methods": "the http methods that will be matched",
    "otoroshi.next.models.NgFrontend.query": "the query params that will be matched",
    "otoroshi.next.models.NgFrontend.stripPath": "Is path stripped from backend request",
    "otoroshi.next.models.NgMatchedRoute.noMoreSegments": "Is the path fully matched",
    "otoroshi.next.models.NgMatchedRoute.path": "Current matched path",
    "otoroshi.next.models.NgMatchedRoute.route": "Current matched route",
    "otoroshi.next.models.NgMatchedRoutes.noMoreSegments": "Is the path fully matched",
    "otoroshi.next.models.NgMatchedRoutes.path": "Current matched path",
    "otoroshi.next.models.NgMatchedRoutes.routes": "Current matched route",
    "otoroshi.next.models.NgMinimalBackend.loadBalancing": "Loadbalancing config og the backend",
    "otoroshi.next.models.NgMinimalBackend.rewrite": "Does the backend performs a full url rewrite ?",
    "otoroshi.next.models.NgMinimalBackend.root": "The root path of the backend or the full rewrite path",
    "otoroshi.next.models.NgMinimalBackend.targetRefs": "List of NgStoredBackend ids",
    "otoroshi.next.models.NgMinimalBackend.targets": "The targets of the backend",
    "otoroshi.next.models.NgMinimalRoute.backend": "The backend of the route",
    "otoroshi.next.models.NgMinimalRoute.backendRef": "The backend id of the route (if one)",
    "otoroshi.next.models.NgMinimalRoute.frontend": "The frontend of the route",
    "otoroshi.next.models.NgPluginInstance.config": "The config. of the plugin",
    "otoroshi.next.models.NgPluginInstance.debug": "Is the plugin in debug mode",
    "otoroshi.next.models.NgPluginInstance.enabled": "Is the plugin enabled",
    "otoroshi.next.models.NgPluginInstance.exclude": "Excluded paths",
    "otoroshi.next.models.NgPluginInstance.include": "Included paths",
    "otoroshi.next.models.NgPluginInstance.plugin": "The id of the plugin",
    "otoroshi.next.models.NgPluginInstanceConfig.raw": "Internal representation",
    "otoroshi.next.models.NgPlugins.slots": "All the NgPluginInstance",
    "otoroshi.next.models.NgRoute.backend": "The backend of the route",
    "otoroshi.next.models.NgRoute.backendRef": "The backend id of the route (if one)",
    "otoroshi.next.models.NgRoute.debugFlow": "Enable report debugging",
    "otoroshi.next.models.NgRoute.description": "The description of the route",
    "otoroshi.next.models.NgRoute.enabled": "Is the route enabled",
    "otoroshi.next.models.NgRoute.exportReporting": "Export the execution reporting through standard data exporter",
    "otoroshi.next.models.NgRoute.frontend": "The frontend of the route",
    "otoroshi.next.models.NgRoute.groups": "The groups of the route",
    "otoroshi.next.models.NgRoute.id": "The ud of the route",
    "otoroshi.next.models.NgRoute.location": "The location of the route",
    "otoroshi.next.models.NgRoute.metadata": "The metadata of the route",
    "otoroshi.next.models.NgRoute.name": "The name of the route",
    "otoroshi.next.models.NgRoute.tags": "The tags of the route",
    "otoroshi.next.models.NgRouteDomainAndPathWrapper.domain": "The current domain of the route",
    "otoroshi.next.models.NgRouteDomainAndPathWrapper.path": "The current of the route",
    "otoroshi.next.models.NgRouteDomainAndPathWrapper.route": "The current route",
    "otoroshi.next.models.NgSelectedBackendTarget.attempts": "Circuit breaker attemps",
    "otoroshi.next.models.NgSelectedBackendTarget.cbStart": "Time start of circuit breaker usage",
    "otoroshi.next.models.NgSelectedBackendTarget.target": "The current target",
    "otoroshi.next.models.NgService.client": "The client config of the service",
    "otoroshi.next.models.NgService.debugFlow": "Enable report debugging",
    "otoroshi.next.models.NgService.description": "The description of the service",
    "otoroshi.next.models.NgService.enabled": "Is the service enabled",
    "otoroshi.next.models.NgService.exportReporting": "Export the execution reporting through standard data exporter",
    "otoroshi.next.models.NgService.groups": "The groups of the service",
    "otoroshi.next.models.NgService.id": "The id of the service",
    "otoroshi.next.models.NgService.location": "The location of the service",
    "otoroshi.next.models.NgService.metadata": "The metadata of the service",
    "otoroshi.next.models.NgService.name": "The name of the service",
    "otoroshi.next.models.NgService.routes": "The routes of the service",
    "otoroshi.next.models.NgService.tags": "The tags of the service",
    "otoroshi.next.models.NgTarget.hostname": "hostname of the target",
    "otoroshi.next.models.NgTarget.id": "id of the target",
    "otoroshi.next.models.NgTarget.ipAddress": "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
    "otoroshi.next.models.NgTarget.port": "port of the target",
    "otoroshi.next.models.NgTarget.predicate": "Predicate to choose this target",
    "otoroshi.next.models.NgTarget.protocol": "Protocol for the target",
    "otoroshi.next.models.NgTarget.tls": "Does the target uses TLS",
    "otoroshi.next.models.NgTarget.tlsConfig": "TLS settings to contact this target",
    "otoroshi.next.models.NgTarget.weight": "The weight of the target when choosing",
    "otoroshi.next.models.NgTlsConfig.certs": "Trusted cert. ids",
    "otoroshi.next.models.NgTlsConfig.enabled": "Enabled",
    "otoroshi.next.models.NgTlsConfig.loose": "Loose verification",
    "otoroshi.next.models.NgTlsConfig.trustAll": "Trust any certificate",
    "otoroshi.next.models.NgTlsConfig.trustedCerts": "Trusted cert. ids",
    "otoroshi.next.models.StoredNgBackend.backend": "The actual backend",
    "otoroshi.next.models.StoredNgBackend.description": "The description of the backend",
    "otoroshi.next.models.StoredNgBackend.id": "The id of the backend",
    "otoroshi.next.models.StoredNgBackend.location": "The location of the backend",
    "otoroshi.next.models.StoredNgBackend.metadata": "The metadata of the backend",
    "otoroshi.next.models.StoredNgBackend.name": "The name of the backend",
    "otoroshi.next.models.StoredNgBackend.tags": "The tags of the backend",
    "otoroshi.next.models.StoredNgTarget.description": "The description of the target",
    "otoroshi.next.models.StoredNgTarget.id": "The id of the target",
    "otoroshi.next.models.StoredNgTarget.location": "The location of the target",
    "otoroshi.next.models.StoredNgTarget.metadata": "The metadata of the target",
    "otoroshi.next.models.StoredNgTarget.name": "The name of the target",
    "otoroshi.next.models.StoredNgTarget.tags": "The tags of the target",
    "otoroshi.next.models.StoredNgTarget.target": "The actual target",
    "otoroshi.next.plugins.AdditionalHeadersIn.headers": "The headers added to the request",
    "otoroshi.next.plugins.AdditionalHeadersOut.headers": "The headers added to the response",
    "otoroshi.next.plugins.AllowHttpMethods.allowed": "The list of allowed methods",
    "otoroshi.next.plugins.AllowHttpMethods.forbidden": "The list of forbidden methods",
    "otoroshi.next.plugins.ApikeyCalls.extractors": "Configuration of the apikey extraction modes",
    "otoroshi.next.plugins.ApikeyCalls.passWithUser": "Let the request pass if a user is connected",
    "otoroshi.next.plugins.ApikeyCalls.routing": "Use apikey for routing",
    "otoroshi.next.plugins.ApikeyCalls.validate": "Enabled quotas validation",
    "otoroshi.next.plugins.ApikeyCalls.wipeBackendRequest": "Removes the apikeys from the request to not forward it to the backend",
    "otoroshi.next.plugins.AuthModule.module": "Id of the auth. module",
    "otoroshi.next.plugins.AuthModule.passWithApikey": "let the request pass if an apikey is present",
    "otoroshi.next.plugins.CanaryMode.root": "The root path for target",
    "otoroshi.next.plugins.CanaryMode.targets": "The canary targets",
    "otoroshi.next.plugins.CanaryMode.traffic": "Which percentage of the traffic goes to the canary target",
    "otoroshi.next.plugins.ContextValidation.validators": "The validators to pass on the current context",
    "otoroshi.next.plugins.ContextValidationConfig.validators": "The validators to pass on the current context",
    "otoroshi.next.plugins.ContextValidator.path": "The path being tested on the current context",
    "otoroshi.next.plugins.ContextValidator.value": "The expected value",
    "otoroshi.next.plugins.Cors.allowCredentials": "Allowed credentials",
    "otoroshi.next.plugins.Cors.allowHeaders": "Allowed cors headers",
    "otoroshi.next.plugins.Cors.allowMethods": "Allowed cors methods",
    "otoroshi.next.plugins.Cors.allowOrigin": "Allowed cors origins",
    "otoroshi.next.plugins.Cors.excludedPatterns": "Paths without cors",
    "otoroshi.next.plugins.Cors.exposeHeaders": "Exposed cors headers",
    "otoroshi.next.plugins.Cors.maxAge": "cors max age",
    "otoroshi.next.plugins.EndlessHttpResponse.addresses": "IP address that will get endless responses",
    "otoroshi.next.plugins.EndlessHttpResponse.finger": "Using emoji instead of 0 in the response",
    "otoroshi.next.plugins.GlobalPerIpAddressThrottlingQuotas.secCalls": "Number of calls per second",
    "otoroshi.next.plugins.GlobalPerIpAddressThrottlingQuotas.within": "Is it within the quotas",
    "otoroshi.next.plugins.GzipResponseCompressor.blackList": "Blocked mimetypes list",
    "otoroshi.next.plugins.GzipResponseCompressor.bufferSize": "Compressor buffer size",
    "otoroshi.next.plugins.GzipResponseCompressor.chunkedThreshold": "Chunk size",
    "otoroshi.next.plugins.GzipResponseCompressor.compressionLevel": "The compression level (1 to 9)",
    "otoroshi.next.plugins.GzipResponseCompressor.excludedPatterns": "The excluded path patterns",
    "otoroshi.next.plugins.GzipResponseCompressor.whiteList": "Allowed mimetypes list",
    "otoroshi.next.plugins.HeadersValidation.headers": "The headers value being checked",
    "otoroshi.next.plugins.IpAddressAllowedList.addresses": "The list of allowed ip addresses of cidr blocks",
    "otoroshi.next.plugins.IpAddressBlockList.addresses": "The list of blocked ip addresses of cidr blocks",
    "otoroshi.next.plugins.JQ.request": "JQ filter for request",
    "otoroshi.next.plugins.JQ.response": "JQ filter for response",
    "otoroshi.next.plugins.JQConfig.request": "JQ filter for request",
    "otoroshi.next.plugins.JQConfig.response": "JQ filter for response",
    "otoroshi.next.plugins.JQRequest.filter": "JQ filter for request",
    "otoroshi.next.plugins.JQRequestConfig.filter": "JQ filter for request",
    "otoroshi.next.plugins.JQResponse.filter": "JQ filter for response",
    "otoroshi.next.plugins.JQResponseConfig.filter": "JQ filter for response",
    "otoroshi.next.plugins.JsonToXmlRequest.filter": "JQ filter for request",
    "otoroshi.next.plugins.JsonToXmlResponse.filter": "JQ filter for response",
    "otoroshi.next.plugins.JsonTransformConfig.filter": "JQ filter for transformation",
    "otoroshi.next.plugins.JwtVerification.verifiers": "The list of verifiers id",
    "otoroshi.next.plugins.MissingHeadersIn.headers": "Headers added to the request if missing",
    "otoroshi.next.plugins.MissingHeadersOut.headers": "Headers added to the response if missing",
    "otoroshi.next.plugins.MockResponse.body": "The body of the response",
    "otoroshi.next.plugins.MockResponse.headers": "The headers of the response",
    "otoroshi.next.plugins.MockResponse.method": "The method for the response",
    "otoroshi.next.plugins.MockResponse.path": "The path for the response",
    "otoroshi.next.plugins.MockResponse.status": "The status of the response",
    "otoroshi.next.plugins.MockResponses.passThrough": "Pass the call if no mocked response found",
    "otoroshi.next.plugins.MockResponses.responses": "Possible responses",
    "otoroshi.next.plugins.MockResponsesConfig.passThrough": "Pass the call if no mocked response found",
    "otoroshi.next.plugins.MockResponsesConfig.responses": "Possible responses",
    "otoroshi.next.plugins.NgAllowedMethodsConfig.allowed": "The list of allowed methods",
    "otoroshi.next.plugins.NgAllowedMethodsConfig.forbidden": "The list of forbidden methods",
    "otoroshi.next.plugins.NgApikeyCallsConfig.extractors": "Configuration of the apikey extraction modes",
    "otoroshi.next.plugins.NgApikeyCallsConfig.passWithUser": "Let the request pass if a user is connected",
    "otoroshi.next.plugins.NgApikeyCallsConfig.routing": "Use apikey for routing",
    "otoroshi.next.plugins.NgApikeyCallsConfig.validate": "Enabled quotas validation",
    "otoroshi.next.plugins.NgApikeyCallsConfig.wipeBackendRequest": "Removes the apikeys from the request to not forward it to the backend",
    "otoroshi.next.plugins.NgApikeyExtractorBasic.enabled": "Is it enabled",
    "otoroshi.next.plugins.NgApikeyExtractorBasic.headerName": "The name of the header to extract",
    "otoroshi.next.plugins.NgApikeyExtractorBasic.queryName": "The name of the query param to extract",
    "otoroshi.next.plugins.NgApikeyExtractorClientId.enabled": "Is it enabled",
    "otoroshi.next.plugins.NgApikeyExtractorClientId.headerName": "The name of the header to extract",
    "otoroshi.next.plugins.NgApikeyExtractorClientId.queryName": "The name of the query param to extract",
    "otoroshi.next.plugins.NgApikeyExtractorCustomHeaders.clientIdHeaderName": "Header name to extract client id",
    "otoroshi.next.plugins.NgApikeyExtractorCustomHeaders.clientSecretHeaderName": "Header name to extract client secret",
    "otoroshi.next.plugins.NgApikeyExtractorCustomHeaders.enabled": "Is it enabled",
    "otoroshi.next.plugins.NgApikeyExtractorJwt.cookieName": "The name of the cookies to extract",
    "otoroshi.next.plugins.NgApikeyExtractorJwt.enabled": "Is it enabled",
    "otoroshi.next.plugins.NgApikeyExtractorJwt.headerName": "The name of the header to extract",
    "otoroshi.next.plugins.NgApikeyExtractorJwt.includeRequestAttrs": "Does the jwt token need to include current request attributes to work",
    "otoroshi.next.plugins.NgApikeyExtractorJwt.keyPairSigned": "Is it asymmetricaly signed",
    "otoroshi.next.plugins.NgApikeyExtractorJwt.queryName": "The name of the query param to extract",
    "otoroshi.next.plugins.NgApikeyExtractorJwt.secretSigned": "Is it symmetricaly signed",
    "otoroshi.next.plugins.NgApikeyExtractors.basic": "basic auth extractor config.",
    "otoroshi.next.plugins.NgApikeyExtractors.clientId": "client id only extractor config.",
    "otoroshi.next.plugins.NgApikeyExtractors.customHeaders": "custom headers extractor config.",
    "otoroshi.next.plugins.NgApikeyExtractors.jwt": "jwt extractor config.",
    "otoroshi.next.plugins.NgApikeyMatcher.allMetaIn": "Matching on all metadata being present",
    "otoroshi.next.plugins.NgApikeyMatcher.allMetaKeysIn": "Matching on all metadata keys being present",
    "otoroshi.next.plugins.NgApikeyMatcher.allTagsIn": "Matching on all tags being present",
    "otoroshi.next.plugins.NgApikeyMatcher.enabled": "Tags and metadata matching enabled",
    "otoroshi.next.plugins.NgApikeyMatcher.noneMetaIn": "Matching on none metadata being present",
    "otoroshi.next.plugins.NgApikeyMatcher.noneMetaKeysIn": "Matching on none metadata keys being present",
    "otoroshi.next.plugins.NgApikeyMatcher.noneTagIn": "Matching on none tags being present",
    "otoroshi.next.plugins.NgApikeyMatcher.oneMetaIn": "Matching on none metadata being present",
    "otoroshi.next.plugins.NgApikeyMatcher.oneMetaKeyIn": "Matching on one metadata being present",
    "otoroshi.next.plugins.NgApikeyMatcher.oneTagIn": "Matching on one tag being present",
    "otoroshi.next.plugins.NgAuthModuleConfig.module": "The id of the auth. module",
    "otoroshi.next.plugins.NgAuthModuleConfig.passWithApikey": "Pass the request if an apikey is present",
    "otoroshi.next.plugins.NgBadResponse.body": "Body of the response",
    "otoroshi.next.plugins.NgBadResponse.headers": "headers of the response",
    "otoroshi.next.plugins.NgBadResponse.status": "status of the response",
    "otoroshi.next.plugins.NgBadResponsesFaultConfig.ratio": "bad response ratio",
    "otoroshi.next.plugins.NgBadResponsesFaultConfig.responses": "possible response",
    "otoroshi.next.plugins.NgCanarySettings.root": "Root for canary targets",
    "otoroshi.next.plugins.NgCanarySettings.targets": "Canary targets",
    "otoroshi.next.plugins.NgCanarySettings.traffic": "Traffic ratio for canary targets",
    "otoroshi.next.plugins.NgChaosConfig.badResponsesFaultConfig": "Config. for bad responses faults",
    "otoroshi.next.plugins.NgChaosConfig.largeRequestFaultConfig": "Config. for large request body faults",
    "otoroshi.next.plugins.NgChaosConfig.largeResponseFaultConfig": "Config. for large response faults",
    "otoroshi.next.plugins.NgChaosConfig.latencyInjectionFaultConfig": "Config. for latency injection faults",
    "otoroshi.next.plugins.NgCorsSettings.allowCredentials": "Allowed credentials",
    "otoroshi.next.plugins.NgCorsSettings.allowHeaders": "Allowed cors headers",
    "otoroshi.next.plugins.NgCorsSettings.allowMethods": "Allowed cors methods",
    "otoroshi.next.plugins.NgCorsSettings.allowOrigin": "Allowed cors origins",
    "otoroshi.next.plugins.NgCorsSettings.excludedPatterns": "Paths without cors",
    "otoroshi.next.plugins.NgCorsSettings.exposeHeaders": "Exposed cors headers",
    "otoroshi.next.plugins.NgCorsSettings.maxAge": "cors max age",
    "otoroshi.next.plugins.NgEndlessHttpResponseConfig.addresses": "IP address that will get endless responses",
    "otoroshi.next.plugins.NgEndlessHttpResponseConfig.finger": "Using emoji instead of 0 in the response",
    "otoroshi.next.plugins.NgGzipConfig.blackList": "Blocked mimetypes list",
    "otoroshi.next.plugins.NgGzipConfig.bufferSize": "Compressor buffer size",
    "otoroshi.next.plugins.NgGzipConfig.chunkedThreshold": "Chunk size",
    "otoroshi.next.plugins.NgGzipConfig.compressionLevel": "The compression level (1 to 9)",
    "otoroshi.next.plugins.NgGzipConfig.excludedPatterns": "The excluded path patterns",
    "otoroshi.next.plugins.NgGzipConfig.whiteList": "Allowed mimetypes list",
    "otoroshi.next.plugins.NgHeaderNamesConfig.names": "Name of the headers",
    "otoroshi.next.plugins.NgHeaderValuesConfig.headers": "Value of the headers",
    "otoroshi.next.plugins.NgIpAddressesConfig.addresses": "Ip addresses targeted",
    "otoroshi.next.plugins.NgJwtVerificationConfig.verifiers": "Id of the jwt verifiers",
    "otoroshi.next.plugins.NgLargeRequestFaultConfig.additionalRequestSize": "Amount of bytes added of the request body",
    "otoroshi.next.plugins.NgLargeRequestFaultConfig.ratio": "The ratio of requests impacted",
    "otoroshi.next.plugins.NgLargeResponseFaultConfig.additionalResponseSize": "Amount of bytes added of the response body",
    "otoroshi.next.plugins.NgLargeResponseFaultConfig.ratio": "The ratio of responses impacted",
    "otoroshi.next.plugins.NgLatencyInjectionFaultConfig.from": "Lower bound of latency injection",
    "otoroshi.next.plugins.NgLatencyInjectionFaultConfig.ratio": "The ratio of requests impacted",
    "otoroshi.next.plugins.NgLatencyInjectionFaultConfig.to": "Upper bound of latency injection",
    "otoroshi.next.plugins.NgOtoroshiChallengeConfig.raw": "Internal value",
    "otoroshi.next.plugins.NgOtoroshiInfoConfig.raw": "Internal value",
    "otoroshi.next.plugins.NgPublicPrivatePathsConfig.privatePatterns": "Paths that should have user or apikey to pass",
    "otoroshi.next.plugins.NgPublicPrivatePathsConfig.publicPatterns": "Paths that should not have user or apikey to pass",
    "otoroshi.next.plugins.NgPublicPrivatePathsConfig.strict": "apikey only",
    "otoroshi.next.plugins.NgRedirectionSettings.code": "Redirection status code used",
    "otoroshi.next.plugins.NgRedirectionSettings.to": "The redirection url",
    "otoroshi.next.plugins.NgRestrictionPath.method": "The http method (can be *)",
    "otoroshi.next.plugins.NgRestrictionPath.path": "The request path (can include domain)",
    "otoroshi.next.plugins.NgRestrictions.allowLast": "Evaluates allowed paths after forbidden and not found",
    "otoroshi.next.plugins.NgRestrictions.allowed": "Allowed paths",
    "otoroshi.next.plugins.NgRestrictions.forbidden": "Forbidden paths",
    "otoroshi.next.plugins.NgRestrictions.notFound": "Not found paths",
    "otoroshi.next.plugins.OtoroshiChallenge.raw": "Internal value",
    "otoroshi.next.plugins.OtoroshiInfos.raw": "Internal value",
    "otoroshi.next.plugins.PublicPrivatePaths.privatePatterns": "Paths that should have user or apikey to pass",
    "otoroshi.next.plugins.PublicPrivatePaths.publicPatterns": "Paths that should not have user or apikey to pass",
    "otoroshi.next.plugins.PublicPrivatePaths.strict": "apikey only",
    "otoroshi.next.plugins.QueryTransformer.remove": "Remove query params",
    "otoroshi.next.plugins.QueryTransformer.rename": "Rename query params to",
    "otoroshi.next.plugins.QueryTransformerConfig.remove": "Remove query params",
    "otoroshi.next.plugins.QueryTransformerConfig.rename": "Rename query params to",
    "otoroshi.next.plugins.RBAC.allow": "Allowed roles",
    "otoroshi.next.plugins.RBAC.allowAll": "Needs to have all allowed roles",
    "otoroshi.next.plugins.RBAC.apikeyPath": "Where to find role field in an apikey",
    "otoroshi.next.plugins.RBAC.deny": "Denied roles",
    "otoroshi.next.plugins.RBAC.denyAll": "Needs to have all denied roles",
    "otoroshi.next.plugins.RBAC.jwtPath": "Where to find role field in jwt token user",
    "otoroshi.next.plugins.RBAC.rolePrefix": "Optional value that will prefix roles in tokens",
    "otoroshi.next.plugins.RBAC.roles": "roles field name",
    "otoroshi.next.plugins.RBAC.userPath": "Where to find role field in a user",
    "otoroshi.next.plugins.RBACConfig.allow": "Allowed roles",
    "otoroshi.next.plugins.RBACConfig.allowAll": "Needs to have all allowed roles",
    "otoroshi.next.plugins.RBACConfig.apikeyPath": "Where to find role field in an apikey",
    "otoroshi.next.plugins.RBACConfig.deny": "Denied roles",
    "otoroshi.next.plugins.RBACConfig.denyAll": "Needs to have all denied roles",
    "otoroshi.next.plugins.RBACConfig.jwtPath": "Where to find role field in jwt token user",
    "otoroshi.next.plugins.RBACConfig.rolePrefix": "Optional value that will prefix roles in tokens",
    "otoroshi.next.plugins.RBACConfig.roles": "roles field name",
    "otoroshi.next.plugins.RBACConfig.userPath": "Where to find role field in a user",
    "otoroshi.next.plugins.Redirection.code": "Redirection status code used",
    "otoroshi.next.plugins.Redirection.to": "The redirection url",
    "otoroshi.next.plugins.RemoveHeadersIn.names": "Name of removed headers in request",
    "otoroshi.next.plugins.RemoveHeadersOut.names": "Name of removed headers in response",
    "otoroshi.next.plugins.RobotConfig.headerContent": "Content of the X-Robots-Tag headers",
    "otoroshi.next.plugins.RobotConfig.headerEnabled": "Header enabled",
    "otoroshi.next.plugins.RobotConfig.metaContent": "content of the <meta name='robots' /> tag",
    "otoroshi.next.plugins.RobotConfig.metaEnabled": "Meta tag enabled",
    "otoroshi.next.plugins.RobotConfig.robotEnabled": "/robots.txt enabled",
    "otoroshi.next.plugins.RobotConfig.robotTxtContent": "Content of /robots.txt",
    "otoroshi.next.plugins.Robots.headerContent": "Content of the X-Robots-Tag headers",
    "otoroshi.next.plugins.Robots.headerEnabled": "Header enabled",
    "otoroshi.next.plugins.Robots.metaContent": "content of the <meta name='robots' /> tag",
    "otoroshi.next.plugins.Robots.metaEnabled": "Meta tag enabled",
    "otoroshi.next.plugins.Robots.robotEnabled": "/robots.txt enabled",
    "otoroshi.next.plugins.Robots.robotTxtContent": "Content of /robots.txt",
    "otoroshi.next.plugins.RoutingRestrictions.allowLast": "Evaluates allowed paths after forbidden and not found",
    "otoroshi.next.plugins.RoutingRestrictions.allowed": "Allowed paths",
    "otoroshi.next.plugins.RoutingRestrictions.forbidden": "Forbidden paths",
    "otoroshi.next.plugins.RoutingRestrictions.notFound": "Not found paths",
    "otoroshi.next.plugins.SOAPAction.action": "The soap action if one",
    "otoroshi.next.plugins.SOAPAction.charset": "The body charset",
    "otoroshi.next.plugins.SOAPAction.convertRequestBodyToXml": "Convert json body to xml",
    "otoroshi.next.plugins.SOAPAction.envelope": "The soap envelope to call",
    "otoroshi.next.plugins.SOAPAction.jqRequestFilter": "JQ filter to transform request body",
    "otoroshi.next.plugins.SOAPAction.jqResponseFilter": "JQ filter to transform response body",
    "otoroshi.next.plugins.SOAPAction.preserveQuery": "Preserve query params",
    "otoroshi.next.plugins.SOAPAction.url": "SOAP endpoint",
    "otoroshi.next.plugins.SOAPActionConfig.action": "The soap action if one",
    "otoroshi.next.plugins.SOAPActionConfig.charset": "The body charset",
    "otoroshi.next.plugins.SOAPActionConfig.convertRequestBodyToXml": "Convert json body to xml",
    "otoroshi.next.plugins.SOAPActionConfig.envelope": "The soap envelope to call",
    "otoroshi.next.plugins.SOAPActionConfig.jqRequestFilter": "JQ filter to transform request body",
    "otoroshi.next.plugins.SOAPActionConfig.jqResponseFilter": "JQ filter to transform response body",
    "otoroshi.next.plugins.SOAPActionConfig.preserveQuery": "Preserve query params",
    "otoroshi.next.plugins.SOAPActionConfig.url": "SOAP endpoint",
    "otoroshi.next.plugins.SdkWrapper.config": "Internal component",
    "otoroshi.next.plugins.SnowMonkeyChaos.badResponsesFaultConfig": "Config. for bad responses faults",
    "otoroshi.next.plugins.SnowMonkeyChaos.largeRequestFaultConfig": "Config. for large request body faults",
    "otoroshi.next.plugins.SnowMonkeyChaos.largeResponseFaultConfig": "Config. for large response faults",
    "otoroshi.next.plugins.SnowMonkeyChaos.latencyInjectionFaultConfig": "Config. for latency injection faults",
    "otoroshi.next.plugins.StaticResponse.body": "Body of the response",
    "otoroshi.next.plugins.StaticResponse.headers": "Headers of the response",
    "otoroshi.next.plugins.StaticResponse.status": "Status of the response",
    "otoroshi.next.plugins.StaticResponseConfig.body": "Body of the response",
    "otoroshi.next.plugins.StaticResponseConfig.headers": "Headers of the response",
    "otoroshi.next.plugins.StaticResponseConfig.status": "Status of the response",
    "otoroshi.next.plugins.W3CTracing.baggage": "Support baggage",
    "otoroshi.next.plugins.W3CTracing.endpoint": "Endpoint of distributed tracing collection",
    "otoroshi.next.plugins.W3CTracing.kind": "Kind of distributed tracing collector (jaeger, zipkin)",
    "otoroshi.next.plugins.W3CTracing.timeout": "Request timeout",
    "otoroshi.next.plugins.W3CTracingConfig.baggage": "Support baggage",
    "otoroshi.next.plugins.W3CTracingConfig.endpoint": "Endpoint of distributed tracing collection",
    "otoroshi.next.plugins.W3CTracingConfig.kind": "Kind of distributed tracing collector (jaeger, zipkin)",
    "otoroshi.next.plugins.W3CTracingConfig.timeout": "Request timeout",
    "otoroshi.next.plugins.XmlToJsonRequest.filter": "JQ filter to transform request body",
    "otoroshi.next.plugins.XmlToJsonResponse.filter": "JQ filter to transform response body",
    "otoroshi.next.plugins.api.NgAccessContext.apikey": "The current apikey",
    "otoroshi.next.plugins.api.NgAccessContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgAccessContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgAccessContext.globalConfig": "The current global config",
    "otoroshi.next.plugins.api.NgAccessContext.report": "The current execution report",
    "otoroshi.next.plugins.api.NgAccessContext.route": "The current matched route",
    "otoroshi.next.plugins.api.NgAccessContext.sequence": "The current plugin sequence",
    "otoroshi.next.plugins.api.NgAccessContext.snowflake": "The current request snowflake",
    "otoroshi.next.plugins.api.NgAccessContext.user": "The current request user",
    "otoroshi.next.plugins.api.NgAfterRequestContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgAfterRequestContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgAfterRequestContext.globalConfig": "The current global config",
    "otoroshi.next.plugins.api.NgAfterRequestContext.route": "The current matched route",
    "otoroshi.next.plugins.api.NgAfterRequestContext.snowflake": "The current request snowflake",
    "otoroshi.next.plugins.api.NgBeforeRequestContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgBeforeRequestContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgBeforeRequestContext.globalConfig": "The current global config",
    "otoroshi.next.plugins.api.NgBeforeRequestContext.route": "The current matched route",
    "otoroshi.next.plugins.api.NgBeforeRequestContext.snowflake": "The current request snowflake",
    "otoroshi.next.plugins.api.NgMergedAccessValidator.plugins": "The current merged plugins",
    "otoroshi.next.plugins.api.NgMergedPreRouting.plugins": "The current merged plugins",
    "otoroshi.next.plugins.api.NgMergedRequestTransformer.plugins": "The current merged plugins",
    "otoroshi.next.plugins.api.NgMergedResponseTransformer.plugins": "The current merged plugins",
    "otoroshi.next.plugins.api.NgPluginHttpRequest.backend": "The current route backend",
    "otoroshi.next.plugins.api.NgPluginHttpRequest.headers": "The request headers",
    "otoroshi.next.plugins.api.NgPluginHttpRequest.method": "The request method",
    "otoroshi.next.plugins.api.NgPluginHttpRequest.url": "The request url",
    "otoroshi.next.plugins.api.NgPluginHttpRequest.version": "The request http version",
    "otoroshi.next.plugins.api.NgPluginHttpResponse.headers": "The response headers",
    "otoroshi.next.plugins.api.NgPluginHttpResponse.status": "The response status",
    "otoroshi.next.plugins.api.NgPreRoutingContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgPreRoutingContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgPreRoutingContext.globalConfig": "The current global config",
    "otoroshi.next.plugins.api.NgPreRoutingContext.report": "The current execution report",
    "otoroshi.next.plugins.api.NgPreRoutingContext.route": "The current matched route",
    "otoroshi.next.plugins.api.NgPreRoutingContext.sequence": "The current plugin sequence",
    "otoroshi.next.plugins.api.NgPreRoutingContext.snowflake": "The current request snowflake",
    "otoroshi.next.plugins.api.NgPreRoutingErrorRaw.code": "The error code",
    "otoroshi.next.plugins.api.NgPreRoutingErrorRaw.contentType": "The error content-type",
    "otoroshi.next.plugins.api.NgPreRoutingErrorRaw.headers": "The error headers",
    "otoroshi.next.plugins.api.NgRequestSinkContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgRequestSinkContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgRequestSinkContext.message": "The error message",
    "otoroshi.next.plugins.api.NgRequestSinkContext.origin": "The request origin",
    "otoroshi.next.plugins.api.NgRequestSinkContext.snowflake": "The current request snowflake",
    "otoroshi.next.plugins.api.NgRequestSinkContext.status": "The error http status code",
    "otoroshi.next.plugins.api.NgRouteMatcherContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgRouteMatcherContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgRouteMatcherContext.route": "The current matched route",
    "otoroshi.next.plugins.api.NgRouteMatcherContext.snowflake": "The current request snowflake",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.apikey": "The current apikey",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.callAttempts": "The current call attempts",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.globalConfig": "The current global config",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.maybeCauseId": "The current cause",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.message": "The current error message",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.otoroshiResponse": "The current otoroshi response",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.report": "The current execution report",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.route": "The current matched route",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.snowflake": "The current request snowflake",
    "otoroshi.next.plugins.api.NgTransformerErrorContext.user": "The current request user",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.apikey": "The current apikey",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.globalConfig": "The current global config",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.otoroshiRequest": "The current otoroshi request",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.rawRequest": "The current request",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.report": "The current execution report",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.route": "The current matched route",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.sequence": "The current plugin sequence",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.snowflake": "The current request snowflake",
    "otoroshi.next.plugins.api.NgTransformerRequestContext.user": "The current request user",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.apikey": "The current apikey",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.globalConfig": "The current global config",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.otoroshiResponse": "The current otoroshi response",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.rawResponse": "The current backend response",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.report": "The current execution report",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.route": "The current matched route",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.sequence": "The current plugin sequence",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.snowflake": "The current request snowflake",
    "otoroshi.next.plugins.api.NgTransformerResponseContext.user": "The current request user",
    "otoroshi.next.plugins.api.NgTunnelHandlerContext.attrs": "The current request attributes",
    "otoroshi.next.plugins.api.NgTunnelHandlerContext.config": "The current plugin config",
    "otoroshi.next.plugins.api.NgTunnelHandlerContext.route": "The current matched route",
    "otoroshi.next.plugins.api.NgTunnelHandlerContext.snowflake": "The current request snowflake",
    "otoroshi.next.proxy.NgExecutionReport.creation": "Date of creation",
    "otoroshi.next.proxy.NgExecutionReport.id": "Report id",
    "otoroshi.next.proxy.NgExecutionReport.reporting": "Reporting enabled",
    "otoroshi.next.proxy.NgReportPluginSequence.kind": "The kind of plugin sequence",
    "otoroshi.next.proxy.NgReportPluginSequence.plugins": "The possible plugins",
    "otoroshi.next.proxy.NgReportPluginSequence.size": "The number of plugins",
    "otoroshi.next.proxy.NgReportPluginSequence.start": "Start time",
    "otoroshi.next.proxy.NgReportPluginSequence.start_ns": "Start time in nanoseconds",
    "otoroshi.next.proxy.NgReportPluginSequence.stop": "Stop time",
    "otoroshi.next.proxy.NgReportPluginSequence.stop_ns": "Stop time in nanoseconds",
    "otoroshi.next.proxy.NgReportPluginSequenceItem.in": "Context in",
    "otoroshi.next.proxy.NgReportPluginSequenceItem.name": "Plugin name",
    "otoroshi.next.proxy.NgReportPluginSequenceItem.out": "Context out",
    "otoroshi.next.proxy.NgReportPluginSequenceItem.plugin": "Plugin id",
    "otoroshi.next.proxy.NgReportPluginSequenceItem.start": "Start time",
    "otoroshi.next.proxy.NgReportPluginSequenceItem.start_ns": "Start time in nanoseconds",
    "otoroshi.next.proxy.NgReportPluginSequenceItem.stop": "Stop time",
    "otoroshi.next.proxy.NgReportPluginSequenceItem.stop_ns": "Stop time in nanoseconds",
    "otoroshi.plugins.apikeys.BiscuitConf.checks": "Biscuit checks",
    "otoroshi.plugins.apikeys.BiscuitConf.facts": "Biscuit facts",
    "otoroshi.plugins.apikeys.BiscuitConf.privkey": "Biscuit private key",
    "otoroshi.plugins.apikeys.BiscuitConf.rules": "Biscuit rules",
    "otoroshi.plugins.apikeys.BiscuitConf.sealedToken": "Is it a sealed token",
    "otoroshi.plugins.apikeys.BiscuitConf.secret": "Biscuit secret",
    "otoroshi.plugins.apikeys.ClientCredentialFlowBody.bearerKind": "The kind of bearer",
    "otoroshi.plugins.apikeys.ClientCredentialFlowBody.clientId": "The request client id",
    "otoroshi.plugins.apikeys.ClientCredentialFlowBody.clientSecret": "The request client secret",
    "otoroshi.plugins.apikeys.ClientCredentialFlowBody.grantType": "The grand type (client_credentials)",
    "otoroshi.plugins.apikeys.ClientCredentialFlowBody.scope": "Scope of the request",
    "otoroshi.plugins.authcallers.BasicAuthCallerConfig.headerName": "Expected header name",
    "otoroshi.plugins.authcallers.BasicAuthCallerConfig.headerValueFormat": "Expected header format (to handle 'Basic ')",
    "otoroshi.plugins.authcallers.BasicAuthCallerConfig.password": "Expected password",
    "otoroshi.plugins.authcallers.BasicAuthCallerConfig.username": "Expected username",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.audience": "An optional audiance",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.cacheTokenSeconds": "How long will the token be cached before reaching out to the id server",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.clientId": "The client id",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.clientSecret": "The client secret",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.headerName": "The header name to pass the token",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.headerValueFormat": "The header format to pass the token",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.jsonPayload": "Use a json payload instead of a urlformencoded one",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.kind": "client_credentials or password",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.method": "Http method to talk with the id server",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.password": "Optional password for password flow",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.scope": "Optional request scope",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.tlsConfig": "Current tls config to talk to the id server",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.url": "Url of the id server",
    "otoroshi.plugins.authcallers.OAuth2CallerConfig.user": "Optional user for password flow",
    "otoroshi.plugins.biscuit.AccessValidatorContext.ctx": "Current context",
    "otoroshi.plugins.biscuit.BiscuitConfig.checks": "Biscuit checks",
    "otoroshi.plugins.biscuit.BiscuitConfig.enforce": "Enforce biscuit validation",
    "otoroshi.plugins.biscuit.BiscuitConfig.extractor": "Biscuit location (header, cookie, query)",
    "otoroshi.plugins.biscuit.BiscuitConfig.extractorName": "The name for the location",
    "otoroshi.plugins.biscuit.BiscuitConfig.facts": "Biscuit facts",
    "otoroshi.plugins.biscuit.BiscuitConfig.publicKey": "Biscuit public key for validation",
    "otoroshi.plugins.biscuit.BiscuitConfig.resources": "Biscuit resources",
    "otoroshi.plugins.biscuit.BiscuitConfig.rules": "Biscuit rules",
    "otoroshi.plugins.biscuit.BiscuitConfig.sealedToken": "Is it a sealed token",
    "otoroshi.plugins.biscuit.BiscuitConfig.secret": "Biscuit secret",
    "otoroshi.plugins.biscuit.PreRoutingVerifierContext.apk": "Current apikey",
    "otoroshi.plugins.biscuit.PreRoutingVerifierContext.ctx": "Current context",
    "otoroshi.plugins.biscuit.PubKeyBiscuitToken.token": "the current token",
    "otoroshi.plugins.biscuit.SealedBiscuitToken.token": "the current token",
    "otoroshi.plugins.cache.ResponseCacheConfig.json": "Config for response cache",
    "otoroshi.plugins.cache.ResponseCacheFilterConfig.json": "Config for response cache filter",
    "otoroshi.plugins.clientcert.SubIss.issuer": "The issuer DN",
    "otoroshi.plugins.clientcert.SubIss.sn": "The serial number of the current issuer",
    "otoroshi.plugins.clientcert.SubIss.subject": "The subject DN",
    "otoroshi.plugins.discovery.DiscoveryJobRegistrationId.id": "A service id",
    "otoroshi.plugins.discovery.DiscoveryJobServiceId.id": "A registration id",
    "otoroshi.plugins.discovery.SelfRegistrationConfig.raw": "Configuration for self registration",
    "otoroshi.plugins.external.ExternalHttpValidatorConfig.config": "Configuration for external http validation",
    "otoroshi.plugins.izanami.IzanamiCanaryConfig.configId": "Id of the target izanami configuration",
    "otoroshi.plugins.izanami.IzanamiCanaryConfig.experimentId": "Id of the target izanami experiment",
    "otoroshi.plugins.izanami.IzanamiCanaryConfig.izanamiClientId": "Izanami client id",
    "otoroshi.plugins.izanami.IzanamiCanaryConfig.izanamiClientSecret": "Izanami client secret",
    "otoroshi.plugins.izanami.IzanamiCanaryConfig.izanamiUrl": "Izanami server url",
    "otoroshi.plugins.izanami.IzanamiCanaryConfig.mtls": "Izanami server tls config",
    "otoroshi.plugins.izanami.IzanamiCanaryConfig.routeConfig": "The actual routing config",
    "otoroshi.plugins.izanami.IzanamiCanaryConfig.timeout": "Timeout when talking to the izanami server",
    "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfig.routes": "Possible routes",
    "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute.default": "The default variant",
    "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute.exact": "Exact match",
    "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute.regex": "Regex match",
    "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute.route": "The route path",
    "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute.variants": "The possible variant",
    "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute.wildcard": "Wildcard match",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.autoContext": "Automatically pass the current user and/or apikey as context",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.configPattern": "the searched pattern for config",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.configurationEnabled": "Is configuration proxy enabled",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.featurePattern": "the searched pattern for features",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.featuresEnabled": "Is features proxy enabled",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.featuresWithContextEnabled": "Is contextual features enabled ?",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.izanamiClientId": "Izanami client id",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.izanamiClientSecret": "Izanami client secret",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.izanamiUrl": "Izanami server url",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.mtls": "Izanami server tls config",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.path": "Izanami server path",
    "otoroshi.plugins.izanami.IzanamiProxyConfig.timeout": "Timeout when talking to the izanami server",
    "otoroshi.plugins.jobs.kubernetes.CRDContext.kubernetes": "Resources from kubernetes",
    "otoroshi.plugins.jobs.kubernetes.CRDContext.otoroshi": "Resources from otoroshi",
    "otoroshi.plugins.jobs.kubernetes.ClientSupport.client": "The actual kubernetes client",
    "otoroshi.plugins.jobs.kubernetes.ClientSupport.env": "The current env",
    "otoroshi.plugins.jobs.kubernetes.FailedCrdParsing.crd": "The failed crd",
    "otoroshi.plugins.jobs.kubernetes.FailedCrdParsing.customizedSpec": "The spec to customize",
    "otoroshi.plugins.jobs.kubernetes.FailedCrdParsing.error": "The actual error",
    "otoroshi.plugins.jobs.kubernetes.FailedCrdParsing.namespace": "The namespace of the error",
    "otoroshi.plugins.jobs.kubernetes.FailedCrdParsing.pluralName": "The plural name of the resources",
    "otoroshi.plugins.jobs.kubernetes.KubernetesClient.config": "The current client config.",
    "otoroshi.plugins.jobs.kubernetes.KubernetesClient.env": "The current env",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.caCert": "The kubernetes cacert",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.clusterDomain": "The current kubernetes cluster domain",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.coreDnsConfigMapName": "The name of the coredns config-map",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.coreDnsDeploymentName": "The name of the coredns deployment",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.coreDnsEnv": "Domain name prefix",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.coreDnsIntegration": "Enable coredns integration",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.coreDnsIntegrationDryRun": "Do not modify coredns config automatically",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.corednsPort": "Port of coredns",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.crds": "Enabled crds integration",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.defaultGroup": "Otoroshi groups where ingress services will be created",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.endpoint": "Kube API endpoint",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.image": "Sidecar image",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.ingressClasses": "Ingress classes watched by otoroshi ingress controller",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.ingressEndpointHostname": "--",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.ingressEndpointIp": "--",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.ingressEndpointPublishedService": "--",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.ingresses": "Enable ingress controller",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.kubeDnsOperatorCoreDnsName": "Kube dns name",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.kubeDnsOperatorCoreDnsNamespace": "Kube dns namespace",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.kubeDnsOperatorCoreDnsPort": "Kube dns port number",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.kubeDnsOperatorIntegration": "Enable the legacy kubedns operator integration",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.kubeLeader": "Use kubernetes to select a leader",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.kubeSystemNamespace": "The namespace containing coredns",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.labels": "Kubernetes entities with those labels will be query",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.meshDomain": "The domain used for service mesh",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.mutatingWebhookName": "Sidecar webhook name",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.namespaces": "Kubernetes namespaces that will be query",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.namespacesLabels": "Kubernetes namespaces with those labels that will be query",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.openshiftDnsOperatorCleanup": "Cleanup DNS operator",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.openshiftDnsOperatorCleanupDomains": "Cleanup DNS operator based on domains",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.openshiftDnsOperatorCleanupNames": "Cleanup DNS operator based on names",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.openshiftDnsOperatorCoreDnsName": "DNS operator name",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.openshiftDnsOperatorCoreDnsNamespace": "DNS operator namespace",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.openshiftDnsOperatorCoreDnsPort": "DNS operator port number",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.openshiftDnsOperatorIntegration": "Enable the openshift operator integration",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.otoroshiNamespace": "The namespace where otoroshi is deployed",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.otoroshiServiceName": "The service name for otoroshi",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.restartDependantDeployments": "If enabled, deployments dependant to otoroshi managed secrets (apikeys, certs) will be automatically restarted as secrets are updated",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.syncDaikokuApikeysOnly": "Sync only daikoku apikeys",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.syncIntervalSeconds": "Number of seconds between syncs",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.templates": "Templates for created entities",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.token": "Kube API access token",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.triggerHost": "--",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.triggerKey": "--",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.triggerPath": "--",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.trust": "Trust Kube CA",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.useProxyState": "Use proxy state instead of loading everything from datastore",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.userPassword": "Optional username/password to access kube api",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.validatingWebhookName": "The name of the validating webhook",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.watch": "Enabled resources watch",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.watchGracePeriodSeconds": "The number of second to wait between receiving a change event and the actual sync",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfig.watchTimeoutSeconds": "The timeout to call a watch resources",
    "otoroshi.plugins.jobs.kubernetes.KubernetesConfigMap.raw": "kubernetes resource of kind config map",
    "otoroshi.plugins.jobs.kubernetes.KubernetesDeployment.raw": "kubernetes resource of kind deployment",
    "otoroshi.plugins.jobs.kubernetes.KubernetesEndpoint.raw": "kubernetes resource of kind endpoint",
    "otoroshi.plugins.jobs.kubernetes.KubernetesIngress.raw": "kubernetes resource of kind ingress",
    "otoroshi.plugins.jobs.kubernetes.KubernetesIngressClass.raw": "kubernetes resource of kind ingressclass",
    "otoroshi.plugins.jobs.kubernetes.KubernetesMutatingWebhookConfiguration.raw": "kubernetes resource of kind mutating webhook configuration",
    "otoroshi.plugins.jobs.kubernetes.KubernetesOpenshiftDnsOperator.raw": "kubernetes resource of kind OpenshiftOperator",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.apiKeys": "template for entities apiKeys",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.authModules": "template for entities authModules",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.backends": "template for entities backends",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.certificates": "template for entities certificates",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.dataExporters": "template for entities dataExporters",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.globalConfigs": "template for entities globalConfigs",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.jwtVerifiers": "template for entities jwtVerifiers",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.routes": "template for entities routes",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.scripts": "template for entities scripts",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.serviceDescriptors": "template for entities serviceDescriptors",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.serviceGroups": "template for entities serviceGroups",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.services": "template for entities services",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.simpleAdmins": "template for entities simpleAdmins",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.targets": "template for entities targets",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.tcpServices": "template for entities tcpServices",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.teams": "template for entities teams",
    "otoroshi.plugins.jobs.kubernetes.KubernetesResourcesContext.tenants": "template for entities tenants",
    "otoroshi.plugins.jobs.kubernetes.KubernetesService.raw": "kubernetes resource of kind service",
    "otoroshi.plugins.jobs.kubernetes.KubernetesValidatingWebhookConfiguration.raw": "kubernetes resource of kind validating webhook configuration",
    "otoroshi.plugins.jobs.kubernetes.OtoAnnotationConfig.annotations": "Internal api",
    "otoroshi.plugins.jobs.kubernetes.OtoResHolder.raw": "Internal api",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.apiKeys": "template for entities apiKeys",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.authModules": "template for entities authModules",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.backends": "template for entities backends",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.certificates": "template for entities certificates",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.dataExporters": "template for entities dataExporters",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.globalConfigs": "template for entities globalConfigs",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.jwtVerifiers": "template for entities jwtVerifiers",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.routes": "template for entities routes",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.scripts": "template for entities scripts",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.serviceDescriptors": "template for entities serviceDescriptors",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.serviceGroups": "template for entities serviceGroups",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.services": "template for entities services",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.simpleAdmins": "template for entities simpleAdmins",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.targets": "template for entities targets",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.tcpServices": "template for entities tcpServices",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.teams": "template for entities teams",
    "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext.tenants": "template for entities tenants",
    "otoroshi.plugins.log4j.Log4jExpression.parts": "parts of a log4j expression",
    "otoroshi.plugins.log4j.Log4jExpressionText.value": "A parsed text for log4jshell evaluation",
    "otoroshi.plugins.loggers.BodyLoggerConfig.json": "The current config",
    "otoroshi.plugins.loggers.BodyLoggerFilterConfig.json": "The current config",
    "otoroshi.plugins.loggers.RequestBodyEvent.from": "The incoming request ip address",
    "otoroshi.plugins.loggers.RequestBodyEvent.headers": "The request headers",
    "otoroshi.plugins.loggers.RequestBodyEvent.method": "The request method",
    "otoroshi.plugins.loggers.RequestBodyEvent.reqId": "The request id",
    "otoroshi.plugins.loggers.RequestBodyEvent.ua": "The user agent",
    "otoroshi.plugins.loggers.RequestBodyEvent.url": "The request url",
    "otoroshi.plugins.loggers.ResponseBodyEvent.from": "The incoming request ip address",
    "otoroshi.plugins.loggers.ResponseBodyEvent.headers": "The response headers",
    "otoroshi.plugins.loggers.ResponseBodyEvent.method": "The request method",
    "otoroshi.plugins.loggers.ResponseBodyEvent.reqId": "The request id",
    "otoroshi.plugins.loggers.ResponseBodyEvent.status": "The response status",
    "otoroshi.plugins.loggers.ResponseBodyEvent.ua": "The user agent",
    "otoroshi.plugins.loggers.ResponseBodyEvent.url": "The request url",
    "otoroshi.plugins.mirror.MirroringEvent.ctx": "Current request context",
    "otoroshi.plugins.mirror.MirroringPluginConfig.conf": "Current conf",
    "otoroshi.plugins.mirror.RequestContext.config": "Current plugin config",
    "otoroshi.plugins.mirror.RequestContext.descriptor": "Current descriptor",
    "otoroshi.plugins.mirror.RequestContext.id": "The id of the request",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.dailyQuota": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.enabled": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.excludedPatterns": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.headerName": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.localVerificationOnly": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.mode": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.monthlyQuota": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.oidcConfigRef": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.quotasEnabled": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.roles": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.rolesPath": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.scopes": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.throttlingQuota": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.ttl": "deprecated",
    "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig.uniqueApiKey": "deprecated",
    "otoroshi.plugins.quotas.ServiceQuotasConfig.dailyQuota": "Daily calls quota",
    "otoroshi.plugins.quotas.ServiceQuotasConfig.monthlyQuota": "Monthly calls quota",
    "otoroshi.plugins.quotas.ServiceQuotasConfig.throttlingQuota": "Calls quota per second",
    "otoroshi.script.AccessContext.apikey": "The current apikey",
    "otoroshi.script.AccessContext.attrs": "The current request attributes",
    "otoroshi.script.AccessContext.config": "The current plugin config.",
    "otoroshi.script.AccessContext.descriptor": "The current service descriptor",
    "otoroshi.script.AccessContext.globalConfig": "The current global config",
    "otoroshi.script.AccessContext.index": "The current plugin index",
    "otoroshi.script.AccessContext.snowflake": "The current request snowflake",
    "otoroshi.script.AccessContext.user": "The current user",
    "otoroshi.script.AccessValidatorRef.config": "Access validator plugins configuration",
    "otoroshi.script.AccessValidatorRef.enabled": "Access validator plugins enabled",
    "otoroshi.script.AccessValidatorRef.excludedPatterns": "Excluded paths",
    "otoroshi.script.AccessValidatorRef.refs": "Enabled plugins",
    "otoroshi.script.PreRoutingContext.attrs": "The current request attributes",
    "otoroshi.script.PreRoutingContext.config": "The current plugin config.",
    "otoroshi.script.PreRoutingContext.descriptor": "The current service descriptor",
    "otoroshi.script.PreRoutingContext.globalConfig": "The current global config",
    "otoroshi.script.PreRoutingContext.index": "The current plugin index",
    "otoroshi.script.PreRoutingContext.snowflake": "The current request snowflake",
    "otoroshi.script.PreRoutingRef.config": "pre-routing plugins configuration",
    "otoroshi.script.PreRoutingRef.enabled": "pre-routing plugins enabled",
    "otoroshi.script.PreRoutingRef.excludedPatterns": "Excluded paths",
    "otoroshi.script.PreRoutingRef.refs": "Enabled plugins",
    "otoroshi.script.Script.code": "The code of the script",
    "otoroshi.script.Script.desc": "The description of the script",
    "otoroshi.script.Script.id": "The id of the script",
    "otoroshi.script.Script.location": "Entity location",
    "otoroshi.script.Script.metadata": "Entity metadata",
    "otoroshi.script.Script.name": "The name of the script",
    "otoroshi.script.Script.tags": "Entity tags",
    "otoroshi.script.Script.type": "Plugin type",
    "otoroshi.script.plugins.Plugins.config": "Plugins configuration",
    "otoroshi.script.plugins.Plugins.enabled": "Plugins enabled",
    "otoroshi.script.plugins.Plugins.excluded": "Excluded paths",
    "otoroshi.script.plugins.Plugins.refs": "Enabled plugins",
    "otoroshi.ssl.Cert.autoRenew": "Auto renew cert",
    "otoroshi.ssl.Cert.ca": "Is cert a CA ?",
    "otoroshi.ssl.Cert.caRef": "Reference to the CA (if any)",
    "otoroshi.ssl.Cert.chain": "Certicates chain (PEM encoded)",
    "otoroshi.ssl.Cert.client": "Is cert a client cert ?",
    "otoroshi.ssl.Cert.description": "Entity description",
    "otoroshi.ssl.Cert.domain": "Certificate domain",
    "otoroshi.ssl.Cert.entityMetadata": "Entity metadata",
    "otoroshi.ssl.Cert.exposed": "Is the cert exposed (public key exposed in jwks.json)",
    "otoroshi.ssl.Cert.from": "Start date",
    "otoroshi.ssl.Cert.id": "Entity id",
    "otoroshi.ssl.Cert.keypair": "Is cert used for its keypair only ?",
    "otoroshi.ssl.Cert.letsEncrypt": "Let's encrypt (ACME) generated",
    "otoroshi.ssl.Cert.location": "Entity location",
    "otoroshi.ssl.Cert.name": "Entity name",
    "otoroshi.ssl.Cert.password": "Certificate password",
    "otoroshi.ssl.Cert.privateKey": "Certificate private key (PEM encoded)",
    "otoroshi.ssl.Cert.revoked": "Certificate is revoked",
    "otoroshi.ssl.Cert.sans": "Certificate SANs",
    "otoroshi.ssl.Cert.selfSigned": "Is cert self signed",
    "otoroshi.ssl.Cert.subject": "Certificate subject",
    "otoroshi.ssl.Cert.tags": "Entity tags",
    "otoroshi.ssl.Cert.to": "Stop date",
    "otoroshi.ssl.Cert.valid": "Is cert valid",
    "otoroshi.ssl.pki.models.GenCertResponse.ca": "Ca cert (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.caChain": "Ca chain (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.cert": "Cert (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.csr": "CSR (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.csrQuery": "JSON generation query",
    "otoroshi.ssl.pki.models.GenCertResponse.key": "Private key (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCertResponse.serial": "Certificate serial number",
    "otoroshi.ssl.pki.models.GenCsrQuery.ca": "Is cert ca ?",
    "otoroshi.ssl.pki.models.GenCsrQuery.client": "Is cert client ?",
    "otoroshi.ssl.pki.models.GenCsrQuery.digestAlg": "Digest algo",
    "otoroshi.ssl.pki.models.GenCsrQuery.duration": "Certificate lifespan",
    "otoroshi.ssl.pki.models.GenCsrQuery.existingSerialNumber": "",
    "otoroshi.ssl.pki.models.GenCsrQuery.hosts": "Certificate SANs",
    "otoroshi.ssl.pki.models.GenCsrQuery.includeAIA": "Include AIA extension (if generated from otoroshi CA)",
    "otoroshi.ssl.pki.models.GenCsrQuery.key": "Keypair specs",
    "otoroshi.ssl.pki.models.GenCsrQuery.name": "Certificate name",
    "otoroshi.ssl.pki.models.GenCsrQuery.signatureAlg": "Signature algorithm",
    "otoroshi.ssl.pki.models.GenCsrQuery.subject": "Certificate subject",
    "otoroshi.ssl.pki.models.GenCsrResponse.csr": "CSR (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCsrResponse.privateKey": "Private key (PEM encoded)",
    "otoroshi.ssl.pki.models.GenCsrResponse.publicKey": "Public key (PEM encoded)",
    "otoroshi.ssl.pki.models.GenKeyPairQuery.algo": "Keypair algorithm",
    "otoroshi.ssl.pki.models.GenKeyPairQuery.size": "Keypair size",
    "otoroshi.ssl.pki.models.GenKeyPairResponse.privateKey": "Private key (PEM encoded)",
    "otoroshi.ssl.pki.models.GenKeyPairResponse.publicKey": "Public key (PEM encoded)",
    "otoroshi.ssl.pki.models.SignCertResponse.ca": "Ca cert (PEM encoded)",
    "otoroshi.ssl.pki.models.SignCertResponse.cert": "Cert (PEM encoded)",
    "otoroshi.ssl.pki.models.SignCertResponse.csr": "CSR (PEM encoded)",
    "otoroshi.storage.drivers.inmemory.ModernSwappableInMemoryRedis.env": "The current env",
    "otoroshi.storage.drivers.inmemory.SwappableInMemoryRedis.env": "The current env",
    "otoroshi.storage.drivers.mongo.MongoRedis.dbName": "The current db name",
    "otoroshi.storage.drivers.reactivepg.ReactivePgRedis.avoidJsonPath": "Avoid using jsonpath operators",
    "otoroshi.storage.drivers.rediscala.RedisCommandsStore.cluster": "Is redis clustered",
    "otoroshi.tcp.SniSettings.enabled": "SNI extraction enabled",
    "otoroshi.tcp.SniSettings.forwardIfNoMatch": "",
    "otoroshi.tcp.SniSettings.forwardsTo": "forwards call to",
    "otoroshi.tcp.TcpRule.domain": "match on SNI domain",
    "otoroshi.tcp.TcpRule.targets": "TCP targets",
    "otoroshi.tcp.TcpService.clientAuth": "Use client authentication",
    "otoroshi.tcp.TcpService.description": "Entity description",
    "otoroshi.tcp.TcpService.enabled": "Service enabled",
    "otoroshi.tcp.TcpService.id": "Entity id",
    "otoroshi.tcp.TcpService.interface": "Network interface",
    "otoroshi.tcp.TcpService.location": "Entity location",
    "otoroshi.tcp.TcpService.metadata": "Entity metadata",
    "otoroshi.tcp.TcpService.name": "Entity name",
    "otoroshi.tcp.TcpService.port": "network port",
    "otoroshi.tcp.TcpService.rules": "Routing rules",
    "otoroshi.tcp.TcpService.sni": "SNI settings",
    "otoroshi.tcp.TcpService.tags": "Entity tags",
    "otoroshi.tcp.TcpService.tls": "TLS mode",
    "otoroshi.tcp.TcpTarget.host": "Target host",
    "otoroshi.tcp.TcpTarget.ip": "Target ip",
    "otoroshi.tcp.TcpTarget.port": "Target port",
    "otoroshi.tcp.TcpTarget.tls": "Use tls",
    "otoroshi.utils.gzip.GzipConfig.blackList": "blocklisted content types",
    "otoroshi.utils.gzip.GzipConfig.bufferSize": "Buffer size in bytes",
    "otoroshi.utils.gzip.GzipConfig.chunkedThreshold": "Chunk size",
    "otoroshi.utils.gzip.GzipConfig.compressionLevel": "Compression level (0 - 9)",
    "otoroshi.utils.gzip.GzipConfig.enabled": "Gzip enabled",
    "otoroshi.utils.gzip.GzipConfig.excludedPatterns": "Excluded paths",
    "otoroshi.utils.gzip.GzipConfig.whiteList": "allow listed content types",
    "otoroshi.utils.http.CacheConnectionSettings.enabled": "Enable Cached connections at host tevel",
    "otoroshi.utils.http.CacheConnectionSettings.queueSize": "The size for the request queue",
    "otoroshi.utils.http.DN.raw": "The raw textual value of a DN",
    "otoroshi.utils.http.MtlsConfig.certs": "Trusted cert. ids",
    "otoroshi.utils.http.MtlsConfig.loose": "Loose verification",
    "otoroshi.utils.http.MtlsConfig.mtls": "Enabled",
    "otoroshi.utils.http.MtlsConfig.trustAll": "Trust any certificate",
    "otoroshi.utils.http.MtlsConfig.trustedCerts": "Trusted cert. ids",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.contacts": "Let's encrypt (ACME) contacts",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.emails": "Let's encrypt (ACME) contact emails",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.enabled": "Let's encrypt (ACME) enabled",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.privateKey": "Let's encrypt (ACME) private key",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.publicKey": "Let's encrypt (ACME) public key",
    "otoroshi.utils.letsencrypt.LetsEncryptSettings.server": "Let's encrypt (ACME) server",
    "otoroshi.utils.mailer.EmailLocation.email": "Email address",
    "otoroshi.utils.mailer.EmailLocation.name": "Destination name",
    "otoroshi.utils.mailer.GenericMailerSettings.headers": "Sender headers",
    "otoroshi.utils.mailer.GenericMailerSettings.to": "Destination email address",
    "otoroshi.utils.mailer.GenericMailerSettings.url": "Sender URL",
    "otoroshi.utils.mailer.MailgunSettings.apiKey": "Mailgun apikey",
    "otoroshi.utils.mailer.MailgunSettings.domain": "Mailgun domain",
    "otoroshi.utils.mailer.MailgunSettings.eu": "European tenant",
    "otoroshi.utils.mailer.MailgunSettings.to": "Destination email address",
    "otoroshi.utils.mailer.MailjetSettings.apiKeyPrivate": "Private key",
    "otoroshi.utils.mailer.MailjetSettings.apiKeyPublic": "Public key",
    "otoroshi.utils.mailer.MailjetSettings.to": "Destination email address",
    "otoroshi.utils.mailer.SendgridSettings.apiKey": "Sendgrid apikey",
    "otoroshi.utils.mailer.SendgridSettings.to": "Destination email address",
    "tags.admin-sessions": "???",
    "tags.admins": "???",
    "tags.analytics": "???",
    "tags.apikeys": "???",
    "tags.apps-sessions": "???",
    "tags.auth-modules": "???",
    "tags.certificates": "???",
    "tags.cluster": "???",
    "tags.data-exporters": "???",
    "tags.events": "???",
    "tags.experimental": "???",
    "tags.globalconfig": "???",
    "tags.groups": "???",
    "tags.import-export": "???",
    "tags.jwt-verifiers": "???",
    "tags.lines": "???",
    "tags.live": "???",
    "tags.organizations": "???",
    "tags.pki": "???",
    "tags.privateapps": "???",
    "tags.scripts": "???",
    "tags.services": "???",
    "tags.snowmonkey": "???",
    "tags.tcp": "???",
    "tags.teams": "???",
    "tags.templates": "???"
  },
  "add_schemas":   {
    "otoroshi.auth.AuthModuleConfig" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.auth.BasicAuthModuleConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.auth.GenericOauth2ModuleConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.auth.LdapAuthModuleConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.auth.Oauth1ModuleConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.auth.SamlAuthModuleConfig"
      } ]
    },
    "play.api.libs.ws.DefaultWSProxyServer" : {
      "type" : "object",
      "properties" : {
        "host" : {
          "type" : "string",
          "description" : "The hostname of the proxy server."
        },
        "port" : {
          "type" : "string",
          "description" : "The port of the proxy server."
        },
        "protocol" : {
          "type" : "string",
          "description" : "The protocol of the proxy server.  Use \"http\" or \"https\".  Defaults to \"http\" if not specified."
        },
        "principal" : {
          "type" : "string",
          "description" : "The principal (aka username) of the credentials for the proxy server."
        },
        "password" : {
          "type" : "string",
          "description" : "The password for the credentials for the proxy server."
        },
        "ntlmDomain" : {
          "type" : "string",
          "description" : "The ntlm domain for the proxy server."
        },
        "encoding" : {
          "type" : "string",
          "description" : "The realm's charset."
        },
        "nonProxyHosts" : {
          "type" : "string",
          "description" : "The non proxied hosts"
        }
      },
      "description" : "Proxy server"
    },
    "play.api.libs.ws.WSProxyServer" : {
      "type" : "object",
      "properties" : {
        "host" : {
          "type" : "string",
          "description" : "The hostname of the proxy server."
        },
        "port" : {
          "type" : "string",
          "description" : "The port of the proxy server."
        },
        "protocol" : {
          "type" : "string",
          "description" : "The protocol of the proxy server.  Use \"http\" or \"https\".  Defaults to \"http\" if not specified."
        },
        "principal" : {
          "type" : "string",
          "description" : "The principal (aka username) of the credentials for the proxy server."
        },
        "password" : {
          "type" : "string",
          "description" : "The password for the credentials for the proxy server."
        },
        "ntlmDomain" : {
          "type" : "string",
          "description" : "The ntlm domain for the proxy server."
        },
        "encoding" : {
          "type" : "string",
          "description" : "The realm's charset."
        },
        "nonProxyHosts" : {
          "type" : "string",
          "description" : "The non proxied hosts"
        }
      },
      "description" : "Proxy server"
    },
    "PatchDocument" : {
      "type" : "object",
      "description" : "A JSONPatch document as defined by RFC 6902",
      "required" : [ "op", "path" ],
      "properties" : {
        "op" : {
          "type" : "string",
          "description" : "The operation to be performed",
          "enum" : [ "add", "remove", "replace", "move", "copy", "test" ]
        },
        "path" : {
          "type" : "string",
          "description" : "A JSON-Pointer"
        },
        "value" : {
          "type" : "object",
          "description" : "The value to be used within the operations."
        },
        "from" : {
          "type" : "string",
          "description" : "A string containing a JSON Pointer value."
        }
      }
    },
    "PatchBody" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/PatchDocument"
      }
    },
    "BulkBody" : {
      "type" : "string",
      "description" : "Body composed of stringified JSON lines, each one representing an entity"
    },
    "BulkPatchBody" : {
      "type" : "array",
      "description" : "Body composed of stringified JSON-Patch lines, each one representing updates to an entity",
      "items" : {
        "$ref" : "#/components/schemas/PatchDocument"
      }
    },
    "Unknown" : {
      "type" : "object",
      "description" : "value used by the openapi generator when no matching type found. Should be fixed in a near future."
    },
    "Any" : {
      "oneOf" : [ {
        "type" : "object"
      }, {
        "type" : "array"
      }, {
        "type" : "string"
      }, {
        "type" : "boolean"
      }, {
        "type" : "number"
      }, {
        "type" : "integer"
      } ]
    },
    "Null" : {
      "type" : "object",
      "description" : "no value object, used to represent a None option value"
    },
    "Empty" : {
      "type" : "object",
      "description" : "an empty body. Useful for RPC like endpoints"
    },
    "ErrorResponse" : {
      "type" : "object",
      "description" : "Typical error returned by otoroshi",
      "properties" : {
        "error" : {
          "type" : "string",
          "description" : "the error name"
        },
        "error_description" : {
          "type" : "string",
          "description" : "A short description of the error if one"
        },
        "Otoroshi-Error" : {
          "type" : "string",
          "description" : "sometimes, the error name is here"
        },
        "Otoroshi-Error-Msg" : {
          "type" : "string",
          "description" : "sometimes, the error description is here"
        }
      }
    },
    "BulkResponseBody" : {
      "type" : "array",
      "items" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "the id of the entity"
          },
          "status" : {
            "type" : "integer",
            "description" : "operation status"
          },
          "error" : {
            "type" : "string",
            "description" : "the error of the operation if one"
          }
        },
        "required" : [ "uid", "status" ]
      }
    },
    "otoroshi.models.AlgoSettings" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.ESAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ESKPAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.HSAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.JWKSAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.KidAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RSAKPAlgoSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RSAlgoSettings"
      } ]
    },
    "otoroshi.models.ServiceDescriptorIdentifier" : {
      "type" : "string",
      "description" : "the id of a service prefixed by 'service_'"
    },
    "otoroshi.models.ServiceGroupIdentifier" : {
      "type" : "string",
      "description" : "the id of a group prefixed by 'group_'"
    },
    "otoroshi.models.EntityIdentifier" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptorIdentifier"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ServiceGroupIdentifier"
      } ]
    },
    "otoroshi.models.DataExporterConfigType" : {
      "type" : "string",
      "enum" : [ "kafka", "pulsar", "elastic", "webhook", "file", "mailer", "custom", "none", "console", "metrics" ],
      "description" : "Type of data exporter"
    },
    "otoroshi.models.Exporter" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.events.KafkaConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.events.PulsarConfig"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ConsoleSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ElasticAnalyticsConfig"
      }, {
        "$ref" : "#/components/schemas/Null"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ExporterRef"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.FileSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.MetricsSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.Webhook"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.ConsoleMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.GenericMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailgunSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailjetSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.NoneMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.SendgridSettings"
      } ]
    },
    "otoroshi.models.JwtTokenLocation" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.InCookie"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.InHeader"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.InQueryParam"
      } ]
    },
    "otoroshi.models.VerifierStrategy" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.DefaultToken"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.PassThrough"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.Sign"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.Transform"
      } ]
    },
    "otoroshi.models.OtoroshiAdmin" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
      } ]
    },
    "otoroshi.models.TargetPredicate" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.AlwaysMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.DataCenterMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.GeolocationMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.InfraProviderMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.NetworkLocationMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RackMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RegionMatch"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.ZoneMatch"
      } ]
    },
    "otoroshi.models.TenantId" : {
      "type" : "string",
      "description" : "organization id"
    },
    "otoroshi.models.TeamId" : {
      "type" : "string",
      "description" : "team id"
    },
    "otoroshi.models.AlwaysMatch" : {
      "type" : "object",
      "description" : "Always select target",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "Always" ]
        }
      }
    },
    "otoroshi.models.SecComInfoTokenVersion" : {
      "type" : "string",
      "enum" : [ "Legacy", "Latest" ],
      "description" : "Version of the info token"
    },
    "otoroshi.models.SecComVersion" : {
      "type" : "string",
      "enum" : [ "V1", "v2" ],
      "description" : "Version of the challenge token"
    },
    "otoroshi.models.LoadBalancing" : {
      "type" : "object",
      "description" : "Loadbalancing strategy",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
        },
        "ratio" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "otoroshi.models.JwtVerifier" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.LocalJwtVerifier"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.RefJwtVerifier"
      } ]
    },
    "otoroshi.models.OtoroshiAdminType" : {
      "type" : "string",
      "enum" : [ "SIMPLE", "WEBAUTHN" ],
      "description" : "Admin kind"
    },
    "otoroshi.script.PluginType" : {
      "type" : "string",
      "enum" : [ "app", "transformer", "validator", "preroute", "sink", "listener", "job", "exporter" ],
      "description" : "Plugin kind"
    },
    "otoroshi.ssl.ClientAuth" : {
      "type" : "string",
      "enum" : [ "Need", "None", "Want" ],
      "description" : "Client authentication mode"
    },
    "otoroshi.tcp.TlsMode" : {
      "type" : "string",
      "enum" : [ "Disabled", "Enabled", "PassThrough" ],
      "description" : "TLS mode"
    },
    "otoroshi.models.GeolocationSettings" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.models.IpStackGeolocationSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.MaxmindGeolocationSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.models.NoneGeolocationSettings"
      } ]
    },
    "otoroshi.models.NoneGeolocationSettings" : {
      "type" : "object",
      "description" : "No geolocation extraction",
      "properties" : {
        "type" : {
          "type" : "string",
          "enum" : [ "none" ]
        }
      }
    },
    "otoroshi.utils.mailer.MailerSettings" : {
      "oneOf" : [ {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.ConsoleMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.GenericMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailgunSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailjetSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.NoneMailerSettings"
      }, {
        "$ref" : "#/components/schemas/otoroshi.utils.mailer.SendgridSettings"
      } ]
    },
    "otoroshi.models.OutageStrategy" : {
      "type" : "string",
      "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
    },
    "WebAuthnRegistrationFinishBody" : {
      "type" : "object",
      "description" : ""
    },
    "WebAuthnRegistrationStartBody" : {
      "type" : "object",
      "description" : ""
    },
    "UserTokenBody" : {
      "type" : "object",
      "properties" : {
        "token" : {
          "type" : "string"
        }
      }
    },
    "ByteStreamBody" : {
      "type" : "string",
      "description" : ""
    },
    "GlobalConfigImportBody" : {
      "type" : "object",
      "description" : ""
    },
    "PemCertificateBody" : {
      "type" : "string",
      "description" : "PEM encoded certificate"
    },
    "PemCsrBody" : {
      "type" : "string",
      "description" : "PEM encoded csr"
    },
    "UpdateQuotasBody" : {
      "type" : "string",
      "description" : ""
    },
    "LetsEncryptCertBody" : {
      "type" : "object",
      "description" : "PEM encoded certificate"
    },
    "CodeBody" : {
      "type" : "string",
      "description" : "Plugin scala code"
    },
    "Done" : {
      "type" : "object",
      "description" : "operation is done",
      "properties" : {
        "done" : {
          "type" : "boolean"
        }
      }
    },
    "StringList" : {
      "type" : "array",
      "items" : {
        "type" : "string"
      }
    },
    "PluginDescriptionsResponse" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/PluginDescription"
      }
    },
    "PluginDescription" : {
      "type" : "object",
      "description" : "Description of a plugin",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "the id of the plugin"
        },
        "name" : {
          "type" : "string",
          "description" : "the name of the plugin"
        },
        "description" : {
          "type" : "string",
          "description" : "the description of the plugin"
        },
        "default_config" : {
          "type" : "string",
          "description" : "the default config of the plugin (for UI form)"
        },
        "config_schema" : {
          "type" : "string",
          "description" : "the config schema of the plugin (for UI form)"
        },
        "config_flow" : {
          "type" : "array",
          "description" : "the config flow of the plugin (for UI form)"
        },
        "plugin_visibility" : {
          "type" : "string",
          "description" : "visibility of the plugin (can be internal or userland)"
        },
        "plugin_categories" : {
          "type" : "array",
          "description" : "categories of the plugin",
          "items" : {
            "$ref" : "#/components/schemas/StringList"
          }
        },
        "plugin_steps" : {
          "type" : "array",
          "description" : "steps of the plugin",
          "items" : {
            "$ref" : "#/components/schemas/StringList"
          }
        },
        "plugin_tags" : {
          "type" : "array",
          "description" : "tags of the plugin",
          "items" : {
            "$ref" : "#/components/schemas/StringList"
          }
        }
      }
    },
    "OutagesList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.Outage"
      }
    },
    "ScriptsList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.script.Script"
      }
    },
    "WebauthnAdminList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
      }
    },
    "SimpleAdminList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
      }
    },
    "AlertEventList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.events.AlertEvent"
      }
    },
    "AuditEventList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.events.AuditEvent"
      }
    },
    "TargetsList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.Target"
      }
    },
    "ErrorTemplateList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
      }
    },
    "HealthCheckEventList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.events.HealthCheckEvent"
      }
    },
    "LiveStats" : {
      "type" : "object",
      "description" : "Service live stats"
    },
    "HostMetrics" : {
      "type" : "object",
      "description" : "Host metrics"
    },
    "ServiceFromOpenApiBody" : {
      "type" : "object",
      "description" : "Properties to create a service from an openapi spec",
      "properties" : {
        "domain" : {
          "type" : "string",
          "description" : "the domain on which the service will be exposed by otoroshi"
        },
        "openapi" : {
          "type" : "string",
          "description" : "the url to an openapi 3 spec or the content of an openapi 3 spec"
        }
      }
    },
    "CertValidResponse" : {
      "type" : "object",
      "description" : "Is certificate valid",
      "properties" : {
        "valid" : {
          "type" : "boolean"
        }
      }
    },
    "ServiceDescriptorList" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
      }
    },
    "otoroshi.events.AuditEvent" : {
      "type" : "object",
      "description" : "Audit trail event"
    },
    "otoroshi.events.AlertEvent" : {
      "type" : "object",
      "description" : "Alert trail event"
    },
    "TokenResponse" : {
      "type" : "object",
      "description" : "User login token response",
      "properties" : {
        "valid" : {
          "type" : "string"
        }
      }
    }
  },
  "merge_schemas":   {
    "otoroshi.models.GlobalJwtVerifier" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of verifier",
          "enum" : [ "global" ]
        }
      }
    },
    "otoroshi.auth.BasicAuthModuleConfig" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the type of the module",
          "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
        }
      }
    },
    "otoroshi.auth.GenericOauth2ModuleConfig" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the type of the module",
          "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
        }
      }
    },
    "otoroshi.auth.LdapAuthModuleConfig" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the type of the module",
          "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
        }
      }
    },
    "otoroshi.auth.Oauth1ModuleConfig" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the type of the module",
          "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
        }
      }
    },
    "otoroshi.auth.SamlAuthModuleConfig" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the type of the module",
          "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
        }
      }
    },
    "otoroshi.auth.AuthModuleConfig" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the type of the module",
          "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
        }
      }
    },
    "otoroshi.models.VerifierStrategy" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of strategy",
          "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
        }
      }
    },
    "otoroshi.models.AlgoSettings" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of algosettings",
          "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
        }
      }
    },
    "otoroshi.models.JwtTokenLocation" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of location",
          "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
        }
      }
    },
    "otoroshi.models.OtoroshiAdmin" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of admin",
          "enum" : [ "simple", "webauthn" ]
        }
      }
    },
    "otoroshi.models.TargetPredicate" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of predicate",
          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
        }
      }
    },
    "otoroshi.models.JwtVerifier" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of verifier",
          "enum" : [ "global", "local", "ref" ]
        }
      }
    },
    "otoroshi.models.GeolocationSettings" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of geolocation",
          "enum" : [ "none", "maxmind", "ipstack" ]
        }
      }
    },
    "otoroshi.utils.mailer.MailerSettings" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of mailer",
          "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
        }
      }
    },
    "otoroshi.models.Exporter" : {
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "the kind of exporter",
          "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
        }
      }
    },
    "otoroshi.ssl.Cert" : {
      "properties" : {
        "certType" : {
          "type" : "string",
          "description" : "the kind of certificate",
          "enum" : [ "client", "ca", "letsEncrypt", "keypair", "selfSigned", "certificate" ]
        }
      }
    }
  },
  "fields_rename":   {
    "location:otoroshi.models.EntityLocation" : "_loc",
    "typ:java.lang.String" : "type",
    "typ:otoroshi.models.DataExporterConfigType" : "type",
    "typ:otoroshi.models.SimpleOtoroshiAdmin" : "type",
    "typ:otoroshi.models.WebAuthnOtoroshiAdmin" : "type",
    "otoroshi.ssl.Cert.entityMetadata" : "metadata"
  },
  "add_fields":   { }
}
