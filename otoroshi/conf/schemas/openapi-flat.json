{
  "otoroshi.models.ElasticAnalyticsConfig" : {
    "description" : "Settings for connection to an elastic cluster",
    "type" : "object",
    "properties" : {
      "clusterUri" : {
        "description" : "Cluster URL",
        "type" : "string"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Additionnal headers in the http request"
      },
      "password" : {
        "description" : "Elastic password",
        "type" : "string"
      },
      "indexSettings" : {
        "description" : "Indexation settings",
        "type" : "object",
        "properties" : {
          "clientSide" : {
            "description" : "Enable index splitting on client side",
            "type" : "boolean"
          },
          "interval" : {
            "description" : "Index splitting interval",
            "type" : "object",
            "properties" : { }
          }
        }
      },
      "mtlsConfig" : {
        "description" : "TLS settings for the http client",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "index" : {
        "description" : "Index name",
        "type" : "string"
      },
      "type" : {
        "description" : "Object type",
        "type" : "string",
        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
      },
      "applyTemplate" : {
        "description" : "Enable template creation/update",
        "type" : "boolean"
      },
      "version" : {
        "description" : "Version of Elasticsearch",
        "type" : "string"
      },
      "user" : {
        "description" : "Elasticsearch user",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesIngressControllerJob" : {
    "description" : "Plugin to sync kubernetes ingresses with otoroshi",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.NgRouteDataStore" : {
    "description" : "The datastore for routes",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.CorsSettings" : {
    "description" : "Settings for CORS support",
    "type" : "object",
    "properties" : {
      "excludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The cors excluded patterns"
      },
      "allowMethods" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The cors allowed methods"
      },
      "allowHeaders" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The cors allowed headers"
      },
      "exposeHeaders" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The cors exposed header"
      },
      "maxAge" : {
        "description" : "Cors max age",
        "type" : "number"
      },
      "enabled" : {
        "description" : "Whether or not cors is enabled",
        "type" : "boolean"
      },
      "allowCredentials" : {
        "description" : "Allow to pass credentials",
        "type" : "boolean"
      },
      "allowOrigin" : {
        "description" : "The cors allowed origin",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.apikeys.BiscuitConf" : {
    "description" : "Configuration for the biscuit plugin",
    "type" : "object",
    "properties" : {
      "privkey" : {
        "description" : "Biscuit private key",
        "type" : "string"
      },
      "checks" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Biscuit checks"
      },
      "rules" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Biscuit rules"
      },
      "facts" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Biscuit facts"
      }
    }
  },
  "otoroshi.models.LargeResponseFaultConfig" : {
    "description" : "Settings for a large response fault (chaos engineering)",
    "type" : "object",
    "properties" : {
      "ratio" : {
        "format" : "double",
        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
        "type" : "number"
      },
      "additionalResponseSize" : {
        "format" : "int32",
        "description" : "Add n 0 bytes",
        "type" : "integer"
      }
    }
  },
  "otoroshi.models.MappingSettings" : {
    "description" : "Settings to transform a jwt token",
    "type" : "object",
    "properties" : {
      "map" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Change values"
      },
      "values" : {
        "description" : "Add values",
        "type" : "object"
      },
      "remove" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Remove some token claims"
      }
    }
  },
  "otoroshi.next.models.NgContextualPlugins" : {
    "description" : "The plugins that will be triggered for the current request",
    "type" : "object",
    "properties" : {
      "next_plugins_merge" : {
        "description" : "Try to merge synchronous and contiguous plugins",
        "type" : "boolean"
      },
      "_env" : {
        "description" : "The current env",
        "type" : "object",
        "properties" : {
          "circuitBeakersHolder" : {
            "description" : "The current instance of circuit breakers holder",
            "type" : "object",
            "properties" : { }
          }
        }
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesEntity" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.ApikeyQuotas" : {
    "description" : "Plugin to apply quotas en apikeys",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.core.apikeys.JwtApikeyExtractor" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.GzipResponseCompressor" : {
    "description" : "Plugin for gzip compression",
    "type" : "object",
    "properties" : {
      "compression_level" : {
        "format" : "int32",
        "description" : "The compression level (1 to 9)",
        "type" : "integer"
      },
      "buffer_size" : {
        "format" : "int32",
        "description" : "Compressor buffer size",
        "type" : "integer"
      },
      "chunked_threshold" : {
        "format" : "int32",
        "description" : "Chunk size",
        "type" : "integer"
      },
      "excluded_patterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The excluded path patterns"
      },
      "white_list" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Allowed mimetypes list"
      },
      "black_list" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Blocked mimetypes list"
      }
    }
  },
  "otoroshi.models.VerificationSettings" : {
    "description" : "jwt token verification settings",
    "type" : "object",
    "properties" : {
      "fields" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Fields validation"
      },
      "arrayFields" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Fields array validation"
      }
    }
  },
  "otoroshi.next.models.NgMinimalRoute" : {
    "description" : "A route representation with it's minimal attributes",
    "type" : "object",
    "properties" : {
      "backend_ref" : {
        "description" : "The backend id of the route (if one)",
        "type" : "string"
      },
      "backend" : {
        "description" : "The backend of the route",
        "type" : "object",
        "properties" : {
          "target_refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of NgStoredBackend ids"
          },
          "root" : {
            "description" : "The root path of the backend or the full rewrite path",
            "type" : "string"
          },
          "targets" : {
            "description" : "The targets of the backend",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "predicate" : {
                  "description" : "Predicate to choose this target",
                  "type" : "object",
                  "properties" : {
                    "rack" : {
                      "description" : "Rack name",
                      "type" : "string"
                    },
                    "provider" : {
                      "description" : "Provider name",
                      "type" : "string"
                    },
                    "dataCenter" : {
                      "description" : "Datacenter name",
                      "type" : "string"
                    },
                    "zone" : {
                      "description" : "Zone name",
                      "type" : "string"
                    },
                    "positions" : {
                      "description" : "Possible positions",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "latitude" : {
                            "format" : "double",
                            "description" : "Latitude of the position",
                            "type" : "number"
                          },
                          "longitude" : {
                            "format" : "double",
                            "description" : "Longitude of the position",
                            "type" : "number"
                          },
                          "radius" : {
                            "format" : "double",
                            "description" : "Radius of the circle in meters",
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of predicate",
                      "type" : "string",
                      "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                    },
                    "region" : {
                      "description" : "Region name",
                      "type" : "string"
                    },
                    "dc" : {
                      "description" : "DC name",
                      "type" : "string"
                    }
                  }
                },
                "protocol" : {
                  "description" : "Protocol for the target",
                  "type" : "string"
                },
                "hostname" : {
                  "description" : "hostname of the target",
                  "type" : "string"
                },
                "port" : {
                  "format" : "int32",
                  "description" : "port of the target",
                  "type" : "integer"
                },
                "weight" : {
                  "format" : "int32",
                  "description" : "The weight of the target when choosing",
                  "type" : "integer"
                },
                "tls" : {
                  "description" : "Does the target uses TLS",
                  "type" : "boolean"
                },
                "tls_config" : {
                  "description" : "TLS settings to contact this target",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trust_all" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trusted_certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "id" : {
                  "description" : "id of the target",
                  "type" : "string"
                },
                "ip_address" : {
                  "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                  "type" : "string"
                }
              }
            }
          },
          "rewrite" : {
            "description" : "Does the backend performs a full url rewrite ?",
            "type" : "boolean"
          },
          "load_balancing" : {
            "description" : "Loadbalancing config og the backend",
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
              },
              "ratio" : {
                "type" : "number",
                "format" : "double"
              }
            }
          }
        }
      },
      "frontend" : {
        "description" : "The frontend of the route",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "the headers that will be matched"
          },
          "methods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "the http methods that will be matched"
          },
          "query" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "the query params that will be matched"
          },
          "exact" : {
            "description" : "Match on exact path ?",
            "type" : "boolean"
          },
          "domains" : {
            "description" : "The domain and path that will be matched",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "strip_path" : {
            "description" : "Is path stripped from backend request",
            "type" : "boolean"
          }
        }
      }
    }
  },
  "otoroshi.next.plugins.NgLatencyInjectionFaultConfig" : {
    "description" : "Configuration for SnowMonkeyChaos",
    "type" : "object",
    "properties" : {
      "ratio" : {
        "format" : "double",
        "description" : "The ratio of requests impacted",
        "type" : "number"
      },
      "from" : {
        "description" : "Lower bound of latency injection",
        "type" : "number"
      },
      "to" : {
        "description" : "Upper bound of latency injection",
        "type" : "number"
      }
    }
  },
  "otoroshi.next.plugins.JwtVerification" : {
    "description" : "Plugin to verify jwt token",
    "type" : "object",
    "properties" : {
      "verifiers" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The list of verifiers id"
      }
    }
  },
  "otoroshi.plugins.log4j.Log4jExpressionText" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "value" : {
        "description" : "A parsed text for log4jshell evaluation",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.NgGzipConfig" : {
    "description" : "Configuration for Gzip",
    "type" : "object",
    "properties" : {
      "compression_level" : {
        "format" : "int32",
        "description" : "The compression level (1 to 9)",
        "type" : "integer"
      },
      "buffer_size" : {
        "format" : "int32",
        "description" : "Compressor buffer size",
        "type" : "integer"
      },
      "chunked_threshold" : {
        "format" : "int32",
        "description" : "Chunk size",
        "type" : "integer"
      },
      "excluded_patterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The excluded path patterns"
      },
      "white_list" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Allowed mimetypes list"
      },
      "black_list" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Blocked mimetypes list"
      }
    }
  },
  "otoroshi.next.plugins.W3CTracingConfigKind" : {
    "description" : "Configuration for W3CTracing",
    "type" : "string",
    "enum" : [ "jaeger", "zipkin", "logger", "noop" ]
  },
  "otoroshi.next.plugins.JQConfig" : {
    "description" : "Configuration for JQ",
    "type" : "object",
    "properties" : {
      "request" : {
        "description" : "JQ filter for request",
        "type" : "string"
      },
      "response" : {
        "description" : "JQ filter for response",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.TeamId" : {
    "type" : "string",
    "description" : "team id"
  },
  "otoroshi.next.plugins.NgAllowedMethodsConfig" : {
    "description" : "Configuration for AllowHttpMethods",
    "type" : "object",
    "properties" : {
      "allowed" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The list of allowed methods"
      },
      "forbidden" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The list of forbidden methods"
      }
    }
  },
  "WebauthnAdminList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "createdAt" : {
          "description" : "User creation date",
          "type" : "number"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Entity metadata"
        },
        "password" : {
          "description" : "User password",
          "type" : "string"
        },
        "credentials" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object"
          },
          "description" : "User webauthn credentials"
        },
        "rights" : {
          "description" : "User rights",
          "type" : "object",
          "properties" : {
            "rights" : {
              "description" : "Access rights of a user",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Access rights on teams",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "canRead" : {
                          "description" : "Can this access right read data",
                          "type" : "boolean"
                        },
                        "value" : {
                          "description" : "Access pattern",
                          "type" : "string"
                        },
                        "canWrite" : {
                          "description" : "Can this access right write data",
                          "type" : "boolean"
                        }
                      }
                    }
                  },
                  "tenant" : {
                    "description" : "Access rights on organizations",
                    "type" : "object",
                    "properties" : {
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "handle" : {
          "description" : "User webauthn handle",
          "type" : "string"
        },
        "typ" : {
          "description" : "Admin kind",
          "type" : "string",
          "enum" : [ "SIMPLE", "WEBAUTHN" ]
        },
        "label" : {
          "description" : "User label",
          "type" : "string"
        },
        "type" : {
          "description" : "the kind of admin",
          "type" : "string",
          "enum" : [ "simple", "webauthn" ]
        },
        "_loc" : {
          "description" : "Entity location",
          "type" : "object",
          "properties" : {
            "teams" : {
              "description" : "Teams of the current entity",
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "tenant" : {
              "description" : "Organization of the current entity",
              "type" : "string"
            }
          }
        },
        "username" : {
          "description" : "User username",
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Entity tags"
        }
      }
    }
  },
  "otoroshi.models.RegionMatch" : {
    "description" : "Match a target if in the same region",
    "type" : "object",
    "properties" : {
      "type" : {
        "description" : "the kind of predicate",
        "type" : "string",
        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
      },
      "region" : {
        "description" : "Region name",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.Cors" : {
    "description" : "Plugin to use cors",
    "type" : "object",
    "properties" : {
      "max_age" : {
        "description" : "cors max age",
        "type" : "number"
      },
      "allow_headers" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Allowed cors headers"
      },
      "allow_methods" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Allowed cors methods"
      },
      "excluded_patterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Paths without cors"
      },
      "allow_credentials" : {
        "description" : "Allowed credentials",
        "type" : "boolean"
      },
      "expose_headers" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Exposed cors headers"
      },
      "allow_origin" : {
        "description" : "Allowed cors origins",
        "type" : "string"
      }
    }
  },
  "ErrorTemplateList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "template50x" : {
          "description" : "The 50x error html template",
          "type" : "string"
        },
        "templateMaintenance" : {
          "description" : "The maintenance html template",
          "type" : "string"
        },
        "templateBuild" : {
          "description" : "The build html template",
          "type" : "string"
        },
        "serviceId" : {
          "description" : "Service id for this template",
          "type" : "string"
        },
        "messages" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Map of messages"
        },
        "template40x" : {
          "description" : "The 40x error html template",
          "type" : "string"
        }
      }
    }
  },
  "otoroshi.next.plugins.PublicPrivatePaths" : {
    "description" : "Plugin to define public and private paths",
    "type" : "object",
    "properties" : {
      "strict" : {
        "description" : "apikey only",
        "type" : "boolean"
      },
      "public_patterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Paths that should not have user or apikey to pass"
      },
      "private_patterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Paths that should have user or apikey to pass"
      }
    }
  },
  "otoroshi.auth.GroupRights" : {
    "description" : "User rights associated with a group",
    "type" : "object",
    "properties" : {
      "userRights" : {
        "description" : "The user rights associated with this group",
        "type" : "object",
        "properties" : {
          "rights" : {
            "description" : "Access rights of a user",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Access rights on teams",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "tenant" : {
                  "description" : "Access rights on organizations",
                  "type" : "object",
                  "properties" : {
                    "canWrite" : {
                      "description" : "Can this access right write data",
                      "type" : "boolean"
                    },
                    "value" : {
                      "description" : "Access pattern",
                      "type" : "string"
                    },
                    "canRead" : {
                      "description" : "Can this access right read data",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "users" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The users associated with this group"
      }
    }
  },
  "otoroshi.plugins.quotas.ServiceQuotasConfig" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "throttlingQuota" : {
        "format" : "int64",
        "description" : "Calls quota per second",
        "type" : "integer"
      },
      "dailyQuota" : {
        "format" : "int64",
        "description" : "Daily calls quota",
        "type" : "integer"
      },
      "monthlyQuota" : {
        "format" : "int64",
        "description" : "Monthly calls quota",
        "type" : "integer"
      }
    }
  },
  "otoroshi.next.plugins.ApikeyCalls" : {
    "description" : "Plugin to use apikeys",
    "type" : "object",
    "properties" : {
      "wipe_backend_request" : {
        "description" : "Removes the apikeys from the request to not forward it to the backend",
        "type" : "boolean"
      },
      "routing" : {
        "description" : "Use apikey for routing",
        "type" : "object",
        "properties" : {
          "none_meta_keys_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on none metadata keys being present"
          },
          "all_meta_keys_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on all metadata keys being present"
          },
          "all_meta_in" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Matching on all metadata being present"
          },
          "none_meta_in" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Matching on none metadata being present"
          },
          "one_tag_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on one tag being present"
          },
          "enabled" : {
            "description" : "Tags and metadata matching enabled",
            "type" : "boolean"
          },
          "one_meta_in" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Matching on none metadata being present"
          },
          "all_tags_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on all tags being present"
          },
          "one_meta_key_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on one metadata being present"
          },
          "none_tag_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on none tags being present"
          }
        }
      },
      "extractors" : {
        "description" : "Configuration of the apikey extraction modes",
        "type" : "object",
        "properties" : {
          "jwt" : {
            "description" : "jwt extractor config.",
            "type" : "object",
            "properties" : {
              "include_request_attrs" : {
                "description" : "Does the jwt token need to include current request attributes to work",
                "type" : "boolean"
              },
              "query_name" : {
                "description" : "The name of the query param to extract",
                "type" : "string"
              },
              "header_name" : {
                "description" : "The name of the header to extract",
                "type" : "string"
              },
              "key_pair_signed" : {
                "description" : "Is it asymmetricaly signed",
                "type" : "boolean"
              },
              "secret_signed" : {
                "description" : "Is it symmetricaly signed",
                "type" : "boolean"
              },
              "enabled" : {
                "description" : "Is it enabled",
                "type" : "boolean"
              },
              "cookie_name" : {
                "description" : "The name of the cookies to extract",
                "type" : "string"
              }
            }
          },
          "basic" : {
            "description" : "basic auth extractor config.",
            "type" : "object",
            "properties" : {
              "query_name" : {
                "description" : "The name of the query param to extract",
                "type" : "string"
              },
              "header_name" : {
                "description" : "The name of the header to extract",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Is it enabled",
                "type" : "boolean"
              }
            }
          },
          "client_id" : {
            "description" : "client id only extractor config.",
            "type" : "object",
            "properties" : {
              "query_name" : {
                "description" : "The name of the query param to extract",
                "type" : "string"
              },
              "header_name" : {
                "description" : "The name of the header to extract",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Is it enabled",
                "type" : "boolean"
              }
            }
          },
          "custom_headers" : {
            "description" : "custom headers extractor config.",
            "type" : "object",
            "properties" : {
              "client_secret_header_name" : {
                "description" : "Header name to extract client secret",
                "type" : "string"
              },
              "client_id_header_name" : {
                "description" : "Header name to extract client id",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Is it enabled",
                "type" : "boolean"
              }
            }
          }
        }
      },
      "pass_with_user" : {
        "description" : "Let the request pass if a user is connected",
        "type" : "boolean"
      },
      "validate" : {
        "description" : "Enabled quotas validation",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.script.AccessContext" : {
    "description" : "Context for AccessValidation plugins",
    "type" : "object",
    "properties" : {
      "snowflake" : {
        "description" : "The current request snowflake",
        "type" : "string"
      },
      "globalConfig" : {
        "description" : "The current global config",
        "type" : "object"
      },
      "apikey" : {
        "description" : "The current apikey",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Bunch of metadata for the key"
          },
          "clientId" : {
            "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
            "type" : "string"
          },
          "clientName" : {
            "description" : "The name of the api key, for humans ;-)",
            "type" : "string"
          },
          "rotation" : {
            "description" : "Apikey rotation settings",
            "type" : "object",
            "properties" : {
              "gracePeriod" : {
                "format" : "int64",
                "description" : "period (in hours) during which both secrets works",
                "type" : "integer"
              },
              "rotationEvery" : {
                "format" : "int64",
                "description" : "Rotate every n hours",
                "type" : "integer"
              },
              "nextSecret" : {
                "description" : "Next client_secret value",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Rotation enabled",
                "type" : "boolean"
              }
            }
          },
          "description" : {
            "description" : "Description of this apikey",
            "type" : "string"
          },
          "restrictions" : {
            "description" : "Apikey restrictions settings",
            "type" : "object",
            "properties" : {
              "allowed" : {
                "description" : "Allowed paths",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "allowLast" : {
                "description" : "Evalute allowed paths after everything else",
                "type" : "boolean"
              },
              "forbidden" : {
                "description" : "Forbidden paths (return 403)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "notFound" : {
                "description" : "Not found paths (return 404)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Restrictions enabled",
                "type" : "boolean"
              }
            }
          },
          "readOnly" : {
            "description" : "The apikey only allow access for GET, HEAD and OPTIONS verbs",
            "type" : "boolean"
          },
          "_loc" : {
            "description" : "The location of the apikey",
            "type" : "object",
            "properties" : {
              "teams" : {
                "description" : "Teams of the current entity",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tenant" : {
                "description" : "Organization of the current entity",
                "type" : "string"
              }
            }
          },
          "enabled" : {
            "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Apikey tags"
          },
          "throttlingQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per second, measured on 10 seconds",
            "type" : "integer"
          },
          "constrainedServicesOnly" : {
            "description" : "This apikey can only be used on services that constrained their apikey routing",
            "type" : "boolean"
          },
          "allowClientIdOnly" : {
            "description" : "This apikey can be used juste with the client_id value",
            "type" : "boolean"
          },
          "monthlyQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per month",
            "type" : "integer"
          },
          "validUntil" : {
            "description" : "Date until when the apikey is valid",
            "type" : "number"
          },
          "authorizedEntities" : {
            "description" : "The group/service ids (prefixed by group_ or service_ on which the key is authorized",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "clientSecret" : {
            "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
            "type" : "string"
          },
          "dailyQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per day",
            "type" : "integer"
          }
        }
      },
      "index" : {
        "format" : "int32",
        "description" : "The current plugin index",
        "type" : "integer"
      },
      "descriptor" : {
        "description" : "The current service descriptor",
        "type" : "object",
        "properties" : {
          "removeHeadersIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client request"
          },
          "missingOnlyHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client response if they are not present"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Just a bunch of random properties"
          },
          "tcpUdpTunneling" : {
            "description" : "Enabled TCP/UDP tunneling through websocket connection",
            "type" : "boolean"
          },
          "cors" : {
            "description" : "CORS settings",
            "type" : "object",
            "properties" : {
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors excluded patterns"
              },
              "allowMethods" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors allowed methods"
              },
              "allowHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors allowed headers"
              },
              "exposeHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors exposed header"
              },
              "maxAge" : {
                "description" : "Cors max age",
                "type" : "number"
              },
              "enabled" : {
                "description" : "Whether or not cors is enabled",
                "type" : "boolean"
              },
              "allowCredentials" : {
                "description" : "Allow to pass credentials",
                "type" : "boolean"
              },
              "allowOrigin" : {
                "description" : "The cors allowed origin",
                "type" : "string"
              }
            }
          },
          "forceHttps" : {
            "description" : "Will force redirection to https:// if not present",
            "type" : "boolean"
          },
          "matchingRoot" : {
            "description" : "The root path on which the service is available",
            "type" : "string"
          },
          "plugins" : {
            "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
            "type" : "object",
            "properties" : {
              "config" : {
                "description" : "Plugins configuration",
                "type" : "object"
              },
              "enabled" : {
                "description" : "Plugins enabled",
                "type" : "boolean"
              },
              "excluded" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled plugins"
              }
            }
          },
          "letsEncrypt" : {
            "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
            "type" : "boolean"
          },
          "useNewWSClient" : {
            "description" : "Use akka http client for this service on websocket calls",
            "type" : "boolean"
          },
          "chaosConfig" : {
            "description" : "Chaos engineering settings",
            "type" : "object",
            "properties" : {
              "badResponsesFaultConfig" : {
                "description" : "Settings for bad responses",
                "type" : "object",
                "properties" : {
                  "responses" : {
                    "description" : "The possibles responses",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "status" : {
                          "format" : "int32",
                          "description" : "The HTTP status for the response",
                          "type" : "integer"
                        },
                        "body" : {
                          "description" : "The body of the HTTP response",
                          "type" : "string"
                        },
                        "headers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "The HTTP headers of the response"
                        }
                      }
                    }
                  },
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  }
                }
              },
              "largeResponseFaultConfig" : {
                "description" : "Settings for large responses",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "additionalResponseSize" : {
                    "format" : "int32",
                    "description" : "Add n 0 bytes",
                    "type" : "integer"
                  }
                }
              },
              "latencyInjectionFaultConfig" : {
                "description" : "Settings for latency injection",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "from" : {
                    "description" : "The start range of latency added to the request",
                    "type" : "number"
                  },
                  "to" : {
                    "description" : "The end range of latency added to the request",
                    "type" : "number"
                  }
                }
              },
              "largeRequestFaultConfig" : {
                "description" : "Settings for large requests",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "additionalRequestSize" : {
                    "format" : "int32",
                    "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                    "type" : "integer"
                  }
                }
              },
              "enabled" : {
                "description" : "Whether or not this config is enabled",
                "type" : "boolean"
              }
            }
          },
          "secComSettings" : {
            "description" : "Sec. com. settings",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              }
            }
          },
          "detectApiKeySooner" : {
            "description" : "Detect if an apikey is present but do not fail if not",
            "type" : "boolean"
          },
          "transformerRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled transformer plugins"
          },
          "secComAlgoInfoToken" : {
            "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              }
            }
          },
          "missingOnlyHeadersIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client request if they are not present"
          },
          "secComAlgoChallengeOtoToBack" : {
            "description" : "Algorithm to sign challenge token to the backend",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              }
            }
          },
          "removeHeadersOut" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client response"
          },
          "stripPath" : {
            "description" : "Strip matching path in the forwarded request path",
            "type" : "boolean"
          },
          "localHost" : {
            "description" : "The host used localy, mainly localhost:xxxx",
            "type" : "string"
          },
          "sendOtoroshiHeadersBack" : {
            "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
            "type" : "boolean"
          },
          "id" : {
            "description" : "A unique random string to identify your service",
            "type" : "string"
          },
          "api" : {
            "description" : "Api exposition settings",
            "type" : "object",
            "properties" : {
              "exposeApi" : {
                "description" : "Is this an API",
                "type" : "boolean"
              },
              "openApiDescriptorUrl" : {
                "description" : "openapi descriptor url",
                "type" : "string"
              }
            }
          },
          "secComTtl" : {
            "description" : "TTL for the info token",
            "type" : "number"
          },
          "secComVersion" : {
            "description" : "Version of the challenge token",
            "type" : "string",
            "enum" : [ "V1", "v2" ]
          },
          "targetsLoadBalancing" : {
            "description" : "Loadbalancing strategy",
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
              },
              "ratio" : {
                "type" : "number",
                "format" : "double"
              }
            }
          },
          "userFacing" : {
            "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Possible hosts for the service"
          },
          "restrictions" : {
            "description" : "Restriction settings",
            "type" : "object",
            "properties" : {
              "allowed" : {
                "description" : "Allowed paths",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "allowLast" : {
                "description" : "Evalute allowed paths after everything else",
                "type" : "boolean"
              },
              "forbidden" : {
                "description" : "Forbidden paths (return 403)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "notFound" : {
                "description" : "Not found paths (return 404)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Restrictions enabled",
                "type" : "boolean"
              }
            }
          },
          "readOnly" : {
            "description" : "Service only accepts GET, HEAD and OPTIONS requests",
            "type" : "boolean"
          },
          "secComInfoTokenVersion" : {
            "description" : "Version of the info token",
            "type" : "string",
            "enum" : [ "Legacy", "Latest" ]
          },
          "_loc" : {
            "description" : "Entity location",
            "type" : "object",
            "properties" : {
              "teams" : {
                "description" : "Teams of the current entity",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tenant" : {
                "description" : "Organization of the current entity",
                "type" : "string"
              }
            }
          },
          "enforceSecureCommunication" : {
            "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "clientValidatorRef" : {
            "description" : "A reference to validation authority",
            "type" : "string"
          },
          "privateApp" : {
            "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
            "type" : "boolean"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching paths on request"
          },
          "domain" : {
            "description" : "The domain on which the service is available.",
            "type" : "string"
          },
          "name" : {
            "description" : "The name of your service. Only for debug and human readability purposes",
            "type" : "string"
          },
          "transformerConfig" : {
            "description" : "Transformer plugins configuration",
            "type" : "object"
          },
          "subdomain" : {
            "description" : "The subdomain on which the service is available",
            "type" : "string"
          },
          "maintenanceMode" : {
            "description" : "Display a maintainance page when a user try to use the service",
            "type" : "boolean"
          },
          "secComHeaders" : {
            "description" : "Header names for sec. com. protocol",
            "type" : "object",
            "properties" : {
              "stateResponseName" : {
                "description" : "Header name where the validation token respondewill be",
                "type" : "string"
              },
              "claimRequestName" : {
                "description" : "Header name where the info token will be",
                "type" : "string"
              },
              "stateRequestName" : {
                "description" : "Header name where the validation token will be",
                "type" : "string"
              }
            }
          },
          "handleLegacyDomain" : {
            "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
            "type" : "boolean"
          },
          "logAnalyticsOnServer" : {
            "description" : "Log analytics event on the server",
            "type" : "boolean"
          },
          "strictlyPrivate" : {
            "description" : "When strictly private, private app session will not pass apikey filters",
            "type" : "boolean"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "buildMode" : {
            "description" : "Display a construction page when a user try to use the service",
            "type" : "boolean"
          },
          "targets" : {
            "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "predicate" : {
                  "description" : "Predicate to choose this target",
                  "type" : "object",
                  "properties" : {
                    "rack" : {
                      "description" : "Rack name",
                      "type" : "string"
                    },
                    "provider" : {
                      "description" : "Provider name",
                      "type" : "string"
                    },
                    "dataCenter" : {
                      "description" : "Datacenter name",
                      "type" : "string"
                    },
                    "zone" : {
                      "description" : "Zone name",
                      "type" : "string"
                    },
                    "positions" : {
                      "description" : "Possible positions",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "latitude" : {
                            "format" : "double",
                            "description" : "Latitude of the position",
                            "type" : "number"
                          },
                          "longitude" : {
                            "format" : "double",
                            "description" : "Longitude of the position",
                            "type" : "number"
                          },
                          "radius" : {
                            "format" : "double",
                            "description" : "Radius of the circle in meters",
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of predicate",
                      "type" : "string",
                      "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                    },
                    "region" : {
                      "description" : "Region name",
                      "type" : "string"
                    },
                    "dc" : {
                      "description" : "DC name",
                      "type" : "string"
                    }
                  }
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata for this target"
                },
                "protocol" : {
                  "description" : "Protocol for the target",
                  "type" : "string"
                },
                "scheme" : {
                  "description" : "The protocol used for communication. Can be http or https",
                  "type" : "string"
                },
                "mtlsConfig" : {
                  "description" : "TLS settings to contact this target",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "host" : {
                  "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                  "type" : "string"
                },
                "ipAddress" : {
                  "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                  "type" : "string"
                },
                "weight" : {
                  "format" : "int32",
                  "description" : "The weight of the target when choosing",
                  "type" : "integer"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Tags for this target"
                }
              }
            }
          },
          "enabled" : {
            "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
            "type" : "boolean"
          },
          "additionalHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client response"
          },
          "sendStateChallenge" : {
            "description" : "Should otoroshi send challenge token",
            "type" : "boolean"
          },
          "root" : {
            "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
            "type" : "string"
          },
          "additionalHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client request. Useful to add authentication"
          },
          "issueCertCA" : {
            "description" : "CA for cert issuance",
            "type" : "string"
          },
          "ipFiltering" : {
            "description" : "Ip filtering settings",
            "type" : "object",
            "properties" : {
              "whitelist" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Whitelisted IP addresses"
              },
              "blacklist" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Blacklisted IP addresses"
              }
            }
          },
          "redirection" : {
            "description" : "Redirection settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Whether or not redirection is enabled",
                "type" : "boolean"
              },
              "code" : {
                "format" : "int32",
                "description" : "The http redirect code",
                "type" : "integer"
              },
              "to" : {
                "description" : "The location for redirection",
                "type" : "string"
              }
            }
          },
          "redirectToLocal" : {
            "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
            "type" : "boolean"
          },
          "headersVerification" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be verified after routing."
          },
          "useAkkaHttpClient" : {
            "description" : "Use akka http client for this service",
            "type" : "boolean"
          },
          "securityExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Exclude some paths"
          },
          "authConfigRef" : {
            "description" : "A reference to a global auth module config",
            "type" : "string"
          },
          "preRouting" : {
            "description" : "Pre routing plugin settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "pre-routing plugins enabled",
                "type" : "boolean"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled plugins"
              },
              "config" : {
                "description" : "pre-routing plugins configuration",
                "type" : "object"
              }
            }
          },
          "canary" : {
            "description" : "Canary settings",
            "type" : "object",
            "properties" : {
              "root" : {
                "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                "type" : "string"
              },
              "targets" : {
                "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "predicate" : {
                      "description" : "Predicate to choose this target",
                      "type" : "object",
                      "properties" : {
                        "rack" : {
                          "description" : "Rack name",
                          "type" : "string"
                        },
                        "provider" : {
                          "description" : "Provider name",
                          "type" : "string"
                        },
                        "dataCenter" : {
                          "description" : "Datacenter name",
                          "type" : "string"
                        },
                        "zone" : {
                          "description" : "Zone name",
                          "type" : "string"
                        },
                        "positions" : {
                          "description" : "Possible positions",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "latitude" : {
                                "format" : "double",
                                "description" : "Latitude of the position",
                                "type" : "number"
                              },
                              "longitude" : {
                                "format" : "double",
                                "description" : "Longitude of the position",
                                "type" : "number"
                              },
                              "radius" : {
                                "format" : "double",
                                "description" : "Radius of the circle in meters",
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "description" : "the kind of predicate",
                          "type" : "string",
                          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                        },
                        "region" : {
                          "description" : "Region name",
                          "type" : "string"
                        },
                        "dc" : {
                          "description" : "DC name",
                          "type" : "string"
                        }
                      }
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Metadata for this target"
                    },
                    "protocol" : {
                      "description" : "Protocol for the target",
                      "type" : "string"
                    },
                    "scheme" : {
                      "description" : "The protocol used for communication. Can be http or https",
                      "type" : "string"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings to contact this target",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "host" : {
                      "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                      "type" : "string"
                    },
                    "ipAddress" : {
                      "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                      "type" : "string"
                    },
                    "weight" : {
                      "format" : "int32",
                      "description" : "The weight of the target when choosing",
                      "type" : "integer"
                    },
                    "tags" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Tags for this target"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Use canary mode for this service",
                "type" : "boolean"
              },
              "traffic" : {
                "format" : "double",
                "description" : "Ratio of traffic that will be sent to canary targets.",
                "type" : "number"
              }
            }
          },
          "secComExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "URI patterns excluded from secured communications"
          },
          "xForwardedHeaders" : {
            "description" : "Send X-Forwarded-* headers",
            "type" : "boolean"
          },
          "apiKeyConstraints" : {
            "description" : "Routing and extraction constraints for the apikeyh",
            "type" : "object",
            "properties" : {
              "routing" : {
                "description" : "Routing settings for this apikey",
                "type" : "object",
                "properties" : {
                  "oneTagIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "outing if one tag presents in apikey"
                  },
                  "noneMetaKeysIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if none meta keys presents in apikey"
                  },
                  "oneMetaIn" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Routing if one meta presents in apikey"
                  },
                  "oneMetaKeyIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if one meta key presents in apikey"
                  },
                  "allMetaKeysIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if all meta keys presents in apikey"
                  },
                  "noneTagIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if none tags presents in apikey"
                  },
                  "allTagsIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if all tags presents in apikey"
                  },
                  "allMetaIn" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Routing if all meta presents in apikey"
                  },
                  "noneMetaIn" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Routing if none meta presents in apikey"
                  }
                }
              },
              "customHeadersAuth" : {
                "description" : "Settings to extract apikey from custom headers",
                "type" : "object",
                "properties" : {
                  "clientSecretHeaderName" : {
                    "description" : "Header name to find client_secret",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  },
                  "clientIdHeaderName" : {
                    "description" : "Header name to find client_id",
                    "type" : "string"
                  }
                }
              },
              "basicAuth" : {
                "description" : "Settings to extract basic auth style apikey",
                "type" : "object",
                "properties" : {
                  "headerName" : {
                    "description" : "Header name to get client_id:client_secret base64 encoded",
                    "type" : "string"
                  },
                  "queryName" : {
                    "description" : "Query param name to get client_id:client_secret base64 encoded",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  }
                }
              },
              "jwtAuth" : {
                "description" : "Settings to extract apikey from jwt token",
                "type" : "object",
                "properties" : {
                  "headerName" : {
                    "description" : "Header name to extract jwt token",
                    "type" : "string"
                  },
                  "maxJwtLifespanSecs" : {
                    "format" : "int64",
                    "description" : "Check if token does not have a long lifespan",
                    "type" : "integer"
                  },
                  "keyPairSigned" : {
                    "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                    "type" : "boolean"
                  },
                  "secretSigned" : {
                    "description" : "Jwt token signed with the client_secret",
                    "type" : "boolean"
                  },
                  "queryName" : {
                    "description" : "Query param name to extract jwt token",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  },
                  "cookieName" : {
                    "description" : "Cookie name to extract jwt token",
                    "type" : "string"
                  },
                  "includeRequestAttributes" : {
                    "description" : "Jwt token should include verb and path",
                    "type" : "boolean"
                  }
                }
              },
              "clientIdAuth" : {
                "description" : "Settings to extract client_id only apikey",
                "type" : "object",
                "properties" : {
                  "headerName" : {
                    "description" : "Header name to find client_id",
                    "type" : "string"
                  },
                  "queryName" : {
                    "description" : "Query param name to find client_id",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  }
                }
              }
            }
          },
          "sendInfoToken" : {
            "description" : "Should otoroshi send info token",
            "type" : "boolean"
          },
          "issueCert" : {
            "description" : "Flag to automatically issue a cert for this service",
            "type" : "boolean"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
          },
          "privatePatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
          },
          "gzip" : {
            "description" : "GZIP settings",
            "type" : "object",
            "properties" : {
              "compressionLevel" : {
                "format" : "int32",
                "description" : "Compression level (0 - 9)",
                "type" : "integer"
              },
              "blackList" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "blocklisted content types"
              },
              "chunkedThreshold" : {
                "format" : "int32",
                "description" : "Chunk size",
                "type" : "integer"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "bufferSize" : {
                "format" : "int32",
                "description" : "Buffer size in bytes",
                "type" : "integer"
              },
              "whiteList" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "allow listed content types"
              },
              "enabled" : {
                "description" : "Gzip enabled",
                "type" : "boolean"
              }
            }
          },
          "clientConfig" : {
            "description" : "Http client settings",
            "type" : "object",
            "properties" : {
              "sampleInterval" : {
                "format" : "int64",
                "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                "type" : "integer"
              },
              "backoffFactor" : {
                "format" : "int64",
                "description" : "Specify the factor to multiply the delay for each retry",
                "type" : "integer"
              },
              "customTimeouts" : {
                "description" : "Custom timeouts per path",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "path" : {
                      "description" : "path on which this configuration works",
                      "type" : "string"
                    },
                    "callAndStreamTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                      "type" : "integer"
                    },
                    "callTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                      "type" : "integer"
                    },
                    "idleTimeout" : {
                      "format" : "int64",
                      "description" : "Timeout on idle connection",
                      "type" : "integer"
                    },
                    "globalTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                      "type" : "integer"
                    },
                    "connectionTimeout" : {
                      "format" : "int64",
                      "description" : "Timeout at connection",
                      "type" : "integer"
                    }
                  }
                }
              },
              "callAndStreamTimeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                "type" : "integer"
              },
              "retryInitialDelay" : {
                "format" : "int64",
                "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                "type" : "integer"
              },
              "callTimeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                "type" : "integer"
              },
              "useCircuitBreaker" : {
                "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
                "type" : "boolean"
              },
              "retries" : {
                "format" : "int32",
                "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                "type" : "integer"
              },
              "proxy" : {
                "description" : "Web proxy settings for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "maxErrors" : {
                "format" : "int32",
                "description" : "Specify how many errors can pass before opening the circuit breaker",
                "type" : "integer"
              },
              "idleTimeout" : {
                "format" : "int64",
                "description" : "Timeout on idle connection",
                "type" : "integer"
              },
              "globalTimeout" : {
                "format" : "int64",
                "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                "type" : "integer"
              },
              "cacheConnectionSettings" : {
                "description" : "Cached connection settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Enable Cached connections at host tevel",
                    "type" : "boolean"
                  },
                  "queueSize" : {
                    "format" : "int32",
                    "description" : "The size for the request queue",
                    "type" : "integer"
                  }
                }
              },
              "connectionTimeout" : {
                "format" : "int64",
                "description" : "Timeout at connection",
                "type" : "integer"
              }
            }
          },
          "env" : {
            "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
            "type" : "string"
          },
          "jwtVerifier" : {
            "description" : "JWT verifiers settings",
            "type" : "object",
            "properties" : {
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Verifier excluded paths"
              },
              "metadata" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Entity metadata"
              },
              "source" : {
                "description" : "Token source",
                "oneOfConstraints" : [ {
                  "required" : [ "name", "type" ]
                }, {
                  "required" : [ "name", "type", "remove" ]
                }, {
                  "required" : [ "name", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "description" : "Query param name",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of location",
                    "type" : "string",
                    "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                  },
                  "remove" : {
                    "description" : "Remove from value",
                    "type" : "string"
                  }
                }
              },
              "type" : {
                "description" : "the kind of verifier",
                "type" : "string",
                "enum" : [ "global", "local", "ref" ]
              },
              "_loc" : {
                "description" : "Entity location",
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Teams of the current entity",
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "tenant" : {
                    "description" : "Organization of the current entity",
                    "type" : "string"
                  }
                }
              },
              "enabled" : {
                "description" : "Verifier enabled",
                "type" : "boolean"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Entity tags"
              },
              "algoSettings" : {
                "description" : "Algo settings",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "name" : {
                "description" : "Verifier name",
                "type" : "string"
              },
              "ids" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Verifiers ids"
              },
              "id" : {
                "description" : "Verifier id",
                "type" : "string"
              },
              "strict" : {
                "description" : "Strict token verification",
                "type" : "boolean"
              },
              "strategy" : {
                "description" : "Token strategy",
                "oneOfConstraints" : [ {
                  "required" : [ "verificationSettings", "type", "strict", "token" ]
                }, {
                  "required" : [ "verificationSettings", "type" ]
                }, {
                  "required" : [ "algoSettings", "verificationSettings", "type" ]
                }, {
                  "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "verificationSettings" : {
                    "description" : "Verification settings",
                    "type" : "object",
                    "properties" : {
                      "fields" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Fields validation"
                      },
                      "arrayFields" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Fields array validation"
                      }
                    }
                  },
                  "type" : {
                    "description" : "the kind of strategy",
                    "type" : "string",
                    "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                  },
                  "strict" : {
                    "description" : "If the token already exists in the request, then fail",
                    "type" : "boolean"
                  },
                  "token" : {
                    "description" : "The default token",
                    "type" : "object"
                  },
                  "algoSettings" : {
                    "description" : "Algorithm settings for re-signing token",
                    "oneOfConstraints" : [ {
                      "required" : [ "privateKey", "size", "publicKey", "type" ]
                    }, {
                      "required" : [ "size", "certId", "type" ]
                    }, {
                      "required" : [ "size", "base64", "secret", "type" ]
                    }, {
                      "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                    }, {
                      "required" : [ "onlyExposedCerts", "type" ]
                    }, {
                      "required" : [ "size", "certId", "type" ]
                    }, {
                      "required" : [ "privateKey", "size", "publicKey", "type" ]
                    } ],
                    "type" : "object",
                    "properties" : {
                      "privateKey" : {
                        "description" : "Private key (for signing)",
                        "type" : "string"
                      },
                      "size" : {
                        "format" : "int32",
                        "description" : "SHA function size",
                        "type" : "integer"
                      },
                      "publicKey" : {
                        "description" : "Public key (for verification)",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of algosettings",
                        "type" : "string",
                        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                      },
                      "certId" : {
                        "description" : "Certificate id",
                        "type" : "string"
                      },
                      "base64" : {
                        "description" : "The secret is base64 encoded",
                        "type" : "boolean"
                      },
                      "secret" : {
                        "description" : "HMAC secret",
                        "type" : "string"
                      },
                      "kty" : {
                        "description" : "Key type",
                        "type" : "string"
                      },
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Http header when fetching JWKS"
                      },
                      "proxy" : {
                        "description" : "Web proxy for http client",
                        "oneOfConstraints" : [ ],
                        "type" : "object",
                        "properties" : { }
                      },
                      "ttl" : {
                        "description" : "Cache ttl",
                        "type" : "number"
                      },
                      "url" : {
                        "description" : "JWKS url",
                        "type" : "string"
                      },
                      "timeout" : {
                        "description" : "Timeout when fetching JWKS",
                        "type" : "number"
                      },
                      "tlsConfig" : {
                        "description" : "TLS config",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "onlyExposedCerts" : {
                        "description" : "Use only exposed certs",
                        "type" : "boolean"
                      }
                    }
                  },
                  "transformSettings" : {
                    "description" : "Transformation settings",
                    "type" : "object",
                    "properties" : {
                      "mappingSettings" : {
                        "description" : "Token mapping settings",
                        "type" : "object",
                        "properties" : {
                          "map" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Change values"
                          },
                          "values" : {
                            "description" : "Add values",
                            "type" : "object"
                          },
                          "remove" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Remove some token claims"
                          }
                        }
                      },
                      "location" : {
                        "description" : "Location of the token",
                        "type" : "object",
                        "properties" : {
                          "name" : {
                            "description" : "Query param name",
                            "type" : "string"
                          },
                          "type" : {
                            "description" : "the kind of location",
                            "type" : "string",
                            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                          },
                          "remove" : {
                            "description" : "Remove from value",
                            "type" : "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "desc" : {
                "description" : "Verifier description",
                "type" : "string"
              }
            }
          },
          "allowHttp10" : {
            "description" : "Allow HTTP/1.0 requests",
            "type" : "boolean"
          },
          "publicPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
          },
          "secComAlgoChallengeBackToOto" : {
            "description" : "Algorithm to verify challenge token coming from the backend",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              }
            }
          },
          "localScheme" : {
            "description" : "The scheme used localy, mainly http",
            "type" : "string"
          },
          "healthCheck" : {
            "description" : "Healthcheck settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                "type" : "boolean"
              },
              "url" : {
                "description" : "The URL to check",
                "type" : "string"
              }
            }
          },
          "matchingHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
          },
          "overrideHost" : {
            "description" : "Host header will be overriden with Host of the target",
            "type" : "boolean"
          },
          "secComUseSameAlgo" : {
            "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
            "type" : "boolean"
          },
          "accessValidator" : {
            "description" : "Service access validatiors",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Access validator plugins enabled",
                "type" : "boolean"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled plugins"
              },
              "config" : {
                "description" : "Access validator plugins configuration",
                "type" : "object"
              }
            }
          }
        }
      },
      "config" : {
        "description" : "The current plugin config.",
        "type" : "object"
      },
      "user" : {
        "description" : "The current user",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "lastRefresh" : {
            "description" : "Session last refresh (if OAuth refresh_token supported)",
            "type" : "number"
          },
          "profile" : {
            "description" : "Session user profile",
            "type" : "object"
          },
          "authConfigId" : {
            "description" : "Auth module id that created the session",
            "type" : "string"
          },
          "_loc" : {
            "description" : "Entity location",
            "type" : "object",
            "properties" : {
              "teams" : {
                "description" : "Teams of the current entity",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tenant" : {
                "description" : "Organization of the current entity",
                "type" : "string"
              }
            }
          },
          "token" : {
            "description" : "Session tokens (from OAuth)",
            "type" : "object"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "expiredAt" : {
            "description" : "Session expiration date",
            "type" : "number"
          },
          "createdAt" : {
            "description" : "Creation date of the session",
            "type" : "number"
          },
          "randomId" : {
            "description" : "Session random id",
            "type" : "string"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "realm" : {
            "description" : "Session realm name",
            "type" : "string"
          },
          "email" : {
            "description" : "Session user email",
            "type" : "string"
          },
          "otoroshiData" : {
            "description" : "Otoroshi oriented metadata",
            "type" : "object"
          }
        }
      },
      "attrs" : {
        "description" : "The current request attributes",
        "type" : "object",
        "properties" : { }
      }
    }
  },
  "otoroshi.next.plugins.JQResponseConfig" : {
    "description" : "Configuration for JQResponse",
    "type" : "object",
    "properties" : {
      "filter" : {
        "description" : "JQ filter for response",
        "type" : "string"
      }
    }
  },
  "otoroshi.utils.http.MtlsConfig" : {
    "description" : "TLS settings for the http client",
    "type" : "object",
    "properties" : {
      "mtls" : {
        "description" : "Enabled",
        "type" : "boolean"
      },
      "loose" : {
        "description" : "Loose verification",
        "type" : "boolean"
      },
      "trustAll" : {
        "description" : "Trust any certificate",
        "type" : "boolean"
      },
      "trustedCerts" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Trusted cert. ids"
      },
      "certs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Trusted cert. ids"
      }
    }
  },
  "otoroshi.plugins.geoloc.IpStackGeolocationInfoExtractor" : {
    "description" : "Plugin that extracts geolocation based on ipstack",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.metrics.PrometheusServiceMetrics" : {
    "description" : "Plugin to collect service metrics",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesClient" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "env" : {
        "description" : "The current env",
        "type" : "object",
        "properties" : {
          "circuitBeakersHolder" : {
            "description" : "The current instance of circuit breakers holder",
            "type" : "object",
            "properties" : { }
          }
        }
      },
      "config" : {
        "description" : "The current client config.",
        "type" : "object",
        "properties" : {
          "watchGracePeriodSeconds" : {
            "format" : "int32",
            "description" : "The number of second to wait between receiving a change event and the actual sync",
            "type" : "integer"
          },
          "openshiftDnsOperatorCoreDnsName" : {
            "description" : "DNS operator name",
            "type" : "string"
          },
          "clusterDomain" : {
            "description" : "The current kubernetes cluster domain",
            "type" : "string"
          },
          "useProxyState" : {
            "description" : "Use proxy state instead of loading everything from datastore",
            "type" : "boolean"
          },
          "otoroshiNamespace" : {
            "description" : "The namespace where otoroshi is deployed",
            "type" : "string"
          },
          "crds" : {
            "description" : "Enabled crds integration",
            "type" : "boolean"
          },
          "coreDnsDeploymentName" : {
            "description" : "The name of the coredns deployment",
            "type" : "string"
          },
          "namespacesLabels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Kubernetes namespaces with those labels that will be query"
          },
          "triggerPath" : {
            "description" : "--",
            "type" : "string"
          },
          "coreDnsIntegration" : {
            "description" : "Enable coredns integration",
            "type" : "boolean"
          },
          "openshiftDnsOperatorIntegration" : {
            "description" : "Enable the openshift operator integration",
            "type" : "boolean"
          },
          "openshiftDnsOperatorCoreDnsNamespace" : {
            "description" : "DNS operator namespace",
            "type" : "string"
          },
          "watchTimeoutSeconds" : {
            "format" : "int32",
            "description" : "The timeout to call a watch resources",
            "type" : "integer"
          },
          "kubeSystemNamespace" : {
            "description" : "The namespace containing coredns",
            "type" : "string"
          },
          "image" : {
            "description" : "Sidecar image",
            "type" : "string"
          },
          "syncIntervalSeconds" : {
            "format" : "int64",
            "description" : "Number of seconds between syncs",
            "type" : "integer"
          },
          "syncDaikokuApikeysOnly" : {
            "description" : "Sync only daikoku apikeys",
            "type" : "boolean"
          },
          "templates" : {
            "description" : "Templates for created entities",
            "type" : "object"
          },
          "openshiftDnsOperatorCleanupNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Cleanup DNS operator based on names"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Kubernetes entities with those labels will be query"
          },
          "openshiftDnsOperatorCoreDnsPort" : {
            "format" : "int32",
            "description" : "DNS operator port number",
            "type" : "integer"
          },
          "validatingWebhookName" : {
            "description" : "The name of the validating webhook",
            "type" : "string"
          },
          "kubeDnsOperatorCoreDnsNamespace" : {
            "description" : "Kube dns namespace",
            "type" : "string"
          },
          "namespaces" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Kubernetes namespaces that will be query"
          },
          "ingressClasses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Ingress classes watched by otoroshi ingress controller"
          },
          "trust" : {
            "description" : "Trust Kube CA",
            "type" : "boolean"
          },
          "triggerKey" : {
            "description" : "--",
            "type" : "string"
          },
          "userPassword" : {
            "description" : "Optional username/password to access kube api",
            "type" : "string"
          },
          "caCert" : {
            "description" : "The kubernetes cacert",
            "type" : "string"
          },
          "kubeDnsOperatorCoreDnsPort" : {
            "format" : "int32",
            "description" : "Kube dns port number",
            "type" : "integer"
          },
          "ingressEndpointPublishedService" : {
            "description" : "--",
            "type" : "string"
          },
          "coreDnsConfigMapName" : {
            "description" : "The name of the coredns config-map",
            "type" : "string"
          },
          "endpoint" : {
            "description" : "Kube API endpoint",
            "type" : "string"
          },
          "restartDependantDeployments" : {
            "description" : "If enabled, deployments dependant to otoroshi managed secrets (apikeys, certs) will be automatically restarted as secrets are updated",
            "type" : "boolean"
          },
          "defaultGroup" : {
            "description" : "Otoroshi groups where ingress services will be created",
            "type" : "string"
          },
          "ingressEndpointHostname" : {
            "description" : "--",
            "type" : "string"
          },
          "kubeDnsOperatorCoreDnsName" : {
            "description" : "Kube dns name",
            "type" : "string"
          },
          "coreDnsIntegrationDryRun" : {
            "description" : "Do not modify coredns config automatically",
            "type" : "boolean"
          },
          "ingressEndpointIp" : {
            "description" : "--",
            "type" : "string"
          },
          "mutatingWebhookName" : {
            "description" : "Sidecar webhook name",
            "type" : "string"
          },
          "otoroshiServiceName" : {
            "description" : "The service name for otoroshi",
            "type" : "string"
          },
          "meshDomain" : {
            "description" : "The domain used for service mesh",
            "type" : "string"
          },
          "ingresses" : {
            "description" : "Enable ingress controller",
            "type" : "boolean"
          },
          "triggerHost" : {
            "description" : "--",
            "type" : "string"
          },
          "openshiftDnsOperatorCleanupDomains" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Cleanup DNS operator based on domains"
          },
          "token" : {
            "description" : "Kube API access token",
            "type" : "string"
          },
          "corednsPort" : {
            "format" : "int32",
            "description" : "Port of coredns",
            "type" : "integer"
          },
          "watch" : {
            "description" : "Enabled resources watch",
            "type" : "boolean"
          },
          "kubeLeader" : {
            "description" : "Use kubernetes to select a leader",
            "type" : "boolean"
          },
          "coreDnsEnv" : {
            "description" : "Domain name prefix",
            "type" : "string"
          },
          "openshiftDnsOperatorCleanup" : {
            "description" : "Cleanup DNS operator",
            "type" : "boolean"
          },
          "kubeDnsOperatorIntegration" : {
            "description" : "Enable the legacy kubedns operator integration",
            "type" : "boolean"
          }
        }
      }
    }
  },
  "otoroshi.models.RefJwtVerifier" : {
    "description" : "Reference to a jwt verifier",
    "type" : "object",
    "properties" : {
      "excludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Verifier excluded paths"
      },
      "ids" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Verifiers ids"
      },
      "type" : {
        "description" : "the kind of verifier",
        "type" : "string",
        "enum" : [ "global", "local", "ref" ]
      },
      "enabled" : {
        "description" : "Verifier enabled",
        "type" : "boolean"
      }
    }
  },
  "TokenResponse" : {
    "type" : "object",
    "description" : "User login token response",
    "properties" : {
      "valid" : {
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.AuthModule" : {
    "description" : "Plugin to use auth. modules",
    "type" : "object",
    "properties" : {
      "module" : {
        "description" : "Id of the auth. module",
        "type" : "string"
      },
      "pass_with_apikey" : {
        "description" : "let the request pass if an apikey is present",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.plugins.clientcert.HasClientCertValidator" : {
    "description" : "Plugin that validates client certificates",
    "type" : "object",
    "properties" : { }
  },
  "ScriptsList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Entity metadata"
        },
        "code" : {
          "description" : "The code of the script",
          "type" : "string"
        },
        "name" : {
          "description" : "The name of the script",
          "type" : "string"
        },
        "id" : {
          "description" : "The id of the script",
          "type" : "string"
        },
        "type" : {
          "description" : "Plugin kind",
          "type" : "string",
          "enum" : [ "app", "transformer", "validator", "preroute", "sink", "listener", "job", "exporter" ]
        },
        "_loc" : {
          "description" : "Entity location",
          "type" : "object",
          "properties" : {
            "teams" : {
              "description" : "Teams of the current entity",
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "tenant" : {
              "description" : "Organization of the current entity",
              "type" : "string"
            }
          }
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Entity tags"
        },
        "desc" : {
          "description" : "The description of the script",
          "type" : "string"
        }
      }
    }
  },
  "otoroshi.models.WeightedBestResponseTime" : {
    "description" : "Loadbalancing policy that route to best response time targets with a weight",
    "type" : "object",
    "properties" : {
      "ratio" : {
        "format" : "double",
        "description" : "Weight ratio",
        "type" : "number"
      }
    }
  },
  "otoroshi.next.plugins.AdditionalHeadersIn" : {
    "description" : "Plugin that add headers on a request",
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The headers added to the request"
      }
    }
  },
  "LetsEncryptCertBody" : {
    "type" : "object",
    "description" : "PEM encoded certificate"
  },
  "otoroshi.script.PreRoutingContext" : {
    "description" : "Context for preroutes plugins",
    "type" : "object",
    "properties" : {
      "snowflake" : {
        "description" : "The current request snowflake",
        "type" : "string"
      },
      "globalConfig" : {
        "description" : "The current global config",
        "type" : "object"
      },
      "index" : {
        "format" : "int32",
        "description" : "The current plugin index",
        "type" : "integer"
      },
      "descriptor" : {
        "description" : "The current service descriptor",
        "type" : "object",
        "properties" : {
          "removeHeadersIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client request"
          },
          "missingOnlyHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client response if they are not present"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Just a bunch of random properties"
          },
          "tcpUdpTunneling" : {
            "description" : "Enabled TCP/UDP tunneling through websocket connection",
            "type" : "boolean"
          },
          "cors" : {
            "description" : "CORS settings",
            "type" : "object",
            "properties" : {
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors excluded patterns"
              },
              "allowMethods" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors allowed methods"
              },
              "allowHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors allowed headers"
              },
              "exposeHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors exposed header"
              },
              "maxAge" : {
                "description" : "Cors max age",
                "type" : "number"
              },
              "enabled" : {
                "description" : "Whether or not cors is enabled",
                "type" : "boolean"
              },
              "allowCredentials" : {
                "description" : "Allow to pass credentials",
                "type" : "boolean"
              },
              "allowOrigin" : {
                "description" : "The cors allowed origin",
                "type" : "string"
              }
            }
          },
          "forceHttps" : {
            "description" : "Will force redirection to https:// if not present",
            "type" : "boolean"
          },
          "matchingRoot" : {
            "description" : "The root path on which the service is available",
            "type" : "string"
          },
          "plugins" : {
            "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
            "type" : "object",
            "properties" : {
              "config" : {
                "description" : "Plugins configuration",
                "type" : "object"
              },
              "enabled" : {
                "description" : "Plugins enabled",
                "type" : "boolean"
              },
              "excluded" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled plugins"
              }
            }
          },
          "letsEncrypt" : {
            "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
            "type" : "boolean"
          },
          "useNewWSClient" : {
            "description" : "Use akka http client for this service on websocket calls",
            "type" : "boolean"
          },
          "chaosConfig" : {
            "description" : "Chaos engineering settings",
            "type" : "object",
            "properties" : {
              "badResponsesFaultConfig" : {
                "description" : "Settings for bad responses",
                "type" : "object",
                "properties" : {
                  "responses" : {
                    "description" : "The possibles responses",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "status" : {
                          "format" : "int32",
                          "description" : "The HTTP status for the response",
                          "type" : "integer"
                        },
                        "body" : {
                          "description" : "The body of the HTTP response",
                          "type" : "string"
                        },
                        "headers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "The HTTP headers of the response"
                        }
                      }
                    }
                  },
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  }
                }
              },
              "largeResponseFaultConfig" : {
                "description" : "Settings for large responses",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "additionalResponseSize" : {
                    "format" : "int32",
                    "description" : "Add n 0 bytes",
                    "type" : "integer"
                  }
                }
              },
              "latencyInjectionFaultConfig" : {
                "description" : "Settings for latency injection",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "from" : {
                    "description" : "The start range of latency added to the request",
                    "type" : "number"
                  },
                  "to" : {
                    "description" : "The end range of latency added to the request",
                    "type" : "number"
                  }
                }
              },
              "largeRequestFaultConfig" : {
                "description" : "Settings for large requests",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "additionalRequestSize" : {
                    "format" : "int32",
                    "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                    "type" : "integer"
                  }
                }
              },
              "enabled" : {
                "description" : "Whether or not this config is enabled",
                "type" : "boolean"
              }
            }
          },
          "secComSettings" : {
            "description" : "Sec. com. settings",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              }
            }
          },
          "detectApiKeySooner" : {
            "description" : "Detect if an apikey is present but do not fail if not",
            "type" : "boolean"
          },
          "transformerRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled transformer plugins"
          },
          "secComAlgoInfoToken" : {
            "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              }
            }
          },
          "missingOnlyHeadersIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client request if they are not present"
          },
          "secComAlgoChallengeOtoToBack" : {
            "description" : "Algorithm to sign challenge token to the backend",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              }
            }
          },
          "removeHeadersOut" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client response"
          },
          "stripPath" : {
            "description" : "Strip matching path in the forwarded request path",
            "type" : "boolean"
          },
          "localHost" : {
            "description" : "The host used localy, mainly localhost:xxxx",
            "type" : "string"
          },
          "sendOtoroshiHeadersBack" : {
            "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
            "type" : "boolean"
          },
          "id" : {
            "description" : "A unique random string to identify your service",
            "type" : "string"
          },
          "api" : {
            "description" : "Api exposition settings",
            "type" : "object",
            "properties" : {
              "exposeApi" : {
                "description" : "Is this an API",
                "type" : "boolean"
              },
              "openApiDescriptorUrl" : {
                "description" : "openapi descriptor url",
                "type" : "string"
              }
            }
          },
          "secComTtl" : {
            "description" : "TTL for the info token",
            "type" : "number"
          },
          "secComVersion" : {
            "description" : "Version of the challenge token",
            "type" : "string",
            "enum" : [ "V1", "v2" ]
          },
          "targetsLoadBalancing" : {
            "description" : "Loadbalancing strategy",
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
              },
              "ratio" : {
                "type" : "number",
                "format" : "double"
              }
            }
          },
          "userFacing" : {
            "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Possible hosts for the service"
          },
          "restrictions" : {
            "description" : "Restriction settings",
            "type" : "object",
            "properties" : {
              "allowed" : {
                "description" : "Allowed paths",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "allowLast" : {
                "description" : "Evalute allowed paths after everything else",
                "type" : "boolean"
              },
              "forbidden" : {
                "description" : "Forbidden paths (return 403)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "notFound" : {
                "description" : "Not found paths (return 404)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Restrictions enabled",
                "type" : "boolean"
              }
            }
          },
          "readOnly" : {
            "description" : "Service only accepts GET, HEAD and OPTIONS requests",
            "type" : "boolean"
          },
          "secComInfoTokenVersion" : {
            "description" : "Version of the info token",
            "type" : "string",
            "enum" : [ "Legacy", "Latest" ]
          },
          "_loc" : {
            "description" : "Entity location",
            "type" : "object",
            "properties" : {
              "teams" : {
                "description" : "Teams of the current entity",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tenant" : {
                "description" : "Organization of the current entity",
                "type" : "string"
              }
            }
          },
          "enforceSecureCommunication" : {
            "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "clientValidatorRef" : {
            "description" : "A reference to validation authority",
            "type" : "string"
          },
          "privateApp" : {
            "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
            "type" : "boolean"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching paths on request"
          },
          "domain" : {
            "description" : "The domain on which the service is available.",
            "type" : "string"
          },
          "name" : {
            "description" : "The name of your service. Only for debug and human readability purposes",
            "type" : "string"
          },
          "transformerConfig" : {
            "description" : "Transformer plugins configuration",
            "type" : "object"
          },
          "subdomain" : {
            "description" : "The subdomain on which the service is available",
            "type" : "string"
          },
          "maintenanceMode" : {
            "description" : "Display a maintainance page when a user try to use the service",
            "type" : "boolean"
          },
          "secComHeaders" : {
            "description" : "Header names for sec. com. protocol",
            "type" : "object",
            "properties" : {
              "stateResponseName" : {
                "description" : "Header name where the validation token respondewill be",
                "type" : "string"
              },
              "claimRequestName" : {
                "description" : "Header name where the info token will be",
                "type" : "string"
              },
              "stateRequestName" : {
                "description" : "Header name where the validation token will be",
                "type" : "string"
              }
            }
          },
          "handleLegacyDomain" : {
            "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
            "type" : "boolean"
          },
          "logAnalyticsOnServer" : {
            "description" : "Log analytics event on the server",
            "type" : "boolean"
          },
          "strictlyPrivate" : {
            "description" : "When strictly private, private app session will not pass apikey filters",
            "type" : "boolean"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "buildMode" : {
            "description" : "Display a construction page when a user try to use the service",
            "type" : "boolean"
          },
          "targets" : {
            "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "predicate" : {
                  "description" : "Predicate to choose this target",
                  "type" : "object",
                  "properties" : {
                    "rack" : {
                      "description" : "Rack name",
                      "type" : "string"
                    },
                    "provider" : {
                      "description" : "Provider name",
                      "type" : "string"
                    },
                    "dataCenter" : {
                      "description" : "Datacenter name",
                      "type" : "string"
                    },
                    "zone" : {
                      "description" : "Zone name",
                      "type" : "string"
                    },
                    "positions" : {
                      "description" : "Possible positions",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "latitude" : {
                            "format" : "double",
                            "description" : "Latitude of the position",
                            "type" : "number"
                          },
                          "longitude" : {
                            "format" : "double",
                            "description" : "Longitude of the position",
                            "type" : "number"
                          },
                          "radius" : {
                            "format" : "double",
                            "description" : "Radius of the circle in meters",
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of predicate",
                      "type" : "string",
                      "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                    },
                    "region" : {
                      "description" : "Region name",
                      "type" : "string"
                    },
                    "dc" : {
                      "description" : "DC name",
                      "type" : "string"
                    }
                  }
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata for this target"
                },
                "protocol" : {
                  "description" : "Protocol for the target",
                  "type" : "string"
                },
                "scheme" : {
                  "description" : "The protocol used for communication. Can be http or https",
                  "type" : "string"
                },
                "mtlsConfig" : {
                  "description" : "TLS settings to contact this target",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "host" : {
                  "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                  "type" : "string"
                },
                "ipAddress" : {
                  "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                  "type" : "string"
                },
                "weight" : {
                  "format" : "int32",
                  "description" : "The weight of the target when choosing",
                  "type" : "integer"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Tags for this target"
                }
              }
            }
          },
          "enabled" : {
            "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
            "type" : "boolean"
          },
          "additionalHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client response"
          },
          "sendStateChallenge" : {
            "description" : "Should otoroshi send challenge token",
            "type" : "boolean"
          },
          "root" : {
            "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
            "type" : "string"
          },
          "additionalHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client request. Useful to add authentication"
          },
          "issueCertCA" : {
            "description" : "CA for cert issuance",
            "type" : "string"
          },
          "ipFiltering" : {
            "description" : "Ip filtering settings",
            "type" : "object",
            "properties" : {
              "whitelist" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Whitelisted IP addresses"
              },
              "blacklist" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Blacklisted IP addresses"
              }
            }
          },
          "redirection" : {
            "description" : "Redirection settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Whether or not redirection is enabled",
                "type" : "boolean"
              },
              "code" : {
                "format" : "int32",
                "description" : "The http redirect code",
                "type" : "integer"
              },
              "to" : {
                "description" : "The location for redirection",
                "type" : "string"
              }
            }
          },
          "redirectToLocal" : {
            "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
            "type" : "boolean"
          },
          "headersVerification" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be verified after routing."
          },
          "useAkkaHttpClient" : {
            "description" : "Use akka http client for this service",
            "type" : "boolean"
          },
          "securityExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Exclude some paths"
          },
          "authConfigRef" : {
            "description" : "A reference to a global auth module config",
            "type" : "string"
          },
          "preRouting" : {
            "description" : "Pre routing plugin settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "pre-routing plugins enabled",
                "type" : "boolean"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled plugins"
              },
              "config" : {
                "description" : "pre-routing plugins configuration",
                "type" : "object"
              }
            }
          },
          "canary" : {
            "description" : "Canary settings",
            "type" : "object",
            "properties" : {
              "root" : {
                "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                "type" : "string"
              },
              "targets" : {
                "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "predicate" : {
                      "description" : "Predicate to choose this target",
                      "type" : "object",
                      "properties" : {
                        "rack" : {
                          "description" : "Rack name",
                          "type" : "string"
                        },
                        "provider" : {
                          "description" : "Provider name",
                          "type" : "string"
                        },
                        "dataCenter" : {
                          "description" : "Datacenter name",
                          "type" : "string"
                        },
                        "zone" : {
                          "description" : "Zone name",
                          "type" : "string"
                        },
                        "positions" : {
                          "description" : "Possible positions",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "latitude" : {
                                "format" : "double",
                                "description" : "Latitude of the position",
                                "type" : "number"
                              },
                              "longitude" : {
                                "format" : "double",
                                "description" : "Longitude of the position",
                                "type" : "number"
                              },
                              "radius" : {
                                "format" : "double",
                                "description" : "Radius of the circle in meters",
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "description" : "the kind of predicate",
                          "type" : "string",
                          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                        },
                        "region" : {
                          "description" : "Region name",
                          "type" : "string"
                        },
                        "dc" : {
                          "description" : "DC name",
                          "type" : "string"
                        }
                      }
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Metadata for this target"
                    },
                    "protocol" : {
                      "description" : "Protocol for the target",
                      "type" : "string"
                    },
                    "scheme" : {
                      "description" : "The protocol used for communication. Can be http or https",
                      "type" : "string"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings to contact this target",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "host" : {
                      "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                      "type" : "string"
                    },
                    "ipAddress" : {
                      "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                      "type" : "string"
                    },
                    "weight" : {
                      "format" : "int32",
                      "description" : "The weight of the target when choosing",
                      "type" : "integer"
                    },
                    "tags" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Tags for this target"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Use canary mode for this service",
                "type" : "boolean"
              },
              "traffic" : {
                "format" : "double",
                "description" : "Ratio of traffic that will be sent to canary targets.",
                "type" : "number"
              }
            }
          },
          "secComExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "URI patterns excluded from secured communications"
          },
          "xForwardedHeaders" : {
            "description" : "Send X-Forwarded-* headers",
            "type" : "boolean"
          },
          "apiKeyConstraints" : {
            "description" : "Routing and extraction constraints for the apikeyh",
            "type" : "object",
            "properties" : {
              "routing" : {
                "description" : "Routing settings for this apikey",
                "type" : "object",
                "properties" : {
                  "oneTagIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "outing if one tag presents in apikey"
                  },
                  "noneMetaKeysIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if none meta keys presents in apikey"
                  },
                  "oneMetaIn" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Routing if one meta presents in apikey"
                  },
                  "oneMetaKeyIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if one meta key presents in apikey"
                  },
                  "allMetaKeysIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if all meta keys presents in apikey"
                  },
                  "noneTagIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if none tags presents in apikey"
                  },
                  "allTagsIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if all tags presents in apikey"
                  },
                  "allMetaIn" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Routing if all meta presents in apikey"
                  },
                  "noneMetaIn" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Routing if none meta presents in apikey"
                  }
                }
              },
              "customHeadersAuth" : {
                "description" : "Settings to extract apikey from custom headers",
                "type" : "object",
                "properties" : {
                  "clientSecretHeaderName" : {
                    "description" : "Header name to find client_secret",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  },
                  "clientIdHeaderName" : {
                    "description" : "Header name to find client_id",
                    "type" : "string"
                  }
                }
              },
              "basicAuth" : {
                "description" : "Settings to extract basic auth style apikey",
                "type" : "object",
                "properties" : {
                  "headerName" : {
                    "description" : "Header name to get client_id:client_secret base64 encoded",
                    "type" : "string"
                  },
                  "queryName" : {
                    "description" : "Query param name to get client_id:client_secret base64 encoded",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  }
                }
              },
              "jwtAuth" : {
                "description" : "Settings to extract apikey from jwt token",
                "type" : "object",
                "properties" : {
                  "headerName" : {
                    "description" : "Header name to extract jwt token",
                    "type" : "string"
                  },
                  "maxJwtLifespanSecs" : {
                    "format" : "int64",
                    "description" : "Check if token does not have a long lifespan",
                    "type" : "integer"
                  },
                  "keyPairSigned" : {
                    "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                    "type" : "boolean"
                  },
                  "secretSigned" : {
                    "description" : "Jwt token signed with the client_secret",
                    "type" : "boolean"
                  },
                  "queryName" : {
                    "description" : "Query param name to extract jwt token",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  },
                  "cookieName" : {
                    "description" : "Cookie name to extract jwt token",
                    "type" : "string"
                  },
                  "includeRequestAttributes" : {
                    "description" : "Jwt token should include verb and path",
                    "type" : "boolean"
                  }
                }
              },
              "clientIdAuth" : {
                "description" : "Settings to extract client_id only apikey",
                "type" : "object",
                "properties" : {
                  "headerName" : {
                    "description" : "Header name to find client_id",
                    "type" : "string"
                  },
                  "queryName" : {
                    "description" : "Query param name to find client_id",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  }
                }
              }
            }
          },
          "sendInfoToken" : {
            "description" : "Should otoroshi send info token",
            "type" : "boolean"
          },
          "issueCert" : {
            "description" : "Flag to automatically issue a cert for this service",
            "type" : "boolean"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
          },
          "privatePatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
          },
          "gzip" : {
            "description" : "GZIP settings",
            "type" : "object",
            "properties" : {
              "compressionLevel" : {
                "format" : "int32",
                "description" : "Compression level (0 - 9)",
                "type" : "integer"
              },
              "blackList" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "blocklisted content types"
              },
              "chunkedThreshold" : {
                "format" : "int32",
                "description" : "Chunk size",
                "type" : "integer"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "bufferSize" : {
                "format" : "int32",
                "description" : "Buffer size in bytes",
                "type" : "integer"
              },
              "whiteList" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "allow listed content types"
              },
              "enabled" : {
                "description" : "Gzip enabled",
                "type" : "boolean"
              }
            }
          },
          "clientConfig" : {
            "description" : "Http client settings",
            "type" : "object",
            "properties" : {
              "sampleInterval" : {
                "format" : "int64",
                "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                "type" : "integer"
              },
              "backoffFactor" : {
                "format" : "int64",
                "description" : "Specify the factor to multiply the delay for each retry",
                "type" : "integer"
              },
              "customTimeouts" : {
                "description" : "Custom timeouts per path",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "path" : {
                      "description" : "path on which this configuration works",
                      "type" : "string"
                    },
                    "callAndStreamTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                      "type" : "integer"
                    },
                    "callTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                      "type" : "integer"
                    },
                    "idleTimeout" : {
                      "format" : "int64",
                      "description" : "Timeout on idle connection",
                      "type" : "integer"
                    },
                    "globalTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                      "type" : "integer"
                    },
                    "connectionTimeout" : {
                      "format" : "int64",
                      "description" : "Timeout at connection",
                      "type" : "integer"
                    }
                  }
                }
              },
              "callAndStreamTimeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                "type" : "integer"
              },
              "retryInitialDelay" : {
                "format" : "int64",
                "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                "type" : "integer"
              },
              "callTimeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                "type" : "integer"
              },
              "useCircuitBreaker" : {
                "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
                "type" : "boolean"
              },
              "retries" : {
                "format" : "int32",
                "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                "type" : "integer"
              },
              "proxy" : {
                "description" : "Web proxy settings for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "maxErrors" : {
                "format" : "int32",
                "description" : "Specify how many errors can pass before opening the circuit breaker",
                "type" : "integer"
              },
              "idleTimeout" : {
                "format" : "int64",
                "description" : "Timeout on idle connection",
                "type" : "integer"
              },
              "globalTimeout" : {
                "format" : "int64",
                "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                "type" : "integer"
              },
              "cacheConnectionSettings" : {
                "description" : "Cached connection settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Enable Cached connections at host tevel",
                    "type" : "boolean"
                  },
                  "queueSize" : {
                    "format" : "int32",
                    "description" : "The size for the request queue",
                    "type" : "integer"
                  }
                }
              },
              "connectionTimeout" : {
                "format" : "int64",
                "description" : "Timeout at connection",
                "type" : "integer"
              }
            }
          },
          "env" : {
            "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
            "type" : "string"
          },
          "jwtVerifier" : {
            "description" : "JWT verifiers settings",
            "type" : "object",
            "properties" : {
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Verifier excluded paths"
              },
              "metadata" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Entity metadata"
              },
              "source" : {
                "description" : "Token source",
                "oneOfConstraints" : [ {
                  "required" : [ "name", "type" ]
                }, {
                  "required" : [ "name", "type", "remove" ]
                }, {
                  "required" : [ "name", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "description" : "Query param name",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of location",
                    "type" : "string",
                    "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                  },
                  "remove" : {
                    "description" : "Remove from value",
                    "type" : "string"
                  }
                }
              },
              "type" : {
                "description" : "the kind of verifier",
                "type" : "string",
                "enum" : [ "global", "local", "ref" ]
              },
              "_loc" : {
                "description" : "Entity location",
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Teams of the current entity",
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "tenant" : {
                    "description" : "Organization of the current entity",
                    "type" : "string"
                  }
                }
              },
              "enabled" : {
                "description" : "Verifier enabled",
                "type" : "boolean"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Entity tags"
              },
              "algoSettings" : {
                "description" : "Algo settings",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "name" : {
                "description" : "Verifier name",
                "type" : "string"
              },
              "ids" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Verifiers ids"
              },
              "id" : {
                "description" : "Verifier id",
                "type" : "string"
              },
              "strict" : {
                "description" : "Strict token verification",
                "type" : "boolean"
              },
              "strategy" : {
                "description" : "Token strategy",
                "oneOfConstraints" : [ {
                  "required" : [ "verificationSettings", "type", "strict", "token" ]
                }, {
                  "required" : [ "verificationSettings", "type" ]
                }, {
                  "required" : [ "algoSettings", "verificationSettings", "type" ]
                }, {
                  "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "verificationSettings" : {
                    "description" : "Verification settings",
                    "type" : "object",
                    "properties" : {
                      "fields" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Fields validation"
                      },
                      "arrayFields" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Fields array validation"
                      }
                    }
                  },
                  "type" : {
                    "description" : "the kind of strategy",
                    "type" : "string",
                    "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                  },
                  "strict" : {
                    "description" : "If the token already exists in the request, then fail",
                    "type" : "boolean"
                  },
                  "token" : {
                    "description" : "The default token",
                    "type" : "object"
                  },
                  "algoSettings" : {
                    "description" : "Algorithm settings for re-signing token",
                    "oneOfConstraints" : [ {
                      "required" : [ "privateKey", "size", "publicKey", "type" ]
                    }, {
                      "required" : [ "size", "certId", "type" ]
                    }, {
                      "required" : [ "size", "base64", "secret", "type" ]
                    }, {
                      "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                    }, {
                      "required" : [ "onlyExposedCerts", "type" ]
                    }, {
                      "required" : [ "size", "certId", "type" ]
                    }, {
                      "required" : [ "privateKey", "size", "publicKey", "type" ]
                    } ],
                    "type" : "object",
                    "properties" : {
                      "privateKey" : {
                        "description" : "Private key (for signing)",
                        "type" : "string"
                      },
                      "size" : {
                        "format" : "int32",
                        "description" : "SHA function size",
                        "type" : "integer"
                      },
                      "publicKey" : {
                        "description" : "Public key (for verification)",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of algosettings",
                        "type" : "string",
                        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                      },
                      "certId" : {
                        "description" : "Certificate id",
                        "type" : "string"
                      },
                      "base64" : {
                        "description" : "The secret is base64 encoded",
                        "type" : "boolean"
                      },
                      "secret" : {
                        "description" : "HMAC secret",
                        "type" : "string"
                      },
                      "kty" : {
                        "description" : "Key type",
                        "type" : "string"
                      },
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Http header when fetching JWKS"
                      },
                      "proxy" : {
                        "description" : "Web proxy for http client",
                        "oneOfConstraints" : [ ],
                        "type" : "object",
                        "properties" : { }
                      },
                      "ttl" : {
                        "description" : "Cache ttl",
                        "type" : "number"
                      },
                      "url" : {
                        "description" : "JWKS url",
                        "type" : "string"
                      },
                      "timeout" : {
                        "description" : "Timeout when fetching JWKS",
                        "type" : "number"
                      },
                      "tlsConfig" : {
                        "description" : "TLS config",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "onlyExposedCerts" : {
                        "description" : "Use only exposed certs",
                        "type" : "boolean"
                      }
                    }
                  },
                  "transformSettings" : {
                    "description" : "Transformation settings",
                    "type" : "object",
                    "properties" : {
                      "mappingSettings" : {
                        "description" : "Token mapping settings",
                        "type" : "object",
                        "properties" : {
                          "map" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Change values"
                          },
                          "values" : {
                            "description" : "Add values",
                            "type" : "object"
                          },
                          "remove" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Remove some token claims"
                          }
                        }
                      },
                      "location" : {
                        "description" : "Location of the token",
                        "type" : "object",
                        "properties" : {
                          "name" : {
                            "description" : "Query param name",
                            "type" : "string"
                          },
                          "type" : {
                            "description" : "the kind of location",
                            "type" : "string",
                            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                          },
                          "remove" : {
                            "description" : "Remove from value",
                            "type" : "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "desc" : {
                "description" : "Verifier description",
                "type" : "string"
              }
            }
          },
          "allowHttp10" : {
            "description" : "Allow HTTP/1.0 requests",
            "type" : "boolean"
          },
          "publicPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
          },
          "secComAlgoChallengeBackToOto" : {
            "description" : "Algorithm to verify challenge token coming from the backend",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              }
            }
          },
          "localScheme" : {
            "description" : "The scheme used localy, mainly http",
            "type" : "string"
          },
          "healthCheck" : {
            "description" : "Healthcheck settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                "type" : "boolean"
              },
              "url" : {
                "description" : "The URL to check",
                "type" : "string"
              }
            }
          },
          "matchingHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
          },
          "overrideHost" : {
            "description" : "Host header will be overriden with Host of the target",
            "type" : "boolean"
          },
          "secComUseSameAlgo" : {
            "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
            "type" : "boolean"
          },
          "accessValidator" : {
            "description" : "Service access validatiors",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Access validator plugins enabled",
                "type" : "boolean"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled plugins"
              },
              "config" : {
                "description" : "Access validator plugins configuration",
                "type" : "object"
              }
            }
          }
        }
      },
      "config" : {
        "description" : "The current plugin config.",
        "type" : "object"
      },
      "attrs" : {
        "description" : "The current request attributes",
        "type" : "object",
        "properties" : { }
      }
    }
  },
  "otoroshi.next.plugins.IpAddressAllowedList" : {
    "description" : "Plugin to allow only some ip addresses",
    "type" : "object",
    "properties" : {
      "addresses" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The list of allowed ip addresses of cidr blocks"
      }
    }
  },
  "otoroshi.plugins.apikeys.ApikeyAuthModule" : {
    "description" : "Plugin that authenticate a website based on apikeys",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.CustomTimeouts" : {
    "description" : "Settings for custom timeouts for a specific path",
    "type" : "object",
    "properties" : {
      "path" : {
        "description" : "path on which this configuration works",
        "type" : "string"
      },
      "callAndStreamTimeout" : {
        "format" : "int64",
        "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
        "type" : "integer"
      },
      "callTimeout" : {
        "format" : "int64",
        "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
        "type" : "integer"
      },
      "idleTimeout" : {
        "format" : "int64",
        "description" : "Timeout on idle connection",
        "type" : "integer"
      },
      "globalTimeout" : {
        "format" : "int64",
        "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
        "type" : "integer"
      },
      "connectionTimeout" : {
        "format" : "int64",
        "description" : "Timeout at connection",
        "type" : "integer"
      }
    }
  },
  "otoroshi.models.BasicAuthConstraints" : {
    "description" : "Settings to extract apikey from a basic auth header like",
    "type" : "object",
    "properties" : {
      "headerName" : {
        "description" : "Header name to get client_id:client_secret base64 encoded",
        "type" : "string"
      },
      "queryName" : {
        "description" : "Query param name to get client_id:client_secret base64 encoded",
        "type" : "string"
      },
      "enabled" : {
        "description" : "Constraint enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.models.Transform" : {
    "description" : "jwt token transformation policy settings",
    "type" : "object",
    "properties" : {
      "transformSettings" : {
        "description" : "Transformation settings",
        "type" : "object",
        "properties" : {
          "mappingSettings" : {
            "description" : "Token mapping settings",
            "type" : "object",
            "properties" : {
              "map" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Change values"
              },
              "values" : {
                "description" : "Add values",
                "type" : "object"
              },
              "remove" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Remove some token claims"
              }
            }
          },
          "location" : {
            "description" : "Location of the token",
            "type" : "object",
            "properties" : {
              "name" : {
                "description" : "Query param name",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of location",
                "type" : "string",
                "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
              },
              "remove" : {
                "description" : "Remove from value",
                "type" : "string"
              }
            }
          }
        }
      },
      "algoSettings" : {
        "description" : "Algorithm settings for re-signing token",
        "oneOfConstraints" : [ {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "size", "base64", "secret", "type" ]
        }, {
          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
        }, {
          "required" : [ "onlyExposedCerts", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          }
        }
      },
      "verificationSettings" : {
        "description" : "Verification settings",
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields validation"
          },
          "arrayFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields array validation"
          }
        }
      },
      "type" : {
        "description" : "the kind of strategy",
        "type" : "string",
        "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
      }
    }
  },
  "otoroshi.models.KidAlgoSettings" : {
    "description" : "Settings to find keypair based on header kid for verification",
    "type" : "object",
    "properties" : {
      "onlyExposedCerts" : {
        "description" : "Use only exposed certs",
        "type" : "boolean"
      },
      "type" : {
        "description" : "the kind of algosettings",
        "type" : "string",
        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
      }
    }
  },
  "otoroshi.plugins.loggers.ResponseBodyEvent" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "status" : {
        "format" : "int32",
        "description" : "The response status",
        "type" : "integer"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The response headers"
      },
      "url" : {
        "description" : "The request url",
        "type" : "string"
      },
      "reqId" : {
        "description" : "The request id",
        "type" : "string"
      },
      "from" : {
        "description" : "The incoming request ip address",
        "type" : "string"
      },
      "ua" : {
        "description" : "The user agent",
        "type" : "string"
      },
      "method" : {
        "description" : "The request method",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.AlwaysMatch" : {
    "type" : "object",
    "description" : "Always select target",
    "properties" : {
      "type" : {
        "type" : "string",
        "enum" : [ "Always" ]
      }
    }
  },
  "otoroshi.next.plugins.MockResponses" : {
    "description" : "Plugin to mock responses",
    "type" : "object",
    "properties" : {
      "pass_through" : {
        "description" : "Pass the call if no mocked response found",
        "type" : "boolean"
      },
      "responses" : {
        "description" : "Possible responses",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "The path for the response",
              "type" : "string"
            },
            "body" : {
              "description" : "The body of the response",
              "type" : "string"
            },
            "status" : {
              "format" : "int32",
              "description" : "The status of the response",
              "type" : "integer"
            },
            "method" : {
              "description" : "The method for the response",
              "type" : "string"
            },
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "The headers of the response"
            }
          }
        }
      }
    }
  },
  "otoroshi.models.TenantId" : {
    "type" : "string",
    "description" : "organization id"
  },
  "otoroshi.auth.SAMLCanocalizationMethod" : {
    "description" : "Canonicalization Method for XML Signatures",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.NgTreeRouter_Test" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "Done" : {
    "type" : "object",
    "description" : "operation is done",
    "properties" : {
      "done" : {
        "type" : "boolean"
      }
    }
  },
  "UserTokenBody" : {
    "type" : "object",
    "properties" : {
      "token" : {
        "type" : "string"
      }
    }
  },
  "otoroshi.utils.mailer.MailgunSettings" : {
    "description" : "Settings for the mailgun mailer",
    "type" : "object",
    "properties" : {
      "eu" : {
        "description" : "European tenant",
        "type" : "boolean"
      },
      "apiKey" : {
        "description" : "Mailgun apikey",
        "type" : "string"
      },
      "domain" : {
        "description" : "Mailgun domain",
        "type" : "string"
      },
      "to" : {
        "description" : "Destination email address",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "description" : "Destination name",
              "type" : "string"
            },
            "email" : {
              "description" : "Email address",
              "type" : "string"
            }
          }
        }
      },
      "type" : {
        "description" : "the kind of mailer",
        "type" : "string",
        "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
      }
    }
  },
  "otoroshi.models.FileSettings" : {
    "description" : "Settings for a file data exporter",
    "type" : "object",
    "properties" : {
      "path" : {
        "description" : "File path",
        "type" : "string"
      },
      "maxFileSize" : {
        "format" : "int32",
        "description" : "Max file size in bytes",
        "type" : "integer"
      },
      "type" : {
        "description" : "the kind of exporter",
        "type" : "string",
        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
      }
    }
  },
  "otoroshi.plugins.workflow.WorkflowEndpoint" : {
    "description" : "Experimental plugin",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.InfraProviderMatch" : {
    "description" : "Match a target if in the same infrastructure",
    "type" : "object",
    "properties" : {
      "provider" : {
        "description" : "provider name",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of predicate",
        "type" : "string",
        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
      }
    }
  },
  "otoroshi.models.Exporter" : {
    "oneOfConstraints" : [ {
      "required" : [ "hostValidation", "servers", "keyPass", "mtlsConfig", "topic", "truststore", "keystore", "sendEvents", "type" ]
    }, {
      "required" : [ "mtlsConfig", "tlsTrustCertsFilePath", "namespace", "topic", "type", "uri", "tenant" ]
    }, {
      "required" : [ "type" ]
    }, {
      "required" : [ "clusterUri", "headers", "password", "indexSettings", "mtlsConfig", "index", "type", "applyTemplate", "version", "user" ]
    }, {
      "required" : [ "ref", "type", "config" ]
    }, {
      "required" : [ "path", "maxFileSize", "type" ]
    }, {
      "required" : [ "type", "labels" ]
    }, {
      "required" : [ "headers", "mtlsConfig", "type", "url" ]
    }, {
      "required" : [ "type" ]
    }, {
      "required" : [ "headers", "to", "type", "url" ]
    }, {
      "required" : [ "type" ]
    }, {
      "required" : [ "headers", "to", "type", "url" ]
    }, {
      "required" : [ "eu", "apiKey", "domain", "to", "type" ]
    }, {
      "required" : [ "apiKeyPrivate", "apiKeyPublic", "to", "type" ]
    }, {
      "required" : [ "type" ]
    }, {
      "required" : [ "apiKey", "to", "type" ]
    }, {
      "required" : [ "eu", "apiKey", "domain", "to", "type" ]
    }, {
      "required" : [ "apiKeyPrivate", "apiKeyPublic", "to", "type" ]
    }, {
      "required" : [ "type" ]
    }, {
      "required" : [ "apiKey", "to", "type" ]
    } ],
    "type" : "object",
    "properties" : {
      "clusterUri" : {
        "description" : "Cluster URL",
        "type" : "string"
      },
      "apiKey" : {
        "description" : "Sendgrid apikey",
        "type" : "string"
      },
      "indexSettings" : {
        "description" : "Indexation settings",
        "type" : "object",
        "properties" : {
          "clientSide" : {
            "description" : "Enable index splitting on client side",
            "type" : "boolean"
          },
          "interval" : {
            "description" : "Index splitting interval",
            "type" : "object",
            "properties" : { }
          }
        }
      },
      "mtlsConfig" : {
        "description" : "TLS config when calling webhook",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "tlsTrustCertsFilePath" : {
        "description" : "Trusted cert path",
        "type" : "string"
      },
      "apiKeyPrivate" : {
        "description" : "Private key",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of mailer",
        "type" : "string",
        "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
      },
      "hostValidation" : {
        "description" : "Enabled TLS hostname validation",
        "type" : "boolean"
      },
      "path" : {
        "description" : "File path",
        "type" : "string"
      },
      "password" : {
        "description" : "Elastic password",
        "type" : "string"
      },
      "ref" : {
        "description" : "Script id",
        "type" : "string"
      },
      "servers" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "URLs of the kafka servers"
      },
      "truststore" : {
        "description" : "Optional truststore",
        "type" : "string"
      },
      "keystore" : {
        "description" : "Optional keystore",
        "type" : "string"
      },
      "sendEvents" : {
        "description" : "Send events to it, or just connect",
        "type" : "boolean"
      },
      "applyTemplate" : {
        "description" : "Enable template creation/update",
        "type" : "boolean"
      },
      "tenant" : {
        "description" : "Pulsar tenant",
        "type" : "string"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Sender headers"
      },
      "index" : {
        "description" : "Index name",
        "type" : "string"
      },
      "maxFileSize" : {
        "format" : "int32",
        "description" : "Max file size in bytes",
        "type" : "integer"
      },
      "uri" : {
        "description" : "Pulsar cluster url",
        "type" : "string"
      },
      "version" : {
        "description" : "Version of Elasticsearch",
        "type" : "string"
      },
      "url" : {
        "description" : "Sender URL",
        "type" : "string"
      },
      "labels" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Exposed labels"
      },
      "eu" : {
        "description" : "European tenant",
        "type" : "boolean"
      },
      "keyPass" : {
        "description" : "Optional keypass",
        "type" : "string"
      },
      "domain" : {
        "description" : "Mailgun domain",
        "type" : "string"
      },
      "namespace" : {
        "description" : "Pulsar namespace",
        "type" : "string"
      },
      "topic" : {
        "description" : "Pulsar topic",
        "type" : "string"
      },
      "apiKeyPublic" : {
        "description" : "Public key",
        "type" : "string"
      },
      "to" : {
        "description" : "Destination email address",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "description" : "Destination name",
              "type" : "string"
            },
            "email" : {
              "description" : "Email address",
              "type" : "string"
            }
          }
        }
      },
      "user" : {
        "description" : "Elasticsearch user",
        "type" : "string"
      },
      "config" : {
        "description" : "Script config",
        "type" : "object"
      }
    }
  },
  "otoroshi.plugins.discovery.SelfRegistrationConfig" : {
    "description" : "Configuration for the DiscoverySelfRegistrationTransformer plugin",
    "type" : "object",
    "properties" : {
      "registrationTtl" : {
        "description" : "the ttl for a service registration",
        "type" : "number"
      },
      "targetTemplate" : {
        "description" : "A json template for otoroshi target",
        "type" : "object"
      },
      "hosts" : {
        "description" : "The possible list of hosts for a service",
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      }
    }
  },
  "otoroshi.next.models.NgMatchedRoutes" : {
    "description" : "A set of matched routes in the new router",
    "type" : "object",
    "properties" : {
      "path" : {
        "description" : "Current matched path",
        "type" : "string"
      },
      "routes" : {
        "description" : "Current matched route",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "The metadata of the route"
            },
            "backend_ref" : {
              "description" : "The backend id of the route (if one)",
              "type" : "string"
            },
            "groups" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The groups of the route"
            },
            "description" : {
              "description" : "The description of the route",
              "type" : "string"
            },
            "_loc" : {
              "description" : "The location of the route",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "enabled" : {
              "description" : "Is the route enabled",
              "type" : "boolean"
            },
            "export_reporting" : {
              "description" : "Export the execution reporting through standard data exporter",
              "type" : "boolean"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The tags of the route"
            },
            "debug_flow" : {
              "description" : "Enable report debugging",
              "type" : "boolean"
            },
            "name" : {
              "description" : "The name of the route",
              "type" : "string"
            },
            "backend" : {
              "description" : "The backend of the route",
              "type" : "object",
              "properties" : {
                "target_refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "List of NgStoredBackend ids"
                },
                "root" : {
                  "description" : "The root path of the backend or the full rewrite path",
                  "type" : "string"
                },
                "client" : {
                  "description" : "Client config. of the backend",
                  "type" : "object",
                  "properties" : {
                    "custom_timeouts" : {
                      "description" : "Custom timeouts per path",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "connection_timeout" : {
                            "format" : "int64",
                            "description" : "Timeout at connection",
                            "type" : "integer"
                          },
                          "call_and_stream_timeout" : {
                            "format" : "int64",
                            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                            "type" : "integer"
                          },
                          "path" : {
                            "description" : "path on which this configuration works",
                            "type" : "string"
                          },
                          "call_timeout" : {
                            "format" : "int64",
                            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                            "type" : "integer"
                          },
                          "idle_timeout" : {
                            "format" : "int64",
                            "description" : "Timeout on idle connection",
                            "type" : "integer"
                          },
                          "global_timeout" : {
                            "format" : "int64",
                            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                            "type" : "integer"
                          }
                        }
                      }
                    },
                    "global_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                      "type" : "integer"
                    },
                    "max_errors" : {
                      "format" : "int32",
                      "description" : "Specify how many errors can pass before opening the circuit breaker",
                      "type" : "integer"
                    },
                    "retry_initial_delay" : {
                      "format" : "int64",
                      "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                      "type" : "integer"
                    },
                    "backoff_factor" : {
                      "format" : "int64",
                      "description" : "Specify the factor to multiply the delay for each retry",
                      "type" : "integer"
                    },
                    "cache_connection_settings" : {
                      "description" : "Cached connection settings",
                      "type" : "object",
                      "properties" : {
                        "queue_size" : {
                          "format" : "int32",
                          "description" : "How much request can be queue before dropping it",
                          "type" : "integer"
                        },
                        "enabled" : {
                          "description" : "Is cached connection enabled",
                          "type" : "boolean"
                        }
                      }
                    },
                    "sample_interval" : {
                      "format" : "int64",
                      "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                      "type" : "integer"
                    },
                    "call_and_stream_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                      "type" : "integer"
                    },
                    "retries" : {
                      "format" : "int32",
                      "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                      "type" : "integer"
                    },
                    "proxy" : {
                      "description" : "Web proxy settings for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "call_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                      "type" : "integer"
                    },
                    "idle_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout on idle connection",
                      "type" : "integer"
                    },
                    "connection_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout at connection",
                      "type" : "integer"
                    }
                  }
                },
                "health_check" : {
                  "description" : "Healthcheck config og the backend",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                      "type" : "boolean"
                    },
                    "url" : {
                      "description" : "The URL to check",
                      "type" : "string"
                    }
                  }
                },
                "targets" : {
                  "description" : "The targets of the backend",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "predicate" : {
                        "description" : "Predicate to choose this target",
                        "type" : "object",
                        "properties" : {
                          "rack" : {
                            "description" : "Rack name",
                            "type" : "string"
                          },
                          "provider" : {
                            "description" : "Provider name",
                            "type" : "string"
                          },
                          "dataCenter" : {
                            "description" : "Datacenter name",
                            "type" : "string"
                          },
                          "zone" : {
                            "description" : "Zone name",
                            "type" : "string"
                          },
                          "positions" : {
                            "description" : "Possible positions",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "latitude" : {
                                  "format" : "double",
                                  "description" : "Latitude of the position",
                                  "type" : "number"
                                },
                                "longitude" : {
                                  "format" : "double",
                                  "description" : "Longitude of the position",
                                  "type" : "number"
                                },
                                "radius" : {
                                  "format" : "double",
                                  "description" : "Radius of the circle in meters",
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "description" : "the kind of predicate",
                            "type" : "string",
                            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                          },
                          "region" : {
                            "description" : "Region name",
                            "type" : "string"
                          },
                          "dc" : {
                            "description" : "DC name",
                            "type" : "string"
                          }
                        }
                      },
                      "protocol" : {
                        "description" : "Protocol for the target",
                        "type" : "string"
                      },
                      "hostname" : {
                        "description" : "hostname of the target",
                        "type" : "string"
                      },
                      "port" : {
                        "format" : "int32",
                        "description" : "port of the target",
                        "type" : "integer"
                      },
                      "weight" : {
                        "format" : "int32",
                        "description" : "The weight of the target when choosing",
                        "type" : "integer"
                      },
                      "tls" : {
                        "description" : "Does the target uses TLS",
                        "type" : "boolean"
                      },
                      "tls_config" : {
                        "description" : "TLS settings to contact this target",
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trust_all" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trusted_certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "id" : {
                        "description" : "id of the target",
                        "type" : "string"
                      },
                      "ip_address" : {
                        "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                        "type" : "string"
                      }
                    }
                  }
                },
                "rewrite" : {
                  "description" : "Does the backend performs a full url rewrite ?",
                  "type" : "boolean"
                },
                "load_balancing" : {
                  "description" : "Loadbalancing config og the backend",
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "string",
                      "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                    },
                    "ratio" : {
                      "type" : "number",
                      "format" : "double"
                    }
                  }
                }
              }
            },
            "id" : {
              "description" : "The ud of the route",
              "type" : "string"
            },
            "frontend" : {
              "description" : "The frontend of the route",
              "type" : "object",
              "properties" : {
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "the headers that will be matched"
                },
                "methods" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "the http methods that will be matched"
                },
                "query" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "the query params that will be matched"
                },
                "exact" : {
                  "description" : "Match on exact path ?",
                  "type" : "boolean"
                },
                "domains" : {
                  "description" : "The domain and path that will be matched",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "strip_path" : {
                  "description" : "Is path stripped from backend request",
                  "type" : "boolean"
                }
              }
            }
          }
        }
      },
      "no_more_segments" : {
        "description" : "Is the path fully matched",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.next.plugins.JsonToXmlResponse" : {
    "description" : "Plugin to transform json body to xml",
    "type" : "object",
    "properties" : {
      "filter" : {
        "description" : "JQ filter for response",
        "type" : "string"
      }
    }
  },
  "otoroshi.auth.LdapAuthModuleConfig" : {
    "description" : "Authentication module that works with LDAP",
    "type" : "object",
    "properties" : {
      "groupFilters" : {
        "description" : "LDAP group filters",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "team" : {
              "description" : "The team associated with this group",
              "type" : "string"
            },
            "tenant" : {
              "description" : "The tenant associated with this group",
              "type" : "object",
              "properties" : {
                "canWrite" : {
                  "description" : "Can this access right write data",
                  "type" : "boolean"
                },
                "value" : {
                  "description" : "Access pattern",
                  "type" : "string"
                },
                "canRead" : {
                  "description" : "Can this access right read data",
                  "type" : "boolean"
                }
              }
            },
            "group" : {
              "description" : "The LDAP group",
              "type" : "string"
            }
          }
        }
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Metadata of the module"
      },
      "allowEmptyPassword" : {
        "description" : "Allow empty password access",
        "type" : "boolean"
      },
      "basicAuth" : {
        "description" : "Use standard basic auth or web login form",
        "type" : "boolean"
      },
      "searchBase" : {
        "description" : "LDAP search base",
        "type" : "string"
      },
      "nameField" : {
        "description" : "Field name to get name from user profile",
        "type" : "string"
      },
      "emailField" : {
        "description" : "Field name to get email from user profile",
        "type" : "string"
      },
      "extractProfileFilterNot" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Exclude LDAP properties matching"
      },
      "type" : {
        "description" : "the type of the module",
        "type" : "string",
        "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
      },
      "metadataField" : {
        "description" : "Field name to get metadata from user profile",
        "type" : "string"
      },
      "rightsOverride" : {
        "description" : "Overrides user rights. Object with email as key",
        "additionalProperties" : {
          "type" : "object",
          "properties" : {
            "rights" : {
              "description" : "Access rights of a user",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Access rights on teams",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "canRead" : {
                          "description" : "Can this access right read data",
                          "type" : "boolean"
                        },
                        "value" : {
                          "description" : "Access pattern",
                          "type" : "string"
                        },
                        "canWrite" : {
                          "description" : "Can this access right write data",
                          "type" : "boolean"
                        }
                      }
                    }
                  },
                  "tenant" : {
                    "description" : "Access rights on organizations",
                    "type" : "object",
                    "properties" : {
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type" : "object"
      },
      "id" : {
        "description" : "Unique id of the config",
        "type" : "string"
      },
      "groupRights" : {
        "description" : "Rights associated with groups",
        "additionalProperties" : {
          "type" : "object",
          "properties" : {
            "userRights" : {
              "description" : "The user rights associated with this group",
              "type" : "object",
              "properties" : {
                "rights" : {
                  "description" : "Access rights of a user",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "teams" : {
                        "description" : "Access rights on teams",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "canRead" : {
                              "description" : "Can this access right read data",
                              "type" : "boolean"
                            },
                            "value" : {
                              "description" : "Access pattern",
                              "type" : "string"
                            },
                            "canWrite" : {
                              "description" : "Can this access right write data",
                              "type" : "boolean"
                            }
                          }
                        }
                      },
                      "tenant" : {
                        "description" : "Access rights on organizations",
                        "type" : "object",
                        "properties" : {
                          "canWrite" : {
                            "description" : "Can this access right write data",
                            "type" : "boolean"
                          },
                          "value" : {
                            "description" : "Access pattern",
                            "type" : "string"
                          },
                          "canRead" : {
                            "description" : "Can this access right read data",
                            "type" : "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "users" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The users associated with this group"
            }
          }
        },
        "type" : "object"
      },
      "extraMetadata" : {
        "description" : "Add metadata to user. Object with email as key",
        "type" : "object"
      },
      "searchFilter" : {
        "description" : "Filter for users",
        "type" : "string"
      },
      "adminPassword" : {
        "description" : "The admin password",
        "type" : "string"
      },
      "extractProfileFilter" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Only include LDAP properties matching"
      },
      "sessionCookieValues" : {
        "description" : "Settings for the session cookie",
        "type" : "object",
        "properties" : {
          "httpOnly" : {
            "description" : "Is cookie accessible on server side only",
            "type" : "boolean"
          },
          "secure" : {
            "description" : "Is cookie for https only",
            "type" : "boolean"
          }
        }
      },
      "dataOverride" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "object"
        },
        "description" : "Overiddes user data. Object with email as key"
      },
      "superAdmins" : {
        "description" : "This module produces only super admins",
        "type" : "boolean"
      },
      "userBase" : {
        "description" : "LDAP user base DN",
        "type" : "string"
      },
      "serverUrls" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "LDAP server list of url"
      },
      "userValidators" : {
        "description" : "Validators that will check if the current user is authorized after successful login",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "???",
              "type" : "string"
            },
            "value" : {
              "description" : "???",
              "type" : "object"
            }
          }
        }
      },
      "_loc" : {
        "description" : "Location of the module",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "sessionMaxAge" : {
        "format" : "int32",
        "description" : "Max age of the session",
        "type" : "integer"
      },
      "adminUsername" : {
        "description" : "The admin username",
        "type" : "string"
      },
      "extractProfile" : {
        "description" : "Extract profile from LDAP profile",
        "type" : "boolean"
      },
      "name" : {
        "description" : "Name of the config",
        "type" : "string"
      },
      "desc" : {
        "description" : "Description of the config",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.Keys" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.QuotasAlmostExceededSettings" : {
    "description" : "Settings for apikey quotas alerts",
    "type" : "object",
    "properties" : {
      "enabled" : {
        "description" : "Is quotas alert enabled",
        "type" : "boolean"
      },
      "dailyQuotasThreshold" : {
        "format" : "double",
        "description" : "The daily quotas threshold before generating alert",
        "type" : "number"
      },
      "monthlyQuotasThreshold" : {
        "format" : "double",
        "description" : "The monthly quotas threshold before generating alert",
        "type" : "number"
      }
    }
  },
  "otoroshi.next.plugins.JQResponse" : {
    "description" : "Plugin to transform body with JQ filters",
    "type" : "object",
    "properties" : {
      "filter" : {
        "description" : "JQ filter for response",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.Team" : {
    "description" : "An otoroshi model for a team of users in the organization (otoroshi-ui)",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "name" : {
        "description" : "Entity name",
        "type" : "string"
      },
      "description" : {
        "description" : "Entity description",
        "type" : "string"
      },
      "id" : {
        "description" : "Entity id",
        "type" : "string"
      },
      "tenant" : {
        "description" : "Entity organization",
        "type" : "string"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      }
    }
  },
  "otoroshi.models.ChaosConfig" : {
    "description" : "Settings to enable chaos engineering for a service",
    "type" : "object",
    "properties" : {
      "badResponsesFaultConfig" : {
        "description" : "Settings for bad responses",
        "type" : "object",
        "properties" : {
          "responses" : {
            "description" : "The possibles responses",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "status" : {
                  "format" : "int32",
                  "description" : "The HTTP status for the response",
                  "type" : "integer"
                },
                "body" : {
                  "description" : "The body of the HTTP response",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "The HTTP headers of the response"
                }
              }
            }
          },
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          }
        }
      },
      "largeResponseFaultConfig" : {
        "description" : "Settings for large responses",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "additionalResponseSize" : {
            "format" : "int32",
            "description" : "Add n 0 bytes",
            "type" : "integer"
          }
        }
      },
      "latencyInjectionFaultConfig" : {
        "description" : "Settings for latency injection",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "from" : {
            "description" : "The start range of latency added to the request",
            "type" : "number"
          },
          "to" : {
            "description" : "The end range of latency added to the request",
            "type" : "number"
          }
        }
      },
      "largeRequestFaultConfig" : {
        "description" : "Settings for large requests",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "additionalRequestSize" : {
            "format" : "int32",
            "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
            "type" : "integer"
          }
        }
      },
      "enabled" : {
        "description" : "Whether or not this config is enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.events.HealthCheckEvent" : {
    "description" : "Events generated by health checks",
    "type" : "object",
    "properties" : {
      "duration" : {
        "format" : "int64",
        "description" : "Duration of the call",
        "type" : "integer"
      },
      "logicCheck" : {
        "description" : "Did the service respond with the logic check",
        "type" : "boolean"
      },
      "health" : {
        "description" : "Health status",
        "type" : "string"
      },
      "error" : {
        "description" : "Error if any",
        "type" : "string"
      },
      "url" : {
        "description" : "Checked url",
        "type" : "string"
      },
      "status" : {
        "format" : "int32",
        "description" : "Check status",
        "type" : "integer"
      }
    }
  },
  "otoroshi.plugins.authcallers.OAuth2Kind" : {
    "description" : "The kind of oauth2 flow",
    "type" : "string",
    "enum" : [ "client_credentials", "password" ]
  },
  "otoroshi.models.SecComVersion" : {
    "type" : "string",
    "enum" : [ "V1", "v2" ],
    "description" : "Version of the challenge token"
  },
  "otoroshi.plugins.authcallers.OAuth2Caller" : {
    "description" : "Plugin that can call an oauth2 client_credentials flow or password flow backend",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.TransformSettings" : {
    "description" : "jwt token transformation settings",
    "type" : "object",
    "properties" : {
      "mappingSettings" : {
        "description" : "Token mapping settings",
        "type" : "object",
        "properties" : {
          "map" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Change values"
          },
          "values" : {
            "description" : "Add values",
            "type" : "object"
          },
          "remove" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove some token claims"
          }
        }
      },
      "location" : {
        "description" : "Location of the token",
        "oneOfConstraints" : [ {
          "required" : [ "name", "type" ]
        }, {
          "required" : [ "name", "type", "remove" ]
        }, {
          "required" : [ "name", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Query param name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          },
          "remove" : {
            "description" : "Remove from value",
            "type" : "string"
          }
        }
      }
    }
  },
  "ServiceDescriptorList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "removeHeadersIn" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Remove headers on client request"
        },
        "missingOnlyHeadersOut" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Add header on client response if they are not present"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Just a bunch of random properties"
        },
        "tcpUdpTunneling" : {
          "description" : "Enabled TCP/UDP tunneling through websocket connection",
          "type" : "boolean"
        },
        "cors" : {
          "description" : "CORS settings",
          "type" : "object",
          "properties" : {
            "excludedPatterns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The cors excluded patterns"
            },
            "allowMethods" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The cors allowed methods"
            },
            "allowHeaders" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The cors allowed headers"
            },
            "exposeHeaders" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The cors exposed header"
            },
            "maxAge" : {
              "description" : "Cors max age",
              "type" : "number"
            },
            "enabled" : {
              "description" : "Whether or not cors is enabled",
              "type" : "boolean"
            },
            "allowCredentials" : {
              "description" : "Allow to pass credentials",
              "type" : "boolean"
            },
            "allowOrigin" : {
              "description" : "The cors allowed origin",
              "type" : "string"
            }
          }
        },
        "forceHttps" : {
          "description" : "Will force redirection to https:// if not present",
          "type" : "boolean"
        },
        "matchingRoot" : {
          "description" : "The root path on which the service is available",
          "type" : "string"
        },
        "plugins" : {
          "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
          "type" : "object",
          "properties" : {
            "config" : {
              "description" : "Plugins configuration",
              "type" : "object"
            },
            "enabled" : {
              "description" : "Plugins enabled",
              "type" : "boolean"
            },
            "excluded" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Excluded paths"
            },
            "refs" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Enabled plugins"
            }
          }
        },
        "letsEncrypt" : {
          "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
          "type" : "boolean"
        },
        "useNewWSClient" : {
          "description" : "Use akka http client for this service on websocket calls",
          "type" : "boolean"
        },
        "chaosConfig" : {
          "description" : "Chaos engineering settings",
          "type" : "object",
          "properties" : {
            "badResponsesFaultConfig" : {
              "description" : "Settings for bad responses",
              "type" : "object",
              "properties" : {
                "responses" : {
                  "description" : "The possibles responses",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "status" : {
                        "format" : "int32",
                        "description" : "The HTTP status for the response",
                        "type" : "integer"
                      },
                      "body" : {
                        "description" : "The body of the HTTP response",
                        "type" : "string"
                      },
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "The HTTP headers of the response"
                      }
                    }
                  }
                },
                "ratio" : {
                  "format" : "double",
                  "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                  "type" : "number"
                }
              }
            },
            "largeResponseFaultConfig" : {
              "description" : "Settings for large responses",
              "type" : "object",
              "properties" : {
                "ratio" : {
                  "format" : "double",
                  "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                  "type" : "number"
                },
                "additionalResponseSize" : {
                  "format" : "int32",
                  "description" : "Add n 0 bytes",
                  "type" : "integer"
                }
              }
            },
            "latencyInjectionFaultConfig" : {
              "description" : "Settings for latency injection",
              "type" : "object",
              "properties" : {
                "ratio" : {
                  "format" : "double",
                  "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                  "type" : "number"
                },
                "from" : {
                  "description" : "The start range of latency added to the request",
                  "type" : "number"
                },
                "to" : {
                  "description" : "The end range of latency added to the request",
                  "type" : "number"
                }
              }
            },
            "largeRequestFaultConfig" : {
              "description" : "Settings for large requests",
              "type" : "object",
              "properties" : {
                "ratio" : {
                  "format" : "double",
                  "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                  "type" : "number"
                },
                "additionalRequestSize" : {
                  "format" : "int32",
                  "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                  "type" : "integer"
                }
              }
            },
            "enabled" : {
              "description" : "Whether or not this config is enabled",
              "type" : "boolean"
            }
          }
        },
        "secComSettings" : {
          "description" : "Sec. com. settings",
          "type" : "object",
          "properties" : {
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Http header when fetching JWKS"
            },
            "base64" : {
              "description" : "The secret is base64 encoded",
              "type" : "boolean"
            },
            "publicKey" : {
              "description" : "Public key (for verification)",
              "type" : "string"
            },
            "certId" : {
              "description" : "Certificate id",
              "type" : "string"
            },
            "secret" : {
              "description" : "HMAC secret",
              "type" : "string"
            },
            "type" : {
              "description" : "the kind of algosettings",
              "type" : "string",
              "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
            },
            "ttl" : {
              "description" : "Cache ttl",
              "type" : "number"
            },
            "url" : {
              "description" : "JWKS url",
              "type" : "string"
            },
            "timeout" : {
              "description" : "Timeout when fetching JWKS",
              "type" : "number"
            },
            "tlsConfig" : {
              "description" : "TLS config",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "kty" : {
              "description" : "Key type",
              "type" : "string"
            },
            "privateKey" : {
              "description" : "Private key (for signing)",
              "type" : "string"
            },
            "proxy" : {
              "description" : "Web proxy for http client",
              "oneOfConstraints" : [ ],
              "type" : "object",
              "properties" : { }
            },
            "onlyExposedCerts" : {
              "description" : "Use only exposed certs",
              "type" : "boolean"
            },
            "size" : {
              "format" : "int32",
              "description" : "SHA function size",
              "type" : "integer"
            }
          }
        },
        "detectApiKeySooner" : {
          "description" : "Detect if an apikey is present but do not fail if not",
          "type" : "boolean"
        },
        "transformerRefs" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Enabled transformer plugins"
        },
        "secComAlgoInfoToken" : {
          "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
          "type" : "object",
          "properties" : {
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Http header when fetching JWKS"
            },
            "base64" : {
              "description" : "The secret is base64 encoded",
              "type" : "boolean"
            },
            "publicKey" : {
              "description" : "Public key (for verification)",
              "type" : "string"
            },
            "certId" : {
              "description" : "Certificate id",
              "type" : "string"
            },
            "secret" : {
              "description" : "HMAC secret",
              "type" : "string"
            },
            "type" : {
              "description" : "the kind of algosettings",
              "type" : "string",
              "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
            },
            "ttl" : {
              "description" : "Cache ttl",
              "type" : "number"
            },
            "url" : {
              "description" : "JWKS url",
              "type" : "string"
            },
            "timeout" : {
              "description" : "Timeout when fetching JWKS",
              "type" : "number"
            },
            "tlsConfig" : {
              "description" : "TLS config",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "kty" : {
              "description" : "Key type",
              "type" : "string"
            },
            "privateKey" : {
              "description" : "Private key (for signing)",
              "type" : "string"
            },
            "proxy" : {
              "description" : "Web proxy for http client",
              "oneOfConstraints" : [ ],
              "type" : "object",
              "properties" : { }
            },
            "onlyExposedCerts" : {
              "description" : "Use only exposed certs",
              "type" : "boolean"
            },
            "size" : {
              "format" : "int32",
              "description" : "SHA function size",
              "type" : "integer"
            }
          }
        },
        "missingOnlyHeadersIn" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Add header on client request if they are not present"
        },
        "secComAlgoChallengeOtoToBack" : {
          "description" : "Algorithm to sign challenge token to the backend",
          "type" : "object",
          "properties" : {
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Http header when fetching JWKS"
            },
            "base64" : {
              "description" : "The secret is base64 encoded",
              "type" : "boolean"
            },
            "publicKey" : {
              "description" : "Public key (for verification)",
              "type" : "string"
            },
            "certId" : {
              "description" : "Certificate id",
              "type" : "string"
            },
            "secret" : {
              "description" : "HMAC secret",
              "type" : "string"
            },
            "type" : {
              "description" : "the kind of algosettings",
              "type" : "string",
              "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
            },
            "ttl" : {
              "description" : "Cache ttl",
              "type" : "number"
            },
            "url" : {
              "description" : "JWKS url",
              "type" : "string"
            },
            "timeout" : {
              "description" : "Timeout when fetching JWKS",
              "type" : "number"
            },
            "tlsConfig" : {
              "description" : "TLS config",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "kty" : {
              "description" : "Key type",
              "type" : "string"
            },
            "privateKey" : {
              "description" : "Private key (for signing)",
              "type" : "string"
            },
            "proxy" : {
              "description" : "Web proxy for http client",
              "oneOfConstraints" : [ ],
              "type" : "object",
              "properties" : { }
            },
            "onlyExposedCerts" : {
              "description" : "Use only exposed certs",
              "type" : "boolean"
            },
            "size" : {
              "format" : "int32",
              "description" : "SHA function size",
              "type" : "integer"
            }
          }
        },
        "removeHeadersOut" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Remove headers on client response"
        },
        "stripPath" : {
          "description" : "Strip matching path in the forwarded request path",
          "type" : "boolean"
        },
        "localHost" : {
          "description" : "The host used localy, mainly localhost:xxxx",
          "type" : "string"
        },
        "sendOtoroshiHeadersBack" : {
          "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
          "type" : "boolean"
        },
        "id" : {
          "description" : "A unique random string to identify your service",
          "type" : "string"
        },
        "api" : {
          "description" : "Api exposition settings",
          "type" : "object",
          "properties" : {
            "exposeApi" : {
              "description" : "Is this an API",
              "type" : "boolean"
            },
            "openApiDescriptorUrl" : {
              "description" : "openapi descriptor url",
              "type" : "string"
            }
          }
        },
        "secComTtl" : {
          "description" : "TTL for the info token",
          "type" : "number"
        },
        "secComVersion" : {
          "description" : "Version of the challenge token",
          "type" : "string",
          "enum" : [ "V1", "v2" ]
        },
        "targetsLoadBalancing" : {
          "description" : "Loadbalancing strategy",
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
            },
            "ratio" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "userFacing" : {
          "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
          "type" : "boolean"
        },
        "hosts" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Possible hosts for the service"
        },
        "restrictions" : {
          "description" : "Restriction settings",
          "type" : "object",
          "properties" : {
            "allowed" : {
              "description" : "Allowed paths",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "method" : {
                    "description" : "Method of the http request",
                    "type" : "string"
                  },
                  "path" : {
                    "description" : "Path of the http request",
                    "type" : "string"
                  }
                }
              }
            },
            "allowLast" : {
              "description" : "Evalute allowed paths after everything else",
              "type" : "boolean"
            },
            "forbidden" : {
              "description" : "Forbidden paths (return 403)",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "method" : {
                    "description" : "Method of the http request",
                    "type" : "string"
                  },
                  "path" : {
                    "description" : "Path of the http request",
                    "type" : "string"
                  }
                }
              }
            },
            "notFound" : {
              "description" : "Not found paths (return 404)",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "method" : {
                    "description" : "Method of the http request",
                    "type" : "string"
                  },
                  "path" : {
                    "description" : "Path of the http request",
                    "type" : "string"
                  }
                }
              }
            },
            "enabled" : {
              "description" : "Restrictions enabled",
              "type" : "boolean"
            }
          }
        },
        "readOnly" : {
          "description" : "Service only accepts GET, HEAD and OPTIONS requests",
          "type" : "boolean"
        },
        "secComInfoTokenVersion" : {
          "description" : "Version of the info token",
          "type" : "string",
          "enum" : [ "Legacy", "Latest" ]
        },
        "_loc" : {
          "description" : "Entity location",
          "type" : "object",
          "properties" : {
            "teams" : {
              "description" : "Teams of the current entity",
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "tenant" : {
              "description" : "Organization of the current entity",
              "type" : "string"
            }
          }
        },
        "enforceSecureCommunication" : {
          "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
          "type" : "boolean"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Entity tags"
        },
        "clientValidatorRef" : {
          "description" : "A reference to validation authority",
          "type" : "string"
        },
        "privateApp" : {
          "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
          "type" : "boolean"
        },
        "paths" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Matching paths on request"
        },
        "domain" : {
          "description" : "The domain on which the service is available.",
          "type" : "string"
        },
        "name" : {
          "description" : "The name of your service. Only for debug and human readability purposes",
          "type" : "string"
        },
        "transformerConfig" : {
          "description" : "Transformer plugins configuration",
          "type" : "object"
        },
        "subdomain" : {
          "description" : "The subdomain on which the service is available",
          "type" : "string"
        },
        "maintenanceMode" : {
          "description" : "Display a maintainance page when a user try to use the service",
          "type" : "boolean"
        },
        "secComHeaders" : {
          "description" : "Header names for sec. com. protocol",
          "type" : "object",
          "properties" : {
            "stateResponseName" : {
              "description" : "Header name where the validation token respondewill be",
              "type" : "string"
            },
            "claimRequestName" : {
              "description" : "Header name where the info token will be",
              "type" : "string"
            },
            "stateRequestName" : {
              "description" : "Header name where the validation token will be",
              "type" : "string"
            }
          }
        },
        "handleLegacyDomain" : {
          "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
          "type" : "boolean"
        },
        "logAnalyticsOnServer" : {
          "description" : "Log analytics event on the server",
          "type" : "boolean"
        },
        "strictlyPrivate" : {
          "description" : "When strictly private, private app session will not pass apikey filters",
          "type" : "boolean"
        },
        "description" : {
          "description" : "Entity description",
          "type" : "string"
        },
        "buildMode" : {
          "description" : "Display a construction page when a user try to use the service",
          "type" : "boolean"
        },
        "targets" : {
          "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "predicate" : {
                "description" : "Predicate to choose this target",
                "type" : "object",
                "properties" : {
                  "rack" : {
                    "description" : "Rack name",
                    "type" : "string"
                  },
                  "provider" : {
                    "description" : "Provider name",
                    "type" : "string"
                  },
                  "dataCenter" : {
                    "description" : "Datacenter name",
                    "type" : "string"
                  },
                  "zone" : {
                    "description" : "Zone name",
                    "type" : "string"
                  },
                  "positions" : {
                    "description" : "Possible positions",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "latitude" : {
                          "format" : "double",
                          "description" : "Latitude of the position",
                          "type" : "number"
                        },
                        "longitude" : {
                          "format" : "double",
                          "description" : "Longitude of the position",
                          "type" : "number"
                        },
                        "radius" : {
                          "format" : "double",
                          "description" : "Radius of the circle in meters",
                          "type" : "number"
                        }
                      }
                    }
                  },
                  "type" : {
                    "description" : "the kind of predicate",
                    "type" : "string",
                    "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                  },
                  "region" : {
                    "description" : "Region name",
                    "type" : "string"
                  },
                  "dc" : {
                    "description" : "DC name",
                    "type" : "string"
                  }
                }
              },
              "metadata" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Metadata for this target"
              },
              "protocol" : {
                "description" : "Protocol for the target",
                "type" : "string"
              },
              "scheme" : {
                "description" : "The protocol used for communication. Can be http or https",
                "type" : "string"
              },
              "mtlsConfig" : {
                "description" : "TLS settings to contact this target",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "host" : {
                "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                "type" : "string"
              },
              "ipAddress" : {
                "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                "type" : "string"
              },
              "weight" : {
                "format" : "int32",
                "description" : "The weight of the target when choosing",
                "type" : "integer"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Tags for this target"
              }
            }
          }
        },
        "enabled" : {
          "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
          "type" : "boolean"
        },
        "additionalHeadersOut" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Specify headers that will be added to each client response"
        },
        "sendStateChallenge" : {
          "description" : "Should otoroshi send challenge token",
          "type" : "boolean"
        },
        "root" : {
          "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
          "type" : "string"
        },
        "additionalHeaders" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Specify headers that will be added to each client request. Useful to add authentication"
        },
        "issueCertCA" : {
          "description" : "CA for cert issuance",
          "type" : "string"
        },
        "ipFiltering" : {
          "description" : "Ip filtering settings",
          "type" : "object",
          "properties" : {
            "whitelist" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Whitelisted IP addresses"
            },
            "blacklist" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Blacklisted IP addresses"
            }
          }
        },
        "redirection" : {
          "description" : "Redirection settings",
          "type" : "object",
          "properties" : {
            "enabled" : {
              "description" : "Whether or not redirection is enabled",
              "type" : "boolean"
            },
            "code" : {
              "format" : "int32",
              "description" : "The http redirect code",
              "type" : "integer"
            },
            "to" : {
              "description" : "The location for redirection",
              "type" : "string"
            }
          }
        },
        "redirectToLocal" : {
          "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
          "type" : "boolean"
        },
        "headersVerification" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Specify headers that will be verified after routing."
        },
        "useAkkaHttpClient" : {
          "description" : "Use akka http client for this service",
          "type" : "boolean"
        },
        "securityExcludedPatterns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Exclude some paths"
        },
        "authConfigRef" : {
          "description" : "A reference to a global auth module config",
          "type" : "string"
        },
        "preRouting" : {
          "description" : "Pre routing plugin settings",
          "type" : "object",
          "properties" : {
            "enabled" : {
              "description" : "pre-routing plugins enabled",
              "type" : "boolean"
            },
            "excludedPatterns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Excluded paths"
            },
            "refs" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Enabled plugins"
            },
            "config" : {
              "description" : "pre-routing plugins configuration",
              "type" : "object"
            }
          }
        },
        "canary" : {
          "description" : "Canary settings",
          "type" : "object",
          "properties" : {
            "root" : {
              "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
              "type" : "string"
            },
            "targets" : {
              "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "predicate" : {
                    "description" : "Predicate to choose this target",
                    "type" : "object",
                    "properties" : {
                      "rack" : {
                        "description" : "Rack name",
                        "type" : "string"
                      },
                      "provider" : {
                        "description" : "Provider name",
                        "type" : "string"
                      },
                      "dataCenter" : {
                        "description" : "Datacenter name",
                        "type" : "string"
                      },
                      "zone" : {
                        "description" : "Zone name",
                        "type" : "string"
                      },
                      "positions" : {
                        "description" : "Possible positions",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "latitude" : {
                              "format" : "double",
                              "description" : "Latitude of the position",
                              "type" : "number"
                            },
                            "longitude" : {
                              "format" : "double",
                              "description" : "Longitude of the position",
                              "type" : "number"
                            },
                            "radius" : {
                              "format" : "double",
                              "description" : "Radius of the circle in meters",
                              "type" : "number"
                            }
                          }
                        }
                      },
                      "type" : {
                        "description" : "the kind of predicate",
                        "type" : "string",
                        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                      },
                      "region" : {
                        "description" : "Region name",
                        "type" : "string"
                      },
                      "dc" : {
                        "description" : "DC name",
                        "type" : "string"
                      }
                    }
                  },
                  "metadata" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Metadata for this target"
                  },
                  "protocol" : {
                    "description" : "Protocol for the target",
                    "type" : "string"
                  },
                  "scheme" : {
                    "description" : "The protocol used for communication. Can be http or https",
                    "type" : "string"
                  },
                  "mtlsConfig" : {
                    "description" : "TLS settings to contact this target",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "host" : {
                    "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                    "type" : "string"
                  },
                  "ipAddress" : {
                    "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                    "type" : "string"
                  },
                  "weight" : {
                    "format" : "int32",
                    "description" : "The weight of the target when choosing",
                    "type" : "integer"
                  },
                  "tags" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Tags for this target"
                  }
                }
              }
            },
            "enabled" : {
              "description" : "Use canary mode for this service",
              "type" : "boolean"
            },
            "traffic" : {
              "format" : "double",
              "description" : "Ratio of traffic that will be sent to canary targets.",
              "type" : "number"
            }
          }
        },
        "secComExcludedPatterns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "URI patterns excluded from secured communications"
        },
        "xForwardedHeaders" : {
          "description" : "Send X-Forwarded-* headers",
          "type" : "boolean"
        },
        "apiKeyConstraints" : {
          "description" : "Routing and extraction constraints for the apikeyh",
          "type" : "object",
          "properties" : {
            "routing" : {
              "description" : "Routing settings for this apikey",
              "type" : "object",
              "properties" : {
                "oneTagIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "outing if one tag presents in apikey"
                },
                "noneMetaKeysIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if none meta keys presents in apikey"
                },
                "oneMetaIn" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Routing if one meta presents in apikey"
                },
                "oneMetaKeyIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if one meta key presents in apikey"
                },
                "allMetaKeysIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if all meta keys presents in apikey"
                },
                "noneTagIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if none tags presents in apikey"
                },
                "allTagsIn" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Routing if all tags presents in apikey"
                },
                "allMetaIn" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Routing if all meta presents in apikey"
                },
                "noneMetaIn" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Routing if none meta presents in apikey"
                }
              }
            },
            "customHeadersAuth" : {
              "description" : "Settings to extract apikey from custom headers",
              "type" : "object",
              "properties" : {
                "clientSecretHeaderName" : {
                  "description" : "Header name to find client_secret",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Constraint enabled",
                  "type" : "boolean"
                },
                "clientIdHeaderName" : {
                  "description" : "Header name to find client_id",
                  "type" : "string"
                }
              }
            },
            "basicAuth" : {
              "description" : "Settings to extract basic auth style apikey",
              "type" : "object",
              "properties" : {
                "headerName" : {
                  "description" : "Header name to get client_id:client_secret base64 encoded",
                  "type" : "string"
                },
                "queryName" : {
                  "description" : "Query param name to get client_id:client_secret base64 encoded",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Constraint enabled",
                  "type" : "boolean"
                }
              }
            },
            "jwtAuth" : {
              "description" : "Settings to extract apikey from jwt token",
              "type" : "object",
              "properties" : {
                "headerName" : {
                  "description" : "Header name to extract jwt token",
                  "type" : "string"
                },
                "maxJwtLifespanSecs" : {
                  "format" : "int64",
                  "description" : "Check if token does not have a long lifespan",
                  "type" : "integer"
                },
                "keyPairSigned" : {
                  "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                  "type" : "boolean"
                },
                "secretSigned" : {
                  "description" : "Jwt token signed with the client_secret",
                  "type" : "boolean"
                },
                "queryName" : {
                  "description" : "Query param name to extract jwt token",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Constraint enabled",
                  "type" : "boolean"
                },
                "cookieName" : {
                  "description" : "Cookie name to extract jwt token",
                  "type" : "string"
                },
                "includeRequestAttributes" : {
                  "description" : "Jwt token should include verb and path",
                  "type" : "boolean"
                }
              }
            },
            "clientIdAuth" : {
              "description" : "Settings to extract client_id only apikey",
              "type" : "object",
              "properties" : {
                "headerName" : {
                  "description" : "Header name to find client_id",
                  "type" : "string"
                },
                "queryName" : {
                  "description" : "Query param name to find client_id",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Constraint enabled",
                  "type" : "boolean"
                }
              }
            }
          }
        },
        "sendInfoToken" : {
          "description" : "Should otoroshi send info token",
          "type" : "boolean"
        },
        "issueCert" : {
          "description" : "Flag to automatically issue a cert for this service",
          "type" : "boolean"
        },
        "groups" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
        },
        "privatePatterns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
        },
        "gzip" : {
          "description" : "GZIP settings",
          "type" : "object",
          "properties" : {
            "compressionLevel" : {
              "format" : "int32",
              "description" : "Compression level (0 - 9)",
              "type" : "integer"
            },
            "blackList" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "blocklisted content types"
            },
            "chunkedThreshold" : {
              "format" : "int32",
              "description" : "Chunk size",
              "type" : "integer"
            },
            "excludedPatterns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Excluded paths"
            },
            "bufferSize" : {
              "format" : "int32",
              "description" : "Buffer size in bytes",
              "type" : "integer"
            },
            "whiteList" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "allow listed content types"
            },
            "enabled" : {
              "description" : "Gzip enabled",
              "type" : "boolean"
            }
          }
        },
        "clientConfig" : {
          "description" : "Http client settings",
          "type" : "object",
          "properties" : {
            "sampleInterval" : {
              "format" : "int64",
              "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
              "type" : "integer"
            },
            "backoffFactor" : {
              "format" : "int64",
              "description" : "Specify the factor to multiply the delay for each retry",
              "type" : "integer"
            },
            "customTimeouts" : {
              "description" : "Custom timeouts per path",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "path" : {
                    "description" : "path on which this configuration works",
                    "type" : "string"
                  },
                  "callAndStreamTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                    "type" : "integer"
                  },
                  "callTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                    "type" : "integer"
                  },
                  "idleTimeout" : {
                    "format" : "int64",
                    "description" : "Timeout on idle connection",
                    "type" : "integer"
                  },
                  "globalTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                    "type" : "integer"
                  },
                  "connectionTimeout" : {
                    "format" : "int64",
                    "description" : "Timeout at connection",
                    "type" : "integer"
                  }
                }
              }
            },
            "callAndStreamTimeout" : {
              "format" : "int64",
              "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
              "type" : "integer"
            },
            "retryInitialDelay" : {
              "format" : "int64",
              "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
              "type" : "integer"
            },
            "callTimeout" : {
              "format" : "int64",
              "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
              "type" : "integer"
            },
            "useCircuitBreaker" : {
              "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
              "type" : "boolean"
            },
            "retries" : {
              "format" : "int32",
              "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
              "type" : "integer"
            },
            "proxy" : {
              "description" : "Web proxy settings for http client",
              "oneOfConstraints" : [ ],
              "type" : "object",
              "properties" : { }
            },
            "maxErrors" : {
              "format" : "int32",
              "description" : "Specify how many errors can pass before opening the circuit breaker",
              "type" : "integer"
            },
            "idleTimeout" : {
              "format" : "int64",
              "description" : "Timeout on idle connection",
              "type" : "integer"
            },
            "globalTimeout" : {
              "format" : "int64",
              "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
              "type" : "integer"
            },
            "cacheConnectionSettings" : {
              "description" : "Cached connection settings",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Enable Cached connections at host tevel",
                  "type" : "boolean"
                },
                "queueSize" : {
                  "format" : "int32",
                  "description" : "The size for the request queue",
                  "type" : "integer"
                }
              }
            },
            "connectionTimeout" : {
              "format" : "int64",
              "description" : "Timeout at connection",
              "type" : "integer"
            }
          }
        },
        "env" : {
          "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
          "type" : "string"
        },
        "jwtVerifier" : {
          "description" : "JWT verifiers settings",
          "type" : "object",
          "properties" : {
            "excludedPatterns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Verifier excluded paths"
            },
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Entity metadata"
            },
            "source" : {
              "description" : "Token source",
              "oneOfConstraints" : [ {
                "required" : [ "name", "type" ]
              }, {
                "required" : [ "name", "type", "remove" ]
              }, {
                "required" : [ "name", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "name" : {
                  "description" : "Query param name",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of location",
                  "type" : "string",
                  "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                },
                "remove" : {
                  "description" : "Remove from value",
                  "type" : "string"
                }
              }
            },
            "type" : {
              "description" : "the kind of verifier",
              "type" : "string",
              "enum" : [ "global", "local", "ref" ]
            },
            "_loc" : {
              "description" : "Entity location",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "enabled" : {
              "description" : "Verifier enabled",
              "type" : "boolean"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            },
            "algoSettings" : {
              "description" : "Algo settings",
              "type" : "object",
              "properties" : {
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Http header when fetching JWKS"
                },
                "base64" : {
                  "description" : "The secret is base64 encoded",
                  "type" : "boolean"
                },
                "publicKey" : {
                  "description" : "Public key (for verification)",
                  "type" : "string"
                },
                "certId" : {
                  "description" : "Certificate id",
                  "type" : "string"
                },
                "secret" : {
                  "description" : "HMAC secret",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of algosettings",
                  "type" : "string",
                  "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                },
                "ttl" : {
                  "description" : "Cache ttl",
                  "type" : "number"
                },
                "url" : {
                  "description" : "JWKS url",
                  "type" : "string"
                },
                "timeout" : {
                  "description" : "Timeout when fetching JWKS",
                  "type" : "number"
                },
                "tlsConfig" : {
                  "description" : "TLS config",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "kty" : {
                  "description" : "Key type",
                  "type" : "string"
                },
                "privateKey" : {
                  "description" : "Private key (for signing)",
                  "type" : "string"
                },
                "proxy" : {
                  "description" : "Web proxy for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "onlyExposedCerts" : {
                  "description" : "Use only exposed certs",
                  "type" : "boolean"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                }
              }
            },
            "name" : {
              "description" : "Verifier name",
              "type" : "string"
            },
            "ids" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Verifiers ids"
            },
            "id" : {
              "description" : "Verifier id",
              "type" : "string"
            },
            "strict" : {
              "description" : "Strict token verification",
              "type" : "boolean"
            },
            "strategy" : {
              "description" : "Token strategy",
              "oneOfConstraints" : [ {
                "required" : [ "verificationSettings", "type", "strict", "token" ]
              }, {
                "required" : [ "verificationSettings", "type" ]
              }, {
                "required" : [ "algoSettings", "verificationSettings", "type" ]
              }, {
                "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "verificationSettings" : {
                  "description" : "Verification settings",
                  "type" : "object",
                  "properties" : {
                    "fields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields validation"
                    },
                    "arrayFields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields array validation"
                    }
                  }
                },
                "type" : {
                  "description" : "the kind of strategy",
                  "type" : "string",
                  "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                },
                "strict" : {
                  "description" : "If the token already exists in the request, then fail",
                  "type" : "boolean"
                },
                "token" : {
                  "description" : "The default token",
                  "type" : "object"
                },
                "algoSettings" : {
                  "description" : "Algorithm settings for re-signing token",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "tlsConfig" : {
                      "description" : "TLS config",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    }
                  }
                },
                "transformSettings" : {
                  "description" : "Transformation settings",
                  "type" : "object",
                  "properties" : {
                    "mappingSettings" : {
                      "description" : "Token mapping settings",
                      "type" : "object",
                      "properties" : {
                        "map" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Change values"
                        },
                        "values" : {
                          "description" : "Add values",
                          "type" : "object"
                        },
                        "remove" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Remove some token claims"
                        }
                      }
                    },
                    "location" : {
                      "description" : "Location of the token",
                      "type" : "object",
                      "properties" : {
                        "name" : {
                          "description" : "Query param name",
                          "type" : "string"
                        },
                        "type" : {
                          "description" : "the kind of location",
                          "type" : "string",
                          "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                        },
                        "remove" : {
                          "description" : "Remove from value",
                          "type" : "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "desc" : {
              "description" : "Verifier description",
              "type" : "string"
            }
          }
        },
        "allowHttp10" : {
          "description" : "Allow HTTP/1.0 requests",
          "type" : "boolean"
        },
        "publicPatterns" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
        },
        "secComAlgoChallengeBackToOto" : {
          "description" : "Algorithm to verify challenge token coming from the backend",
          "type" : "object",
          "properties" : {
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Http header when fetching JWKS"
            },
            "base64" : {
              "description" : "The secret is base64 encoded",
              "type" : "boolean"
            },
            "publicKey" : {
              "description" : "Public key (for verification)",
              "type" : "string"
            },
            "certId" : {
              "description" : "Certificate id",
              "type" : "string"
            },
            "secret" : {
              "description" : "HMAC secret",
              "type" : "string"
            },
            "type" : {
              "description" : "the kind of algosettings",
              "type" : "string",
              "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
            },
            "ttl" : {
              "description" : "Cache ttl",
              "type" : "number"
            },
            "url" : {
              "description" : "JWKS url",
              "type" : "string"
            },
            "timeout" : {
              "description" : "Timeout when fetching JWKS",
              "type" : "number"
            },
            "tlsConfig" : {
              "description" : "TLS config",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "kty" : {
              "description" : "Key type",
              "type" : "string"
            },
            "privateKey" : {
              "description" : "Private key (for signing)",
              "type" : "string"
            },
            "proxy" : {
              "description" : "Web proxy for http client",
              "oneOfConstraints" : [ ],
              "type" : "object",
              "properties" : { }
            },
            "onlyExposedCerts" : {
              "description" : "Use only exposed certs",
              "type" : "boolean"
            },
            "size" : {
              "format" : "int32",
              "description" : "SHA function size",
              "type" : "integer"
            }
          }
        },
        "localScheme" : {
          "description" : "The scheme used localy, mainly http",
          "type" : "string"
        },
        "healthCheck" : {
          "description" : "Healthcheck settings",
          "type" : "object",
          "properties" : {
            "enabled" : {
              "description" : "Whether or not healthcheck is enabled on the current service descriptor",
              "type" : "boolean"
            },
            "url" : {
              "description" : "The URL to check",
              "type" : "string"
            }
          }
        },
        "matchingHeaders" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
        },
        "overrideHost" : {
          "description" : "Host header will be overriden with Host of the target",
          "type" : "boolean"
        },
        "secComUseSameAlgo" : {
          "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
          "type" : "boolean"
        },
        "accessValidator" : {
          "description" : "Service access validatiors",
          "type" : "object",
          "properties" : {
            "enabled" : {
              "description" : "Access validator plugins enabled",
              "type" : "boolean"
            },
            "excludedPatterns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Excluded paths"
            },
            "refs" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Enabled plugins"
            },
            "config" : {
              "description" : "Access validator plugins configuration",
              "type" : "object"
            }
          }
        }
      }
    }
  },
  "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute" : {
    "description" : "Configuration for IzanamiCanary",
    "type" : "object",
    "properties" : {
      "variants" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The possible variant"
      },
      "wildcard" : {
        "description" : "Wildcard match",
        "type" : "boolean"
      },
      "default" : {
        "description" : "The default variant",
        "type" : "string"
      },
      "regex" : {
        "description" : "Regex match",
        "type" : "boolean"
      },
      "exact" : {
        "description" : "Exact match",
        "type" : "boolean"
      },
      "route" : {
        "description" : "The route path",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.ApiKey" : {
    "description" : "An otoroshi apikey that can allow you to access some services",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Bunch of metadata for the key"
      },
      "clientId" : {
        "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
        "type" : "string"
      },
      "clientName" : {
        "description" : "The name of the api key, for humans ;-)",
        "type" : "string"
      },
      "rotation" : {
        "description" : "Apikey rotation settings",
        "type" : "object",
        "properties" : {
          "gracePeriod" : {
            "format" : "int64",
            "description" : "period (in hours) during which both secrets works",
            "type" : "integer"
          },
          "rotationEvery" : {
            "format" : "int64",
            "description" : "Rotate every n hours",
            "type" : "integer"
          },
          "nextSecret" : {
            "description" : "Next client_secret value",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Rotation enabled",
            "type" : "boolean"
          }
        }
      },
      "description" : {
        "description" : "Description of this apikey",
        "type" : "string"
      },
      "restrictions" : {
        "description" : "Apikey restrictions settings",
        "type" : "object",
        "properties" : {
          "allowed" : {
            "description" : "Allowed paths",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "method" : {
                  "description" : "Method of the http request",
                  "type" : "string"
                },
                "path" : {
                  "description" : "Path of the http request",
                  "type" : "string"
                }
              }
            }
          },
          "allowLast" : {
            "description" : "Evalute allowed paths after everything else",
            "type" : "boolean"
          },
          "forbidden" : {
            "description" : "Forbidden paths (return 403)",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "method" : {
                  "description" : "Method of the http request",
                  "type" : "string"
                },
                "path" : {
                  "description" : "Path of the http request",
                  "type" : "string"
                }
              }
            }
          },
          "notFound" : {
            "description" : "Not found paths (return 404)",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "method" : {
                  "description" : "Method of the http request",
                  "type" : "string"
                },
                "path" : {
                  "description" : "Path of the http request",
                  "type" : "string"
                }
              }
            }
          },
          "enabled" : {
            "description" : "Restrictions enabled",
            "type" : "boolean"
          }
        }
      },
      "readOnly" : {
        "description" : "The apikey only allow access for GET, HEAD and OPTIONS verbs",
        "type" : "boolean"
      },
      "_loc" : {
        "description" : "The location of the apikey",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "enabled" : {
        "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
        "type" : "boolean"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Apikey tags"
      },
      "throttlingQuota" : {
        "format" : "int64",
        "description" : "Authorized number of calls per second, measured on 10 seconds",
        "type" : "integer"
      },
      "constrainedServicesOnly" : {
        "description" : "This apikey can only be used on services that constrained their apikey routing",
        "type" : "boolean"
      },
      "allowClientIdOnly" : {
        "description" : "This apikey can be used juste with the client_id value",
        "type" : "boolean"
      },
      "monthlyQuota" : {
        "format" : "int64",
        "description" : "Authorized number of calls per month",
        "type" : "integer"
      },
      "validUntil" : {
        "description" : "Date until when the apikey is valid",
        "type" : "number"
      },
      "authorizedEntities" : {
        "description" : "The group/service ids (prefixed by group_ or service_ on which the key is authorized",
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      },
      "clientSecret" : {
        "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
        "type" : "string"
      },
      "dailyQuota" : {
        "format" : "int64",
        "description" : "Authorized number of calls per day",
        "type" : "integer"
      }
    }
  },
  "otoroshi.plugins.oidc.OIDCAccessTokenValidator" : {
    "description" : "Plugin to validate OIDC token ",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.UserRight" : {
    "description" : "Represent a user right (teams, organizations) in otoroshi-ui",
    "type" : "object",
    "properties" : {
      "teams" : {
        "description" : "Access rights on teams",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "canRead" : {
              "description" : "Can this access right read data",
              "type" : "boolean"
            },
            "value" : {
              "description" : "Access pattern",
              "type" : "string"
            },
            "canWrite" : {
              "description" : "Can this access right write data",
              "type" : "boolean"
            }
          }
        }
      },
      "tenant" : {
        "description" : "Access rights on organizations",
        "type" : "object",
        "properties" : {
          "canWrite" : {
            "description" : "Can this access right write data",
            "type" : "boolean"
          },
          "value" : {
            "description" : "Access pattern",
            "type" : "string"
          },
          "canRead" : {
            "description" : "Can this access right read data",
            "type" : "boolean"
          }
        }
      }
    }
  },
  "otoroshi.models.InHeader" : {
    "description" : "JWT token location (header)",
    "type" : "object",
    "properties" : {
      "name" : {
        "description" : "Header name",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of location",
        "type" : "string",
        "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
      },
      "remove" : {
        "description" : "Remove from value",
        "type" : "string"
      }
    }
  },
  "otoroshi.auth.GenericOauth2ModuleConfig" : {
    "description" : "Authentication module that works with OAuth2/OIDC",
    "type" : "object",
    "properties" : {
      "refreshTokens" : {
        "description" : "Refresh token support",
        "type" : "boolean"
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Metadata of the module"
      },
      "tokenUrl" : {
        "description" : "OAuth token URL",
        "type" : "string"
      },
      "otoroshiRightsField" : {
        "description" : "Field in user profile to find otoroshi UI rights",
        "type" : "string"
      },
      "mtlsConfig" : {
        "description" : "TLS config. for the module (for server accessed endpoints like tokenUrl, introspectionUrl, etc)",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "nameField" : {
        "description" : "Field name to get name from user profile",
        "type" : "string"
      },
      "emailField" : {
        "description" : "Field name to get email from user profile",
        "type" : "string"
      },
      "type" : {
        "description" : "the type of the module",
        "type" : "string",
        "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
      },
      "introspectionUrl" : {
        "description" : "URL to introspect access_token",
        "type" : "string"
      },
      "loginUrl" : {
        "description" : "OAuth login URL",
        "type" : "string"
      },
      "scope" : {
        "description" : "The scope of the token",
        "type" : "string"
      },
      "rightsOverride" : {
        "description" : "Overrides user rights. Object with email as key",
        "additionalProperties" : {
          "type" : "object",
          "properties" : {
            "rights" : {
              "description" : "Access rights of a user",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Access rights on teams",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "canRead" : {
                          "description" : "Can this access right read data",
                          "type" : "boolean"
                        },
                        "value" : {
                          "description" : "Access pattern",
                          "type" : "string"
                        },
                        "canWrite" : {
                          "description" : "Can this access right write data",
                          "type" : "boolean"
                        }
                      }
                    }
                  },
                  "tenant" : {
                    "description" : "Access rights on organizations",
                    "type" : "object",
                    "properties" : {
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type" : "object"
      },
      "callbackUrl" : {
        "description" : "Otoroshi callback URL",
        "type" : "string"
      },
      "clientSecret" : {
        "description" : "OAuth Client secret",
        "type" : "string"
      },
      "id" : {
        "description" : "Unique id of the config",
        "type" : "string"
      },
      "extraMetadata" : {
        "description" : "Add metadata to user. Object with email as key",
        "type" : "object"
      },
      "accessTokenField" : {
        "description" : "Field name to get access token",
        "type" : "string"
      },
      "userInfoUrl" : {
        "description" : "OAuth userinfo to get user profile",
        "type" : "string"
      },
      "clientId" : {
        "description" : "OAuth Client id",
        "type" : "string"
      },
      "useCookie" : {
        "description" : "Use cookies for redirection",
        "type" : "boolean"
      },
      "authorizeUrl" : {
        "description" : "OAuth authorize URL",
        "type" : "string"
      },
      "sessionCookieValues" : {
        "description" : "Settings for the session cookie",
        "type" : "object",
        "properties" : {
          "httpOnly" : {
            "description" : "Is cookie accessible on server side only",
            "type" : "boolean"
          },
          "secure" : {
            "description" : "Is cookie for https only",
            "type" : "boolean"
          }
        }
      },
      "dataOverride" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "object"
        },
        "description" : "Overiddes user data. Object with email as key"
      },
      "superAdmins" : {
        "description" : "This module produces only super admins",
        "type" : "boolean"
      },
      "apiKeyMetaField" : {
        "description" : "Field name to extract apikey metadata",
        "type" : "string"
      },
      "useJson" : {
        "description" : "Use JSON or URL Form Encoded as payload with the OAuth provider",
        "type" : "boolean"
      },
      "pkce" : {
        "description" : "Use PKCE challenge (OAuth 2.1)",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Is PKCE challenge enabled",
            "type" : "boolean"
          },
          "algorithm" : {
            "description" : "Hashing algorithm used in PKCE challenge",
            "type" : "string"
          }
        }
      },
      "apiKeyTagsField" : {
        "description" : "Field name to extract apikey tags",
        "type" : "string"
      },
      "otoroshiDataField" : {
        "description" : "Field name to get otoroshi metadata from. You can specify sub fields using | as separator",
        "type" : "string"
      },
      "userValidators" : {
        "description" : "Validators that will check if the current user is authorized after successful login",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "???",
              "type" : "string"
            },
            "value" : {
              "description" : "???",
              "type" : "object"
            }
          }
        }
      },
      "_loc" : {
        "description" : "Location of the module",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "jwtVerifier" : {
        "description" : "Algo. settings to verify JWT token",
        "oneOfConstraints" : [ {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "size", "base64", "secret", "type" ]
        }, {
          "required" : [ "kty", "proxy", "headers", "type", "ttl", "url", "timeout", "tlsConfig" ]
        }, {
          "required" : [ "onlyExposedCerts", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          }
        }
      },
      "sessionMaxAge" : {
        "format" : "int32",
        "description" : "max age for the session cookie in seconds",
        "type" : "integer"
      },
      "proxy" : {
        "description" : "Web proxy configuration for the module's http client",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "logoutUrl" : {
        "description" : "OAuth logout URL",
        "type" : "string"
      },
      "noWildcardRedirectURI" : {
        "description" : "Manage redirection without query params for exact string comparison (OAuth 2.1)",
        "type" : "boolean"
      },
      "readProfileFromToken" : {
        "description" : "The user profile will be read from the JWT token in id_token",
        "type" : "boolean"
      },
      "oidConfig" : {
        "description" : "URL of the OIDC config. file",
        "type" : "string"
      },
      "name" : {
        "description" : "Name of the config",
        "type" : "string"
      },
      "claims" : {
        "description" : "The claims of the token",
        "type" : "string"
      },
      "desc" : {
        "description" : "Description of the config",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.quotas.InstanceQuotas" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "ServiceFromOpenApiBody" : {
    "type" : "object",
    "description" : "Properties to create a service from an openapi spec",
    "properties" : {
      "domain" : {
        "type" : "string",
        "description" : "the domain on which the service will be exposed by otoroshi"
      },
      "openapi" : {
        "type" : "string",
        "description" : "the url to an openapi 3 spec or the content of an openapi 3 spec"
      }
    }
  },
  "otoroshi.next.plugins.JQRequest" : {
    "description" : "Plugin to transform body with JQ filters",
    "type" : "object",
    "properties" : {
      "filter" : {
        "description" : "JQ filter for request",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.GlobalJwtVerifier" : {
    "description" : "Otoroshi model for JWT token verifier",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "algoSettings" : {
        "description" : "Algo settings of the verifier",
        "oneOfConstraints" : [ {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "size", "base64", "secret", "type" ]
        }, {
          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
        }, {
          "required" : [ "onlyExposedCerts", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          }
        }
      },
      "name" : {
        "description" : "Verifier name",
        "type" : "string"
      },
      "id" : {
        "description" : "Verifier id",
        "type" : "string"
      },
      "source" : {
        "description" : "Where to find the jwt token",
        "oneOfConstraints" : [ {
          "required" : [ "name", "type" ]
        }, {
          "required" : [ "name", "type", "remove" ]
        }, {
          "required" : [ "name", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Query param name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          },
          "remove" : {
            "description" : "Remove from value",
            "type" : "string"
          }
        }
      },
      "type" : {
        "description" : "the kind of verifier",
        "type" : "string",
        "enum" : [ "global" ]
      },
      "strict" : {
        "description" : "Does it fail if JWT not found",
        "type" : "boolean"
      },
      "strategy" : {
        "description" : "The strategy of the verifier",
        "oneOfConstraints" : [ {
          "required" : [ "verificationSettings", "type", "strict", "token" ]
        }, {
          "required" : [ "verificationSettings", "type" ]
        }, {
          "required" : [ "algoSettings", "verificationSettings", "type" ]
        }, {
          "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "verificationSettings" : {
            "description" : "Verification settings",
            "type" : "object",
            "properties" : {
              "fields" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Fields validation"
              },
              "arrayFields" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Fields array validation"
              }
            }
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          },
          "strict" : {
            "description" : "If the token already exists in the request, then fail",
            "type" : "boolean"
          },
          "token" : {
            "description" : "The default token",
            "type" : "object"
          },
          "algoSettings" : {
            "description" : "Algorithm settings for re-signing token",
            "oneOfConstraints" : [ {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "size", "base64", "secret", "type" ]
            }, {
              "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
            }, {
              "required" : [ "onlyExposedCerts", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            } ],
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              }
            }
          },
          "transformSettings" : {
            "description" : "Transformation settings",
            "type" : "object",
            "properties" : {
              "mappingSettings" : {
                "description" : "Token mapping settings",
                "type" : "object",
                "properties" : {
                  "map" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Change values"
                  },
                  "values" : {
                    "description" : "Add values",
                    "type" : "object"
                  },
                  "remove" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Remove some token claims"
                  }
                }
              },
              "location" : {
                "description" : "Location of the token",
                "type" : "object",
                "properties" : {
                  "name" : {
                    "description" : "Query param name",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of location",
                    "type" : "string",
                    "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                  },
                  "remove" : {
                    "description" : "Remove from value",
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "desc" : {
        "description" : "Verifier description",
        "type" : "string"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      }
    }
  },
  "otoroshi.models.ConsoleSettings" : {
    "description" : "Data exporter that will log everything to the console",
    "type" : "object",
    "properties" : {
      "type" : {
        "description" : "the kind of exporter",
        "type" : "string",
        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
      }
    }
  },
  "otoroshi.models.TenantAccess" : {
    "description" : "Access rights for organizations",
    "type" : "object",
    "properties" : {
      "canWrite" : {
        "description" : "Can this access right write data",
        "type" : "boolean"
      },
      "value" : {
        "description" : "Access pattern",
        "type" : "string"
      },
      "canRead" : {
        "description" : "Can this access right read data",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.plugins.discovery.DiscoverySelfRegistrationTransformer" : {
    "description" : "Plugin that add services discovery to otoroshi",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.TargetPredicate" : {
    "oneOfConstraints" : [ {
      "required" : [ "type" ]
    }, {
      "required" : [ "type", "dc" ]
    }, {
      "required" : [ "positions", "type" ]
    }, {
      "required" : [ "provider", "type" ]
    }, {
      "required" : [ "rack", "provider", "dataCenter", "zone", "type", "region" ]
    }, {
      "required" : [ "rack", "type" ]
    }, {
      "required" : [ "type", "region" ]
    }, {
      "required" : [ "zone", "type" ]
    } ],
    "type" : "object",
    "properties" : {
      "rack" : {
        "description" : "Rack name",
        "type" : "string"
      },
      "provider" : {
        "description" : "Provider name",
        "type" : "string"
      },
      "dataCenter" : {
        "description" : "Datacenter name",
        "type" : "string"
      },
      "zone" : {
        "description" : "Zone name",
        "type" : "string"
      },
      "positions" : {
        "description" : "Possible positions",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "latitude" : {
              "format" : "double",
              "description" : "Latitude of the position",
              "type" : "number"
            },
            "longitude" : {
              "format" : "double",
              "description" : "Longitude of the position",
              "type" : "number"
            },
            "radius" : {
              "format" : "double",
              "description" : "Radius of the circle in meters",
              "type" : "number"
            }
          }
        }
      },
      "type" : {
        "description" : "the kind of predicate",
        "type" : "string",
        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
      },
      "region" : {
        "description" : "Region name",
        "type" : "string"
      },
      "dc" : {
        "description" : "DC name",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.IpStackGeolocationSettings" : {
    "description" : "Settings for connection to IpStack",
    "type" : "object",
    "properties" : {
      "apikey" : {
        "description" : "IpStack apikey",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of geolocation",
        "type" : "string",
        "enum" : [ "none", "maxmind", "ipstack" ]
      },
      "enabled" : {
        "description" : "enable ipstack geolocation",
        "type" : "boolean"
      },
      "timeout" : {
        "format" : "int64",
        "description" : "API call timeout",
        "type" : "integer"
      }
    }
  },
  "otoroshi.models.DefaultTemplates" : {
    "description" : "The template that will be merged with newly created entities",
    "type" : "object",
    "properties" : {
      "template" : {
        "description" : "the template for the template entities",
        "type" : "object"
      },
      "apikey" : {
        "description" : "the template for the apikey entities",
        "type" : "object"
      },
      "dataExporter" : {
        "description" : "the template for the dataExporter entities",
        "type" : "object"
      },
      "authConfig" : {
        "description" : "the template for the authConfig entities",
        "type" : "object"
      },
      "certificate" : {
        "description" : "the template for the certificate entities",
        "type" : "object"
      },
      "tcpService" : {
        "description" : "the template for the tcpService entities",
        "type" : "object"
      },
      "team" : {
        "description" : "the template for the team entities",
        "type" : "object"
      },
      "descriptor" : {
        "description" : "the template for the descriptor entities",
        "type" : "object"
      },
      "script" : {
        "description" : "the template for the script entities",
        "type" : "object"
      },
      "target" : {
        "description" : "the template for the target entities",
        "type" : "object"
      },
      "route" : {
        "description" : "the template for the route entities",
        "type" : "object"
      },
      "verifier" : {
        "description" : "the template for the verifier entities",
        "type" : "object"
      },
      "service" : {
        "description" : "the template for the service entities",
        "type" : "object"
      },
      "backend" : {
        "description" : "the template for the backend entities",
        "type" : "object"
      },
      "tenant" : {
        "description" : "the template for the tenant entities",
        "type" : "object"
      },
      "group" : {
        "description" : "the template for the group entities",
        "type" : "object"
      }
    }
  },
  "otoroshi.auth.SAMLSignature" : {
    "description" : "Algorithm and canocalization method used to sign SAML documents",
    "type" : "object",
    "properties" : {
      "canocalizationMethod" : {
        "description" : "Canonicalization Method for XML Signatures",
        "type" : "object",
        "properties" : { }
      },
      "algorithm" : {
        "description" : "Algorithm to sign documents or assertions",
        "type" : "object",
        "properties" : { }
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesAdmissionWebhookCRDValidator" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "UpdateQuotasBody" : {
    "type" : "string",
    "description" : ""
  },
  "otoroshi.next.plugins.MissingHeadersIn" : {
    "description" : "Plugin to add headers to a request",
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Headers added to the request if missing"
      }
    }
  },
  "otoroshi.plugins.clientcert.HasClientCertMatchingHttpValidator" : {
    "description" : "Plugin that validates client certificates",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.jobs.kubernetes.ClientSupport" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "client" : {
        "description" : "The actual kubernetes client",
        "type" : "object",
        "properties" : {
          "env" : {
            "description" : "The current env",
            "type" : "object",
            "properties" : {
              "circuitBeakersHolder" : {
                "description" : "The current instance of circuit breakers holder",
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "config" : {
            "description" : "The current client config.",
            "type" : "object",
            "properties" : {
              "watchGracePeriodSeconds" : {
                "format" : "int32",
                "description" : "The number of second to wait between receiving a change event and the actual sync",
                "type" : "integer"
              },
              "openshiftDnsOperatorCoreDnsName" : {
                "description" : "DNS operator name",
                "type" : "string"
              },
              "clusterDomain" : {
                "description" : "The current kubernetes cluster domain",
                "type" : "string"
              },
              "useProxyState" : {
                "description" : "Use proxy state instead of loading everything from datastore",
                "type" : "boolean"
              },
              "otoroshiNamespace" : {
                "description" : "The namespace where otoroshi is deployed",
                "type" : "string"
              },
              "crds" : {
                "description" : "Enabled crds integration",
                "type" : "boolean"
              },
              "coreDnsDeploymentName" : {
                "description" : "The name of the coredns deployment",
                "type" : "string"
              },
              "namespacesLabels" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Kubernetes namespaces with those labels that will be query"
              },
              "triggerPath" : {
                "description" : "--",
                "type" : "string"
              },
              "coreDnsIntegration" : {
                "description" : "Enable coredns integration",
                "type" : "boolean"
              },
              "openshiftDnsOperatorIntegration" : {
                "description" : "Enable the openshift operator integration",
                "type" : "boolean"
              },
              "openshiftDnsOperatorCoreDnsNamespace" : {
                "description" : "DNS operator namespace",
                "type" : "string"
              },
              "watchTimeoutSeconds" : {
                "format" : "int32",
                "description" : "The timeout to call a watch resources",
                "type" : "integer"
              },
              "kubeSystemNamespace" : {
                "description" : "The namespace containing coredns",
                "type" : "string"
              },
              "image" : {
                "description" : "Sidecar image",
                "type" : "string"
              },
              "syncIntervalSeconds" : {
                "format" : "int64",
                "description" : "Number of seconds between syncs",
                "type" : "integer"
              },
              "syncDaikokuApikeysOnly" : {
                "description" : "Sync only daikoku apikeys",
                "type" : "boolean"
              },
              "templates" : {
                "description" : "Templates for created entities",
                "type" : "object"
              },
              "openshiftDnsOperatorCleanupNames" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Cleanup DNS operator based on names"
              },
              "labels" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Kubernetes entities with those labels will be query"
              },
              "openshiftDnsOperatorCoreDnsPort" : {
                "format" : "int32",
                "description" : "DNS operator port number",
                "type" : "integer"
              },
              "validatingWebhookName" : {
                "description" : "The name of the validating webhook",
                "type" : "string"
              },
              "kubeDnsOperatorCoreDnsNamespace" : {
                "description" : "Kube dns namespace",
                "type" : "string"
              },
              "namespaces" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Kubernetes namespaces that will be query"
              },
              "ingressClasses" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Ingress classes watched by otoroshi ingress controller"
              },
              "trust" : {
                "description" : "Trust Kube CA",
                "type" : "boolean"
              },
              "triggerKey" : {
                "description" : "--",
                "type" : "string"
              },
              "userPassword" : {
                "description" : "Optional username/password to access kube api",
                "type" : "string"
              },
              "caCert" : {
                "description" : "The kubernetes cacert",
                "type" : "string"
              },
              "kubeDnsOperatorCoreDnsPort" : {
                "format" : "int32",
                "description" : "Kube dns port number",
                "type" : "integer"
              },
              "ingressEndpointPublishedService" : {
                "description" : "--",
                "type" : "string"
              },
              "coreDnsConfigMapName" : {
                "description" : "The name of the coredns config-map",
                "type" : "string"
              },
              "endpoint" : {
                "description" : "Kube API endpoint",
                "type" : "string"
              },
              "restartDependantDeployments" : {
                "description" : "If enabled, deployments dependant to otoroshi managed secrets (apikeys, certs) will be automatically restarted as secrets are updated",
                "type" : "boolean"
              },
              "defaultGroup" : {
                "description" : "Otoroshi groups where ingress services will be created",
                "type" : "string"
              },
              "ingressEndpointHostname" : {
                "description" : "--",
                "type" : "string"
              },
              "kubeDnsOperatorCoreDnsName" : {
                "description" : "Kube dns name",
                "type" : "string"
              },
              "coreDnsIntegrationDryRun" : {
                "description" : "Do not modify coredns config automatically",
                "type" : "boolean"
              },
              "ingressEndpointIp" : {
                "description" : "--",
                "type" : "string"
              },
              "mutatingWebhookName" : {
                "description" : "Sidecar webhook name",
                "type" : "string"
              },
              "otoroshiServiceName" : {
                "description" : "The service name for otoroshi",
                "type" : "string"
              },
              "meshDomain" : {
                "description" : "The domain used for service mesh",
                "type" : "string"
              },
              "ingresses" : {
                "description" : "Enable ingress controller",
                "type" : "boolean"
              },
              "triggerHost" : {
                "description" : "--",
                "type" : "string"
              },
              "openshiftDnsOperatorCleanupDomains" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Cleanup DNS operator based on domains"
              },
              "token" : {
                "description" : "Kube API access token",
                "type" : "string"
              },
              "corednsPort" : {
                "format" : "int32",
                "description" : "Port of coredns",
                "type" : "integer"
              },
              "watch" : {
                "description" : "Enabled resources watch",
                "type" : "boolean"
              },
              "kubeLeader" : {
                "description" : "Use kubernetes to select a leader",
                "type" : "boolean"
              },
              "coreDnsEnv" : {
                "description" : "Domain name prefix",
                "type" : "string"
              },
              "openshiftDnsOperatorCleanup" : {
                "description" : "Cleanup DNS operator",
                "type" : "boolean"
              },
              "kubeDnsOperatorIntegration" : {
                "description" : "Enable the legacy kubedns operator integration",
                "type" : "boolean"
              }
            }
          }
        }
      },
      "env" : {
        "description" : "The current env",
        "type" : "object",
        "properties" : {
          "circuitBeakersHolder" : {
            "description" : "The current instance of circuit breakers holder",
            "type" : "object",
            "properties" : { }
          }
        }
      }
    }
  },
  "otoroshi.plugins.core.DefaultPlugins" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.DataExporterConfigFiltering" : {
    "description" : "Settings to match otoroshi events",
    "type" : "object",
    "properties" : {
      "include" : {
        "type" : "array",
        "items" : {
          "type" : "object"
        },
        "description" : "Exclude the events matching one of those filters"
      },
      "exclude" : {
        "type" : "array",
        "items" : {
          "type" : "object"
        },
        "description" : "Include the events matching one of those filters"
      }
    }
  },
  "PluginDescription" : {
    "type" : "object",
    "description" : "Description of a plugin",
    "properties" : {
      "id" : {
        "type" : "string",
        "description" : "the id of the plugin"
      },
      "name" : {
        "type" : "string",
        "description" : "the name of the plugin"
      },
      "description" : {
        "type" : "string",
        "description" : "the description of the plugin"
      },
      "default_config" : {
        "type" : "string",
        "description" : "the default config of the plugin (for UI form)"
      },
      "config_schema" : {
        "type" : "string",
        "description" : "the config schema of the plugin (for UI form)"
      },
      "config_flow" : {
        "type" : "array",
        "description" : "the config flow of the plugin (for UI form)",
        "items" : {
          "type" : "string"
        }
      },
      "plugin_visibility" : {
        "type" : "string",
        "description" : "visibility of the plugin (can be internal or userland)"
      },
      "plugin_categories" : {
        "type" : "array",
        "description" : "categories of the plugin",
        "items" : { }
      },
      "plugin_steps" : {
        "type" : "array",
        "description" : "steps of the plugin",
        "items" : { }
      },
      "plugin_tags" : {
        "type" : "array",
        "description" : "tags of the plugin",
        "items" : { }
      }
    }
  },
  "otoroshi.plugins.static.StaticResponse" : {
    "description" : "Plugin that serves static responses",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.apikeys.CertificateAsApikey" : {
    "description" : "Plugin to use a certificate as an apikey",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfigMode" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.ServiceGroup" : {
    "description" : "The otoroshi model for a group of services",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Just a bunch of random properties"
      },
      "name" : {
        "description" : "The name of your service. Only for debug and human readability purposes",
        "type" : "string"
      },
      "description" : {
        "description" : "Entity description",
        "type" : "string"
      },
      "id" : {
        "description" : "A unique random string to identify your service",
        "type" : "string"
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      }
    }
  },
  "otoroshi.auth.OAuth1Provider" : {
    "description" : "Method used to get request and access token",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.XmlToJsonRequest" : {
    "description" : "Plugin to transform xml body into json",
    "type" : "object",
    "properties" : {
      "filter" : {
        "description" : "JQ filter to transform request body",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.discovery.DiscoveryHelper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.ssl.pki.models.GenCsrQuery" : {
    "description" : "Settings for generating a certificate",
    "type" : "object",
    "properties" : {
      "duration" : {
        "description" : "Certificate lifespan",
        "type" : "number"
      },
      "includeAIA" : {
        "description" : "Include AIA extension (if generated from otoroshi CA)",
        "type" : "boolean"
      },
      "signatureAlg" : {
        "description" : "Signature algorithm",
        "type" : "string"
      },
      "digestAlg" : {
        "description" : "Digest algo",
        "type" : "string"
      },
      "hosts" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Certificate SANs"
      },
      "subject" : {
        "description" : "Certificate subject",
        "type" : "string"
      },
      "name" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Certificate name"
      },
      "client" : {
        "description" : "Is cert client ?",
        "type" : "boolean"
      },
      "existingSerialNumber" : {
        "format" : "int64",
        "description" : "",
        "type" : "integer"
      },
      "ca" : {
        "description" : "Is cert ca ?",
        "type" : "boolean"
      },
      "key" : {
        "description" : "Keypair specs",
        "type" : "object",
        "properties" : {
          "algo" : {
            "description" : "Keypair algorithm",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "Keypair size",
            "type" : "integer"
          }
        }
      }
    }
  },
  "otoroshi.next.plugins.NgApikeyMatcher" : {
    "description" : "Configuration for ApikeyCalls",
    "type" : "object",
    "properties" : {
      "none_meta_keys_in" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Matching on none metadata keys being present"
      },
      "all_meta_keys_in" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Matching on all metadata keys being present"
      },
      "all_meta_in" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Matching on all metadata being present"
      },
      "none_meta_in" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Matching on none metadata being present"
      },
      "one_tag_in" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Matching on one tag being present"
      },
      "enabled" : {
        "description" : "Tags and metadata matching enabled",
        "type" : "boolean"
      },
      "one_meta_in" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Matching on none metadata being present"
      },
      "all_tags_in" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Matching on all tags being present"
      },
      "one_meta_key_in" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Matching on one metadata being present"
      },
      "none_tag_in" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Matching on none tags being present"
      }
    }
  },
  "otoroshi.plugins.apikeys.HasAllowedApiKeyValidator" : {
    "description" : "Plugin that validates apikey",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.NetworkLocationMatch" : {
    "description" : "Match a target if in the same network location",
    "type" : "object",
    "properties" : {
      "rack" : {
        "description" : "Rack name",
        "type" : "string"
      },
      "provider" : {
        "description" : "Provider name",
        "type" : "string"
      },
      "dataCenter" : {
        "description" : "Datacenter name",
        "type" : "string"
      },
      "zone" : {
        "description" : "Zone name",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of predicate",
        "type" : "string",
        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
      },
      "region" : {
        "description" : "Region name",
        "type" : "string"
      }
    }
  },
  "otoroshi.script.PluginType" : {
    "type" : "string",
    "enum" : [ "app", "transformer", "validator", "preroute", "sink", "listener", "job", "exporter" ],
    "description" : "Plugin kind"
  },
  "otoroshi.utils.mailer.ConsoleMailerSettings" : {
    "description" : "Settings for the console mailer",
    "type" : "object",
    "properties" : {
      "type" : {
        "description" : "the kind of mailer",
        "type" : "string",
        "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
      }
    }
  },
  "otoroshi.plugins.oauth1.OAuth1CallerPlugin" : {
    "description" : "Plugin to call OAuth1 protected backends",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.XmlToJsonResponse" : {
    "description" : "Plugin to transform xml body into json",
    "type" : "object",
    "properties" : {
      "filter" : {
        "description" : "JQ filter to transform response body",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.DataExporterConfigType" : {
    "type" : "string",
    "enum" : [ "kafka", "pulsar", "elastic", "webhook", "file", "mailer", "custom", "none", "console", "metrics" ],
    "description" : "Type of data exporter"
  },
  "otoroshi.plugins.jobs.kubernetes.FailedCrdParsing" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "crd" : {
        "description" : "The failed crd",
        "type" : "object"
      },
      "namespace" : {
        "description" : "The namespace of the error",
        "type" : "string"
      },
      "pluralName" : {
        "description" : "The plural name of the resources",
        "type" : "string"
      },
      "error" : {
        "description" : "The actual error",
        "type" : "string"
      },
      "customizedSpec" : {
        "description" : "The spec to customize",
        "type" : "object"
      }
    }
  },
  "otoroshi.script.Script" : {
    "description" : "An otoroshi plugins stored as scala code in the otoroshi datastore",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "code" : {
        "description" : "The code of the script",
        "type" : "string"
      },
      "name" : {
        "description" : "The name of the script",
        "type" : "string"
      },
      "id" : {
        "description" : "The id of the script",
        "type" : "string"
      },
      "type" : {
        "description" : "Plugin kind",
        "type" : "string",
        "enum" : [ "app", "transformer", "validator", "preroute", "sink", "listener", "job", "exporter" ]
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "desc" : {
        "description" : "The description of the script",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesToOtoroshiCertSyncJob" : {
    "description" : "Plugin to sync otoroshi certificates with kubernetes",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.clientcert.SubIss" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "subject" : {
        "description" : "The subject DN",
        "type" : "string"
      },
      "sn" : {
        "description" : "The serial number of the current issuer",
        "type" : "string"
      },
      "issuer" : {
        "description" : "The issuer DN",
        "type" : "string"
      }
    }
  },
  "otoroshi.utils.mailer.MailjetSettings" : {
    "description" : "Settings for the mailjet mailer",
    "type" : "object",
    "properties" : {
      "apiKeyPrivate" : {
        "description" : "Private key",
        "type" : "string"
      },
      "apiKeyPublic" : {
        "description" : "Public key",
        "type" : "string"
      },
      "to" : {
        "description" : "Destination email address",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "description" : "Destination name",
              "type" : "string"
            },
            "email" : {
              "description" : "Email address",
              "type" : "string"
            }
          }
        }
      },
      "type" : {
        "description" : "the kind of mailer",
        "type" : "string",
        "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
      }
    }
  },
  "play.api.libs.ws.WSProxyServer" : {
    "type" : "object",
    "properties" : {
      "host" : {
        "type" : "string",
        "description" : "The hostname of the proxy server."
      },
      "port" : {
        "type" : "string",
        "description" : "The port of the proxy server."
      },
      "protocol" : {
        "type" : "string",
        "description" : "The protocol of the proxy server.  Use \"http\" or \"https\".  Defaults to \"http\" if not specified."
      },
      "principal" : {
        "type" : "string",
        "description" : "The principal (aka username) of the credentials for the proxy server."
      },
      "password" : {
        "type" : "string",
        "description" : "The password for the credentials for the proxy server."
      },
      "ntlmDomain" : {
        "type" : "string",
        "description" : "The ntlm domain for the proxy server."
      },
      "encoding" : {
        "type" : "string",
        "description" : "The realm's charset."
      },
      "nonProxyHosts" : {
        "type" : "string",
        "description" : "The non proxied hosts"
      }
    },
    "description" : "Proxy server"
  },
  "otoroshi.next.plugins.GlobalPerIpAddressThrottlingQuotas" : {
    "description" : "Plugin for ip address quotas",
    "type" : "object",
    "properties" : {
      "within" : {
        "description" : "Is it within the quotas",
        "type" : "boolean"
      },
      "sec_calls" : {
        "format" : "int64",
        "description" : "Number of calls per second",
        "type" : "integer"
      }
    }
  },
  "otoroshi.plugins.loggers.BodyLoggerConfig" : {
    "description" : "Configuration for BodyLogger",
    "type" : "object",
    "properties" : {
      "json" : {
        "description" : "The current config",
        "type" : "object"
      }
    }
  },
  "otoroshi.models.ServiceDescriptorIdentifier" : {
    "type" : "string",
    "description" : "the id of a service prefixed by 'service_'"
  },
  "otoroshi.models.SecComHeaders" : {
    "description" : "Header names for the otoroshi exchange protocol",
    "type" : "object",
    "properties" : {
      "stateResponseName" : {
        "description" : "Header name where the validation token respondewill be",
        "type" : "string"
      },
      "claimRequestName" : {
        "description" : "Header name where the info token will be",
        "type" : "string"
      },
      "stateRequestName" : {
        "description" : "Header name where the validation token will be",
        "type" : "string"
      }
    }
  },
  "otoroshi.auth.SAMLCredentials" : {
    "description" : "Used to sign, encrypt assertions and sign SAML documents",
    "type" : "object",
    "properties" : {
      "signedDocuments" : {
        "description" : "Indicates if SAML documents have to be sign before sending to identity provider",
        "type" : "boolean"
      },
      "encryptedAssertions" : {
        "description" : "Indicates if assertions have to be encrypt before sending to identity provider",
        "type" : "boolean"
      },
      "signingKey" : {
        "description" : "Pair of configuration used to sign documents",
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
            "type" : "string"
          },
          "certificate" : {
            "description" : "PEM certificate used to sign SAML requests send to identity provider",
            "type" : "string"
          },
          "certId" : {
            "description" : "Id of the certificate used to sign SAML requests send to identity provider",
            "type" : "string"
          },
          "useOtoroshiCertificate" : {
            "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
            "type" : "boolean"
          }
        }
      },
      "encryptionKey" : {
        "description" : "Pair of configuration used to encrypt assertions",
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
            "type" : "string"
          },
          "certificate" : {
            "description" : "PEM certificate used to sign SAML requests send to identity provider",
            "type" : "string"
          },
          "certId" : {
            "description" : "Id of the certificate used to sign SAML requests send to identity provider",
            "type" : "string"
          },
          "useOtoroshiCertificate" : {
            "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
            "type" : "boolean"
          }
        }
      }
    }
  },
  "otoroshi.next.models.StoredNgTarget" : {
    "description" : "A target that can be stored in the otoroshi datastore",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The metadata of the target"
      },
      "name" : {
        "description" : "The name of the target",
        "type" : "string"
      },
      "description" : {
        "description" : "The description of the target",
        "type" : "string"
      },
      "id" : {
        "description" : "The id of the target",
        "type" : "string"
      },
      "_loc" : {
        "description" : "The location of the target",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The tags of the target"
      },
      "target" : {
        "description" : "The actual target",
        "type" : "object",
        "properties" : {
          "predicate" : {
            "description" : "Predicate to choose this target",
            "type" : "object",
            "properties" : {
              "rack" : {
                "description" : "Rack name",
                "type" : "string"
              },
              "provider" : {
                "description" : "Provider name",
                "type" : "string"
              },
              "dataCenter" : {
                "description" : "Datacenter name",
                "type" : "string"
              },
              "zone" : {
                "description" : "Zone name",
                "type" : "string"
              },
              "positions" : {
                "description" : "Possible positions",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "latitude" : {
                      "format" : "double",
                      "description" : "Latitude of the position",
                      "type" : "number"
                    },
                    "longitude" : {
                      "format" : "double",
                      "description" : "Longitude of the position",
                      "type" : "number"
                    },
                    "radius" : {
                      "format" : "double",
                      "description" : "Radius of the circle in meters",
                      "type" : "number"
                    }
                  }
                }
              },
              "type" : {
                "description" : "the kind of predicate",
                "type" : "string",
                "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
              },
              "region" : {
                "description" : "Region name",
                "type" : "string"
              },
              "dc" : {
                "description" : "DC name",
                "type" : "string"
              }
            }
          },
          "protocol" : {
            "description" : "Protocol for the target",
            "type" : "string"
          },
          "hostname" : {
            "description" : "hostname of the target",
            "type" : "string"
          },
          "port" : {
            "format" : "int32",
            "description" : "port of the target",
            "type" : "integer"
          },
          "weight" : {
            "format" : "int32",
            "description" : "The weight of the target when choosing",
            "type" : "integer"
          },
          "tls" : {
            "description" : "Does the target uses TLS",
            "type" : "boolean"
          },
          "tls_config" : {
            "description" : "TLS settings to contact this target",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trust_all" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trusted_certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "id" : {
            "description" : "id of the target",
            "type" : "string"
          },
          "ip_address" : {
            "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
            "type" : "string"
          }
        }
      }
    }
  },
  "otoroshi.next.plugins.NgApikeyExtractorCustomHeaders" : {
    "description" : "Configuration for ApikeyCalls",
    "type" : "object",
    "properties" : {
      "client_secret_header_name" : {
        "description" : "Header name to extract client secret",
        "type" : "string"
      },
      "client_id_header_name" : {
        "description" : "Header name to extract client id",
        "type" : "string"
      },
      "enabled" : {
        "description" : "Is it enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.tcp.TlsMode" : {
    "type" : "string",
    "enum" : [ "Disabled", "Enabled", "PassThrough" ],
    "description" : "TLS mode"
  },
  "otoroshi.models.ESKPAlgoSettings" : {
    "description" : "Settings to use elliptic curve signing algorithm from a certificate keypair",
    "type" : "object",
    "properties" : {
      "size" : {
        "format" : "int32",
        "description" : "Size of the key",
        "type" : "integer"
      },
      "certId" : {
        "description" : "Certificate id to use the keypair",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of algosettings",
        "type" : "string",
        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
      }
    }
  },
  "otoroshi.plugins.users.HasAllowedUsersValidator" : {
    "description" : "Plugin that validates current user",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.NgTreeRouter" : {
    "description" : "A very efficient router with a tree structure",
    "type" : "object",
    "properties" : { }
  },
  "AuditEventList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "type" : "object",
        "description" : "Audit trail event"
      }
    }
  },
  "otoroshi.next.plugins.NgCorsSettings" : {
    "description" : "Configuration for Cors",
    "type" : "object",
    "properties" : {
      "max_age" : {
        "description" : "cors max age",
        "type" : "number"
      },
      "allow_headers" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Allowed cors headers"
      },
      "allow_methods" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Allowed cors methods"
      },
      "excluded_patterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Paths without cors"
      },
      "allow_credentials" : {
        "description" : "Allowed credentials",
        "type" : "boolean"
      },
      "expose_headers" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Exposed cors headers"
      },
      "allow_origin" : {
        "description" : "Allowed cors origins",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.ServiceDescriptor" : {
    "description" : "The otoroshi model for a service (handles routing)",
    "type" : "object",
    "properties" : {
      "removeHeadersIn" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Remove headers on client request"
      },
      "missingOnlyHeadersOut" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Add header on client response if they are not present"
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Just a bunch of random properties"
      },
      "tcpUdpTunneling" : {
        "description" : "Enabled TCP/UDP tunneling through websocket connection",
        "type" : "boolean"
      },
      "cors" : {
        "description" : "CORS settings",
        "type" : "object",
        "properties" : {
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors excluded patterns"
          },
          "allowMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors allowed methods"
          },
          "allowHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors allowed headers"
          },
          "exposeHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors exposed header"
          },
          "maxAge" : {
            "description" : "Cors max age",
            "type" : "number"
          },
          "enabled" : {
            "description" : "Whether or not cors is enabled",
            "type" : "boolean"
          },
          "allowCredentials" : {
            "description" : "Allow to pass credentials",
            "type" : "boolean"
          },
          "allowOrigin" : {
            "description" : "The cors allowed origin",
            "type" : "string"
          }
        }
      },
      "forceHttps" : {
        "description" : "Will force redirection to https:// if not present",
        "type" : "boolean"
      },
      "matchingRoot" : {
        "description" : "The root path on which the service is available",
        "type" : "string"
      },
      "plugins" : {
        "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
        "type" : "object",
        "properties" : {
          "config" : {
            "description" : "Plugins configuration",
            "type" : "object"
          },
          "enabled" : {
            "description" : "Plugins enabled",
            "type" : "boolean"
          },
          "excluded" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          }
        }
      },
      "letsEncrypt" : {
        "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
        "type" : "boolean"
      },
      "useNewWSClient" : {
        "description" : "Use akka http client for this service on websocket calls",
        "type" : "boolean"
      },
      "chaosConfig" : {
        "description" : "Chaos engineering settings",
        "type" : "object",
        "properties" : {
          "badResponsesFaultConfig" : {
            "description" : "Settings for bad responses",
            "type" : "object",
            "properties" : {
              "responses" : {
                "description" : "The possibles responses",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "format" : "int32",
                      "description" : "The HTTP status for the response",
                      "type" : "integer"
                    },
                    "body" : {
                      "description" : "The body of the HTTP response",
                      "type" : "string"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "The HTTP headers of the response"
                    }
                  }
                }
              },
              "ratio" : {
                "format" : "double",
                "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                "type" : "number"
              }
            }
          },
          "largeResponseFaultConfig" : {
            "description" : "Settings for large responses",
            "type" : "object",
            "properties" : {
              "ratio" : {
                "format" : "double",
                "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                "type" : "number"
              },
              "additionalResponseSize" : {
                "format" : "int32",
                "description" : "Add n 0 bytes",
                "type" : "integer"
              }
            }
          },
          "latencyInjectionFaultConfig" : {
            "description" : "Settings for latency injection",
            "type" : "object",
            "properties" : {
              "ratio" : {
                "format" : "double",
                "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                "type" : "number"
              },
              "from" : {
                "description" : "The start range of latency added to the request",
                "type" : "number"
              },
              "to" : {
                "description" : "The end range of latency added to the request",
                "type" : "number"
              }
            }
          },
          "largeRequestFaultConfig" : {
            "description" : "Settings for large requests",
            "type" : "object",
            "properties" : {
              "ratio" : {
                "format" : "double",
                "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                "type" : "number"
              },
              "additionalRequestSize" : {
                "format" : "int32",
                "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                "type" : "integer"
              }
            }
          },
          "enabled" : {
            "description" : "Whether or not this config is enabled",
            "type" : "boolean"
          }
        }
      },
      "secComSettings" : {
        "description" : "Sec. com. settings",
        "oneOfConstraints" : [ {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "size", "base64", "secret", "type" ]
        }, {
          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
        }, {
          "required" : [ "onlyExposedCerts", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          }
        }
      },
      "detectApiKeySooner" : {
        "description" : "Detect if an apikey is present but do not fail if not",
        "type" : "boolean"
      },
      "transformerRefs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Enabled transformer plugins"
      },
      "secComAlgoInfoToken" : {
        "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
        "oneOfConstraints" : [ {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "size", "base64", "secret", "type" ]
        }, {
          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
        }, {
          "required" : [ "onlyExposedCerts", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          }
        }
      },
      "missingOnlyHeadersIn" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Add header on client request if they are not present"
      },
      "secComAlgoChallengeOtoToBack" : {
        "description" : "Algorithm to sign challenge token to the backend",
        "oneOfConstraints" : [ {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "size", "base64", "secret", "type" ]
        }, {
          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
        }, {
          "required" : [ "onlyExposedCerts", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          }
        }
      },
      "removeHeadersOut" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Remove headers on client response"
      },
      "stripPath" : {
        "description" : "Strip matching path in the forwarded request path",
        "type" : "boolean"
      },
      "localHost" : {
        "description" : "The host used localy, mainly localhost:xxxx",
        "type" : "string"
      },
      "sendOtoroshiHeadersBack" : {
        "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
        "type" : "boolean"
      },
      "id" : {
        "description" : "A unique random string to identify your service",
        "type" : "string"
      },
      "api" : {
        "description" : "Api exposition settings",
        "type" : "object",
        "properties" : {
          "exposeApi" : {
            "description" : "Is this an API",
            "type" : "boolean"
          },
          "openApiDescriptorUrl" : {
            "description" : "openapi descriptor url",
            "type" : "string"
          }
        }
      },
      "secComTtl" : {
        "description" : "TTL for the info token",
        "type" : "number"
      },
      "secComVersion" : {
        "description" : "Version of the challenge token",
        "type" : "string",
        "enum" : [ "V1", "v2" ]
      },
      "targetsLoadBalancing" : {
        "description" : "Loadbalancing strategy",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
          },
          "ratio" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "userFacing" : {
        "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
        "type" : "boolean"
      },
      "hosts" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Possible hosts for the service"
      },
      "restrictions" : {
        "description" : "Restriction settings",
        "type" : "object",
        "properties" : {
          "allowed" : {
            "description" : "Allowed paths",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "method" : {
                  "description" : "Method of the http request",
                  "type" : "string"
                },
                "path" : {
                  "description" : "Path of the http request",
                  "type" : "string"
                }
              }
            }
          },
          "allowLast" : {
            "description" : "Evalute allowed paths after everything else",
            "type" : "boolean"
          },
          "forbidden" : {
            "description" : "Forbidden paths (return 403)",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "method" : {
                  "description" : "Method of the http request",
                  "type" : "string"
                },
                "path" : {
                  "description" : "Path of the http request",
                  "type" : "string"
                }
              }
            }
          },
          "notFound" : {
            "description" : "Not found paths (return 404)",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "method" : {
                  "description" : "Method of the http request",
                  "type" : "string"
                },
                "path" : {
                  "description" : "Path of the http request",
                  "type" : "string"
                }
              }
            }
          },
          "enabled" : {
            "description" : "Restrictions enabled",
            "type" : "boolean"
          }
        }
      },
      "readOnly" : {
        "description" : "Service only accepts GET, HEAD and OPTIONS requests",
        "type" : "boolean"
      },
      "secComInfoTokenVersion" : {
        "description" : "Version of the info token",
        "type" : "string",
        "enum" : [ "Legacy", "Latest" ]
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "enforceSecureCommunication" : {
        "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
        "type" : "boolean"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "clientValidatorRef" : {
        "description" : "A reference to validation authority",
        "type" : "string"
      },
      "privateApp" : {
        "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
        "type" : "boolean"
      },
      "paths" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Matching paths on request"
      },
      "domain" : {
        "description" : "The domain on which the service is available.",
        "type" : "string"
      },
      "name" : {
        "description" : "The name of your service. Only for debug and human readability purposes",
        "type" : "string"
      },
      "transformerConfig" : {
        "description" : "Transformer plugins configuration",
        "type" : "object"
      },
      "subdomain" : {
        "description" : "The subdomain on which the service is available",
        "type" : "string"
      },
      "maintenanceMode" : {
        "description" : "Display a maintainance page when a user try to use the service",
        "type" : "boolean"
      },
      "secComHeaders" : {
        "description" : "Header names for sec. com. protocol",
        "type" : "object",
        "properties" : {
          "stateResponseName" : {
            "description" : "Header name where the validation token respondewill be",
            "type" : "string"
          },
          "claimRequestName" : {
            "description" : "Header name where the info token will be",
            "type" : "string"
          },
          "stateRequestName" : {
            "description" : "Header name where the validation token will be",
            "type" : "string"
          }
        }
      },
      "handleLegacyDomain" : {
        "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
        "type" : "boolean"
      },
      "logAnalyticsOnServer" : {
        "description" : "Log analytics event on the server",
        "type" : "boolean"
      },
      "strictlyPrivate" : {
        "description" : "When strictly private, private app session will not pass apikey filters",
        "type" : "boolean"
      },
      "description" : {
        "description" : "Entity description",
        "type" : "string"
      },
      "buildMode" : {
        "description" : "Display a construction page when a user try to use the service",
        "type" : "boolean"
      },
      "targets" : {
        "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "predicate" : {
              "description" : "Predicate to choose this target",
              "type" : "object",
              "properties" : {
                "rack" : {
                  "description" : "Rack name",
                  "type" : "string"
                },
                "provider" : {
                  "description" : "Provider name",
                  "type" : "string"
                },
                "dataCenter" : {
                  "description" : "Datacenter name",
                  "type" : "string"
                },
                "zone" : {
                  "description" : "Zone name",
                  "type" : "string"
                },
                "positions" : {
                  "description" : "Possible positions",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "latitude" : {
                        "format" : "double",
                        "description" : "Latitude of the position",
                        "type" : "number"
                      },
                      "longitude" : {
                        "format" : "double",
                        "description" : "Longitude of the position",
                        "type" : "number"
                      },
                      "radius" : {
                        "format" : "double",
                        "description" : "Radius of the circle in meters",
                        "type" : "number"
                      }
                    }
                  }
                },
                "type" : {
                  "description" : "the kind of predicate",
                  "type" : "string",
                  "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                },
                "region" : {
                  "description" : "Region name",
                  "type" : "string"
                },
                "dc" : {
                  "description" : "DC name",
                  "type" : "string"
                }
              }
            },
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Metadata for this target"
            },
            "protocol" : {
              "description" : "Protocol for the target",
              "type" : "string"
            },
            "scheme" : {
              "description" : "The protocol used for communication. Can be http or https",
              "type" : "string"
            },
            "mtlsConfig" : {
              "description" : "TLS settings to contact this target",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "host" : {
              "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
              "type" : "string"
            },
            "ipAddress" : {
              "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
              "type" : "string"
            },
            "weight" : {
              "format" : "int32",
              "description" : "The weight of the target when choosing",
              "type" : "integer"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Tags for this target"
            }
          }
        }
      },
      "enabled" : {
        "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
        "type" : "boolean"
      },
      "additionalHeadersOut" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Specify headers that will be added to each client response"
      },
      "sendStateChallenge" : {
        "description" : "Should otoroshi send challenge token",
        "type" : "boolean"
      },
      "root" : {
        "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
        "type" : "string"
      },
      "additionalHeaders" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Specify headers that will be added to each client request. Useful to add authentication"
      },
      "issueCertCA" : {
        "description" : "CA for cert issuance",
        "type" : "string"
      },
      "ipFiltering" : {
        "description" : "Ip filtering settings",
        "type" : "object",
        "properties" : {
          "whitelist" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Whitelisted IP addresses"
          },
          "blacklist" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Blacklisted IP addresses"
          }
        }
      },
      "redirection" : {
        "description" : "Redirection settings",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Whether or not redirection is enabled",
            "type" : "boolean"
          },
          "code" : {
            "format" : "int32",
            "description" : "The http redirect code",
            "type" : "integer"
          },
          "to" : {
            "description" : "The location for redirection",
            "type" : "string"
          }
        }
      },
      "redirectToLocal" : {
        "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
        "type" : "boolean"
      },
      "headersVerification" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Specify headers that will be verified after routing."
      },
      "useAkkaHttpClient" : {
        "description" : "Use akka http client for this service",
        "type" : "boolean"
      },
      "securityExcludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Exclude some paths"
      },
      "authConfigRef" : {
        "description" : "A reference to a global auth module config",
        "type" : "string"
      },
      "preRouting" : {
        "description" : "Pre routing plugin settings",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "pre-routing plugins enabled",
            "type" : "boolean"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          },
          "config" : {
            "description" : "pre-routing plugins configuration",
            "type" : "object"
          }
        }
      },
      "canary" : {
        "description" : "Canary settings",
        "type" : "object",
        "properties" : {
          "root" : {
            "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
            "type" : "string"
          },
          "targets" : {
            "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "predicate" : {
                  "description" : "Predicate to choose this target",
                  "type" : "object",
                  "properties" : {
                    "rack" : {
                      "description" : "Rack name",
                      "type" : "string"
                    },
                    "provider" : {
                      "description" : "Provider name",
                      "type" : "string"
                    },
                    "dataCenter" : {
                      "description" : "Datacenter name",
                      "type" : "string"
                    },
                    "zone" : {
                      "description" : "Zone name",
                      "type" : "string"
                    },
                    "positions" : {
                      "description" : "Possible positions",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "latitude" : {
                            "format" : "double",
                            "description" : "Latitude of the position",
                            "type" : "number"
                          },
                          "longitude" : {
                            "format" : "double",
                            "description" : "Longitude of the position",
                            "type" : "number"
                          },
                          "radius" : {
                            "format" : "double",
                            "description" : "Radius of the circle in meters",
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of predicate",
                      "type" : "string",
                      "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                    },
                    "region" : {
                      "description" : "Region name",
                      "type" : "string"
                    },
                    "dc" : {
                      "description" : "DC name",
                      "type" : "string"
                    }
                  }
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata for this target"
                },
                "protocol" : {
                  "description" : "Protocol for the target",
                  "type" : "string"
                },
                "scheme" : {
                  "description" : "The protocol used for communication. Can be http or https",
                  "type" : "string"
                },
                "mtlsConfig" : {
                  "description" : "TLS settings to contact this target",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "host" : {
                  "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                  "type" : "string"
                },
                "ipAddress" : {
                  "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                  "type" : "string"
                },
                "weight" : {
                  "format" : "int32",
                  "description" : "The weight of the target when choosing",
                  "type" : "integer"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Tags for this target"
                }
              }
            }
          },
          "enabled" : {
            "description" : "Use canary mode for this service",
            "type" : "boolean"
          },
          "traffic" : {
            "format" : "double",
            "description" : "Ratio of traffic that will be sent to canary targets.",
            "type" : "number"
          }
        }
      },
      "secComExcludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "URI patterns excluded from secured communications"
      },
      "xForwardedHeaders" : {
        "description" : "Send X-Forwarded-* headers",
        "type" : "boolean"
      },
      "apiKeyConstraints" : {
        "description" : "Routing and extraction constraints for the apikeyh",
        "type" : "object",
        "properties" : {
          "routing" : {
            "description" : "Routing settings for this apikey",
            "type" : "object",
            "properties" : {
              "oneTagIn" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "outing if one tag presents in apikey"
              },
              "noneMetaKeysIn" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Routing if none meta keys presents in apikey"
              },
              "oneMetaIn" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Routing if one meta presents in apikey"
              },
              "oneMetaKeyIn" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Routing if one meta key presents in apikey"
              },
              "allMetaKeysIn" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Routing if all meta keys presents in apikey"
              },
              "noneTagIn" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Routing if none tags presents in apikey"
              },
              "allTagsIn" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Routing if all tags presents in apikey"
              },
              "allMetaIn" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Routing if all meta presents in apikey"
              },
              "noneMetaIn" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Routing if none meta presents in apikey"
              }
            }
          },
          "customHeadersAuth" : {
            "description" : "Settings to extract apikey from custom headers",
            "type" : "object",
            "properties" : {
              "clientSecretHeaderName" : {
                "description" : "Header name to find client_secret",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Constraint enabled",
                "type" : "boolean"
              },
              "clientIdHeaderName" : {
                "description" : "Header name to find client_id",
                "type" : "string"
              }
            }
          },
          "basicAuth" : {
            "description" : "Settings to extract basic auth style apikey",
            "type" : "object",
            "properties" : {
              "headerName" : {
                "description" : "Header name to get client_id:client_secret base64 encoded",
                "type" : "string"
              },
              "queryName" : {
                "description" : "Query param name to get client_id:client_secret base64 encoded",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Constraint enabled",
                "type" : "boolean"
              }
            }
          },
          "jwtAuth" : {
            "description" : "Settings to extract apikey from jwt token",
            "type" : "object",
            "properties" : {
              "headerName" : {
                "description" : "Header name to extract jwt token",
                "type" : "string"
              },
              "maxJwtLifespanSecs" : {
                "format" : "int64",
                "description" : "Check if token does not have a long lifespan",
                "type" : "integer"
              },
              "keyPairSigned" : {
                "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                "type" : "boolean"
              },
              "secretSigned" : {
                "description" : "Jwt token signed with the client_secret",
                "type" : "boolean"
              },
              "queryName" : {
                "description" : "Query param name to extract jwt token",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Constraint enabled",
                "type" : "boolean"
              },
              "cookieName" : {
                "description" : "Cookie name to extract jwt token",
                "type" : "string"
              },
              "includeRequestAttributes" : {
                "description" : "Jwt token should include verb and path",
                "type" : "boolean"
              }
            }
          },
          "clientIdAuth" : {
            "description" : "Settings to extract client_id only apikey",
            "type" : "object",
            "properties" : {
              "headerName" : {
                "description" : "Header name to find client_id",
                "type" : "string"
              },
              "queryName" : {
                "description" : "Query param name to find client_id",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Constraint enabled",
                "type" : "boolean"
              }
            }
          }
        }
      },
      "sendInfoToken" : {
        "description" : "Should otoroshi send info token",
        "type" : "boolean"
      },
      "issueCert" : {
        "description" : "Flag to automatically issue a cert for this service",
        "type" : "boolean"
      },
      "groups" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
      },
      "privatePatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
      },
      "gzip" : {
        "description" : "GZIP settings",
        "type" : "object",
        "properties" : {
          "compressionLevel" : {
            "format" : "int32",
            "description" : "Compression level (0 - 9)",
            "type" : "integer"
          },
          "blackList" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "blocklisted content types"
          },
          "chunkedThreshold" : {
            "format" : "int32",
            "description" : "Chunk size",
            "type" : "integer"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "bufferSize" : {
            "format" : "int32",
            "description" : "Buffer size in bytes",
            "type" : "integer"
          },
          "whiteList" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "allow listed content types"
          },
          "enabled" : {
            "description" : "Gzip enabled",
            "type" : "boolean"
          }
        }
      },
      "clientConfig" : {
        "description" : "Http client settings",
        "type" : "object",
        "properties" : {
          "sampleInterval" : {
            "format" : "int64",
            "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
            "type" : "integer"
          },
          "backoffFactor" : {
            "format" : "int64",
            "description" : "Specify the factor to multiply the delay for each retry",
            "type" : "integer"
          },
          "customTimeouts" : {
            "description" : "Custom timeouts per path",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "path" : {
                  "description" : "path on which this configuration works",
                  "type" : "string"
                },
                "callAndStreamTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                  "type" : "integer"
                },
                "callTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                  "type" : "integer"
                },
                "idleTimeout" : {
                  "format" : "int64",
                  "description" : "Timeout on idle connection",
                  "type" : "integer"
                },
                "globalTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                  "type" : "integer"
                },
                "connectionTimeout" : {
                  "format" : "int64",
                  "description" : "Timeout at connection",
                  "type" : "integer"
                }
              }
            }
          },
          "callAndStreamTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
            "type" : "integer"
          },
          "retryInitialDelay" : {
            "format" : "int64",
            "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
            "type" : "integer"
          },
          "callTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
            "type" : "integer"
          },
          "useCircuitBreaker" : {
            "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
            "type" : "boolean"
          },
          "retries" : {
            "format" : "int32",
            "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
            "type" : "integer"
          },
          "proxy" : {
            "description" : "Web proxy settings for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "maxErrors" : {
            "format" : "int32",
            "description" : "Specify how many errors can pass before opening the circuit breaker",
            "type" : "integer"
          },
          "idleTimeout" : {
            "format" : "int64",
            "description" : "Timeout on idle connection",
            "type" : "integer"
          },
          "globalTimeout" : {
            "format" : "int64",
            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
            "type" : "integer"
          },
          "cacheConnectionSettings" : {
            "description" : "Cached connection settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Enable Cached connections at host tevel",
                "type" : "boolean"
              },
              "queueSize" : {
                "format" : "int32",
                "description" : "The size for the request queue",
                "type" : "integer"
              }
            }
          },
          "connectionTimeout" : {
            "format" : "int64",
            "description" : "Timeout at connection",
            "type" : "integer"
          }
        }
      },
      "env" : {
        "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
        "type" : "string"
      },
      "jwtVerifier" : {
        "description" : "JWT verifiers settings",
        "oneOfConstraints" : [ {
          "required" : [ "metadata", "algoSettings", "name", "id", "source", "type", "strict", "strategy", "_loc", "desc", "tags" ]
        }, {
          "required" : [ "excludedPatterns", "algoSettings", "source", "type", "strict", "strategy", "enabled" ]
        }, {
          "required" : [ "excludedPatterns", "ids", "type", "enabled" ]
        } ],
        "type" : "object",
        "properties" : {
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Verifier excluded paths"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "source" : {
            "description" : "Token source",
            "oneOfConstraints" : [ {
              "required" : [ "name", "type" ]
            }, {
              "required" : [ "name", "type", "remove" ]
            }, {
              "required" : [ "name", "type" ]
            } ],
            "type" : "object",
            "properties" : {
              "name" : {
                "description" : "Query param name",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of location",
                "type" : "string",
                "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
              },
              "remove" : {
                "description" : "Remove from value",
                "type" : "string"
              }
            }
          },
          "type" : {
            "description" : "the kind of verifier",
            "type" : "string",
            "enum" : [ "global", "local", "ref" ]
          },
          "_loc" : {
            "description" : "Entity location",
            "type" : "object",
            "properties" : {
              "teams" : {
                "description" : "Teams of the current entity",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tenant" : {
                "description" : "Organization of the current entity",
                "type" : "string"
              }
            }
          },
          "enabled" : {
            "description" : "Verifier enabled",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "algoSettings" : {
            "description" : "Algo settings",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              }
            }
          },
          "name" : {
            "description" : "Verifier name",
            "type" : "string"
          },
          "ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Verifiers ids"
          },
          "id" : {
            "description" : "Verifier id",
            "type" : "string"
          },
          "strict" : {
            "description" : "Strict token verification",
            "type" : "boolean"
          },
          "strategy" : {
            "description" : "Token strategy",
            "oneOfConstraints" : [ {
              "required" : [ "verificationSettings", "type", "strict", "token" ]
            }, {
              "required" : [ "verificationSettings", "type" ]
            }, {
              "required" : [ "algoSettings", "verificationSettings", "type" ]
            }, {
              "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
            } ],
            "type" : "object",
            "properties" : {
              "verificationSettings" : {
                "description" : "Verification settings",
                "type" : "object",
                "properties" : {
                  "fields" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Fields validation"
                  },
                  "arrayFields" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Fields array validation"
                  }
                }
              },
              "type" : {
                "description" : "the kind of strategy",
                "type" : "string",
                "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
              },
              "strict" : {
                "description" : "If the token already exists in the request, then fail",
                "type" : "boolean"
              },
              "token" : {
                "description" : "The default token",
                "type" : "object"
              },
              "algoSettings" : {
                "description" : "Algorithm settings for re-signing token",
                "oneOfConstraints" : [ {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "size", "base64", "secret", "type" ]
                }, {
                  "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                }, {
                  "required" : [ "onlyExposedCerts", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  }
                }
              },
              "transformSettings" : {
                "description" : "Transformation settings",
                "type" : "object",
                "properties" : {
                  "mappingSettings" : {
                    "description" : "Token mapping settings",
                    "type" : "object",
                    "properties" : {
                      "map" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Change values"
                      },
                      "values" : {
                        "description" : "Add values",
                        "type" : "object"
                      },
                      "remove" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Remove some token claims"
                      }
                    }
                  },
                  "location" : {
                    "description" : "Location of the token",
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Query param name",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of location",
                        "type" : "string",
                        "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                      },
                      "remove" : {
                        "description" : "Remove from value",
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "desc" : {
            "description" : "Verifier description",
            "type" : "string"
          }
        }
      },
      "allowHttp10" : {
        "description" : "Allow HTTP/1.0 requests",
        "type" : "boolean"
      },
      "publicPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
      },
      "secComAlgoChallengeBackToOto" : {
        "description" : "Algorithm to verify challenge token coming from the backend",
        "oneOfConstraints" : [ {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "size", "base64", "secret", "type" ]
        }, {
          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
        }, {
          "required" : [ "onlyExposedCerts", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          }
        }
      },
      "localScheme" : {
        "description" : "The scheme used localy, mainly http",
        "type" : "string"
      },
      "healthCheck" : {
        "description" : "Healthcheck settings",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Whether or not healthcheck is enabled on the current service descriptor",
            "type" : "boolean"
          },
          "url" : {
            "description" : "The URL to check",
            "type" : "string"
          }
        }
      },
      "matchingHeaders" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
      },
      "overrideHost" : {
        "description" : "Host header will be overriden with Host of the target",
        "type" : "boolean"
      },
      "secComUseSameAlgo" : {
        "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
        "type" : "boolean"
      },
      "accessValidator" : {
        "description" : "Service access validatiors",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Access validator plugins enabled",
            "type" : "boolean"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          },
          "config" : {
            "description" : "Access validator plugins configuration",
            "type" : "object"
          }
        }
      }
    }
  },
  "otoroshi.next.plugins.UdpTunnel" : {
    "description" : "Plugin to have udp tunnels over websockets",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.izanami.IzanamiCanaryConfig" : {
    "description" : "Configuration for IzanamiCanary",
    "type" : "object",
    "properties" : {
      "izanamiUrl" : {
        "description" : "Izanami server url",
        "type" : "string"
      },
      "routeConfig" : {
        "description" : "The actual routing config",
        "type" : "object"
      },
      "izanamiClientSecret" : {
        "description" : "Izanami client secret",
        "type" : "string"
      },
      "configId" : {
        "description" : "Id of the target izanami configuration",
        "type" : "string"
      },
      "experimentId" : {
        "description" : "Id of the target izanami experiment",
        "type" : "string"
      },
      "izanamiClientId" : {
        "description" : "Izanami client id",
        "type" : "string"
      },
      "mtls" : {
        "description" : "Izanami server tls config",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "timeout" : {
        "description" : "Timeout when talking to the izanami server",
        "type" : "number"
      }
    }
  },
  "otoroshi.next.plugins.RemoveHeadersIn" : {
    "description" : "Plugin to remove headers from request",
    "type" : "object",
    "properties" : {
      "names" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Name of removed headers in request"
      }
    }
  },
  "otoroshi.next.plugins.RobotConfig" : {
    "description" : "Configuration for Robots",
    "type" : "object",
    "properties" : {
      "robot_txt_content" : {
        "description" : "Content of /robots.txt",
        "type" : "string"
      },
      "meta_content" : {
        "description" : "content of the <meta name='robots' /> tag",
        "type" : "string"
      },
      "robot_enabled" : {
        "description" : "/robots.txt enabled",
        "type" : "boolean"
      },
      "header_content" : {
        "description" : "Content of the X-Robots-Tag headers",
        "type" : "string"
      },
      "header_enabled" : {
        "description" : "Header enabled",
        "type" : "boolean"
      },
      "meta_enabled" : {
        "description" : "Meta tag enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesSupport" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.metrics.PrometheusEndpoint" : {
    "description" : "Plugin to expose metrics collected by PrometheusServiceMetrics",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.wrappers.PreRoutingWrapper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.TeamAccess" : {
    "description" : "Access rights for teams",
    "type" : "object",
    "properties" : {
      "canRead" : {
        "description" : "Can this access right read data",
        "type" : "boolean"
      },
      "value" : {
        "description" : "Access pattern",
        "type" : "string"
      },
      "canWrite" : {
        "description" : "Can this access right write data",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.models.OtoroshiAdminType" : {
    "type" : "string",
    "enum" : [ "SIMPLE", "WEBAUTHN" ],
    "description" : "Admin kind"
  },
  "otoroshi.plugins.log4j.Log4jExpressionParser" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.ssl.Cert" : {
    "description" : "The otoroshi model for X509 certificates",
    "type" : "object",
    "properties" : {
      "certType" : {
        "type" : "string",
        "description" : "the kind of certificate",
        "enum" : [ "client", "ca", "letsEncrypt", "keypair", "selfSigned", "certificate" ]
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "subject" : {
        "description" : "Certificate subject",
        "type" : "string"
      },
      "letsEncrypt" : {
        "description" : "Let's encrypt (ACME) generated",
        "type" : "boolean"
      },
      "keypair" : {
        "description" : "Is cert used for its keypair only ?",
        "type" : "boolean"
      },
      "description" : {
        "description" : "Entity description",
        "type" : "string"
      },
      "revoked" : {
        "description" : "Certificate is revoked",
        "type" : "boolean"
      },
      "valid" : {
        "description" : "Is cert valid",
        "type" : "boolean"
      },
      "password" : {
        "description" : "Certificate password",
        "type" : "string"
      },
      "autoRenew" : {
        "description" : "Auto renew cert",
        "type" : "boolean"
      },
      "exposed" : {
        "description" : "Is the cert exposed (public key exposed in jwks.json)",
        "type" : "boolean"
      },
      "client" : {
        "description" : "Is cert a client cert ?",
        "type" : "boolean"
      },
      "from" : {
        "description" : "Start date",
        "type" : "number"
      },
      "selfSigned" : {
        "description" : "Is cert self signed",
        "type" : "boolean"
      },
      "id" : {
        "description" : "Entity id",
        "type" : "string"
      },
      "ca" : {
        "description" : "Is cert a CA ?",
        "type" : "boolean"
      },
      "chain" : {
        "description" : "Certicates chain (PEM encoded)",
        "type" : "string"
      },
      "sans" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Certificate SANs"
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "privateKey" : {
        "description" : "Certificate private key (PEM encoded)",
        "type" : "string"
      },
      "caRef" : {
        "description" : "Reference to the CA (if any)",
        "type" : "string"
      },
      "domain" : {
        "description" : "Certificate domain",
        "type" : "string"
      },
      "name" : {
        "description" : "Entity name",
        "type" : "string"
      },
      "to" : {
        "description" : "Stop date",
        "type" : "number"
      }
    }
  },
  "otoroshi.models.AlgoSettings" : {
    "oneOfConstraints" : [ {
      "required" : [ "privateKey", "size", "publicKey", "type" ]
    }, {
      "required" : [ "size", "certId", "type" ]
    }, {
      "required" : [ "size", "base64", "secret", "type" ]
    }, {
      "required" : [ "kty", "proxy", "headers", "type", "ttl", "url", "timeout", "tlsConfig" ]
    }, {
      "required" : [ "onlyExposedCerts", "type" ]
    }, {
      "required" : [ "size", "certId", "type" ]
    }, {
      "required" : [ "privateKey", "size", "publicKey", "type" ]
    } ],
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Http header when fetching JWKS"
      },
      "base64" : {
        "description" : "The secret is base64 encoded",
        "type" : "boolean"
      },
      "publicKey" : {
        "description" : "Public key (for verification)",
        "type" : "string"
      },
      "certId" : {
        "description" : "Certificate id",
        "type" : "string"
      },
      "secret" : {
        "description" : "HMAC secret",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of algosettings",
        "type" : "string",
        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
      },
      "ttl" : {
        "description" : "Cache ttl",
        "type" : "number"
      },
      "url" : {
        "description" : "JWKS url",
        "type" : "string"
      },
      "timeout" : {
        "description" : "Timeout when fetching JWKS",
        "type" : "number"
      },
      "tlsConfig" : {
        "description" : "TLS config",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "kty" : {
        "description" : "Key type",
        "type" : "string"
      },
      "privateKey" : {
        "description" : "Private key (for signing)",
        "type" : "string"
      },
      "proxy" : {
        "description" : "Web proxy for http client",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "onlyExposedCerts" : {
        "description" : "Use only exposed certs",
        "type" : "boolean"
      },
      "size" : {
        "format" : "int32",
        "description" : "SHA function size",
        "type" : "integer"
      }
    }
  },
  "otoroshi.tcp.TcpRule" : {
    "description" : "Associate targets for a domain (SNI)",
    "type" : "object",
    "properties" : {
      "domain" : {
        "description" : "match on SNI domain",
        "type" : "string"
      },
      "targets" : {
        "description" : "TCP targets",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "port" : {
              "format" : "int32",
              "description" : "Target port",
              "type" : "integer"
            },
            "ip" : {
              "description" : "Target ip",
              "type" : "string"
            },
            "host" : {
              "description" : "Target host",
              "type" : "string"
            },
            "tls" : {
              "description" : "Use tls",
              "type" : "boolean"
            }
          }
        }
      }
    }
  },
  "otoroshi.plugins.geoloc.MaxMindGeolocationHelper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.jobs.kubernetes.IngressSupport" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.utils.TypedMap" : {
    "description" : "A map with typed keys",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.CleverCloudSettings" : {
    "description" : "Settings for connection to the clever-cloud api",
    "type" : "object",
    "properties" : {
      "consumerSecret" : {
        "description" : "Clever-Cloud oauth consumer secret",
        "type" : "string"
      },
      "consumerKey" : {
        "description" : "Clever-Cloud oauth consumer key",
        "type" : "string"
      },
      "secret" : {
        "description" : "Clever-Cloud oauth secret",
        "type" : "string"
      },
      "token" : {
        "description" : "Clever-Cloud oauth token",
        "type" : "string"
      },
      "orgaId" : {
        "description" : "Clever-Cloud organization id",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.hmac.HMACCallerPlugin" : {
    "description" : "Plugin that can call an hmac protected backend",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.AllowHttpMethods" : {
    "description" : "Plugin that only allow calls with specific http methods",
    "type" : "object",
    "properties" : {
      "allowed" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The list of allowed methods"
      },
      "forbidden" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The list of forbidden methods"
      }
    }
  },
  "otoroshi.plugins.apikeys.ClientCredentialFlow" : {
    "description" : "Plugin that provide the OAuth2 client_credentials flow",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.JsonTransform" : {
    "description" : "Plugin to transform json response",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "tenants" : {
        "description" : "template for entities tenants",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Entity metadata"
            },
            "name" : {
              "description" : "Entity name",
              "type" : "string"
            },
            "description" : {
              "description" : "Entity description",
              "type" : "string"
            },
            "id" : {
              "description" : "Entity id",
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            }
          }
        }
      },
      "teams" : {
        "description" : "template for entities teams",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Entity metadata"
            },
            "name" : {
              "description" : "Entity name",
              "type" : "string"
            },
            "description" : {
              "description" : "Entity description",
              "type" : "string"
            },
            "id" : {
              "description" : "Entity id",
              "type" : "string"
            },
            "tenant" : {
              "description" : "Entity organization",
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            }
          }
        }
      },
      "apiKeys" : {
        "description" : "template for entities apiKeys",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Bunch of metadata for the key"
            },
            "clientId" : {
              "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
              "type" : "string"
            },
            "clientName" : {
              "description" : "The name of the api key, for humans ;-)",
              "type" : "string"
            },
            "rotation" : {
              "description" : "Apikey rotation settings",
              "type" : "object",
              "properties" : {
                "gracePeriod" : {
                  "format" : "int64",
                  "description" : "period (in hours) during which both secrets works",
                  "type" : "integer"
                },
                "rotationEvery" : {
                  "format" : "int64",
                  "description" : "Rotate every n hours",
                  "type" : "integer"
                },
                "nextSecret" : {
                  "description" : "Next client_secret value",
                  "type" : "string"
                },
                "enabled" : {
                  "description" : "Rotation enabled",
                  "type" : "boolean"
                }
              }
            },
            "description" : {
              "description" : "Description of this apikey",
              "type" : "string"
            },
            "restrictions" : {
              "description" : "Apikey restrictions settings",
              "type" : "object",
              "properties" : {
                "allowed" : {
                  "description" : "Allowed paths",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "method" : {
                        "description" : "Method of the http request",
                        "type" : "string"
                      },
                      "path" : {
                        "description" : "Path of the http request",
                        "type" : "string"
                      }
                    }
                  }
                },
                "allowLast" : {
                  "description" : "Evalute allowed paths after everything else",
                  "type" : "boolean"
                },
                "forbidden" : {
                  "description" : "Forbidden paths (return 403)",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "method" : {
                        "description" : "Method of the http request",
                        "type" : "string"
                      },
                      "path" : {
                        "description" : "Path of the http request",
                        "type" : "string"
                      }
                    }
                  }
                },
                "notFound" : {
                  "description" : "Not found paths (return 404)",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "method" : {
                        "description" : "Method of the http request",
                        "type" : "string"
                      },
                      "path" : {
                        "description" : "Path of the http request",
                        "type" : "string"
                      }
                    }
                  }
                },
                "enabled" : {
                  "description" : "Restrictions enabled",
                  "type" : "boolean"
                }
              }
            },
            "readOnly" : {
              "description" : "The apikey only allow access for GET, HEAD and OPTIONS verbs",
              "type" : "boolean"
            },
            "_loc" : {
              "description" : "The location of the apikey",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "enabled" : {
              "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
              "type" : "boolean"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Apikey tags"
            },
            "throttlingQuota" : {
              "format" : "int64",
              "description" : "Authorized number of calls per second, measured on 10 seconds",
              "type" : "integer"
            },
            "constrainedServicesOnly" : {
              "description" : "This apikey can only be used on services that constrained their apikey routing",
              "type" : "boolean"
            },
            "allowClientIdOnly" : {
              "description" : "This apikey can be used juste with the client_id value",
              "type" : "boolean"
            },
            "monthlyQuota" : {
              "format" : "int64",
              "description" : "Authorized number of calls per month",
              "type" : "integer"
            },
            "validUntil" : {
              "description" : "Date until when the apikey is valid",
              "type" : "number"
            },
            "authorizedEntities" : {
              "description" : "The group/service ids (prefixed by group_ or service_ on which the key is authorized",
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "clientSecret" : {
              "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
              "type" : "string"
            },
            "dailyQuota" : {
              "format" : "int64",
              "description" : "Authorized number of calls per day",
              "type" : "integer"
            }
          }
        }
      },
      "serviceGroups" : {
        "description" : "template for entities serviceGroups",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Just a bunch of random properties"
            },
            "name" : {
              "description" : "The name of your service. Only for debug and human readability purposes",
              "type" : "string"
            },
            "description" : {
              "description" : "Entity description",
              "type" : "string"
            },
            "id" : {
              "description" : "A unique random string to identify your service",
              "type" : "string"
            },
            "_loc" : {
              "description" : "Entity location",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            }
          }
        }
      },
      "globalConfigs" : {
        "description" : "template for entities globalConfigs",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Entity metadata"
            },
            "backOfficeAuthRef" : {
              "description" : "Id of the auth module used for otoroshi-ui login",
              "type" : "string"
            },
            "plugins" : {
              "description" : "global plugins settings",
              "type" : "object",
              "properties" : {
                "config" : {
                  "description" : "Plugins configuration",
                  "type" : "object"
                },
                "enabled" : {
                  "description" : "Plugins enabled",
                  "type" : "boolean"
                },
                "excluded" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Excluded paths"
                },
                "refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Enabled plugins"
                }
              }
            },
            "elasticReadsConfig" : {
              "description" : "Config. for elastic reads",
              "type" : "object",
              "properties" : {
                "clusterUri" : {
                  "description" : "Cluster URL",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Additionnal headers in the http request"
                },
                "password" : {
                  "description" : "Elastic password",
                  "type" : "string"
                },
                "indexSettings" : {
                  "description" : "Indexation settings",
                  "type" : "object",
                  "properties" : {
                    "clientSide" : {
                      "description" : "Enable index splitting on client side",
                      "type" : "boolean"
                    },
                    "interval" : {
                      "description" : "Index splitting interval",
                      "type" : "object",
                      "properties" : { }
                    }
                  }
                },
                "mtlsConfig" : {
                  "description" : "TLS settings for the http client",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "index" : {
                  "description" : "Index name",
                  "type" : "string"
                },
                "type" : {
                  "description" : "Object type",
                  "type" : "string",
                  "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                },
                "applyTemplate" : {
                  "description" : "Enable template creation/update",
                  "type" : "boolean"
                },
                "version" : {
                  "description" : "Version of Elasticsearch",
                  "type" : "string"
                },
                "user" : {
                  "description" : "Elasticsearch user",
                  "type" : "string"
                }
              }
            },
            "logAnalyticsOnServer" : {
              "description" : "Log analytics event on the server",
              "type" : "boolean"
            },
            "tlsSettings" : {
              "description" : "TLS settings",
              "type" : "object",
              "properties" : {
                "randomIfNotFound" : {
                  "description" : "Use a random one",
                  "type" : "boolean"
                },
                "trustedCAsServer" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "List for CAs trusted by otoroshi when performing TLS termination"
                },
                "includeJdkCaClient" : {
                  "description" : "Use known JDK CAs to build trust when performing request from otoroshi to backends",
                  "type" : "boolean"
                },
                "defaultDomain" : {
                  "description" : "Default domain to choose if not found from current certificates",
                  "type" : "string"
                },
                "includeJdkCaServer" : {
                  "description" : "Use known JDK CAs to build trust for incoming request",
                  "type" : "boolean"
                }
              }
            },
            "geolocationSettings" : {
              "description" : "Settings for geolocation extraction",
              "type" : "object",
              "properties" : {
                "apikey" : {
                  "description" : "IpStack apikey",
                  "type" : "string"
                },
                "type" : {
                  "type" : "string",
                  "enum" : [ "none" ]
                },
                "enabled" : {
                  "description" : "Geolocation using maxmind db enabled",
                  "type" : "boolean"
                },
                "timeout" : {
                  "format" : "int64",
                  "description" : "API call timeout",
                  "type" : "integer"
                },
                "path" : {
                  "description" : "Maxmlind db file path",
                  "type" : "string"
                }
              }
            },
            "autoCert" : {
              "description" : "Auto certs settings",
              "type" : "object",
              "properties" : {
                "caRef" : {
                  "description" : "Generate cert from the following CA",
                  "type" : "string"
                },
                "allowed" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "allowed domains"
                },
                "replyNicely" : {
                  "description" : "Reply TLS error with an auto generated certificate for the domain",
                  "type" : "boolean"
                },
                "notAllowed" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "not allowed domains"
                },
                "enabled" : {
                  "description" : "Enable auto cert",
                  "type" : "boolean"
                }
              }
            },
            "endlessIpAddresses" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros"
            },
            "streamEntityOnly" : {
              "description" : "HTTP will be streamed only. Doesn't work with old browsers",
              "type" : "boolean"
            },
            "alertsEmails" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Email addresses that will receive all Otoroshi alert events"
            },
            "middleFingers" : {
              "description" : "Use middle finger emoji as a response character for endless HTTP responses",
              "type" : "boolean"
            },
            "alertsWebhooks" : {
              "description" : "Webhook that will receive all Otoroshi alert events",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Headers to authorize the call or whatever"
                  },
                  "mtlsConfig" : {
                    "description" : "TLS config when calling webhook",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "type" : {
                    "description" : "the kind of exporter",
                    "type" : "string",
                    "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                  },
                  "url" : {
                    "description" : "The URL where events are posted",
                    "type" : "string"
                  }
                }
              }
            },
            "maxWebhookSize" : {
              "format" : "int32",
              "description" : "Max number of items in webhooks",
              "type" : "integer"
            },
            "cleverSettings" : {
              "description" : "Optional CleverCloud configuration",
              "type" : "object",
              "properties" : {
                "consumerSecret" : {
                  "description" : "Clever-Cloud oauth consumer secret",
                  "type" : "string"
                },
                "consumerKey" : {
                  "description" : "Clever-Cloud oauth consumer key",
                  "type" : "string"
                },
                "secret" : {
                  "description" : "Clever-Cloud oauth secret",
                  "type" : "string"
                },
                "token" : {
                  "description" : "Clever-Cloud oauth token",
                  "type" : "string"
                },
                "orgaId" : {
                  "description" : "Clever-Cloud organization id",
                  "type" : "string"
                }
              }
            },
            "u2fLoginOnly" : {
              "description" : "If enabled, login to backoffice through Auth0 will be disabled",
              "type" : "boolean"
            },
            "userAgentSettings" : {
              "description" : "Settings for useragent extraction",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "User agent extraction enabled",
                  "type" : "boolean"
                }
              }
            },
            "otoroshiId" : {
              "description" : "Unique id for this otoroshi instance",
              "type" : "string"
            },
            "proxies" : {
              "description" : "Web proxies settings",
              "type" : "object",
              "properties" : {
                "auth" : {
                  "description" : "Web proxy used to call OAuth providers",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "clevercloud" : {
                  "description" : "Web proxy used to call clevercloud",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "authority" : {
                  "description" : "Web proxy used to check authorities",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "elastic" : {
                  "description" : "Web proxy used to call elastic",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "alertEmails" : {
                  "description" : "Web proxy used to send alert emails",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "services" : {
                  "description" : "Web proxy used to access services targets",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "eventsWebhooks" : {
                  "description" : "Web proxy used to call webhooks",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "jwk" : {
                  "description" : "Web proxy used to fetch jwks",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                }
              }
            },
            "mailerSettings" : {
              "description" : "Optional mailer configuration",
              "type" : "object",
              "properties" : {
                "type" : {
                  "description" : "the kind of mailer",
                  "type" : "string",
                  "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Sender headers"
                },
                "to" : {
                  "description" : "Destination email address",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Destination name",
                        "type" : "string"
                      },
                      "email" : {
                        "description" : "Email address",
                        "type" : "string"
                      }
                    }
                  }
                },
                "url" : {
                  "description" : "Sender URL",
                  "type" : "string"
                },
                "eu" : {
                  "description" : "European tenant",
                  "type" : "boolean"
                },
                "apiKey" : {
                  "description" : "Sendgrid apikey",
                  "type" : "string"
                },
                "domain" : {
                  "description" : "Mailgun domain",
                  "type" : "string"
                },
                "apiKeyPrivate" : {
                  "description" : "Private key",
                  "type" : "string"
                },
                "apiKeyPublic" : {
                  "description" : "Public key",
                  "type" : "string"
                }
              }
            },
            "ipFiltering" : {
              "description" : "Global ip filtering settings",
              "type" : "object",
              "properties" : {
                "whitelist" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Whitelisted IP addresses"
                },
                "blacklist" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Blacklisted IP addresses"
                }
              }
            },
            "lines" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Possibles lines for Otoroshi"
            },
            "useCircuitBreakers" : {
              "description" : "If enabled, services will be authorized to use circuit breakers",
              "type" : "boolean"
            },
            "scripts" : {
              "description" : "global plugins settings. will be deprecated soon",
              "type" : "object",
              "properties" : {
                "jobConfig" : {
                  "description" : "jobs enabled",
                  "type" : "object"
                },
                "enabled" : {
                  "description" : "Global scripts enabled",
                  "type" : "boolean"
                },
                "transformersConfig" : {
                  "description" : "transformers config",
                  "type" : "object"
                },
                "transformersRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "transformers enabled"
                },
                "preRouteRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "pre-route plugins enabled"
                },
                "sinkConfig" : {
                  "description" : "sinks config",
                  "type" : "object"
                },
                "jobRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "running jobs"
                },
                "validatorRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "validator enabled"
                },
                "sinkRefs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "sinks enabled"
                },
                "preRouteConfig" : {
                  "description" : "pre-route config",
                  "type" : "object"
                },
                "validatorConfig" : {
                  "description" : "validator config",
                  "type" : "object"
                }
              }
            },
            "maxLogsSize" : {
              "format" : "int32",
              "description" : "Number of events kept locally",
              "type" : "integer"
            },
            "useAkkaHttpClient" : {
              "description" : "Globally use akka http client for everything",
              "type" : "boolean"
            },
            "quotasSettings" : {
              "description" : "Settings to generate alert when an apikey almost exceeded or exceeded its quotas",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Is quotas alert enabled",
                  "type" : "boolean"
                },
                "dailyQuotasThreshold" : {
                  "format" : "double",
                  "description" : "The daily quotas threshold before generating alert",
                  "type" : "number"
                },
                "monthlyQuotasThreshold" : {
                  "format" : "double",
                  "description" : "The monthly quotas threshold before generating alert",
                  "type" : "number"
                }
              }
            },
            "apiReadOnly" : {
              "description" : "If enabled, Admin API won't be able to write/update/delete entities",
              "type" : "boolean"
            },
            "analyticsWebhooks" : {
              "description" : "Webhook that will receive all internal Otoroshi events",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Headers to authorize the call or whatever"
                  },
                  "mtlsConfig" : {
                    "description" : "TLS config when calling webhook",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "type" : {
                    "description" : "the kind of exporter",
                    "type" : "string",
                    "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                  },
                  "url" : {
                    "description" : "The URL where events are posted",
                    "type" : "string"
                  }
                }
              }
            },
            "kafkaConfig" : {
              "description" : "Global kafka settings. deprecated",
              "type" : "object",
              "properties" : {
                "hostValidation" : {
                  "description" : "Enabled TLS hostname validation",
                  "type" : "boolean"
                },
                "servers" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "URLs of the kafka servers"
                },
                "keyPass" : {
                  "description" : "Optional keypass",
                  "type" : "string"
                },
                "mtlsConfig" : {
                  "description" : "TLS config to access the cluster",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "topic" : {
                  "description" : "Optional kafka topic (otoroshi-events by default)",
                  "type" : "string"
                },
                "truststore" : {
                  "description" : "Optional truststore",
                  "type" : "string"
                },
                "keystore" : {
                  "description" : "Optional keystore",
                  "type" : "string"
                },
                "sendEvents" : {
                  "description" : "Send events to it, or just connect",
                  "type" : "boolean"
                },
                "type" : {
                  "description" : "the kind of exporter",
                  "type" : "string",
                  "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                }
              }
            },
            "templates" : {
              "description" : "The otoroshi default templates for entities",
              "type" : "object",
              "properties" : {
                "template" : {
                  "description" : "the template for the template entities",
                  "type" : "object"
                },
                "apikey" : {
                  "description" : "the template for the apikey entities",
                  "type" : "object"
                },
                "dataExporter" : {
                  "description" : "the template for the dataExporter entities",
                  "type" : "object"
                },
                "authConfig" : {
                  "description" : "the template for the authConfig entities",
                  "type" : "object"
                },
                "certificate" : {
                  "description" : "the template for the certificate entities",
                  "type" : "object"
                },
                "tcpService" : {
                  "description" : "the template for the tcpService entities",
                  "type" : "object"
                },
                "team" : {
                  "description" : "the template for the team entities",
                  "type" : "object"
                },
                "descriptor" : {
                  "description" : "the template for the descriptor entities",
                  "type" : "object"
                },
                "script" : {
                  "description" : "the template for the script entities",
                  "type" : "object"
                },
                "target" : {
                  "description" : "the template for the target entities",
                  "type" : "object"
                },
                "route" : {
                  "description" : "the template for the route entities",
                  "type" : "object"
                },
                "verifier" : {
                  "description" : "the template for the verifier entities",
                  "type" : "object"
                },
                "service" : {
                  "description" : "the template for the service entities",
                  "type" : "object"
                },
                "backend" : {
                  "description" : "the template for the backend entities",
                  "type" : "object"
                },
                "tenant" : {
                  "description" : "the template for the tenant entities",
                  "type" : "object"
                },
                "group" : {
                  "description" : "the template for the group entities",
                  "type" : "object"
                }
              }
            },
            "enableEmbeddedMetrics" : {
              "description" : "Enable embedded metrics",
              "type" : "boolean"
            },
            "limitConcurrentRequests" : {
              "description" : "If enabled, Otoroshi will reject new request if too much at the same time",
              "type" : "boolean"
            },
            "maxConcurrentRequests" : {
              "format" : "int64",
              "description" : "The number of authorized request processed at the same time",
              "type" : "integer"
            },
            "maxHttp10ResponseSize" : {
              "format" : "int64",
              "description" : "The max size in bytes of an HTTP 1.0 response",
              "type" : "integer"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            },
            "letsEncryptSettings" : {
              "description" : "Let's encrypt (ACME) settings",
              "type" : "object",
              "properties" : {
                "privateKey" : {
                  "description" : "Let's encrypt (ACME) private key",
                  "type" : "string"
                },
                "contacts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Let's encrypt (ACME) contacts"
                },
                "emails" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Let's encrypt (ACME) contact emails"
                },
                "enabled" : {
                  "description" : "Let's encrypt (ACME) enabled",
                  "type" : "boolean"
                },
                "publicKey" : {
                  "description" : "Let's encrypt (ACME) public key",
                  "type" : "string"
                },
                "server" : {
                  "description" : "Let's encrypt (ACME) server",
                  "type" : "string"
                }
              }
            },
            "autoLinkToDefaultGroup" : {
              "description" : "If not defined, every new service descriptor will be added to the default group",
              "type" : "boolean"
            },
            "throttlingQuota" : {
              "format" : "int64",
              "description" : "Authorized number of calls per second globally, measured on 10 seconds",
              "type" : "integer"
            },
            "snowMonkeyConfig" : {
              "description" : "Snowmonky settings",
              "type" : "object",
              "properties" : {
                "dryRun" : {
                  "description" : "Whether or not outages will actualy impact requests",
                  "type" : "boolean"
                },
                "targetGroups" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Groups impacted by Snow Monkey. If empty, all groups will be impacted"
                },
                "includeUserFacingDescriptors" : {
                  "description" : "Whether or not user facing apps. will be impacted by Snow Monkey",
                  "type" : "boolean"
                },
                "outageDurationTo" : {
                  "description" : "End of outage duration range",
                  "type" : "number"
                },
                "outageDurationFrom" : {
                  "description" : "Start of outage duration range",
                  "type" : "number"
                },
                "startTime" : {
                  "description" : "Start time of Snow Monkey each day",
                  "type" : "string"
                },
                "stopTime" : {
                  "description" : "Stop time of Snow Monkey each day",
                  "type" : "string"
                },
                "chaosConfig" : {
                  "description" : "Chaos settings",
                  "type" : "object",
                  "properties" : {
                    "badResponsesFaultConfig" : {
                      "description" : "Settings for bad responses",
                      "type" : "object",
                      "properties" : {
                        "responses" : {
                          "description" : "The possibles responses",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "status" : {
                                "format" : "int32",
                                "description" : "The HTTP status for the response",
                                "type" : "integer"
                              },
                              "body" : {
                                "description" : "The body of the HTTP response",
                                "type" : "string"
                              },
                              "headers" : {
                                "type" : "object",
                                "additionalProperties" : {
                                  "type" : "string"
                                },
                                "description" : "The HTTP headers of the response"
                              }
                            }
                          }
                        },
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        }
                      }
                    },
                    "largeResponseFaultConfig" : {
                      "description" : "Settings for large responses",
                      "type" : "object",
                      "properties" : {
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        },
                        "additionalResponseSize" : {
                          "format" : "int32",
                          "description" : "Add n 0 bytes",
                          "type" : "integer"
                        }
                      }
                    },
                    "latencyInjectionFaultConfig" : {
                      "description" : "Settings for latency injection",
                      "type" : "object",
                      "properties" : {
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        },
                        "from" : {
                          "description" : "The start range of latency added to the request",
                          "type" : "number"
                        },
                        "to" : {
                          "description" : "The end range of latency added to the request",
                          "type" : "number"
                        }
                      }
                    },
                    "largeRequestFaultConfig" : {
                      "description" : "Settings for large requests",
                      "type" : "object",
                      "properties" : {
                        "ratio" : {
                          "format" : "double",
                          "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                          "type" : "number"
                        },
                        "additionalRequestSize" : {
                          "format" : "int32",
                          "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                          "type" : "integer"
                        }
                      }
                    },
                    "enabled" : {
                      "description" : "Whether or not this config is enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "timesPerDay" : {
                  "format" : "int32",
                  "description" : "Number of time per day each service will be outage",
                  "type" : "integer"
                },
                "outageStrategy" : {
                  "description" : "",
                  "type" : "string",
                  "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
                },
                "enabled" : {
                  "description" : "Whether or not this config is enabled",
                  "type" : "boolean"
                }
              }
            },
            "statsdConfig" : {
              "description" : "Statsd settings (agent connection)",
              "type" : "object",
              "properties" : {
                "datadog" : {
                  "description" : "Datadog agent",
                  "type" : "boolean"
                },
                "host" : {
                  "description" : "The host of the StatsD agent",
                  "type" : "string"
                },
                "port" : {
                  "format" : "int32",
                  "description" : "The port of the StatsD agent",
                  "type" : "integer"
                }
              }
            },
            "maintenanceMode" : {
              "description" : "Global maintenant mode",
              "type" : "boolean"
            },
            "perIpThrottlingQuota" : {
              "format" : "int64",
              "description" : "Authorized number of calls per second globally per IP address, measured on 10 seconds",
              "type" : "integer"
            },
            "elasticWritesConfigs" : {
              "description" : "Configs. for Elastic writes",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "clusterUri" : {
                    "description" : "Cluster URL",
                    "type" : "string"
                  },
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Additionnal headers in the http request"
                  },
                  "password" : {
                    "description" : "Elastic password",
                    "type" : "string"
                  },
                  "indexSettings" : {
                    "description" : "Indexation settings",
                    "type" : "object",
                    "properties" : {
                      "clientSide" : {
                        "description" : "Enable index splitting on client side",
                        "type" : "boolean"
                      },
                      "interval" : {
                        "description" : "Index splitting interval",
                        "type" : "object",
                        "properties" : { }
                      }
                    }
                  },
                  "mtlsConfig" : {
                    "description" : "TLS settings for the http client",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "index" : {
                    "description" : "Index name",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "Object type",
                    "type" : "string",
                    "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
                  },
                  "applyTemplate" : {
                    "description" : "Enable template creation/update",
                    "type" : "boolean"
                  },
                  "version" : {
                    "description" : "Version of Elasticsearch",
                    "type" : "string"
                  },
                  "user" : {
                    "description" : "Elasticsearch user",
                    "type" : "string"
                  }
                }
              }
            },
            "trustXForwarded" : {
              "description" : "Use X-Forwarded-* headers for routing",
              "type" : "boolean"
            }
          }
        }
      },
      "authModules" : {
        "description" : "template for entities authModules",
        "type" : "array",
        "items" : {
          "oneOfConstraints" : [ {
            "required" : [ "metadata", "sessionCookieValues", "basicAuth", "type", "userValidators", "_loc", "users", "tags", "sessionMaxAge", "name", "webauthn", "id", "desc" ]
          }, {
            "required" : [ "refreshTokens", "metadata", "tokenUrl", "otoroshiRightsField", "mtlsConfig", "nameField", "emailField", "type", "introspectionUrl", "loginUrl", "scope", "rightsOverride", "callbackUrl", "clientSecret", "id", "extraMetadata", "accessTokenField", "userInfoUrl", "clientId", "useCookie", "authorizeUrl", "sessionCookieValues", "dataOverride", "superAdmins", "apiKeyMetaField", "useJson", "pkce", "apiKeyTagsField", "otoroshiDataField", "userValidators", "_loc", "tags", "jwtVerifier", "sessionMaxAge", "proxy", "logoutUrl", "noWildcardRedirectURI", "readProfileFromToken", "oidConfig", "name", "claims", "desc" ]
          }, {
            "required" : [ "groupFilters", "metadata", "allowEmptyPassword", "basicAuth", "searchBase", "nameField", "emailField", "extractProfileFilterNot", "type", "metadataField", "rightsOverride", "id", "groupRights", "extraMetadata", "searchFilter", "adminPassword", "extractProfileFilter", "sessionCookieValues", "dataOverride", "superAdmins", "userBase", "serverUrls", "userValidators", "_loc", "tags", "sessionMaxAge", "adminUsername", "extractProfile", "name", "desc" ]
          }, {
            "required" : [ "profileURL", "metadata", "authorizeURL", "requestTokenURL", "sessionCookieValues", "type", "httpMethod", "userValidators", "_loc", "tags", "sessionMaxAge", "consumerSecret", "accessTokenURL", "name", "rightsOverride", "callbackURL", "id", "consumerKey", "desc" ]
          }, {
            "required" : [ "validateSignature", "metadata", "ssoProtocolBinding", "sessionCookieValues", "validatingCertificates", "signature", "credentials", "validateAssertions", "type", "userValidators", "_loc", "issuer", "tags", "sessionMaxAge", "usedNameIDAsEmail", "singleLogoutUrl", "name", "emailAttributeName", "singleSignOnUrl", "nameIDFormat", "singleLogoutProtocolBinding", "id", "desc" ]
          } ],
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Metadata of the SAML module"
            },
            "tokenUrl" : {
              "description" : "OAuth token URL",
              "type" : "string"
            },
            "allowEmptyPassword" : {
              "description" : "Allow empty password access",
              "type" : "boolean"
            },
            "ssoProtocolBinding" : {
              "description" : "Protocol binding used to send login request to identity provider",
              "type" : "object",
              "properties" : { }
            },
            "mtlsConfig" : {
              "description" : "TLS config. for the module (for server accessed endpoints like tokenUrl, introspectionUrl, etc)",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "searchBase" : {
              "description" : "LDAP search base",
              "type" : "string"
            },
            "nameField" : {
              "description" : "Field name to get name from user profile",
              "type" : "string"
            },
            "emailField" : {
              "description" : "Field name to get email from user profile",
              "type" : "string"
            },
            "type" : {
              "description" : "the type of the module",
              "type" : "string",
              "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
            },
            "issuer" : {
              "description" : "Issuer of the SAML requests",
              "type" : "string"
            },
            "introspectionUrl" : {
              "description" : "URL to introspect access_token",
              "type" : "string"
            },
            "rightsOverride" : {
              "description" : "Overrides user rights of users connected by OAuth1 module",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "rights" : {
                    "description" : "Access rights of a user",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "teams" : {
                          "description" : "Access rights on teams",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "canRead" : {
                                "description" : "Can this access right read data",
                                "type" : "boolean"
                              },
                              "value" : {
                                "description" : "Access pattern",
                                "type" : "string"
                              },
                              "canWrite" : {
                                "description" : "Can this access right write data",
                                "type" : "boolean"
                              }
                            }
                          }
                        },
                        "tenant" : {
                          "description" : "Access rights on organizations",
                          "type" : "object",
                          "properties" : {
                            "canWrite" : {
                              "description" : "Can this access right write data",
                              "type" : "boolean"
                            },
                            "value" : {
                              "description" : "Access pattern",
                              "type" : "string"
                            },
                            "canRead" : {
                              "description" : "Can this access right read data",
                              "type" : "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "type" : "object"
            },
            "nameIDFormat" : {
              "description" : "Format of the name ID",
              "type" : "object",
              "properties" : { }
            },
            "callbackUrl" : {
              "description" : "Otoroshi callback URL",
              "type" : "string"
            },
            "clientSecret" : {
              "description" : "OAuth Client secret",
              "type" : "string"
            },
            "callbackURL" : {
              "description" : "The location where the identity provider returns a browser after the user finishes authenticating with their IDP",
              "type" : "string"
            },
            "singleLogoutProtocolBinding" : {
              "description" : "Protocol binding used by identity provider to logout users",
              "type" : "object",
              "properties" : { }
            },
            "id" : {
              "description" : "Id of the SAML Auth module",
              "type" : "string"
            },
            "extraMetadata" : {
              "description" : "Add metadata to user. Object with email as key",
              "type" : "object"
            },
            "accessTokenField" : {
              "description" : "Field name to get access token",
              "type" : "string"
            },
            "searchFilter" : {
              "description" : "Filter for users",
              "type" : "string"
            },
            "useCookie" : {
              "description" : "Use cookies for redirection",
              "type" : "boolean"
            },
            "sessionCookieValues" : {
              "description" : "Settings for the session cookie",
              "type" : "object",
              "properties" : {
                "httpOnly" : {
                  "description" : "Is cookie accessible on server side only",
                  "type" : "boolean"
                },
                "secure" : {
                  "description" : "Is cookie for https only",
                  "type" : "boolean"
                }
              }
            },
            "dataOverride" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              },
              "description" : "Overiddes user data. Object with email as key"
            },
            "validatingCertificates" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Certificates used to validate SAML response signature"
            },
            "apiKeyMetaField" : {
              "description" : "Field name to extract apikey metadata",
              "type" : "string"
            },
            "useJson" : {
              "description" : "Use JSON or URL Form Encoded as payload with the OAuth provider",
              "type" : "boolean"
            },
            "pkce" : {
              "description" : "Use PKCE challenge (OAuth 2.1)",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Is PKCE challenge enabled",
                  "type" : "boolean"
                },
                "algorithm" : {
                  "description" : "Hashing algorithm used in PKCE challenge",
                  "type" : "string"
                }
              }
            },
            "userBase" : {
              "description" : "LDAP user base DN",
              "type" : "string"
            },
            "otoroshiDataField" : {
              "description" : "Field name to get otoroshi metadata from. You can specify sub fields using | as separator",
              "type" : "string"
            },
            "_loc" : {
              "description" : "Location of the SAML module",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "users" : {
              "description" : "Users attached to the module",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "metadata" : {
                    "description" : "User metadata",
                    "type" : "object"
                  },
                  "password" : {
                    "description" : "User password (bcrypt hashed)",
                    "type" : "string"
                  },
                  "rights" : {
                    "description" : "User rights",
                    "type" : "object",
                    "properties" : {
                      "rights" : {
                        "description" : "Access rights of a user",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "teams" : {
                              "description" : "Access rights on teams",
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "canRead" : {
                                    "description" : "Can this access right read data",
                                    "type" : "boolean"
                                  },
                                  "value" : {
                                    "description" : "Access pattern",
                                    "type" : "string"
                                  },
                                  "canWrite" : {
                                    "description" : "Can this access right write data",
                                    "type" : "boolean"
                                  }
                                }
                              }
                            },
                            "tenant" : {
                              "description" : "Access rights on organizations",
                              "type" : "object",
                              "properties" : {
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "name" : {
                    "description" : "User name",
                    "type" : "string"
                  },
                  "webauthn" : {
                    "description" : "Webauthn details",
                    "type" : "object",
                    "properties" : {
                      "handle" : {
                        "description" : "Webauthn user handle",
                        "type" : "string"
                      },
                      "credentials" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "object"
                        },
                        "description" : "Webauthn credentials"
                      }
                    }
                  },
                  "email" : {
                    "description" : "User email",
                    "type" : "string"
                  },
                  "tags" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "User tags"
                  }
                }
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "SAML module tags"
            },
            "adminUsername" : {
              "description" : "The admin username",
              "type" : "string"
            },
            "proxy" : {
              "description" : "Web proxy configuration for the module's http client",
              "oneOfConstraints" : [ ],
              "type" : "object",
              "properties" : { }
            },
            "extractProfile" : {
              "description" : "Extract profile from LDAP profile",
              "type" : "boolean"
            },
            "logoutUrl" : {
              "description" : "OAuth logout URL",
              "type" : "string"
            },
            "oidConfig" : {
              "description" : "URL of the OIDC config. file",
              "type" : "string"
            },
            "name" : {
              "description" : "Name of the SAML module",
              "type" : "string"
            },
            "webauthn" : {
              "description" : "Use webauthn for login",
              "type" : "boolean"
            },
            "claims" : {
              "description" : "The claims of the token",
              "type" : "string"
            },
            "desc" : {
              "description" : "Description of the SAML Auth module",
              "type" : "string"
            },
            "groupFilters" : {
              "description" : "LDAP group filters",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "team" : {
                    "description" : "The team associated with this group",
                    "type" : "string"
                  },
                  "tenant" : {
                    "description" : "The tenant associated with this group",
                    "type" : "object",
                    "properties" : {
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      }
                    }
                  },
                  "group" : {
                    "description" : "The LDAP group",
                    "type" : "string"
                  }
                }
              }
            },
            "profileURL" : {
              "description" : "URL fetch by otoroshi to get user information from identity provider",
              "type" : "string"
            },
            "refreshTokens" : {
              "description" : "Refresh token support",
              "type" : "boolean"
            },
            "otoroshiRightsField" : {
              "description" : "Field in user profile to find otoroshi UI rights",
              "type" : "string"
            },
            "signature" : {
              "description" : "Algorithm and canonicalization method to sign SAML documents",
              "type" : "object",
              "properties" : {
                "canocalizationMethod" : {
                  "description" : "Canonicalization Method for XML Signatures",
                  "type" : "object",
                  "properties" : { }
                },
                "algorithm" : {
                  "description" : "Algorithm to sign documents or assertions",
                  "type" : "object",
                  "properties" : { }
                }
              }
            },
            "credentials" : {
              "description" : "Certificates and private keys to sign and encrypt SAML documents/assertions",
              "type" : "object",
              "properties" : {
                "signedDocuments" : {
                  "description" : "Indicates if SAML documents have to be sign before sending to identity provider",
                  "type" : "boolean"
                },
                "encryptedAssertions" : {
                  "description" : "Indicates if assertions have to be encrypt before sending to identity provider",
                  "type" : "boolean"
                },
                "signingKey" : {
                  "description" : "Pair of configuration used to sign documents",
                  "type" : "object",
                  "properties" : {
                    "privateKey" : {
                      "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "certificate" : {
                      "description" : "PEM certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "useOtoroshiCertificate" : {
                      "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                      "type" : "boolean"
                    }
                  }
                },
                "encryptionKey" : {
                  "description" : "Pair of configuration used to encrypt assertions",
                  "type" : "object",
                  "properties" : {
                    "privateKey" : {
                      "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "certificate" : {
                      "description" : "PEM certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                      "type" : "string"
                    },
                    "useOtoroshiCertificate" : {
                      "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                      "type" : "boolean"
                    }
                  }
                }
              }
            },
            "basicAuth" : {
              "description" : "Use standard basic auth or web login form",
              "type" : "boolean"
            },
            "validateAssertions" : {
              "description" : "Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider",
              "type" : "boolean"
            },
            "extractProfileFilterNot" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Exclude LDAP properties matching"
            },
            "httpMethod" : {
              "description" : "Method used to fetch access and request token",
              "type" : "object",
              "properties" : { }
            },
            "metadataField" : {
              "description" : "Field name to get metadata from user profile",
              "type" : "string"
            },
            "consumerSecret" : {
              "description" : "Client secret obtained from identity provider configuration",
              "type" : "string"
            },
            "loginUrl" : {
              "description" : "OAuth login URL",
              "type" : "string"
            },
            "scope" : {
              "description" : "The scope of the token",
              "type" : "string"
            },
            "accessTokenURL" : {
              "description" : "Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow",
              "type" : "string"
            },
            "singleSignOnUrl" : {
              "description" : "URL used by otoroshi to redirect users to identity provider login page",
              "type" : "string"
            },
            "groupRights" : {
              "description" : "Rights associated with groups",
              "additionalProperties" : {
                "type" : "object",
                "properties" : {
                  "userRights" : {
                    "description" : "The user rights associated with this group",
                    "type" : "object",
                    "properties" : {
                      "rights" : {
                        "description" : "Access rights of a user",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "teams" : {
                              "description" : "Access rights on teams",
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "canRead" : {
                                    "description" : "Can this access right read data",
                                    "type" : "boolean"
                                  },
                                  "value" : {
                                    "description" : "Access pattern",
                                    "type" : "string"
                                  },
                                  "canWrite" : {
                                    "description" : "Can this access right write data",
                                    "type" : "boolean"
                                  }
                                }
                              }
                            },
                            "tenant" : {
                              "description" : "Access rights on organizations",
                              "type" : "object",
                              "properties" : {
                                "canWrite" : {
                                  "description" : "Can this access right write data",
                                  "type" : "boolean"
                                },
                                "value" : {
                                  "description" : "Access pattern",
                                  "type" : "string"
                                },
                                "canRead" : {
                                  "description" : "Can this access right read data",
                                  "type" : "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "users" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The users associated with this group"
                  }
                }
              },
              "type" : "object"
            },
            "consumerKey" : {
              "description" : "Client ID obtained on identity provider",
              "type" : "string"
            },
            "adminPassword" : {
              "description" : "The admin password",
              "type" : "string"
            },
            "userInfoUrl" : {
              "description" : "OAuth userinfo to get user profile",
              "type" : "string"
            },
            "validateSignature" : {
              "description" : "Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider",
              "type" : "boolean"
            },
            "clientId" : {
              "description" : "OAuth Client id",
              "type" : "string"
            },
            "authorizeUrl" : {
              "description" : "OAuth authorize URL",
              "type" : "string"
            },
            "extractProfileFilter" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Only include LDAP properties matching"
            },
            "authorizeURL" : {
              "description" : "The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider",
              "type" : "string"
            },
            "requestTokenURL" : {
              "description" : "URL fetch to get a request token during the first step of the authorization OAuth 1 flow",
              "type" : "string"
            },
            "superAdmins" : {
              "description" : "This module produces only super admins",
              "type" : "boolean"
            },
            "apiKeyTagsField" : {
              "description" : "Field name to extract apikey tags",
              "type" : "string"
            },
            "userValidators" : {
              "description" : "Validators that will check if the current user is authorized after successful login",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "path" : {
                    "description" : "???",
                    "type" : "string"
                  },
                  "value" : {
                    "description" : "???",
                    "type" : "object"
                  }
                }
              }
            },
            "serverUrls" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "LDAP server list of url"
            },
            "jwtVerifier" : {
              "description" : "Algo. settings to verify JWT token",
              "oneOfConstraints" : [ {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "size", "base64", "secret", "type" ]
              }, {
                "required" : [ "kty", "proxy", "headers", "type", "ttl", "url", "timeout", "tlsConfig" ]
              }, {
                "required" : [ "onlyExposedCerts", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Http header when fetching JWKS"
                },
                "base64" : {
                  "description" : "The secret is base64 encoded",
                  "type" : "boolean"
                },
                "publicKey" : {
                  "description" : "Public key (for verification)",
                  "type" : "string"
                },
                "certId" : {
                  "description" : "Certificate id",
                  "type" : "string"
                },
                "secret" : {
                  "description" : "HMAC secret",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of algosettings",
                  "type" : "string",
                  "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                },
                "ttl" : {
                  "description" : "Cache ttl",
                  "type" : "number"
                },
                "url" : {
                  "description" : "JWKS url",
                  "type" : "string"
                },
                "timeout" : {
                  "description" : "Timeout when fetching JWKS",
                  "type" : "number"
                },
                "tlsConfig" : {
                  "description" : "TLS config",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "kty" : {
                  "description" : "Key type",
                  "type" : "string"
                },
                "privateKey" : {
                  "description" : "Private key (for signing)",
                  "type" : "string"
                },
                "proxy" : {
                  "description" : "Web proxy for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "onlyExposedCerts" : {
                  "description" : "Use only exposed certs",
                  "type" : "boolean"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                }
              }
            },
            "sessionMaxAge" : {
              "format" : "int32",
              "description" : "Max age of the session",
              "type" : "integer"
            },
            "usedNameIDAsEmail" : {
              "description" : "Is name ID used as email ?",
              "type" : "boolean"
            },
            "singleLogoutUrl" : {
              "description" : "URL used by otoroshi to disconnect users from identity provider",
              "type" : "string"
            },
            "noWildcardRedirectURI" : {
              "description" : "Manage redirection without query params for exact string comparison (OAuth 2.1)",
              "type" : "boolean"
            },
            "readProfileFromToken" : {
              "description" : "The user profile will be read from the JWT token in id_token",
              "type" : "boolean"
            },
            "emailAttributeName" : {
              "description" : "Field name to find email in user profile returned by identity provider",
              "type" : "string"
            }
          }
        }
      },
      "services" : {
        "description" : "template for entities services",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "debug_flow" : {
              "description" : "Enable report debugging",
              "type" : "boolean"
            },
            "routes" : {
              "description" : "The routes of the service",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "backend_ref" : {
                    "description" : "The backend id of the route (if one)",
                    "type" : "string"
                  },
                  "backend" : {
                    "description" : "The backend of the route",
                    "type" : "object",
                    "properties" : {
                      "target_refs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "List of NgStoredBackend ids"
                      },
                      "root" : {
                        "description" : "The root path of the backend or the full rewrite path",
                        "type" : "string"
                      },
                      "targets" : {
                        "description" : "The targets of the backend",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "predicate" : {
                              "description" : "Predicate to choose this target",
                              "type" : "object",
                              "properties" : {
                                "rack" : {
                                  "description" : "Rack name",
                                  "type" : "string"
                                },
                                "provider" : {
                                  "description" : "Provider name",
                                  "type" : "string"
                                },
                                "dataCenter" : {
                                  "description" : "Datacenter name",
                                  "type" : "string"
                                },
                                "zone" : {
                                  "description" : "Zone name",
                                  "type" : "string"
                                },
                                "positions" : {
                                  "description" : "Possible positions",
                                  "type" : "array",
                                  "items" : {
                                    "type" : "object",
                                    "properties" : {
                                      "latitude" : {
                                        "format" : "double",
                                        "description" : "Latitude of the position",
                                        "type" : "number"
                                      },
                                      "longitude" : {
                                        "format" : "double",
                                        "description" : "Longitude of the position",
                                        "type" : "number"
                                      },
                                      "radius" : {
                                        "format" : "double",
                                        "description" : "Radius of the circle in meters",
                                        "type" : "number"
                                      }
                                    }
                                  }
                                },
                                "type" : {
                                  "description" : "the kind of predicate",
                                  "type" : "string",
                                  "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                                },
                                "region" : {
                                  "description" : "Region name",
                                  "type" : "string"
                                },
                                "dc" : {
                                  "description" : "DC name",
                                  "type" : "string"
                                }
                              }
                            },
                            "protocol" : {
                              "description" : "Protocol for the target",
                              "type" : "string"
                            },
                            "hostname" : {
                              "description" : "hostname of the target",
                              "type" : "string"
                            },
                            "port" : {
                              "format" : "int32",
                              "description" : "port of the target",
                              "type" : "integer"
                            },
                            "weight" : {
                              "format" : "int32",
                              "description" : "The weight of the target when choosing",
                              "type" : "integer"
                            },
                            "tls" : {
                              "description" : "Does the target uses TLS",
                              "type" : "boolean"
                            },
                            "tls_config" : {
                              "description" : "TLS settings to contact this target",
                              "type" : "object",
                              "properties" : {
                                "enabled" : {
                                  "description" : "Enabled",
                                  "type" : "boolean"
                                },
                                "certs" : {
                                  "type" : "array",
                                  "items" : {
                                    "type" : "string"
                                  },
                                  "description" : "Trusted cert. ids"
                                },
                                "loose" : {
                                  "description" : "Loose verification",
                                  "type" : "boolean"
                                },
                                "trust_all" : {
                                  "description" : "Trust any certificate",
                                  "type" : "boolean"
                                },
                                "trusted_certs" : {
                                  "type" : "array",
                                  "items" : {
                                    "type" : "string"
                                  },
                                  "description" : "Trusted cert. ids"
                                }
                              }
                            },
                            "id" : {
                              "description" : "id of the target",
                              "type" : "string"
                            },
                            "ip_address" : {
                              "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                              "type" : "string"
                            }
                          }
                        }
                      },
                      "rewrite" : {
                        "description" : "Does the backend performs a full url rewrite ?",
                        "type" : "boolean"
                      },
                      "load_balancing" : {
                        "description" : "Loadbalancing config og the backend",
                        "type" : "object",
                        "properties" : {
                          "type" : {
                            "type" : "string",
                            "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                          },
                          "ratio" : {
                            "type" : "number",
                            "format" : "double"
                          }
                        }
                      }
                    }
                  },
                  "frontend" : {
                    "description" : "The frontend of the route",
                    "type" : "object",
                    "properties" : {
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "the headers that will be matched"
                      },
                      "methods" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "the http methods that will be matched"
                      },
                      "query" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "the query params that will be matched"
                      },
                      "exact" : {
                        "description" : "Match on exact path ?",
                        "type" : "boolean"
                      },
                      "domains" : {
                        "description" : "The domain and path that will be matched",
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      },
                      "strip_path" : {
                        "description" : "Is path stripped from backend request",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            },
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "The metadata of the service"
            },
            "name" : {
              "description" : "The name of the service",
              "type" : "string"
            },
            "description" : {
              "description" : "The description of the service",
              "type" : "string"
            },
            "groups" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The groups of the service"
            },
            "client" : {
              "description" : "The client config of the service",
              "type" : "object",
              "properties" : {
                "custom_timeouts" : {
                  "description" : "Custom timeouts per path",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "connection_timeout" : {
                        "format" : "int64",
                        "description" : "Timeout at connection",
                        "type" : "integer"
                      },
                      "call_and_stream_timeout" : {
                        "format" : "int64",
                        "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                        "type" : "integer"
                      },
                      "path" : {
                        "description" : "path on which this configuration works",
                        "type" : "string"
                      },
                      "call_timeout" : {
                        "format" : "int64",
                        "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                        "type" : "integer"
                      },
                      "idle_timeout" : {
                        "format" : "int64",
                        "description" : "Timeout on idle connection",
                        "type" : "integer"
                      },
                      "global_timeout" : {
                        "format" : "int64",
                        "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                        "type" : "integer"
                      }
                    }
                  }
                },
                "global_timeout" : {
                  "format" : "int64",
                  "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                  "type" : "integer"
                },
                "max_errors" : {
                  "format" : "int32",
                  "description" : "Specify how many errors can pass before opening the circuit breaker",
                  "type" : "integer"
                },
                "retry_initial_delay" : {
                  "format" : "int64",
                  "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                  "type" : "integer"
                },
                "backoff_factor" : {
                  "format" : "int64",
                  "description" : "Specify the factor to multiply the delay for each retry",
                  "type" : "integer"
                },
                "cache_connection_settings" : {
                  "description" : "Cached connection settings",
                  "type" : "object",
                  "properties" : {
                    "queue_size" : {
                      "format" : "int32",
                      "description" : "How much request can be queue before dropping it",
                      "type" : "integer"
                    },
                    "enabled" : {
                      "description" : "Is cached connection enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "sample_interval" : {
                  "format" : "int64",
                  "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                  "type" : "integer"
                },
                "call_and_stream_timeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                  "type" : "integer"
                },
                "retries" : {
                  "format" : "int32",
                  "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                  "type" : "integer"
                },
                "proxy" : {
                  "description" : "Web proxy settings for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "call_timeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                  "type" : "integer"
                },
                "idle_timeout" : {
                  "format" : "int64",
                  "description" : "Timeout on idle connection",
                  "type" : "integer"
                },
                "connection_timeout" : {
                  "format" : "int64",
                  "description" : "Timeout at connection",
                  "type" : "integer"
                }
              }
            },
            "id" : {
              "description" : "The id of the service",
              "type" : "string"
            },
            "_loc" : {
              "description" : "The location of the service",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "enabled" : {
              "description" : "Is the service enabled",
              "type" : "boolean"
            },
            "export_reporting" : {
              "description" : "Export the execution reporting through standard data exporter",
              "type" : "boolean"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The tags of the service"
            }
          }
        }
      },
      "jwtVerifiers" : {
        "description" : "template for entities jwtVerifiers",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Entity metadata"
            },
            "algoSettings" : {
              "description" : "Algo settings of the verifier",
              "oneOfConstraints" : [ {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "size", "base64", "secret", "type" ]
              }, {
                "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
              }, {
                "required" : [ "onlyExposedCerts", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "privateKey" : {
                  "description" : "Private key (for signing)",
                  "type" : "string"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                },
                "publicKey" : {
                  "description" : "Public key (for verification)",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of algosettings",
                  "type" : "string",
                  "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                },
                "certId" : {
                  "description" : "Certificate id",
                  "type" : "string"
                },
                "base64" : {
                  "description" : "The secret is base64 encoded",
                  "type" : "boolean"
                },
                "secret" : {
                  "description" : "HMAC secret",
                  "type" : "string"
                },
                "kty" : {
                  "description" : "Key type",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Http header when fetching JWKS"
                },
                "proxy" : {
                  "description" : "Web proxy for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "ttl" : {
                  "description" : "Cache ttl",
                  "type" : "number"
                },
                "url" : {
                  "description" : "JWKS url",
                  "type" : "string"
                },
                "timeout" : {
                  "description" : "Timeout when fetching JWKS",
                  "type" : "number"
                },
                "tlsConfig" : {
                  "description" : "TLS config",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "onlyExposedCerts" : {
                  "description" : "Use only exposed certs",
                  "type" : "boolean"
                }
              }
            },
            "name" : {
              "description" : "Verifier name",
              "type" : "string"
            },
            "id" : {
              "description" : "Verifier id",
              "type" : "string"
            },
            "source" : {
              "description" : "Where to find the jwt token",
              "oneOfConstraints" : [ {
                "required" : [ "name", "type" ]
              }, {
                "required" : [ "name", "type", "remove" ]
              }, {
                "required" : [ "name", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "name" : {
                  "description" : "Query param name",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of location",
                  "type" : "string",
                  "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                },
                "remove" : {
                  "description" : "Remove from value",
                  "type" : "string"
                }
              }
            },
            "type" : {
              "description" : "the kind of verifier",
              "type" : "string",
              "enum" : [ "global" ]
            },
            "strict" : {
              "description" : "Does it fail if JWT not found",
              "type" : "boolean"
            },
            "strategy" : {
              "description" : "The strategy of the verifier",
              "oneOfConstraints" : [ {
                "required" : [ "verificationSettings", "type", "strict", "token" ]
              }, {
                "required" : [ "verificationSettings", "type" ]
              }, {
                "required" : [ "algoSettings", "verificationSettings", "type" ]
              }, {
                "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "verificationSettings" : {
                  "description" : "Verification settings",
                  "type" : "object",
                  "properties" : {
                    "fields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields validation"
                    },
                    "arrayFields" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Fields array validation"
                    }
                  }
                },
                "type" : {
                  "description" : "the kind of strategy",
                  "type" : "string",
                  "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                },
                "strict" : {
                  "description" : "If the token already exists in the request, then fail",
                  "type" : "boolean"
                },
                "token" : {
                  "description" : "The default token",
                  "type" : "object"
                },
                "algoSettings" : {
                  "description" : "Algorithm settings for re-signing token",
                  "oneOfConstraints" : [ {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "size", "base64", "secret", "type" ]
                  }, {
                    "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                  }, {
                    "required" : [ "onlyExposedCerts", "type" ]
                  }, {
                    "required" : [ "size", "certId", "type" ]
                  }, {
                    "required" : [ "privateKey", "size", "publicKey", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "tlsConfig" : {
                      "description" : "TLS config",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    }
                  }
                },
                "transformSettings" : {
                  "description" : "Transformation settings",
                  "type" : "object",
                  "properties" : {
                    "mappingSettings" : {
                      "description" : "Token mapping settings",
                      "type" : "object",
                      "properties" : {
                        "map" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Change values"
                        },
                        "values" : {
                          "description" : "Add values",
                          "type" : "object"
                        },
                        "remove" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Remove some token claims"
                        }
                      }
                    },
                    "location" : {
                      "description" : "Location of the token",
                      "type" : "object",
                      "properties" : {
                        "name" : {
                          "description" : "Query param name",
                          "type" : "string"
                        },
                        "type" : {
                          "description" : "the kind of location",
                          "type" : "string",
                          "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                        },
                        "remove" : {
                          "description" : "Remove from value",
                          "type" : "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "_loc" : {
              "description" : "Entity location",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "desc" : {
              "description" : "Verifier description",
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            }
          }
        }
      },
      "targets" : {
        "description" : "template for entities targets",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "The metadata of the target"
            },
            "name" : {
              "description" : "The name of the target",
              "type" : "string"
            },
            "description" : {
              "description" : "The description of the target",
              "type" : "string"
            },
            "id" : {
              "description" : "The id of the target",
              "type" : "string"
            },
            "_loc" : {
              "description" : "The location of the target",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The tags of the target"
            },
            "target" : {
              "description" : "The actual target",
              "type" : "object",
              "properties" : {
                "predicate" : {
                  "description" : "Predicate to choose this target",
                  "type" : "object",
                  "properties" : {
                    "rack" : {
                      "description" : "Rack name",
                      "type" : "string"
                    },
                    "provider" : {
                      "description" : "Provider name",
                      "type" : "string"
                    },
                    "dataCenter" : {
                      "description" : "Datacenter name",
                      "type" : "string"
                    },
                    "zone" : {
                      "description" : "Zone name",
                      "type" : "string"
                    },
                    "positions" : {
                      "description" : "Possible positions",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "latitude" : {
                            "format" : "double",
                            "description" : "Latitude of the position",
                            "type" : "number"
                          },
                          "longitude" : {
                            "format" : "double",
                            "description" : "Longitude of the position",
                            "type" : "number"
                          },
                          "radius" : {
                            "format" : "double",
                            "description" : "Radius of the circle in meters",
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of predicate",
                      "type" : "string",
                      "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                    },
                    "region" : {
                      "description" : "Region name",
                      "type" : "string"
                    },
                    "dc" : {
                      "description" : "DC name",
                      "type" : "string"
                    }
                  }
                },
                "protocol" : {
                  "description" : "Protocol for the target",
                  "type" : "string"
                },
                "hostname" : {
                  "description" : "hostname of the target",
                  "type" : "string"
                },
                "port" : {
                  "format" : "int32",
                  "description" : "port of the target",
                  "type" : "integer"
                },
                "weight" : {
                  "format" : "int32",
                  "description" : "The weight of the target when choosing",
                  "type" : "integer"
                },
                "tls" : {
                  "description" : "Does the target uses TLS",
                  "type" : "boolean"
                },
                "tls_config" : {
                  "description" : "TLS settings to contact this target",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trust_all" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trusted_certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "id" : {
                  "description" : "id of the target",
                  "type" : "string"
                },
                "ip_address" : {
                  "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                  "type" : "string"
                }
              }
            }
          }
        }
      },
      "backends" : {
        "description" : "template for entities backends",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "The metadata of the backend"
            },
            "name" : {
              "description" : "The name of the backend",
              "type" : "string"
            },
            "description" : {
              "description" : "The description of the backend",
              "type" : "string"
            },
            "backend" : {
              "description" : "The actual backend",
              "type" : "object",
              "properties" : {
                "target_refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "List of NgStoredBackend ids"
                },
                "root" : {
                  "description" : "The root path of the backend or the full rewrite path",
                  "type" : "string"
                },
                "client" : {
                  "description" : "Client config. of the backend",
                  "type" : "object",
                  "properties" : {
                    "custom_timeouts" : {
                      "description" : "Custom timeouts per path",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "connection_timeout" : {
                            "format" : "int64",
                            "description" : "Timeout at connection",
                            "type" : "integer"
                          },
                          "call_and_stream_timeout" : {
                            "format" : "int64",
                            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                            "type" : "integer"
                          },
                          "path" : {
                            "description" : "path on which this configuration works",
                            "type" : "string"
                          },
                          "call_timeout" : {
                            "format" : "int64",
                            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                            "type" : "integer"
                          },
                          "idle_timeout" : {
                            "format" : "int64",
                            "description" : "Timeout on idle connection",
                            "type" : "integer"
                          },
                          "global_timeout" : {
                            "format" : "int64",
                            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                            "type" : "integer"
                          }
                        }
                      }
                    },
                    "global_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                      "type" : "integer"
                    },
                    "max_errors" : {
                      "format" : "int32",
                      "description" : "Specify how many errors can pass before opening the circuit breaker",
                      "type" : "integer"
                    },
                    "retry_initial_delay" : {
                      "format" : "int64",
                      "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                      "type" : "integer"
                    },
                    "backoff_factor" : {
                      "format" : "int64",
                      "description" : "Specify the factor to multiply the delay for each retry",
                      "type" : "integer"
                    },
                    "cache_connection_settings" : {
                      "description" : "Cached connection settings",
                      "type" : "object",
                      "properties" : {
                        "queue_size" : {
                          "format" : "int32",
                          "description" : "How much request can be queue before dropping it",
                          "type" : "integer"
                        },
                        "enabled" : {
                          "description" : "Is cached connection enabled",
                          "type" : "boolean"
                        }
                      }
                    },
                    "sample_interval" : {
                      "format" : "int64",
                      "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                      "type" : "integer"
                    },
                    "call_and_stream_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                      "type" : "integer"
                    },
                    "retries" : {
                      "format" : "int32",
                      "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                      "type" : "integer"
                    },
                    "proxy" : {
                      "description" : "Web proxy settings for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "call_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                      "type" : "integer"
                    },
                    "idle_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout on idle connection",
                      "type" : "integer"
                    },
                    "connection_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout at connection",
                      "type" : "integer"
                    }
                  }
                },
                "health_check" : {
                  "description" : "Healthcheck config og the backend",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                      "type" : "boolean"
                    },
                    "url" : {
                      "description" : "The URL to check",
                      "type" : "string"
                    }
                  }
                },
                "targets" : {
                  "description" : "The targets of the backend",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "predicate" : {
                        "description" : "Predicate to choose this target",
                        "type" : "object",
                        "properties" : {
                          "rack" : {
                            "description" : "Rack name",
                            "type" : "string"
                          },
                          "provider" : {
                            "description" : "Provider name",
                            "type" : "string"
                          },
                          "dataCenter" : {
                            "description" : "Datacenter name",
                            "type" : "string"
                          },
                          "zone" : {
                            "description" : "Zone name",
                            "type" : "string"
                          },
                          "positions" : {
                            "description" : "Possible positions",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "latitude" : {
                                  "format" : "double",
                                  "description" : "Latitude of the position",
                                  "type" : "number"
                                },
                                "longitude" : {
                                  "format" : "double",
                                  "description" : "Longitude of the position",
                                  "type" : "number"
                                },
                                "radius" : {
                                  "format" : "double",
                                  "description" : "Radius of the circle in meters",
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "description" : "the kind of predicate",
                            "type" : "string",
                            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                          },
                          "region" : {
                            "description" : "Region name",
                            "type" : "string"
                          },
                          "dc" : {
                            "description" : "DC name",
                            "type" : "string"
                          }
                        }
                      },
                      "protocol" : {
                        "description" : "Protocol for the target",
                        "type" : "string"
                      },
                      "hostname" : {
                        "description" : "hostname of the target",
                        "type" : "string"
                      },
                      "port" : {
                        "format" : "int32",
                        "description" : "port of the target",
                        "type" : "integer"
                      },
                      "weight" : {
                        "format" : "int32",
                        "description" : "The weight of the target when choosing",
                        "type" : "integer"
                      },
                      "tls" : {
                        "description" : "Does the target uses TLS",
                        "type" : "boolean"
                      },
                      "tls_config" : {
                        "description" : "TLS settings to contact this target",
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trust_all" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trusted_certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "id" : {
                        "description" : "id of the target",
                        "type" : "string"
                      },
                      "ip_address" : {
                        "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                        "type" : "string"
                      }
                    }
                  }
                },
                "rewrite" : {
                  "description" : "Does the backend performs a full url rewrite ?",
                  "type" : "boolean"
                },
                "load_balancing" : {
                  "description" : "Loadbalancing config og the backend",
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "string",
                      "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                    },
                    "ratio" : {
                      "type" : "number",
                      "format" : "double"
                    }
                  }
                }
              }
            },
            "id" : {
              "description" : "The id of the backend",
              "type" : "string"
            },
            "_loc" : {
              "description" : "The location of the backend",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The tags of the backend"
            }
          }
        }
      },
      "routes" : {
        "description" : "template for entities routes",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "The metadata of the route"
            },
            "backend_ref" : {
              "description" : "The backend id of the route (if one)",
              "type" : "string"
            },
            "groups" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The groups of the route"
            },
            "description" : {
              "description" : "The description of the route",
              "type" : "string"
            },
            "_loc" : {
              "description" : "The location of the route",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "enabled" : {
              "description" : "Is the route enabled",
              "type" : "boolean"
            },
            "export_reporting" : {
              "description" : "Export the execution reporting through standard data exporter",
              "type" : "boolean"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The tags of the route"
            },
            "debug_flow" : {
              "description" : "Enable report debugging",
              "type" : "boolean"
            },
            "name" : {
              "description" : "The name of the route",
              "type" : "string"
            },
            "backend" : {
              "description" : "The backend of the route",
              "type" : "object",
              "properties" : {
                "target_refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "List of NgStoredBackend ids"
                },
                "root" : {
                  "description" : "The root path of the backend or the full rewrite path",
                  "type" : "string"
                },
                "client" : {
                  "description" : "Client config. of the backend",
                  "type" : "object",
                  "properties" : {
                    "custom_timeouts" : {
                      "description" : "Custom timeouts per path",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "connection_timeout" : {
                            "format" : "int64",
                            "description" : "Timeout at connection",
                            "type" : "integer"
                          },
                          "call_and_stream_timeout" : {
                            "format" : "int64",
                            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                            "type" : "integer"
                          },
                          "path" : {
                            "description" : "path on which this configuration works",
                            "type" : "string"
                          },
                          "call_timeout" : {
                            "format" : "int64",
                            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                            "type" : "integer"
                          },
                          "idle_timeout" : {
                            "format" : "int64",
                            "description" : "Timeout on idle connection",
                            "type" : "integer"
                          },
                          "global_timeout" : {
                            "format" : "int64",
                            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                            "type" : "integer"
                          }
                        }
                      }
                    },
                    "global_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                      "type" : "integer"
                    },
                    "max_errors" : {
                      "format" : "int32",
                      "description" : "Specify how many errors can pass before opening the circuit breaker",
                      "type" : "integer"
                    },
                    "retry_initial_delay" : {
                      "format" : "int64",
                      "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                      "type" : "integer"
                    },
                    "backoff_factor" : {
                      "format" : "int64",
                      "description" : "Specify the factor to multiply the delay for each retry",
                      "type" : "integer"
                    },
                    "cache_connection_settings" : {
                      "description" : "Cached connection settings",
                      "type" : "object",
                      "properties" : {
                        "queue_size" : {
                          "format" : "int32",
                          "description" : "How much request can be queue before dropping it",
                          "type" : "integer"
                        },
                        "enabled" : {
                          "description" : "Is cached connection enabled",
                          "type" : "boolean"
                        }
                      }
                    },
                    "sample_interval" : {
                      "format" : "int64",
                      "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                      "type" : "integer"
                    },
                    "call_and_stream_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                      "type" : "integer"
                    },
                    "retries" : {
                      "format" : "int32",
                      "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                      "type" : "integer"
                    },
                    "proxy" : {
                      "description" : "Web proxy settings for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "call_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                      "type" : "integer"
                    },
                    "idle_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout on idle connection",
                      "type" : "integer"
                    },
                    "connection_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout at connection",
                      "type" : "integer"
                    }
                  }
                },
                "health_check" : {
                  "description" : "Healthcheck config og the backend",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                      "type" : "boolean"
                    },
                    "url" : {
                      "description" : "The URL to check",
                      "type" : "string"
                    }
                  }
                },
                "targets" : {
                  "description" : "The targets of the backend",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "predicate" : {
                        "description" : "Predicate to choose this target",
                        "type" : "object",
                        "properties" : {
                          "rack" : {
                            "description" : "Rack name",
                            "type" : "string"
                          },
                          "provider" : {
                            "description" : "Provider name",
                            "type" : "string"
                          },
                          "dataCenter" : {
                            "description" : "Datacenter name",
                            "type" : "string"
                          },
                          "zone" : {
                            "description" : "Zone name",
                            "type" : "string"
                          },
                          "positions" : {
                            "description" : "Possible positions",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "latitude" : {
                                  "format" : "double",
                                  "description" : "Latitude of the position",
                                  "type" : "number"
                                },
                                "longitude" : {
                                  "format" : "double",
                                  "description" : "Longitude of the position",
                                  "type" : "number"
                                },
                                "radius" : {
                                  "format" : "double",
                                  "description" : "Radius of the circle in meters",
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "description" : "the kind of predicate",
                            "type" : "string",
                            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                          },
                          "region" : {
                            "description" : "Region name",
                            "type" : "string"
                          },
                          "dc" : {
                            "description" : "DC name",
                            "type" : "string"
                          }
                        }
                      },
                      "protocol" : {
                        "description" : "Protocol for the target",
                        "type" : "string"
                      },
                      "hostname" : {
                        "description" : "hostname of the target",
                        "type" : "string"
                      },
                      "port" : {
                        "format" : "int32",
                        "description" : "port of the target",
                        "type" : "integer"
                      },
                      "weight" : {
                        "format" : "int32",
                        "description" : "The weight of the target when choosing",
                        "type" : "integer"
                      },
                      "tls" : {
                        "description" : "Does the target uses TLS",
                        "type" : "boolean"
                      },
                      "tls_config" : {
                        "description" : "TLS settings to contact this target",
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trust_all" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trusted_certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "id" : {
                        "description" : "id of the target",
                        "type" : "string"
                      },
                      "ip_address" : {
                        "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                        "type" : "string"
                      }
                    }
                  }
                },
                "rewrite" : {
                  "description" : "Does the backend performs a full url rewrite ?",
                  "type" : "boolean"
                },
                "load_balancing" : {
                  "description" : "Loadbalancing config og the backend",
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "string",
                      "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                    },
                    "ratio" : {
                      "type" : "number",
                      "format" : "double"
                    }
                  }
                }
              }
            },
            "id" : {
              "description" : "The ud of the route",
              "type" : "string"
            },
            "frontend" : {
              "description" : "The frontend of the route",
              "type" : "object",
              "properties" : {
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "the headers that will be matched"
                },
                "methods" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "the http methods that will be matched"
                },
                "query" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "the query params that will be matched"
                },
                "exact" : {
                  "description" : "Match on exact path ?",
                  "type" : "boolean"
                },
                "domains" : {
                  "description" : "The domain and path that will be matched",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "strip_path" : {
                  "description" : "Is path stripped from backend request",
                  "type" : "boolean"
                }
              }
            }
          }
        }
      },
      "serviceDescriptors" : {
        "description" : "template for entities serviceDescriptors",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "removeHeadersIn" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Remove headers on client request"
            },
            "missingOnlyHeadersOut" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Add header on client response if they are not present"
            },
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Just a bunch of random properties"
            },
            "tcpUdpTunneling" : {
              "description" : "Enabled TCP/UDP tunneling through websocket connection",
              "type" : "boolean"
            },
            "cors" : {
              "description" : "CORS settings",
              "type" : "object",
              "properties" : {
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "The cors excluded patterns"
                },
                "allowMethods" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "The cors allowed methods"
                },
                "allowHeaders" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "The cors allowed headers"
                },
                "exposeHeaders" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "The cors exposed header"
                },
                "maxAge" : {
                  "description" : "Cors max age",
                  "type" : "number"
                },
                "enabled" : {
                  "description" : "Whether or not cors is enabled",
                  "type" : "boolean"
                },
                "allowCredentials" : {
                  "description" : "Allow to pass credentials",
                  "type" : "boolean"
                },
                "allowOrigin" : {
                  "description" : "The cors allowed origin",
                  "type" : "string"
                }
              }
            },
            "forceHttps" : {
              "description" : "Will force redirection to https:// if not present",
              "type" : "boolean"
            },
            "matchingRoot" : {
              "description" : "The root path on which the service is available",
              "type" : "string"
            },
            "plugins" : {
              "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
              "type" : "object",
              "properties" : {
                "config" : {
                  "description" : "Plugins configuration",
                  "type" : "object"
                },
                "enabled" : {
                  "description" : "Plugins enabled",
                  "type" : "boolean"
                },
                "excluded" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Excluded paths"
                },
                "refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Enabled plugins"
                }
              }
            },
            "letsEncrypt" : {
              "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
              "type" : "boolean"
            },
            "useNewWSClient" : {
              "description" : "Use akka http client for this service on websocket calls",
              "type" : "boolean"
            },
            "chaosConfig" : {
              "description" : "Chaos engineering settings",
              "type" : "object",
              "properties" : {
                "badResponsesFaultConfig" : {
                  "description" : "Settings for bad responses",
                  "type" : "object",
                  "properties" : {
                    "responses" : {
                      "description" : "The possibles responses",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "status" : {
                            "format" : "int32",
                            "description" : "The HTTP status for the response",
                            "type" : "integer"
                          },
                          "body" : {
                            "description" : "The body of the HTTP response",
                            "type" : "string"
                          },
                          "headers" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "The HTTP headers of the response"
                          }
                        }
                      }
                    },
                    "ratio" : {
                      "format" : "double",
                      "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                      "type" : "number"
                    }
                  }
                },
                "largeResponseFaultConfig" : {
                  "description" : "Settings for large responses",
                  "type" : "object",
                  "properties" : {
                    "ratio" : {
                      "format" : "double",
                      "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                      "type" : "number"
                    },
                    "additionalResponseSize" : {
                      "format" : "int32",
                      "description" : "Add n 0 bytes",
                      "type" : "integer"
                    }
                  }
                },
                "latencyInjectionFaultConfig" : {
                  "description" : "Settings for latency injection",
                  "type" : "object",
                  "properties" : {
                    "ratio" : {
                      "format" : "double",
                      "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                      "type" : "number"
                    },
                    "from" : {
                      "description" : "The start range of latency added to the request",
                      "type" : "number"
                    },
                    "to" : {
                      "description" : "The end range of latency added to the request",
                      "type" : "number"
                    }
                  }
                },
                "largeRequestFaultConfig" : {
                  "description" : "Settings for large requests",
                  "type" : "object",
                  "properties" : {
                    "ratio" : {
                      "format" : "double",
                      "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                      "type" : "number"
                    },
                    "additionalRequestSize" : {
                      "format" : "int32",
                      "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                      "type" : "integer"
                    }
                  }
                },
                "enabled" : {
                  "description" : "Whether or not this config is enabled",
                  "type" : "boolean"
                }
              }
            },
            "secComSettings" : {
              "description" : "Sec. com. settings",
              "oneOfConstraints" : [ {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "size", "base64", "secret", "type" ]
              }, {
                "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
              }, {
                "required" : [ "onlyExposedCerts", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "privateKey" : {
                  "description" : "Private key (for signing)",
                  "type" : "string"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                },
                "publicKey" : {
                  "description" : "Public key (for verification)",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of algosettings",
                  "type" : "string",
                  "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                },
                "certId" : {
                  "description" : "Certificate id",
                  "type" : "string"
                },
                "base64" : {
                  "description" : "The secret is base64 encoded",
                  "type" : "boolean"
                },
                "secret" : {
                  "description" : "HMAC secret",
                  "type" : "string"
                },
                "kty" : {
                  "description" : "Key type",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Http header when fetching JWKS"
                },
                "proxy" : {
                  "description" : "Web proxy for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "ttl" : {
                  "description" : "Cache ttl",
                  "type" : "number"
                },
                "url" : {
                  "description" : "JWKS url",
                  "type" : "string"
                },
                "timeout" : {
                  "description" : "Timeout when fetching JWKS",
                  "type" : "number"
                },
                "tlsConfig" : {
                  "description" : "TLS config",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "onlyExposedCerts" : {
                  "description" : "Use only exposed certs",
                  "type" : "boolean"
                }
              }
            },
            "detectApiKeySooner" : {
              "description" : "Detect if an apikey is present but do not fail if not",
              "type" : "boolean"
            },
            "transformerRefs" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Enabled transformer plugins"
            },
            "secComAlgoInfoToken" : {
              "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
              "oneOfConstraints" : [ {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "size", "base64", "secret", "type" ]
              }, {
                "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
              }, {
                "required" : [ "onlyExposedCerts", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "privateKey" : {
                  "description" : "Private key (for signing)",
                  "type" : "string"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                },
                "publicKey" : {
                  "description" : "Public key (for verification)",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of algosettings",
                  "type" : "string",
                  "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                },
                "certId" : {
                  "description" : "Certificate id",
                  "type" : "string"
                },
                "base64" : {
                  "description" : "The secret is base64 encoded",
                  "type" : "boolean"
                },
                "secret" : {
                  "description" : "HMAC secret",
                  "type" : "string"
                },
                "kty" : {
                  "description" : "Key type",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Http header when fetching JWKS"
                },
                "proxy" : {
                  "description" : "Web proxy for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "ttl" : {
                  "description" : "Cache ttl",
                  "type" : "number"
                },
                "url" : {
                  "description" : "JWKS url",
                  "type" : "string"
                },
                "timeout" : {
                  "description" : "Timeout when fetching JWKS",
                  "type" : "number"
                },
                "tlsConfig" : {
                  "description" : "TLS config",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "onlyExposedCerts" : {
                  "description" : "Use only exposed certs",
                  "type" : "boolean"
                }
              }
            },
            "missingOnlyHeadersIn" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Add header on client request if they are not present"
            },
            "secComAlgoChallengeOtoToBack" : {
              "description" : "Algorithm to sign challenge token to the backend",
              "oneOfConstraints" : [ {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "size", "base64", "secret", "type" ]
              }, {
                "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
              }, {
                "required" : [ "onlyExposedCerts", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "privateKey" : {
                  "description" : "Private key (for signing)",
                  "type" : "string"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                },
                "publicKey" : {
                  "description" : "Public key (for verification)",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of algosettings",
                  "type" : "string",
                  "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                },
                "certId" : {
                  "description" : "Certificate id",
                  "type" : "string"
                },
                "base64" : {
                  "description" : "The secret is base64 encoded",
                  "type" : "boolean"
                },
                "secret" : {
                  "description" : "HMAC secret",
                  "type" : "string"
                },
                "kty" : {
                  "description" : "Key type",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Http header when fetching JWKS"
                },
                "proxy" : {
                  "description" : "Web proxy for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "ttl" : {
                  "description" : "Cache ttl",
                  "type" : "number"
                },
                "url" : {
                  "description" : "JWKS url",
                  "type" : "string"
                },
                "timeout" : {
                  "description" : "Timeout when fetching JWKS",
                  "type" : "number"
                },
                "tlsConfig" : {
                  "description" : "TLS config",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "onlyExposedCerts" : {
                  "description" : "Use only exposed certs",
                  "type" : "boolean"
                }
              }
            },
            "removeHeadersOut" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Remove headers on client response"
            },
            "stripPath" : {
              "description" : "Strip matching path in the forwarded request path",
              "type" : "boolean"
            },
            "localHost" : {
              "description" : "The host used localy, mainly localhost:xxxx",
              "type" : "string"
            },
            "sendOtoroshiHeadersBack" : {
              "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
              "type" : "boolean"
            },
            "id" : {
              "description" : "A unique random string to identify your service",
              "type" : "string"
            },
            "api" : {
              "description" : "Api exposition settings",
              "type" : "object",
              "properties" : {
                "exposeApi" : {
                  "description" : "Is this an API",
                  "type" : "boolean"
                },
                "openApiDescriptorUrl" : {
                  "description" : "openapi descriptor url",
                  "type" : "string"
                }
              }
            },
            "secComTtl" : {
              "description" : "TTL for the info token",
              "type" : "number"
            },
            "secComVersion" : {
              "description" : "Version of the challenge token",
              "type" : "string",
              "enum" : [ "V1", "v2" ]
            },
            "targetsLoadBalancing" : {
              "description" : "Loadbalancing strategy",
              "type" : "object",
              "properties" : {
                "type" : {
                  "type" : "string",
                  "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                },
                "ratio" : {
                  "type" : "number",
                  "format" : "double"
                }
              }
            },
            "userFacing" : {
              "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
              "type" : "boolean"
            },
            "hosts" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Possible hosts for the service"
            },
            "restrictions" : {
              "description" : "Restriction settings",
              "type" : "object",
              "properties" : {
                "allowed" : {
                  "description" : "Allowed paths",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "method" : {
                        "description" : "Method of the http request",
                        "type" : "string"
                      },
                      "path" : {
                        "description" : "Path of the http request",
                        "type" : "string"
                      }
                    }
                  }
                },
                "allowLast" : {
                  "description" : "Evalute allowed paths after everything else",
                  "type" : "boolean"
                },
                "forbidden" : {
                  "description" : "Forbidden paths (return 403)",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "method" : {
                        "description" : "Method of the http request",
                        "type" : "string"
                      },
                      "path" : {
                        "description" : "Path of the http request",
                        "type" : "string"
                      }
                    }
                  }
                },
                "notFound" : {
                  "description" : "Not found paths (return 404)",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "method" : {
                        "description" : "Method of the http request",
                        "type" : "string"
                      },
                      "path" : {
                        "description" : "Path of the http request",
                        "type" : "string"
                      }
                    }
                  }
                },
                "enabled" : {
                  "description" : "Restrictions enabled",
                  "type" : "boolean"
                }
              }
            },
            "readOnly" : {
              "description" : "Service only accepts GET, HEAD and OPTIONS requests",
              "type" : "boolean"
            },
            "secComInfoTokenVersion" : {
              "description" : "Version of the info token",
              "type" : "string",
              "enum" : [ "Legacy", "Latest" ]
            },
            "_loc" : {
              "description" : "Entity location",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "enforceSecureCommunication" : {
              "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
              "type" : "boolean"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            },
            "clientValidatorRef" : {
              "description" : "A reference to validation authority",
              "type" : "string"
            },
            "privateApp" : {
              "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
              "type" : "boolean"
            },
            "paths" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Matching paths on request"
            },
            "domain" : {
              "description" : "The domain on which the service is available.",
              "type" : "string"
            },
            "name" : {
              "description" : "The name of your service. Only for debug and human readability purposes",
              "type" : "string"
            },
            "transformerConfig" : {
              "description" : "Transformer plugins configuration",
              "type" : "object"
            },
            "subdomain" : {
              "description" : "The subdomain on which the service is available",
              "type" : "string"
            },
            "maintenanceMode" : {
              "description" : "Display a maintainance page when a user try to use the service",
              "type" : "boolean"
            },
            "secComHeaders" : {
              "description" : "Header names for sec. com. protocol",
              "type" : "object",
              "properties" : {
                "stateResponseName" : {
                  "description" : "Header name where the validation token respondewill be",
                  "type" : "string"
                },
                "claimRequestName" : {
                  "description" : "Header name where the info token will be",
                  "type" : "string"
                },
                "stateRequestName" : {
                  "description" : "Header name where the validation token will be",
                  "type" : "string"
                }
              }
            },
            "handleLegacyDomain" : {
              "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
              "type" : "boolean"
            },
            "logAnalyticsOnServer" : {
              "description" : "Log analytics event on the server",
              "type" : "boolean"
            },
            "strictlyPrivate" : {
              "description" : "When strictly private, private app session will not pass apikey filters",
              "type" : "boolean"
            },
            "description" : {
              "description" : "Entity description",
              "type" : "string"
            },
            "buildMode" : {
              "description" : "Display a construction page when a user try to use the service",
              "type" : "boolean"
            },
            "targets" : {
              "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "predicate" : {
                    "description" : "Predicate to choose this target",
                    "type" : "object",
                    "properties" : {
                      "rack" : {
                        "description" : "Rack name",
                        "type" : "string"
                      },
                      "provider" : {
                        "description" : "Provider name",
                        "type" : "string"
                      },
                      "dataCenter" : {
                        "description" : "Datacenter name",
                        "type" : "string"
                      },
                      "zone" : {
                        "description" : "Zone name",
                        "type" : "string"
                      },
                      "positions" : {
                        "description" : "Possible positions",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "latitude" : {
                              "format" : "double",
                              "description" : "Latitude of the position",
                              "type" : "number"
                            },
                            "longitude" : {
                              "format" : "double",
                              "description" : "Longitude of the position",
                              "type" : "number"
                            },
                            "radius" : {
                              "format" : "double",
                              "description" : "Radius of the circle in meters",
                              "type" : "number"
                            }
                          }
                        }
                      },
                      "type" : {
                        "description" : "the kind of predicate",
                        "type" : "string",
                        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                      },
                      "region" : {
                        "description" : "Region name",
                        "type" : "string"
                      },
                      "dc" : {
                        "description" : "DC name",
                        "type" : "string"
                      }
                    }
                  },
                  "metadata" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Metadata for this target"
                  },
                  "protocol" : {
                    "description" : "Protocol for the target",
                    "type" : "string"
                  },
                  "scheme" : {
                    "description" : "The protocol used for communication. Can be http or https",
                    "type" : "string"
                  },
                  "mtlsConfig" : {
                    "description" : "TLS settings to contact this target",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "host" : {
                    "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                    "type" : "string"
                  },
                  "ipAddress" : {
                    "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                    "type" : "string"
                  },
                  "weight" : {
                    "format" : "int32",
                    "description" : "The weight of the target when choosing",
                    "type" : "integer"
                  },
                  "tags" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Tags for this target"
                  }
                }
              }
            },
            "enabled" : {
              "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
              "type" : "boolean"
            },
            "additionalHeadersOut" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Specify headers that will be added to each client response"
            },
            "sendStateChallenge" : {
              "description" : "Should otoroshi send challenge token",
              "type" : "boolean"
            },
            "root" : {
              "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
              "type" : "string"
            },
            "additionalHeaders" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Specify headers that will be added to each client request. Useful to add authentication"
            },
            "issueCertCA" : {
              "description" : "CA for cert issuance",
              "type" : "string"
            },
            "ipFiltering" : {
              "description" : "Ip filtering settings",
              "type" : "object",
              "properties" : {
                "whitelist" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Whitelisted IP addresses"
                },
                "blacklist" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Blacklisted IP addresses"
                }
              }
            },
            "redirection" : {
              "description" : "Redirection settings",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Whether or not redirection is enabled",
                  "type" : "boolean"
                },
                "code" : {
                  "format" : "int32",
                  "description" : "The http redirect code",
                  "type" : "integer"
                },
                "to" : {
                  "description" : "The location for redirection",
                  "type" : "string"
                }
              }
            },
            "redirectToLocal" : {
              "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
              "type" : "boolean"
            },
            "headersVerification" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Specify headers that will be verified after routing."
            },
            "useAkkaHttpClient" : {
              "description" : "Use akka http client for this service",
              "type" : "boolean"
            },
            "securityExcludedPatterns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Exclude some paths"
            },
            "authConfigRef" : {
              "description" : "A reference to a global auth module config",
              "type" : "string"
            },
            "preRouting" : {
              "description" : "Pre routing plugin settings",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "pre-routing plugins enabled",
                  "type" : "boolean"
                },
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Excluded paths"
                },
                "refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Enabled plugins"
                },
                "config" : {
                  "description" : "pre-routing plugins configuration",
                  "type" : "object"
                }
              }
            },
            "canary" : {
              "description" : "Canary settings",
              "type" : "object",
              "properties" : {
                "root" : {
                  "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                  "type" : "string"
                },
                "targets" : {
                  "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "predicate" : {
                        "description" : "Predicate to choose this target",
                        "type" : "object",
                        "properties" : {
                          "rack" : {
                            "description" : "Rack name",
                            "type" : "string"
                          },
                          "provider" : {
                            "description" : "Provider name",
                            "type" : "string"
                          },
                          "dataCenter" : {
                            "description" : "Datacenter name",
                            "type" : "string"
                          },
                          "zone" : {
                            "description" : "Zone name",
                            "type" : "string"
                          },
                          "positions" : {
                            "description" : "Possible positions",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "latitude" : {
                                  "format" : "double",
                                  "description" : "Latitude of the position",
                                  "type" : "number"
                                },
                                "longitude" : {
                                  "format" : "double",
                                  "description" : "Longitude of the position",
                                  "type" : "number"
                                },
                                "radius" : {
                                  "format" : "double",
                                  "description" : "Radius of the circle in meters",
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "description" : "the kind of predicate",
                            "type" : "string",
                            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                          },
                          "region" : {
                            "description" : "Region name",
                            "type" : "string"
                          },
                          "dc" : {
                            "description" : "DC name",
                            "type" : "string"
                          }
                        }
                      },
                      "metadata" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Metadata for this target"
                      },
                      "protocol" : {
                        "description" : "Protocol for the target",
                        "type" : "string"
                      },
                      "scheme" : {
                        "description" : "The protocol used for communication. Can be http or https",
                        "type" : "string"
                      },
                      "mtlsConfig" : {
                        "description" : "TLS settings to contact this target",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "host" : {
                        "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                        "type" : "string"
                      },
                      "ipAddress" : {
                        "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                        "type" : "string"
                      },
                      "weight" : {
                        "format" : "int32",
                        "description" : "The weight of the target when choosing",
                        "type" : "integer"
                      },
                      "tags" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Tags for this target"
                      }
                    }
                  }
                },
                "enabled" : {
                  "description" : "Use canary mode for this service",
                  "type" : "boolean"
                },
                "traffic" : {
                  "format" : "double",
                  "description" : "Ratio of traffic that will be sent to canary targets.",
                  "type" : "number"
                }
              }
            },
            "secComExcludedPatterns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "URI patterns excluded from secured communications"
            },
            "xForwardedHeaders" : {
              "description" : "Send X-Forwarded-* headers",
              "type" : "boolean"
            },
            "apiKeyConstraints" : {
              "description" : "Routing and extraction constraints for the apikeyh",
              "type" : "object",
              "properties" : {
                "routing" : {
                  "description" : "Routing settings for this apikey",
                  "type" : "object",
                  "properties" : {
                    "oneTagIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "outing if one tag presents in apikey"
                    },
                    "noneMetaKeysIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if none meta keys presents in apikey"
                    },
                    "oneMetaIn" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Routing if one meta presents in apikey"
                    },
                    "oneMetaKeyIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if one meta key presents in apikey"
                    },
                    "allMetaKeysIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if all meta keys presents in apikey"
                    },
                    "noneTagIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if none tags presents in apikey"
                    },
                    "allTagsIn" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Routing if all tags presents in apikey"
                    },
                    "allMetaIn" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Routing if all meta presents in apikey"
                    },
                    "noneMetaIn" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Routing if none meta presents in apikey"
                    }
                  }
                },
                "customHeadersAuth" : {
                  "description" : "Settings to extract apikey from custom headers",
                  "type" : "object",
                  "properties" : {
                    "clientSecretHeaderName" : {
                      "description" : "Header name to find client_secret",
                      "type" : "string"
                    },
                    "enabled" : {
                      "description" : "Constraint enabled",
                      "type" : "boolean"
                    },
                    "clientIdHeaderName" : {
                      "description" : "Header name to find client_id",
                      "type" : "string"
                    }
                  }
                },
                "basicAuth" : {
                  "description" : "Settings to extract basic auth style apikey",
                  "type" : "object",
                  "properties" : {
                    "headerName" : {
                      "description" : "Header name to get client_id:client_secret base64 encoded",
                      "type" : "string"
                    },
                    "queryName" : {
                      "description" : "Query param name to get client_id:client_secret base64 encoded",
                      "type" : "string"
                    },
                    "enabled" : {
                      "description" : "Constraint enabled",
                      "type" : "boolean"
                    }
                  }
                },
                "jwtAuth" : {
                  "description" : "Settings to extract apikey from jwt token",
                  "type" : "object",
                  "properties" : {
                    "headerName" : {
                      "description" : "Header name to extract jwt token",
                      "type" : "string"
                    },
                    "maxJwtLifespanSecs" : {
                      "format" : "int64",
                      "description" : "Check if token does not have a long lifespan",
                      "type" : "integer"
                    },
                    "keyPairSigned" : {
                      "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                      "type" : "boolean"
                    },
                    "secretSigned" : {
                      "description" : "Jwt token signed with the client_secret",
                      "type" : "boolean"
                    },
                    "queryName" : {
                      "description" : "Query param name to extract jwt token",
                      "type" : "string"
                    },
                    "enabled" : {
                      "description" : "Constraint enabled",
                      "type" : "boolean"
                    },
                    "cookieName" : {
                      "description" : "Cookie name to extract jwt token",
                      "type" : "string"
                    },
                    "includeRequestAttributes" : {
                      "description" : "Jwt token should include verb and path",
                      "type" : "boolean"
                    }
                  }
                },
                "clientIdAuth" : {
                  "description" : "Settings to extract client_id only apikey",
                  "type" : "object",
                  "properties" : {
                    "headerName" : {
                      "description" : "Header name to find client_id",
                      "type" : "string"
                    },
                    "queryName" : {
                      "description" : "Query param name to find client_id",
                      "type" : "string"
                    },
                    "enabled" : {
                      "description" : "Constraint enabled",
                      "type" : "boolean"
                    }
                  }
                }
              }
            },
            "sendInfoToken" : {
              "description" : "Should otoroshi send info token",
              "type" : "boolean"
            },
            "issueCert" : {
              "description" : "Flag to automatically issue a cert for this service",
              "type" : "boolean"
            },
            "groups" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
            },
            "privatePatterns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
            },
            "gzip" : {
              "description" : "GZIP settings",
              "type" : "object",
              "properties" : {
                "compressionLevel" : {
                  "format" : "int32",
                  "description" : "Compression level (0 - 9)",
                  "type" : "integer"
                },
                "blackList" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "blocklisted content types"
                },
                "chunkedThreshold" : {
                  "format" : "int32",
                  "description" : "Chunk size",
                  "type" : "integer"
                },
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Excluded paths"
                },
                "bufferSize" : {
                  "format" : "int32",
                  "description" : "Buffer size in bytes",
                  "type" : "integer"
                },
                "whiteList" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "allow listed content types"
                },
                "enabled" : {
                  "description" : "Gzip enabled",
                  "type" : "boolean"
                }
              }
            },
            "clientConfig" : {
              "description" : "Http client settings",
              "type" : "object",
              "properties" : {
                "sampleInterval" : {
                  "format" : "int64",
                  "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                  "type" : "integer"
                },
                "backoffFactor" : {
                  "format" : "int64",
                  "description" : "Specify the factor to multiply the delay for each retry",
                  "type" : "integer"
                },
                "customTimeouts" : {
                  "description" : "Custom timeouts per path",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "path" : {
                        "description" : "path on which this configuration works",
                        "type" : "string"
                      },
                      "callAndStreamTimeout" : {
                        "format" : "int64",
                        "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                        "type" : "integer"
                      },
                      "callTimeout" : {
                        "format" : "int64",
                        "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                        "type" : "integer"
                      },
                      "idleTimeout" : {
                        "format" : "int64",
                        "description" : "Timeout on idle connection",
                        "type" : "integer"
                      },
                      "globalTimeout" : {
                        "format" : "int64",
                        "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                        "type" : "integer"
                      },
                      "connectionTimeout" : {
                        "format" : "int64",
                        "description" : "Timeout at connection",
                        "type" : "integer"
                      }
                    }
                  }
                },
                "callAndStreamTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                  "type" : "integer"
                },
                "retryInitialDelay" : {
                  "format" : "int64",
                  "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                  "type" : "integer"
                },
                "callTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                  "type" : "integer"
                },
                "useCircuitBreaker" : {
                  "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
                  "type" : "boolean"
                },
                "retries" : {
                  "format" : "int32",
                  "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                  "type" : "integer"
                },
                "proxy" : {
                  "description" : "Web proxy settings for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "maxErrors" : {
                  "format" : "int32",
                  "description" : "Specify how many errors can pass before opening the circuit breaker",
                  "type" : "integer"
                },
                "idleTimeout" : {
                  "format" : "int64",
                  "description" : "Timeout on idle connection",
                  "type" : "integer"
                },
                "globalTimeout" : {
                  "format" : "int64",
                  "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                  "type" : "integer"
                },
                "cacheConnectionSettings" : {
                  "description" : "Cached connection settings",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Enable Cached connections at host tevel",
                      "type" : "boolean"
                    },
                    "queueSize" : {
                      "format" : "int32",
                      "description" : "The size for the request queue",
                      "type" : "integer"
                    }
                  }
                },
                "connectionTimeout" : {
                  "format" : "int64",
                  "description" : "Timeout at connection",
                  "type" : "integer"
                }
              }
            },
            "env" : {
              "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
              "type" : "string"
            },
            "jwtVerifier" : {
              "description" : "JWT verifiers settings",
              "oneOfConstraints" : [ {
                "required" : [ "metadata", "algoSettings", "name", "id", "source", "type", "strict", "strategy", "_loc", "desc", "tags" ]
              }, {
                "required" : [ "excludedPatterns", "algoSettings", "source", "type", "strict", "strategy", "enabled" ]
              }, {
                "required" : [ "excludedPatterns", "ids", "type", "enabled" ]
              } ],
              "type" : "object",
              "properties" : {
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Verifier excluded paths"
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Entity metadata"
                },
                "source" : {
                  "description" : "Token source",
                  "oneOfConstraints" : [ {
                    "required" : [ "name", "type" ]
                  }, {
                    "required" : [ "name", "type", "remove" ]
                  }, {
                    "required" : [ "name", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "name" : {
                      "description" : "Query param name",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of location",
                      "type" : "string",
                      "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                    },
                    "remove" : {
                      "description" : "Remove from value",
                      "type" : "string"
                    }
                  }
                },
                "type" : {
                  "description" : "the kind of verifier",
                  "type" : "string",
                  "enum" : [ "global", "local", "ref" ]
                },
                "_loc" : {
                  "description" : "Entity location",
                  "type" : "object",
                  "properties" : {
                    "teams" : {
                      "description" : "Teams of the current entity",
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      }
                    },
                    "tenant" : {
                      "description" : "Organization of the current entity",
                      "type" : "string"
                    }
                  }
                },
                "enabled" : {
                  "description" : "Verifier enabled",
                  "type" : "boolean"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Entity tags"
                },
                "algoSettings" : {
                  "description" : "Algo settings",
                  "type" : "object",
                  "properties" : {
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Http header when fetching JWKS"
                    },
                    "base64" : {
                      "description" : "The secret is base64 encoded",
                      "type" : "boolean"
                    },
                    "publicKey" : {
                      "description" : "Public key (for verification)",
                      "type" : "string"
                    },
                    "certId" : {
                      "description" : "Certificate id",
                      "type" : "string"
                    },
                    "secret" : {
                      "description" : "HMAC secret",
                      "type" : "string"
                    },
                    "type" : {
                      "description" : "the kind of algosettings",
                      "type" : "string",
                      "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                    },
                    "ttl" : {
                      "description" : "Cache ttl",
                      "type" : "number"
                    },
                    "url" : {
                      "description" : "JWKS url",
                      "type" : "string"
                    },
                    "timeout" : {
                      "description" : "Timeout when fetching JWKS",
                      "type" : "number"
                    },
                    "tlsConfig" : {
                      "description" : "TLS config",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "kty" : {
                      "description" : "Key type",
                      "type" : "string"
                    },
                    "privateKey" : {
                      "description" : "Private key (for signing)",
                      "type" : "string"
                    },
                    "proxy" : {
                      "description" : "Web proxy for http client",
                      "oneOfConstraints" : [ ],
                      "type" : "object",
                      "properties" : { }
                    },
                    "onlyExposedCerts" : {
                      "description" : "Use only exposed certs",
                      "type" : "boolean"
                    },
                    "size" : {
                      "format" : "int32",
                      "description" : "SHA function size",
                      "type" : "integer"
                    }
                  }
                },
                "name" : {
                  "description" : "Verifier name",
                  "type" : "string"
                },
                "ids" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Verifiers ids"
                },
                "id" : {
                  "description" : "Verifier id",
                  "type" : "string"
                },
                "strict" : {
                  "description" : "Strict token verification",
                  "type" : "boolean"
                },
                "strategy" : {
                  "description" : "Token strategy",
                  "oneOfConstraints" : [ {
                    "required" : [ "verificationSettings", "type", "strict", "token" ]
                  }, {
                    "required" : [ "verificationSettings", "type" ]
                  }, {
                    "required" : [ "algoSettings", "verificationSettings", "type" ]
                  }, {
                    "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                  } ],
                  "type" : "object",
                  "properties" : {
                    "verificationSettings" : {
                      "description" : "Verification settings",
                      "type" : "object",
                      "properties" : {
                        "fields" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Fields validation"
                        },
                        "arrayFields" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Fields array validation"
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of strategy",
                      "type" : "string",
                      "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                    },
                    "strict" : {
                      "description" : "If the token already exists in the request, then fail",
                      "type" : "boolean"
                    },
                    "token" : {
                      "description" : "The default token",
                      "type" : "object"
                    },
                    "algoSettings" : {
                      "description" : "Algorithm settings for re-signing token",
                      "oneOfConstraints" : [ {
                        "required" : [ "privateKey", "size", "publicKey", "type" ]
                      }, {
                        "required" : [ "size", "certId", "type" ]
                      }, {
                        "required" : [ "size", "base64", "secret", "type" ]
                      }, {
                        "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                      }, {
                        "required" : [ "onlyExposedCerts", "type" ]
                      }, {
                        "required" : [ "size", "certId", "type" ]
                      }, {
                        "required" : [ "privateKey", "size", "publicKey", "type" ]
                      } ],
                      "type" : "object",
                      "properties" : {
                        "privateKey" : {
                          "description" : "Private key (for signing)",
                          "type" : "string"
                        },
                        "size" : {
                          "format" : "int32",
                          "description" : "SHA function size",
                          "type" : "integer"
                        },
                        "publicKey" : {
                          "description" : "Public key (for verification)",
                          "type" : "string"
                        },
                        "type" : {
                          "description" : "the kind of algosettings",
                          "type" : "string",
                          "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                        },
                        "certId" : {
                          "description" : "Certificate id",
                          "type" : "string"
                        },
                        "base64" : {
                          "description" : "The secret is base64 encoded",
                          "type" : "boolean"
                        },
                        "secret" : {
                          "description" : "HMAC secret",
                          "type" : "string"
                        },
                        "kty" : {
                          "description" : "Key type",
                          "type" : "string"
                        },
                        "headers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Http header when fetching JWKS"
                        },
                        "proxy" : {
                          "description" : "Web proxy for http client",
                          "oneOfConstraints" : [ ],
                          "type" : "object",
                          "properties" : { }
                        },
                        "ttl" : {
                          "description" : "Cache ttl",
                          "type" : "number"
                        },
                        "url" : {
                          "description" : "JWKS url",
                          "type" : "string"
                        },
                        "timeout" : {
                          "description" : "Timeout when fetching JWKS",
                          "type" : "number"
                        },
                        "tlsConfig" : {
                          "description" : "TLS config",
                          "type" : "object",
                          "properties" : {
                            "mtls" : {
                              "description" : "Enabled",
                              "type" : "boolean"
                            },
                            "loose" : {
                              "description" : "Loose verification",
                              "type" : "boolean"
                            },
                            "trustAll" : {
                              "description" : "Trust any certificate",
                              "type" : "boolean"
                            },
                            "trustedCerts" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            },
                            "certs" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            }
                          }
                        },
                        "onlyExposedCerts" : {
                          "description" : "Use only exposed certs",
                          "type" : "boolean"
                        }
                      }
                    },
                    "transformSettings" : {
                      "description" : "Transformation settings",
                      "type" : "object",
                      "properties" : {
                        "mappingSettings" : {
                          "description" : "Token mapping settings",
                          "type" : "object",
                          "properties" : {
                            "map" : {
                              "type" : "object",
                              "additionalProperties" : {
                                "type" : "string"
                              },
                              "description" : "Change values"
                            },
                            "values" : {
                              "description" : "Add values",
                              "type" : "object"
                            },
                            "remove" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Remove some token claims"
                            }
                          }
                        },
                        "location" : {
                          "description" : "Location of the token",
                          "type" : "object",
                          "properties" : {
                            "name" : {
                              "description" : "Query param name",
                              "type" : "string"
                            },
                            "type" : {
                              "description" : "the kind of location",
                              "type" : "string",
                              "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                            },
                            "remove" : {
                              "description" : "Remove from value",
                              "type" : "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "desc" : {
                  "description" : "Verifier description",
                  "type" : "string"
                }
              }
            },
            "allowHttp10" : {
              "description" : "Allow HTTP/1.0 requests",
              "type" : "boolean"
            },
            "publicPatterns" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
            },
            "secComAlgoChallengeBackToOto" : {
              "description" : "Algorithm to verify challenge token coming from the backend",
              "oneOfConstraints" : [ {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "size", "base64", "secret", "type" ]
              }, {
                "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
              }, {
                "required" : [ "onlyExposedCerts", "type" ]
              }, {
                "required" : [ "size", "certId", "type" ]
              }, {
                "required" : [ "privateKey", "size", "publicKey", "type" ]
              } ],
              "type" : "object",
              "properties" : {
                "privateKey" : {
                  "description" : "Private key (for signing)",
                  "type" : "string"
                },
                "size" : {
                  "format" : "int32",
                  "description" : "SHA function size",
                  "type" : "integer"
                },
                "publicKey" : {
                  "description" : "Public key (for verification)",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of algosettings",
                  "type" : "string",
                  "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                },
                "certId" : {
                  "description" : "Certificate id",
                  "type" : "string"
                },
                "base64" : {
                  "description" : "The secret is base64 encoded",
                  "type" : "boolean"
                },
                "secret" : {
                  "description" : "HMAC secret",
                  "type" : "string"
                },
                "kty" : {
                  "description" : "Key type",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Http header when fetching JWKS"
                },
                "proxy" : {
                  "description" : "Web proxy for http client",
                  "oneOfConstraints" : [ ],
                  "type" : "object",
                  "properties" : { }
                },
                "ttl" : {
                  "description" : "Cache ttl",
                  "type" : "number"
                },
                "url" : {
                  "description" : "JWKS url",
                  "type" : "string"
                },
                "timeout" : {
                  "description" : "Timeout when fetching JWKS",
                  "type" : "number"
                },
                "tlsConfig" : {
                  "description" : "TLS config",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "onlyExposedCerts" : {
                  "description" : "Use only exposed certs",
                  "type" : "boolean"
                }
              }
            },
            "localScheme" : {
              "description" : "The scheme used localy, mainly http",
              "type" : "string"
            },
            "healthCheck" : {
              "description" : "Healthcheck settings",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                  "type" : "boolean"
                },
                "url" : {
                  "description" : "The URL to check",
                  "type" : "string"
                }
              }
            },
            "matchingHeaders" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
            },
            "overrideHost" : {
              "description" : "Host header will be overriden with Host of the target",
              "type" : "boolean"
            },
            "secComUseSameAlgo" : {
              "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
              "type" : "boolean"
            },
            "accessValidator" : {
              "description" : "Service access validatiors",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Access validator plugins enabled",
                  "type" : "boolean"
                },
                "excludedPatterns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Excluded paths"
                },
                "refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Enabled plugins"
                },
                "config" : {
                  "description" : "Access validator plugins configuration",
                  "type" : "object"
                }
              }
            }
          }
        }
      },
      "certificates" : {
        "description" : "template for entities certificates",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "certType" : {
              "type" : "string",
              "description" : "the kind of certificate",
              "enum" : [ "client", "ca", "letsEncrypt", "keypair", "selfSigned", "certificate" ]
            },
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Entity metadata"
            },
            "subject" : {
              "description" : "Certificate subject",
              "type" : "string"
            },
            "letsEncrypt" : {
              "description" : "Let's encrypt (ACME) generated",
              "type" : "boolean"
            },
            "keypair" : {
              "description" : "Is cert used for its keypair only ?",
              "type" : "boolean"
            },
            "description" : {
              "description" : "Entity description",
              "type" : "string"
            },
            "revoked" : {
              "description" : "Certificate is revoked",
              "type" : "boolean"
            },
            "valid" : {
              "description" : "Is cert valid",
              "type" : "boolean"
            },
            "password" : {
              "description" : "Certificate password",
              "type" : "string"
            },
            "autoRenew" : {
              "description" : "Auto renew cert",
              "type" : "boolean"
            },
            "exposed" : {
              "description" : "Is the cert exposed (public key exposed in jwks.json)",
              "type" : "boolean"
            },
            "client" : {
              "description" : "Is cert a client cert ?",
              "type" : "boolean"
            },
            "from" : {
              "description" : "Start date",
              "type" : "number"
            },
            "selfSigned" : {
              "description" : "Is cert self signed",
              "type" : "boolean"
            },
            "id" : {
              "description" : "Entity id",
              "type" : "string"
            },
            "ca" : {
              "description" : "Is cert a CA ?",
              "type" : "boolean"
            },
            "chain" : {
              "description" : "Certicates chain (PEM encoded)",
              "type" : "string"
            },
            "sans" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Certificate SANs"
            },
            "_loc" : {
              "description" : "Entity location",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            },
            "privateKey" : {
              "description" : "Certificate private key (PEM encoded)",
              "type" : "string"
            },
            "caRef" : {
              "description" : "Reference to the CA (if any)",
              "type" : "string"
            },
            "domain" : {
              "description" : "Certificate domain",
              "type" : "string"
            },
            "name" : {
              "description" : "Entity name",
              "type" : "string"
            },
            "to" : {
              "description" : "Stop date",
              "type" : "number"
            }
          }
        }
      },
      "simpleAdmins" : {
        "description" : "template for entities simpleAdmins",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "createdAt" : {
              "description" : "User creation date",
              "type" : "number"
            },
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Entity metadata"
            },
            "password" : {
              "description" : "User password (bcrypt hashed)",
              "type" : "string"
            },
            "rights" : {
              "description" : "User rights",
              "type" : "object",
              "properties" : {
                "rights" : {
                  "description" : "Access rights of a user",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "teams" : {
                        "description" : "Access rights on teams",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "canRead" : {
                              "description" : "Can this access right read data",
                              "type" : "boolean"
                            },
                            "value" : {
                              "description" : "Access pattern",
                              "type" : "string"
                            },
                            "canWrite" : {
                              "description" : "Can this access right write data",
                              "type" : "boolean"
                            }
                          }
                        }
                      },
                      "tenant" : {
                        "description" : "Access rights on organizations",
                        "type" : "object",
                        "properties" : {
                          "canWrite" : {
                            "description" : "Can this access right write data",
                            "type" : "boolean"
                          },
                          "value" : {
                            "description" : "Access pattern",
                            "type" : "string"
                          },
                          "canRead" : {
                            "description" : "Can this access right read data",
                            "type" : "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "typ" : {
              "description" : "Admin kind",
              "type" : "string",
              "enum" : [ "SIMPLE", "WEBAUTHN" ]
            },
            "label" : {
              "description" : "User label",
              "type" : "string"
            },
            "type" : {
              "description" : "the kind of admin",
              "type" : "string",
              "enum" : [ "simple", "webauthn" ]
            },
            "_loc" : {
              "description" : "Entity location",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "username" : {
              "description" : "User username",
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            }
          }
        }
      },
      "tcpServices" : {
        "description" : "template for entities tcpServices",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Entity metadata"
            },
            "description" : {
              "description" : "Entity description",
              "type" : "string"
            },
            "rules" : {
              "description" : "Routing rules",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "domain" : {
                    "description" : "match on SNI domain",
                    "type" : "string"
                  },
                  "targets" : {
                    "description" : "TCP targets",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "port" : {
                          "format" : "int32",
                          "description" : "Target port",
                          "type" : "integer"
                        },
                        "ip" : {
                          "description" : "Target ip",
                          "type" : "string"
                        },
                        "host" : {
                          "description" : "Target host",
                          "type" : "string"
                        },
                        "tls" : {
                          "description" : "Use tls",
                          "type" : "boolean"
                        }
                      }
                    }
                  }
                }
              }
            },
            "interface" : {
              "description" : "Network interface",
              "type" : "string"
            },
            "_loc" : {
              "description" : "Entity location",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "enabled" : {
              "description" : "Service enabled",
              "type" : "boolean"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            },
            "sni" : {
              "description" : "SNI settings",
              "type" : "object",
              "properties" : {
                "forwardIfNoMatch" : {
                  "description" : "",
                  "type" : "boolean"
                },
                "enabled" : {
                  "description" : "SNI extraction enabled",
                  "type" : "boolean"
                },
                "forwardsTo" : {
                  "description" : "forwards call to",
                  "type" : "object",
                  "properties" : {
                    "port" : {
                      "format" : "int32",
                      "description" : "Target port",
                      "type" : "integer"
                    },
                    "ip" : {
                      "description" : "Target ip",
                      "type" : "string"
                    },
                    "host" : {
                      "description" : "Target host",
                      "type" : "string"
                    },
                    "tls" : {
                      "description" : "Use tls",
                      "type" : "boolean"
                    }
                  }
                }
              }
            },
            "port" : {
              "format" : "int32",
              "description" : "network port",
              "type" : "integer"
            },
            "name" : {
              "description" : "Entity name",
              "type" : "string"
            },
            "tls" : {
              "description" : "TLS mode",
              "type" : "string",
              "enum" : [ "Disabled", "Enabled", "PassThrough" ]
            },
            "id" : {
              "description" : "Entity id",
              "type" : "string"
            },
            "clientAuth" : {
              "description" : "Client authentication mode",
              "type" : "string",
              "enum" : [ "Need", "None", "Want" ]
            }
          }
        }
      },
      "dataExporters" : {
        "description" : "template for entities dataExporters",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Metadata"
            },
            "type" : {
              "description" : "Type of data exporter",
              "type" : "string",
              "enum" : [ "kafka", "pulsar", "elastic", "webhook", "file", "mailer", "custom", "none", "console", "metrics" ]
            },
            "_loc" : {
              "description" : "location",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "enabled" : {
              "description" : "Boolean",
              "type" : "boolean"
            },
            "groupDuration" : {
              "description" : "duration",
              "type" : "number"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            },
            "jsonWorkers" : {
              "format" : "int32",
              "description" : "nb workers",
              "type" : "integer"
            },
            "name" : {
              "description" : "Name",
              "type" : "string"
            },
            "groupSize" : {
              "format" : "int32",
              "description" : "Group size",
              "type" : "integer"
            },
            "id" : {
              "description" : "Id",
              "type" : "string"
            },
            "projection" : {
              "description" : "projection",
              "type" : "object"
            },
            "config" : {
              "description" : "Data Exporter config",
              "type" : "object",
              "properties" : {
                "clusterUri" : {
                  "description" : "Cluster URL",
                  "type" : "string"
                },
                "apiKey" : {
                  "description" : "Sendgrid apikey",
                  "type" : "string"
                },
                "indexSettings" : {
                  "description" : "Indexation settings",
                  "type" : "object",
                  "properties" : {
                    "clientSide" : {
                      "description" : "Enable index splitting on client side",
                      "type" : "boolean"
                    },
                    "interval" : {
                      "description" : "Index splitting interval",
                      "type" : "object",
                      "properties" : { }
                    }
                  }
                },
                "mtlsConfig" : {
                  "description" : "TLS config when calling webhook",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "tlsTrustCertsFilePath" : {
                  "description" : "Trusted cert path",
                  "type" : "string"
                },
                "apiKeyPrivate" : {
                  "description" : "Private key",
                  "type" : "string"
                },
                "type" : {
                  "description" : "the kind of mailer",
                  "type" : "string",
                  "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
                },
                "hostValidation" : {
                  "description" : "Enabled TLS hostname validation",
                  "type" : "boolean"
                },
                "path" : {
                  "description" : "File path",
                  "type" : "string"
                },
                "password" : {
                  "description" : "Elastic password",
                  "type" : "string"
                },
                "ref" : {
                  "description" : "Script id",
                  "type" : "string"
                },
                "servers" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "URLs of the kafka servers"
                },
                "truststore" : {
                  "description" : "Optional truststore",
                  "type" : "string"
                },
                "keystore" : {
                  "description" : "Optional keystore",
                  "type" : "string"
                },
                "sendEvents" : {
                  "description" : "Send events to it, or just connect",
                  "type" : "boolean"
                },
                "applyTemplate" : {
                  "description" : "Enable template creation/update",
                  "type" : "boolean"
                },
                "tenant" : {
                  "description" : "Pulsar tenant",
                  "type" : "string"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Sender headers"
                },
                "index" : {
                  "description" : "Index name",
                  "type" : "string"
                },
                "maxFileSize" : {
                  "format" : "int32",
                  "description" : "Max file size in bytes",
                  "type" : "integer"
                },
                "uri" : {
                  "description" : "Pulsar cluster url",
                  "type" : "string"
                },
                "version" : {
                  "description" : "Version of Elasticsearch",
                  "type" : "string"
                },
                "url" : {
                  "description" : "Sender URL",
                  "type" : "string"
                },
                "labels" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Exposed labels"
                },
                "eu" : {
                  "description" : "European tenant",
                  "type" : "boolean"
                },
                "keyPass" : {
                  "description" : "Optional keypass",
                  "type" : "string"
                },
                "domain" : {
                  "description" : "Mailgun domain",
                  "type" : "string"
                },
                "namespace" : {
                  "description" : "Pulsar namespace",
                  "type" : "string"
                },
                "topic" : {
                  "description" : "Pulsar topic",
                  "type" : "string"
                },
                "apiKeyPublic" : {
                  "description" : "Public key",
                  "type" : "string"
                },
                "to" : {
                  "description" : "Destination email address",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Destination name",
                        "type" : "string"
                      },
                      "email" : {
                        "description" : "Email address",
                        "type" : "string"
                      }
                    }
                  }
                },
                "user" : {
                  "description" : "Elasticsearch user",
                  "type" : "string"
                },
                "config" : {
                  "description" : "Script config",
                  "type" : "object"
                }
              }
            },
            "filtering" : {
              "description" : "filtering",
              "type" : "object",
              "properties" : {
                "include" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  },
                  "description" : "Exclude the events matching one of those filters"
                },
                "exclude" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object"
                  },
                  "description" : "Include the events matching one of those filters"
                }
              }
            },
            "sendWorkers" : {
              "format" : "int32",
              "description" : "send workers",
              "type" : "integer"
            },
            "desc" : {
              "description" : "Description",
              "type" : "string"
            },
            "bufferSize" : {
              "format" : "int32",
              "description" : "buffer size",
              "type" : "integer"
            }
          }
        }
      },
      "scripts" : {
        "description" : "template for entities scripts",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Entity metadata"
            },
            "code" : {
              "description" : "The code of the script",
              "type" : "string"
            },
            "name" : {
              "description" : "The name of the script",
              "type" : "string"
            },
            "id" : {
              "description" : "The id of the script",
              "type" : "string"
            },
            "type" : {
              "description" : "Plugin kind",
              "type" : "string",
              "enum" : [ "app", "transformer", "validator", "preroute", "sink", "listener", "job", "exporter" ]
            },
            "_loc" : {
              "description" : "Entity location",
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Teams of the current entity",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "tenant" : {
                  "description" : "Organization of the current entity",
                  "type" : "string"
                }
              }
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Entity tags"
            },
            "desc" : {
              "description" : "The description of the script",
              "type" : "string"
            }
          }
        }
      }
    }
  },
  "otoroshi.models.Canary" : {
    "description" : "Settings for canary routing",
    "type" : "object",
    "properties" : {
      "root" : {
        "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
        "type" : "string"
      },
      "targets" : {
        "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "predicate" : {
              "description" : "Predicate to choose this target",
              "type" : "object",
              "properties" : {
                "rack" : {
                  "description" : "Rack name",
                  "type" : "string"
                },
                "provider" : {
                  "description" : "Provider name",
                  "type" : "string"
                },
                "dataCenter" : {
                  "description" : "Datacenter name",
                  "type" : "string"
                },
                "zone" : {
                  "description" : "Zone name",
                  "type" : "string"
                },
                "positions" : {
                  "description" : "Possible positions",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "latitude" : {
                        "format" : "double",
                        "description" : "Latitude of the position",
                        "type" : "number"
                      },
                      "longitude" : {
                        "format" : "double",
                        "description" : "Longitude of the position",
                        "type" : "number"
                      },
                      "radius" : {
                        "format" : "double",
                        "description" : "Radius of the circle in meters",
                        "type" : "number"
                      }
                    }
                  }
                },
                "type" : {
                  "description" : "the kind of predicate",
                  "type" : "string",
                  "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                },
                "region" : {
                  "description" : "Region name",
                  "type" : "string"
                },
                "dc" : {
                  "description" : "DC name",
                  "type" : "string"
                }
              }
            },
            "metadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Metadata for this target"
            },
            "protocol" : {
              "description" : "Protocol for the target",
              "type" : "string"
            },
            "scheme" : {
              "description" : "The protocol used for communication. Can be http or https",
              "type" : "string"
            },
            "mtlsConfig" : {
              "description" : "TLS settings to contact this target",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "host" : {
              "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
              "type" : "string"
            },
            "ipAddress" : {
              "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
              "type" : "string"
            },
            "weight" : {
              "format" : "int32",
              "description" : "The weight of the target when choosing",
              "type" : "integer"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Tags for this target"
            }
          }
        }
      },
      "enabled" : {
        "description" : "Use canary mode for this service",
        "type" : "boolean"
      },
      "traffic" : {
        "format" : "double",
        "description" : "Ratio of traffic that will be sent to canary targets.",
        "type" : "number"
      }
    }
  },
  "otoroshi.next.models.NgRouteDomainAndPathWrapper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "path" : {
        "description" : "The current of the route",
        "type" : "string"
      },
      "route" : {
        "description" : "The current route",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata of the route"
          },
          "backend_ref" : {
            "description" : "The backend id of the route (if one)",
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The groups of the route"
          },
          "description" : {
            "description" : "The description of the route",
            "type" : "string"
          },
          "_loc" : {
            "description" : "The location of the route",
            "type" : "object",
            "properties" : {
              "teams" : {
                "description" : "Teams of the current entity",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tenant" : {
                "description" : "Organization of the current entity",
                "type" : "string"
              }
            }
          },
          "enabled" : {
            "description" : "Is the route enabled",
            "type" : "boolean"
          },
          "export_reporting" : {
            "description" : "Export the execution reporting through standard data exporter",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The tags of the route"
          },
          "debug_flow" : {
            "description" : "Enable report debugging",
            "type" : "boolean"
          },
          "name" : {
            "description" : "The name of the route",
            "type" : "string"
          },
          "backend" : {
            "description" : "The backend of the route",
            "type" : "object",
            "properties" : {
              "target_refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "List of NgStoredBackend ids"
              },
              "root" : {
                "description" : "The root path of the backend or the full rewrite path",
                "type" : "string"
              },
              "client" : {
                "description" : "Client config. of the backend",
                "type" : "object",
                "properties" : {
                  "custom_timeouts" : {
                    "description" : "Custom timeouts per path",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "connection_timeout" : {
                          "format" : "int64",
                          "description" : "Timeout at connection",
                          "type" : "integer"
                        },
                        "call_and_stream_timeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                          "type" : "integer"
                        },
                        "path" : {
                          "description" : "path on which this configuration works",
                          "type" : "string"
                        },
                        "call_timeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                          "type" : "integer"
                        },
                        "idle_timeout" : {
                          "format" : "int64",
                          "description" : "Timeout on idle connection",
                          "type" : "integer"
                        },
                        "global_timeout" : {
                          "format" : "int64",
                          "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                          "type" : "integer"
                        }
                      }
                    }
                  },
                  "global_timeout" : {
                    "format" : "int64",
                    "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                    "type" : "integer"
                  },
                  "max_errors" : {
                    "format" : "int32",
                    "description" : "Specify how many errors can pass before opening the circuit breaker",
                    "type" : "integer"
                  },
                  "retry_initial_delay" : {
                    "format" : "int64",
                    "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                    "type" : "integer"
                  },
                  "backoff_factor" : {
                    "format" : "int64",
                    "description" : "Specify the factor to multiply the delay for each retry",
                    "type" : "integer"
                  },
                  "cache_connection_settings" : {
                    "description" : "Cached connection settings",
                    "type" : "object",
                    "properties" : {
                      "queue_size" : {
                        "format" : "int32",
                        "description" : "How much request can be queue before dropping it",
                        "type" : "integer"
                      },
                      "enabled" : {
                        "description" : "Is cached connection enabled",
                        "type" : "boolean"
                      }
                    }
                  },
                  "sample_interval" : {
                    "format" : "int64",
                    "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                    "type" : "integer"
                  },
                  "call_and_stream_timeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                    "type" : "integer"
                  },
                  "retries" : {
                    "format" : "int32",
                    "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                    "type" : "integer"
                  },
                  "proxy" : {
                    "description" : "Web proxy settings for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "call_timeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                    "type" : "integer"
                  },
                  "idle_timeout" : {
                    "format" : "int64",
                    "description" : "Timeout on idle connection",
                    "type" : "integer"
                  },
                  "connection_timeout" : {
                    "format" : "int64",
                    "description" : "Timeout at connection",
                    "type" : "integer"
                  }
                }
              },
              "health_check" : {
                "description" : "Healthcheck config og the backend",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                    "type" : "boolean"
                  },
                  "url" : {
                    "description" : "The URL to check",
                    "type" : "string"
                  }
                }
              },
              "targets" : {
                "description" : "The targets of the backend",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "predicate" : {
                      "description" : "Predicate to choose this target",
                      "type" : "object",
                      "properties" : {
                        "rack" : {
                          "description" : "Rack name",
                          "type" : "string"
                        },
                        "provider" : {
                          "description" : "Provider name",
                          "type" : "string"
                        },
                        "dataCenter" : {
                          "description" : "Datacenter name",
                          "type" : "string"
                        },
                        "zone" : {
                          "description" : "Zone name",
                          "type" : "string"
                        },
                        "positions" : {
                          "description" : "Possible positions",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "latitude" : {
                                "format" : "double",
                                "description" : "Latitude of the position",
                                "type" : "number"
                              },
                              "longitude" : {
                                "format" : "double",
                                "description" : "Longitude of the position",
                                "type" : "number"
                              },
                              "radius" : {
                                "format" : "double",
                                "description" : "Radius of the circle in meters",
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "description" : "the kind of predicate",
                          "type" : "string",
                          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                        },
                        "region" : {
                          "description" : "Region name",
                          "type" : "string"
                        },
                        "dc" : {
                          "description" : "DC name",
                          "type" : "string"
                        }
                      }
                    },
                    "protocol" : {
                      "description" : "Protocol for the target",
                      "type" : "string"
                    },
                    "hostname" : {
                      "description" : "hostname of the target",
                      "type" : "string"
                    },
                    "port" : {
                      "format" : "int32",
                      "description" : "port of the target",
                      "type" : "integer"
                    },
                    "weight" : {
                      "format" : "int32",
                      "description" : "The weight of the target when choosing",
                      "type" : "integer"
                    },
                    "tls" : {
                      "description" : "Does the target uses TLS",
                      "type" : "boolean"
                    },
                    "tls_config" : {
                      "description" : "TLS settings to contact this target",
                      "type" : "object",
                      "properties" : {
                        "enabled" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trust_all" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trusted_certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "id" : {
                      "description" : "id of the target",
                      "type" : "string"
                    },
                    "ip_address" : {
                      "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                      "type" : "string"
                    }
                  }
                }
              },
              "rewrite" : {
                "description" : "Does the backend performs a full url rewrite ?",
                "type" : "boolean"
              },
              "load_balancing" : {
                "description" : "Loadbalancing config og the backend",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                  },
                  "ratio" : {
                    "type" : "number",
                    "format" : "double"
                  }
                }
              }
            }
          },
          "id" : {
            "description" : "The ud of the route",
            "type" : "string"
          },
          "frontend" : {
            "description" : "The frontend of the route",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "the headers that will be matched"
              },
              "methods" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "the http methods that will be matched"
              },
              "query" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "the query params that will be matched"
              },
              "exact" : {
                "description" : "Match on exact path ?",
                "type" : "boolean"
              },
              "domains" : {
                "description" : "The domain and path that will be matched",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "strip_path" : {
                "description" : "Is path stripped from backend request",
                "type" : "boolean"
              }
            }
          }
        }
      },
      "domain" : {
        "description" : "The current domain of the route",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.biscuit.BiscuitToken" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.BadResponse" : {
    "description" : "Settings for a bad response return (chaos engineering)",
    "type" : "object",
    "properties" : {
      "status" : {
        "format" : "int32",
        "description" : "The HTTP status for the response",
        "type" : "integer"
      },
      "body" : {
        "description" : "The body of the HTTP response",
        "type" : "string"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The HTTP headers of the response"
      }
    }
  },
  "otoroshi.next.plugins.wrappers.RequestSinkWrapper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.CanaryMode" : {
    "description" : "Plugin for canary mode",
    "type" : "object",
    "properties" : {
      "root" : {
        "description" : "The root path for target",
        "type" : "string"
      },
      "targets" : {
        "description" : "The canary targets",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "predicate" : {
              "description" : "Predicate to choose this target",
              "type" : "object",
              "properties" : {
                "rack" : {
                  "description" : "Rack name",
                  "type" : "string"
                },
                "provider" : {
                  "description" : "Provider name",
                  "type" : "string"
                },
                "dataCenter" : {
                  "description" : "Datacenter name",
                  "type" : "string"
                },
                "zone" : {
                  "description" : "Zone name",
                  "type" : "string"
                },
                "positions" : {
                  "description" : "Possible positions",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "latitude" : {
                        "format" : "double",
                        "description" : "Latitude of the position",
                        "type" : "number"
                      },
                      "longitude" : {
                        "format" : "double",
                        "description" : "Longitude of the position",
                        "type" : "number"
                      },
                      "radius" : {
                        "format" : "double",
                        "description" : "Radius of the circle in meters",
                        "type" : "number"
                      }
                    }
                  }
                },
                "type" : {
                  "description" : "the kind of predicate",
                  "type" : "string",
                  "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                },
                "region" : {
                  "description" : "Region name",
                  "type" : "string"
                },
                "dc" : {
                  "description" : "DC name",
                  "type" : "string"
                }
              }
            },
            "protocol" : {
              "description" : "Protocol for the target",
              "type" : "string"
            },
            "hostname" : {
              "description" : "hostname of the target",
              "type" : "string"
            },
            "port" : {
              "format" : "int32",
              "description" : "port of the target",
              "type" : "integer"
            },
            "weight" : {
              "format" : "int32",
              "description" : "The weight of the target when choosing",
              "type" : "integer"
            },
            "tls" : {
              "description" : "Does the target uses TLS",
              "type" : "boolean"
            },
            "tls_config" : {
              "description" : "TLS settings to contact this target",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trust_all" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trusted_certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "id" : {
              "description" : "id of the target",
              "type" : "string"
            },
            "ip_address" : {
              "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
              "type" : "string"
            }
          }
        }
      },
      "traffic" : {
        "format" : "double",
        "description" : "Which percentage of the traffic goes to the canary target",
        "type" : "number"
      }
    }
  },
  "otoroshi.plugins.clientcert.HasClientCertMatchingApikeyValidator" : {
    "description" : "Plugin that validates client certificates",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.authcallers.BasicAuthCallerConfig" : {
    "description" : "Configuration for BasicAuthCaller",
    "type" : "object",
    "properties" : {
      "username" : {
        "description" : "Expected username",
        "type" : "string"
      },
      "password" : {
        "description" : "Expected password",
        "type" : "string"
      },
      "headerName" : {
        "description" : "Expected header name",
        "type" : "string"
      },
      "headerValueFormat" : {
        "description" : "Expected header format (to handle 'Basic ')",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.RemoveHeadersOut" : {
    "description" : "Plugin to remove headers from response",
    "type" : "object",
    "properties" : {
      "names" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Name of removed headers in response"
      }
    }
  },
  "otoroshi.env.Env" : {
    "description" : "The main otoroshi technical context containing everything to make otoroshi work",
    "type" : "object",
    "properties" : {
      "circuitBeakersHolder" : {
        "description" : "The current instance of circuit breakers holder",
        "type" : "object",
        "properties" : { }
      }
    }
  },
  "otoroshi.plugins.jwt.JwtUserExtractor" : {
    "description" : "Plugin to extract user from jwt token",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.NgRoute" : {
    "description" : "A routing primitive representing how a request is matched and where the request is forwarded",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The metadata of the route"
      },
      "backend_ref" : {
        "description" : "The backend id of the route (if one)",
        "type" : "string"
      },
      "groups" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The groups of the route"
      },
      "description" : {
        "description" : "The description of the route",
        "type" : "string"
      },
      "_loc" : {
        "description" : "The location of the route",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "enabled" : {
        "description" : "Is the route enabled",
        "type" : "boolean"
      },
      "export_reporting" : {
        "description" : "Export the execution reporting through standard data exporter",
        "type" : "boolean"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The tags of the route"
      },
      "debug_flow" : {
        "description" : "Enable report debugging",
        "type" : "boolean"
      },
      "name" : {
        "description" : "The name of the route",
        "type" : "string"
      },
      "backend" : {
        "description" : "The backend of the route",
        "type" : "object",
        "properties" : {
          "target_refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of NgStoredBackend ids"
          },
          "root" : {
            "description" : "The root path of the backend or the full rewrite path",
            "type" : "string"
          },
          "client" : {
            "description" : "Client config. of the backend",
            "type" : "object",
            "properties" : {
              "custom_timeouts" : {
                "description" : "Custom timeouts per path",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "connection_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout at connection",
                      "type" : "integer"
                    },
                    "call_and_stream_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                      "type" : "integer"
                    },
                    "path" : {
                      "description" : "path on which this configuration works",
                      "type" : "string"
                    },
                    "call_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                      "type" : "integer"
                    },
                    "idle_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout on idle connection",
                      "type" : "integer"
                    },
                    "global_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                      "type" : "integer"
                    }
                  }
                }
              },
              "global_timeout" : {
                "format" : "int64",
                "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                "type" : "integer"
              },
              "max_errors" : {
                "format" : "int32",
                "description" : "Specify how many errors can pass before opening the circuit breaker",
                "type" : "integer"
              },
              "retry_initial_delay" : {
                "format" : "int64",
                "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                "type" : "integer"
              },
              "backoff_factor" : {
                "format" : "int64",
                "description" : "Specify the factor to multiply the delay for each retry",
                "type" : "integer"
              },
              "cache_connection_settings" : {
                "description" : "Cached connection settings",
                "type" : "object",
                "properties" : {
                  "queue_size" : {
                    "format" : "int32",
                    "description" : "How much request can be queue before dropping it",
                    "type" : "integer"
                  },
                  "enabled" : {
                    "description" : "Is cached connection enabled",
                    "type" : "boolean"
                  }
                }
              },
              "sample_interval" : {
                "format" : "int64",
                "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                "type" : "integer"
              },
              "call_and_stream_timeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                "type" : "integer"
              },
              "retries" : {
                "format" : "int32",
                "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                "type" : "integer"
              },
              "proxy" : {
                "description" : "Web proxy settings for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "call_timeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                "type" : "integer"
              },
              "idle_timeout" : {
                "format" : "int64",
                "description" : "Timeout on idle connection",
                "type" : "integer"
              },
              "connection_timeout" : {
                "format" : "int64",
                "description" : "Timeout at connection",
                "type" : "integer"
              }
            }
          },
          "health_check" : {
            "description" : "Healthcheck config og the backend",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                "type" : "boolean"
              },
              "url" : {
                "description" : "The URL to check",
                "type" : "string"
              }
            }
          },
          "targets" : {
            "description" : "The targets of the backend",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "predicate" : {
                  "description" : "Predicate to choose this target",
                  "type" : "object",
                  "properties" : {
                    "rack" : {
                      "description" : "Rack name",
                      "type" : "string"
                    },
                    "provider" : {
                      "description" : "Provider name",
                      "type" : "string"
                    },
                    "dataCenter" : {
                      "description" : "Datacenter name",
                      "type" : "string"
                    },
                    "zone" : {
                      "description" : "Zone name",
                      "type" : "string"
                    },
                    "positions" : {
                      "description" : "Possible positions",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "latitude" : {
                            "format" : "double",
                            "description" : "Latitude of the position",
                            "type" : "number"
                          },
                          "longitude" : {
                            "format" : "double",
                            "description" : "Longitude of the position",
                            "type" : "number"
                          },
                          "radius" : {
                            "format" : "double",
                            "description" : "Radius of the circle in meters",
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of predicate",
                      "type" : "string",
                      "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                    },
                    "region" : {
                      "description" : "Region name",
                      "type" : "string"
                    },
                    "dc" : {
                      "description" : "DC name",
                      "type" : "string"
                    }
                  }
                },
                "protocol" : {
                  "description" : "Protocol for the target",
                  "type" : "string"
                },
                "hostname" : {
                  "description" : "hostname of the target",
                  "type" : "string"
                },
                "port" : {
                  "format" : "int32",
                  "description" : "port of the target",
                  "type" : "integer"
                },
                "weight" : {
                  "format" : "int32",
                  "description" : "The weight of the target when choosing",
                  "type" : "integer"
                },
                "tls" : {
                  "description" : "Does the target uses TLS",
                  "type" : "boolean"
                },
                "tls_config" : {
                  "description" : "TLS settings to contact this target",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trust_all" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trusted_certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "id" : {
                  "description" : "id of the target",
                  "type" : "string"
                },
                "ip_address" : {
                  "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                  "type" : "string"
                }
              }
            }
          },
          "rewrite" : {
            "description" : "Does the backend performs a full url rewrite ?",
            "type" : "boolean"
          },
          "load_balancing" : {
            "description" : "Loadbalancing config og the backend",
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
              },
              "ratio" : {
                "type" : "number",
                "format" : "double"
              }
            }
          }
        }
      },
      "id" : {
        "description" : "The ud of the route",
        "type" : "string"
      },
      "frontend" : {
        "description" : "The frontend of the route",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "the headers that will be matched"
          },
          "methods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "the http methods that will be matched"
          },
          "query" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "the query params that will be matched"
          },
          "exact" : {
            "description" : "Match on exact path ?",
            "type" : "boolean"
          },
          "domains" : {
            "description" : "The domain and path that will be matched",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "strip_path" : {
            "description" : "Is path stripped from backend request",
            "type" : "boolean"
          }
        }
      }
    }
  },
  "otoroshi.auth.SAMLSignatureAlgorithm" : {
    "description" : "Algorithm to sign SAML requests",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.ForceHttpsTraffic" : {
    "description" : "Plugin to force https",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.GlobalConfig" : {
    "description" : "The global config (dynamic) for otoroshi",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "backOfficeAuthRef" : {
        "description" : "Id of the auth module used for otoroshi-ui login",
        "type" : "string"
      },
      "plugins" : {
        "description" : "global plugins settings",
        "type" : "object",
        "properties" : {
          "config" : {
            "description" : "Plugins configuration",
            "type" : "object"
          },
          "enabled" : {
            "description" : "Plugins enabled",
            "type" : "boolean"
          },
          "excluded" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          }
        }
      },
      "elasticReadsConfig" : {
        "description" : "Config. for elastic reads",
        "type" : "object",
        "properties" : {
          "clusterUri" : {
            "description" : "Cluster URL",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additionnal headers in the http request"
          },
          "password" : {
            "description" : "Elastic password",
            "type" : "string"
          },
          "indexSettings" : {
            "description" : "Indexation settings",
            "type" : "object",
            "properties" : {
              "clientSide" : {
                "description" : "Enable index splitting on client side",
                "type" : "boolean"
              },
              "interval" : {
                "description" : "Index splitting interval",
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "mtlsConfig" : {
            "description" : "TLS settings for the http client",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "index" : {
            "description" : "Index name",
            "type" : "string"
          },
          "type" : {
            "description" : "Object type",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "applyTemplate" : {
            "description" : "Enable template creation/update",
            "type" : "boolean"
          },
          "version" : {
            "description" : "Version of Elasticsearch",
            "type" : "string"
          },
          "user" : {
            "description" : "Elasticsearch user",
            "type" : "string"
          }
        }
      },
      "logAnalyticsOnServer" : {
        "description" : "Log analytics event on the server",
        "type" : "boolean"
      },
      "tlsSettings" : {
        "description" : "TLS settings",
        "type" : "object",
        "properties" : {
          "randomIfNotFound" : {
            "description" : "Use a random one",
            "type" : "boolean"
          },
          "trustedCAsServer" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List for CAs trusted by otoroshi when performing TLS termination"
          },
          "includeJdkCaClient" : {
            "description" : "Use known JDK CAs to build trust when performing request from otoroshi to backends",
            "type" : "boolean"
          },
          "defaultDomain" : {
            "description" : "Default domain to choose if not found from current certificates",
            "type" : "string"
          },
          "includeJdkCaServer" : {
            "description" : "Use known JDK CAs to build trust for incoming request",
            "type" : "boolean"
          }
        }
      },
      "geolocationSettings" : {
        "description" : "Settings for geolocation extraction",
        "oneOfConstraints" : [ {
          "required" : [ "apikey", "type", "enabled", "timeout" ]
        }, {
          "required" : [ "path", "type", "enabled" ]
        }, {
          "required" : [ "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "apikey" : {
            "description" : "IpStack apikey",
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "none" ]
          },
          "enabled" : {
            "description" : "Geolocation using maxmind db enabled",
            "type" : "boolean"
          },
          "timeout" : {
            "format" : "int64",
            "description" : "API call timeout",
            "type" : "integer"
          },
          "path" : {
            "description" : "Maxmlind db file path",
            "type" : "string"
          }
        }
      },
      "autoCert" : {
        "description" : "Auto certs settings",
        "type" : "object",
        "properties" : {
          "caRef" : {
            "description" : "Generate cert from the following CA",
            "type" : "string"
          },
          "allowed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "allowed domains"
          },
          "replyNicely" : {
            "description" : "Reply TLS error with an auto generated certificate for the domain",
            "type" : "boolean"
          },
          "notAllowed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "not allowed domains"
          },
          "enabled" : {
            "description" : "Enable auto cert",
            "type" : "boolean"
          }
        }
      },
      "endlessIpAddresses" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros"
      },
      "streamEntityOnly" : {
        "description" : "HTTP will be streamed only. Doesn't work with old browsers",
        "type" : "boolean"
      },
      "alertsEmails" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Email addresses that will receive all Otoroshi alert events"
      },
      "middleFingers" : {
        "description" : "Use middle finger emoji as a response character for endless HTTP responses",
        "type" : "boolean"
      },
      "alertsWebhooks" : {
        "description" : "Webhook that will receive all Otoroshi alert events",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Headers to authorize the call or whatever"
            },
            "mtlsConfig" : {
              "description" : "TLS config when calling webhook",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "type" : {
              "description" : "the kind of exporter",
              "type" : "string",
              "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
            },
            "url" : {
              "description" : "The URL where events are posted",
              "type" : "string"
            }
          }
        }
      },
      "maxWebhookSize" : {
        "format" : "int32",
        "description" : "Max number of items in webhooks",
        "type" : "integer"
      },
      "cleverSettings" : {
        "description" : "Optional CleverCloud configuration",
        "type" : "object",
        "properties" : {
          "consumerSecret" : {
            "description" : "Clever-Cloud oauth consumer secret",
            "type" : "string"
          },
          "consumerKey" : {
            "description" : "Clever-Cloud oauth consumer key",
            "type" : "string"
          },
          "secret" : {
            "description" : "Clever-Cloud oauth secret",
            "type" : "string"
          },
          "token" : {
            "description" : "Clever-Cloud oauth token",
            "type" : "string"
          },
          "orgaId" : {
            "description" : "Clever-Cloud organization id",
            "type" : "string"
          }
        }
      },
      "u2fLoginOnly" : {
        "description" : "If enabled, login to backoffice through Auth0 will be disabled",
        "type" : "boolean"
      },
      "userAgentSettings" : {
        "description" : "Settings for useragent extraction",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "User agent extraction enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshiId" : {
        "description" : "Unique id for this otoroshi instance",
        "type" : "string"
      },
      "proxies" : {
        "description" : "Web proxies settings",
        "type" : "object",
        "properties" : {
          "auth" : {
            "description" : "Web proxy used to call OAuth providers",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "clevercloud" : {
            "description" : "Web proxy used to call clevercloud",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "authority" : {
            "description" : "Web proxy used to check authorities",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "elastic" : {
            "description" : "Web proxy used to call elastic",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "alertEmails" : {
            "description" : "Web proxy used to send alert emails",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "services" : {
            "description" : "Web proxy used to access services targets",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "eventsWebhooks" : {
            "description" : "Web proxy used to call webhooks",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "jwk" : {
            "description" : "Web proxy used to fetch jwks",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          }
        }
      },
      "ipFiltering" : {
        "description" : "Global ip filtering settings",
        "type" : "object",
        "properties" : {
          "whitelist" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Whitelisted IP addresses"
          },
          "blacklist" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Blacklisted IP addresses"
          }
        }
      },
      "mailerSettings" : {
        "description" : "Optional mailer configuration",
        "oneOfConstraints" : [ {
          "required" : [ "type" ]
        }, {
          "required" : [ "headers", "to", "type", "url" ]
        }, {
          "required" : [ "eu", "apiKey", "domain", "to", "type" ]
        }, {
          "required" : [ "apiKeyPrivate", "apiKeyPublic", "to", "type" ]
        }, {
          "required" : [ "type" ]
        }, {
          "required" : [ "apiKey", "to", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "eu" : {
            "description" : "European tenant",
            "type" : "boolean"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Sender headers"
          },
          "apiKey" : {
            "description" : "Sendgrid apikey",
            "type" : "string"
          },
          "domain" : {
            "description" : "Mailgun domain",
            "type" : "string"
          },
          "apiKeyPrivate" : {
            "description" : "Private key",
            "type" : "string"
          },
          "apiKeyPublic" : {
            "description" : "Public key",
            "type" : "string"
          },
          "to" : {
            "description" : "Destination email address",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "description" : "Destination name",
                  "type" : "string"
                },
                "email" : {
                  "description" : "Email address",
                  "type" : "string"
                }
              }
            }
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          },
          "url" : {
            "description" : "Sender URL",
            "type" : "string"
          }
        }
      },
      "lines" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Possibles lines for Otoroshi"
      },
      "useCircuitBreakers" : {
        "description" : "If enabled, services will be authorized to use circuit breakers",
        "type" : "boolean"
      },
      "scripts" : {
        "description" : "global plugins settings. will be deprecated soon",
        "type" : "object",
        "properties" : {
          "jobConfig" : {
            "description" : "jobs enabled",
            "type" : "object"
          },
          "enabled" : {
            "description" : "Global scripts enabled",
            "type" : "boolean"
          },
          "transformersConfig" : {
            "description" : "transformers config",
            "type" : "object"
          },
          "transformersRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "transformers enabled"
          },
          "preRouteRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "pre-route plugins enabled"
          },
          "sinkConfig" : {
            "description" : "sinks config",
            "type" : "object"
          },
          "jobRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "running jobs"
          },
          "validatorRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "validator enabled"
          },
          "sinkRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "sinks enabled"
          },
          "preRouteConfig" : {
            "description" : "pre-route config",
            "type" : "object"
          },
          "validatorConfig" : {
            "description" : "validator config",
            "type" : "object"
          }
        }
      },
      "maxLogsSize" : {
        "format" : "int32",
        "description" : "Number of events kept locally",
        "type" : "integer"
      },
      "useAkkaHttpClient" : {
        "description" : "Globally use akka http client for everything",
        "type" : "boolean"
      },
      "quotasSettings" : {
        "description" : "Settings to generate alert when an apikey almost exceeded or exceeded its quotas",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Is quotas alert enabled",
            "type" : "boolean"
          },
          "dailyQuotasThreshold" : {
            "format" : "double",
            "description" : "The daily quotas threshold before generating alert",
            "type" : "number"
          },
          "monthlyQuotasThreshold" : {
            "format" : "double",
            "description" : "The monthly quotas threshold before generating alert",
            "type" : "number"
          }
        }
      },
      "apiReadOnly" : {
        "description" : "If enabled, Admin API won't be able to write/update/delete entities",
        "type" : "boolean"
      },
      "analyticsWebhooks" : {
        "description" : "Webhook that will receive all internal Otoroshi events",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Headers to authorize the call or whatever"
            },
            "mtlsConfig" : {
              "description" : "TLS config when calling webhook",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "type" : {
              "description" : "the kind of exporter",
              "type" : "string",
              "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
            },
            "url" : {
              "description" : "The URL where events are posted",
              "type" : "string"
            }
          }
        }
      },
      "kafkaConfig" : {
        "description" : "Global kafka settings. deprecated",
        "type" : "object",
        "properties" : {
          "hostValidation" : {
            "description" : "Enabled TLS hostname validation",
            "type" : "boolean"
          },
          "servers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "URLs of the kafka servers"
          },
          "keyPass" : {
            "description" : "Optional keypass",
            "type" : "string"
          },
          "mtlsConfig" : {
            "description" : "TLS config to access the cluster",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "topic" : {
            "description" : "Optional kafka topic (otoroshi-events by default)",
            "type" : "string"
          },
          "truststore" : {
            "description" : "Optional truststore",
            "type" : "string"
          },
          "keystore" : {
            "description" : "Optional keystore",
            "type" : "string"
          },
          "sendEvents" : {
            "description" : "Send events to it, or just connect",
            "type" : "boolean"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          }
        }
      },
      "templates" : {
        "description" : "The otoroshi default templates for entities",
        "type" : "object",
        "properties" : {
          "template" : {
            "description" : "the template for the template entities",
            "type" : "object"
          },
          "apikey" : {
            "description" : "the template for the apikey entities",
            "type" : "object"
          },
          "dataExporter" : {
            "description" : "the template for the dataExporter entities",
            "type" : "object"
          },
          "authConfig" : {
            "description" : "the template for the authConfig entities",
            "type" : "object"
          },
          "certificate" : {
            "description" : "the template for the certificate entities",
            "type" : "object"
          },
          "tcpService" : {
            "description" : "the template for the tcpService entities",
            "type" : "object"
          },
          "team" : {
            "description" : "the template for the team entities",
            "type" : "object"
          },
          "descriptor" : {
            "description" : "the template for the descriptor entities",
            "type" : "object"
          },
          "script" : {
            "description" : "the template for the script entities",
            "type" : "object"
          },
          "target" : {
            "description" : "the template for the target entities",
            "type" : "object"
          },
          "route" : {
            "description" : "the template for the route entities",
            "type" : "object"
          },
          "verifier" : {
            "description" : "the template for the verifier entities",
            "type" : "object"
          },
          "service" : {
            "description" : "the template for the service entities",
            "type" : "object"
          },
          "backend" : {
            "description" : "the template for the backend entities",
            "type" : "object"
          },
          "tenant" : {
            "description" : "the template for the tenant entities",
            "type" : "object"
          },
          "group" : {
            "description" : "the template for the group entities",
            "type" : "object"
          }
        }
      },
      "enableEmbeddedMetrics" : {
        "description" : "Enable embedded metrics",
        "type" : "boolean"
      },
      "limitConcurrentRequests" : {
        "description" : "If enabled, Otoroshi will reject new request if too much at the same time",
        "type" : "boolean"
      },
      "maxConcurrentRequests" : {
        "format" : "int64",
        "description" : "The number of authorized request processed at the same time",
        "type" : "integer"
      },
      "maxHttp10ResponseSize" : {
        "format" : "int64",
        "description" : "The max size in bytes of an HTTP 1.0 response",
        "type" : "integer"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "letsEncryptSettings" : {
        "description" : "Let's encrypt (ACME) settings",
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Let's encrypt (ACME) private key",
            "type" : "string"
          },
          "contacts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Let's encrypt (ACME) contacts"
          },
          "emails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Let's encrypt (ACME) contact emails"
          },
          "enabled" : {
            "description" : "Let's encrypt (ACME) enabled",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Let's encrypt (ACME) public key",
            "type" : "string"
          },
          "server" : {
            "description" : "Let's encrypt (ACME) server",
            "type" : "string"
          }
        }
      },
      "autoLinkToDefaultGroup" : {
        "description" : "If not defined, every new service descriptor will be added to the default group",
        "type" : "boolean"
      },
      "throttlingQuota" : {
        "format" : "int64",
        "description" : "Authorized number of calls per second globally, measured on 10 seconds",
        "type" : "integer"
      },
      "snowMonkeyConfig" : {
        "description" : "Snowmonky settings",
        "type" : "object",
        "properties" : {
          "dryRun" : {
            "description" : "Whether or not outages will actualy impact requests",
            "type" : "boolean"
          },
          "targetGroups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Groups impacted by Snow Monkey. If empty, all groups will be impacted"
          },
          "includeUserFacingDescriptors" : {
            "description" : "Whether or not user facing apps. will be impacted by Snow Monkey",
            "type" : "boolean"
          },
          "outageDurationTo" : {
            "description" : "End of outage duration range",
            "type" : "number"
          },
          "outageDurationFrom" : {
            "description" : "Start of outage duration range",
            "type" : "number"
          },
          "startTime" : {
            "description" : "Start time of Snow Monkey each day",
            "type" : "string"
          },
          "stopTime" : {
            "description" : "Stop time of Snow Monkey each day",
            "type" : "string"
          },
          "chaosConfig" : {
            "description" : "Chaos settings",
            "type" : "object",
            "properties" : {
              "badResponsesFaultConfig" : {
                "description" : "Settings for bad responses",
                "type" : "object",
                "properties" : {
                  "responses" : {
                    "description" : "The possibles responses",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "status" : {
                          "format" : "int32",
                          "description" : "The HTTP status for the response",
                          "type" : "integer"
                        },
                        "body" : {
                          "description" : "The body of the HTTP response",
                          "type" : "string"
                        },
                        "headers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "The HTTP headers of the response"
                        }
                      }
                    }
                  },
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  }
                }
              },
              "largeResponseFaultConfig" : {
                "description" : "Settings for large responses",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "additionalResponseSize" : {
                    "format" : "int32",
                    "description" : "Add n 0 bytes",
                    "type" : "integer"
                  }
                }
              },
              "latencyInjectionFaultConfig" : {
                "description" : "Settings for latency injection",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "from" : {
                    "description" : "The start range of latency added to the request",
                    "type" : "number"
                  },
                  "to" : {
                    "description" : "The end range of latency added to the request",
                    "type" : "number"
                  }
                }
              },
              "largeRequestFaultConfig" : {
                "description" : "Settings for large requests",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "additionalRequestSize" : {
                    "format" : "int32",
                    "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                    "type" : "integer"
                  }
                }
              },
              "enabled" : {
                "description" : "Whether or not this config is enabled",
                "type" : "boolean"
              }
            }
          },
          "timesPerDay" : {
            "format" : "int32",
            "description" : "Number of time per day each service will be outage",
            "type" : "integer"
          },
          "outageStrategy" : {
            "description" : "",
            "type" : "string",
            "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
          },
          "enabled" : {
            "description" : "Whether or not this config is enabled",
            "type" : "boolean"
          }
        }
      },
      "statsdConfig" : {
        "description" : "Statsd settings (agent connection)",
        "type" : "object",
        "properties" : {
          "datadog" : {
            "description" : "Datadog agent",
            "type" : "boolean"
          },
          "host" : {
            "description" : "The host of the StatsD agent",
            "type" : "string"
          },
          "port" : {
            "format" : "int32",
            "description" : "The port of the StatsD agent",
            "type" : "integer"
          }
        }
      },
      "maintenanceMode" : {
        "description" : "Global maintenant mode",
        "type" : "boolean"
      },
      "perIpThrottlingQuota" : {
        "format" : "int64",
        "description" : "Authorized number of calls per second globally per IP address, measured on 10 seconds",
        "type" : "integer"
      },
      "elasticWritesConfigs" : {
        "description" : "Configs. for Elastic writes",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "clusterUri" : {
              "description" : "Cluster URL",
              "type" : "string"
            },
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "Additionnal headers in the http request"
            },
            "password" : {
              "description" : "Elastic password",
              "type" : "string"
            },
            "indexSettings" : {
              "description" : "Indexation settings",
              "type" : "object",
              "properties" : {
                "clientSide" : {
                  "description" : "Enable index splitting on client side",
                  "type" : "boolean"
                },
                "interval" : {
                  "description" : "Index splitting interval",
                  "type" : "object",
                  "properties" : { }
                }
              }
            },
            "mtlsConfig" : {
              "description" : "TLS settings for the http client",
              "type" : "object",
              "properties" : {
                "mtls" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trustAll" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trustedCerts" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "index" : {
              "description" : "Index name",
              "type" : "string"
            },
            "type" : {
              "description" : "Object type",
              "type" : "string",
              "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
            },
            "applyTemplate" : {
              "description" : "Enable template creation/update",
              "type" : "boolean"
            },
            "version" : {
              "description" : "Version of Elasticsearch",
              "type" : "string"
            },
            "user" : {
              "description" : "Elasticsearch user",
              "type" : "string"
            }
          }
        }
      },
      "trustXForwarded" : {
        "description" : "Use X-Forwarded-* headers for routing",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.next.plugins.BuildMode" : {
    "description" : "Plugin for build more",
    "type" : "object",
    "properties" : { }
  },
  "StringList" : {
    "type" : "array",
    "items" : {
      "type" : "string"
    }
  },
  "otoroshi.plugins.discovery.DiscoverySelfRegistrationSink" : {
    "description" : "Plugin that add services discovery to otoroshi",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.ExporterRef" : {
    "description" : "Reference to a data exporter",
    "type" : "object",
    "properties" : {
      "ref" : {
        "description" : "Script id",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of exporter",
        "type" : "string",
        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
      },
      "config" : {
        "description" : "Script config",
        "type" : "object"
      }
    }
  },
  "otoroshi.ssl.pki.models.GenKeyPairQuery" : {
    "description" : "Settings for generating a keypair",
    "type" : "object",
    "properties" : {
      "algo" : {
        "description" : "Keypair algorithm",
        "type" : "string"
      },
      "size" : {
        "format" : "int32",
        "description" : "Keypair size",
        "type" : "integer"
      }
    }
  },
  "otoroshi.next.plugins.NgRestrictionPath" : {
    "description" : "Configuration for NgRestrictions",
    "type" : "object",
    "properties" : {
      "method" : {
        "description" : "The http method (can be *)",
        "type" : "string"
      },
      "path" : {
        "description" : "The request path (can include domain)",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.NgFaultConfig" : {
    "description" : "Configuration for SnowMonkeyChaos",
    "type" : "object",
    "properties" : { }
  },
  "HealthCheckEventList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "duration" : {
          "format" : "int64",
          "description" : "Duration of the call",
          "type" : "integer"
        },
        "logicCheck" : {
          "description" : "Did the service respond with the logic check",
          "type" : "boolean"
        },
        "health" : {
          "description" : "Health status",
          "type" : "string"
        },
        "error" : {
          "description" : "Error if any",
          "type" : "string"
        },
        "url" : {
          "description" : "Checked url",
          "type" : "string"
        },
        "status" : {
          "format" : "int32",
          "description" : "Check status",
          "type" : "integer"
        }
      }
    }
  },
  "otoroshi.next.plugins.ReadOnlyCalls" : {
    "description" : "Plugin for readonly calls",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.QueryTransformerConfig" : {
    "description" : "Configuration for QueryTransformer",
    "type" : "object",
    "properties" : {
      "remove" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Remove query params"
      },
      "rename" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Rename query params to"
      }
    }
  },
  "otoroshi.next.models.NgFrontend" : {
    "description" : "Representation of how a request will be matched to a route",
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "the headers that will be matched"
      },
      "methods" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "the http methods that will be matched"
      },
      "query" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "the query params that will be matched"
      },
      "exact" : {
        "description" : "Match on exact path ?",
        "type" : "boolean"
      },
      "domains" : {
        "description" : "The domain and path that will be matched",
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      },
      "strip_path" : {
        "description" : "Is path stripped from backend request",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.next.models.StoredNgTargetDataStore" : {
    "description" : "The datastore for targets",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.OutageStrategy" : {
    "type" : "string",
    "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
  },
  "otoroshi.next.plugins.MockResponsesConfig" : {
    "description" : "Configuration for MockResponses",
    "type" : "object",
    "properties" : {
      "pass_through" : {
        "description" : "Pass the call if no mocked response found",
        "type" : "boolean"
      },
      "responses" : {
        "description" : "Possible responses",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "The path for the response",
              "type" : "string"
            },
            "body" : {
              "description" : "The body of the response",
              "type" : "string"
            },
            "status" : {
              "format" : "int32",
              "description" : "The status of the response",
              "type" : "integer"
            },
            "method" : {
              "description" : "The method for the response",
              "type" : "string"
            },
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "The headers of the response"
            }
          }
        }
      }
    }
  },
  "otoroshi.models.ClientIdAuthConstraints" : {
    "description" : "Settings to extract apikey (using client_id only) from a header or query param",
    "type" : "object",
    "properties" : {
      "headerName" : {
        "description" : "Header name to find client_id",
        "type" : "string"
      },
      "queryName" : {
        "description" : "Query param name to find client_id",
        "type" : "string"
      },
      "enabled" : {
        "description" : "Constraint enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.auth.BasicAuthUser" : {
    "description" : "A user model for the BasicAuthModuleConfig module",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "description" : "User metadata",
        "type" : "object"
      },
      "password" : {
        "description" : "User password (bcrypt hashed)",
        "type" : "string"
      },
      "rights" : {
        "description" : "User rights",
        "type" : "object",
        "properties" : {
          "rights" : {
            "description" : "Access rights of a user",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Access rights on teams",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "tenant" : {
                  "description" : "Access rights on organizations",
                  "type" : "object",
                  "properties" : {
                    "canWrite" : {
                      "description" : "Can this access right write data",
                      "type" : "boolean"
                    },
                    "value" : {
                      "description" : "Access pattern",
                      "type" : "string"
                    },
                    "canRead" : {
                      "description" : "Can this access right read data",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "name" : {
        "description" : "User name",
        "type" : "string"
      },
      "webauthn" : {
        "description" : "Webauthn details",
        "type" : "object",
        "properties" : {
          "handle" : {
            "description" : "Webauthn user handle",
            "type" : "string"
          },
          "credentials" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Webauthn credentials"
          }
        }
      },
      "email" : {
        "description" : "User email",
        "type" : "string"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "User tags"
      }
    }
  },
  "otoroshi.models.ClientConfig" : {
    "description" : "Settings for the http client when http request is forwarded",
    "type" : "object",
    "properties" : {
      "sampleInterval" : {
        "format" : "int64",
        "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
        "type" : "integer"
      },
      "backoffFactor" : {
        "format" : "int64",
        "description" : "Specify the factor to multiply the delay for each retry",
        "type" : "integer"
      },
      "customTimeouts" : {
        "description" : "Custom timeouts per path",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "path on which this configuration works",
              "type" : "string"
            },
            "callAndStreamTimeout" : {
              "format" : "int64",
              "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
              "type" : "integer"
            },
            "callTimeout" : {
              "format" : "int64",
              "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
              "type" : "integer"
            },
            "idleTimeout" : {
              "format" : "int64",
              "description" : "Timeout on idle connection",
              "type" : "integer"
            },
            "globalTimeout" : {
              "format" : "int64",
              "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
              "type" : "integer"
            },
            "connectionTimeout" : {
              "format" : "int64",
              "description" : "Timeout at connection",
              "type" : "integer"
            }
          }
        }
      },
      "callAndStreamTimeout" : {
        "format" : "int64",
        "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
        "type" : "integer"
      },
      "retryInitialDelay" : {
        "format" : "int64",
        "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
        "type" : "integer"
      },
      "callTimeout" : {
        "format" : "int64",
        "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
        "type" : "integer"
      },
      "useCircuitBreaker" : {
        "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
        "type" : "boolean"
      },
      "retries" : {
        "format" : "int32",
        "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
        "type" : "integer"
      },
      "proxy" : {
        "description" : "Web proxy settings for http client",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "maxErrors" : {
        "format" : "int32",
        "description" : "Specify how many errors can pass before opening the circuit breaker",
        "type" : "integer"
      },
      "idleTimeout" : {
        "format" : "int64",
        "description" : "Timeout on idle connection",
        "type" : "integer"
      },
      "globalTimeout" : {
        "format" : "int64",
        "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
        "type" : "integer"
      },
      "cacheConnectionSettings" : {
        "description" : "Cached connection settings",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Enable Cached connections at host tevel",
            "type" : "boolean"
          },
          "queueSize" : {
            "format" : "int32",
            "description" : "The size for the request queue",
            "type" : "integer"
          }
        }
      },
      "connectionTimeout" : {
        "format" : "int64",
        "description" : "Timeout at connection",
        "type" : "integer"
      }
    }
  },
  "otoroshi.next.plugins.NgBadResponse" : {
    "description" : "Configuration for SnowMonkeyChaos",
    "type" : "object",
    "properties" : {
      "status" : {
        "format" : "int32",
        "description" : "status of the response",
        "type" : "integer"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "headers of the response"
      },
      "body" : {
        "description" : "Body of the response",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.useragent.UserAgentInfoEndpoint" : {
    "description" : "Plugin that return user-agent infos on an endpoint",
    "type" : "object",
    "properties" : { }
  },
  "LiveStats" : {
    "type" : "object",
    "description" : "Service live stats"
  },
  "otoroshi.models.ApiKeyConstraints" : {
    "description" : "Settings used to extract apikeys from http requests and routing traffic",
    "type" : "object",
    "properties" : {
      "routing" : {
        "description" : "Routing settings for this apikey",
        "type" : "object",
        "properties" : {
          "oneTagIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "outing if one tag presents in apikey"
          },
          "noneMetaKeysIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if none meta keys presents in apikey"
          },
          "oneMetaIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Routing if one meta presents in apikey"
          },
          "oneMetaKeyIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if one meta key presents in apikey"
          },
          "allMetaKeysIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if all meta keys presents in apikey"
          },
          "noneTagIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if none tags presents in apikey"
          },
          "allTagsIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if all tags presents in apikey"
          },
          "allMetaIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Routing if all meta presents in apikey"
          },
          "noneMetaIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Routing if none meta presents in apikey"
          }
        }
      },
      "customHeadersAuth" : {
        "description" : "Settings to extract apikey from custom headers",
        "type" : "object",
        "properties" : {
          "clientSecretHeaderName" : {
            "description" : "Header name to find client_secret",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "clientIdHeaderName" : {
            "description" : "Header name to find client_id",
            "type" : "string"
          }
        }
      },
      "basicAuth" : {
        "description" : "Settings to extract basic auth style apikey",
        "type" : "object",
        "properties" : {
          "headerName" : {
            "description" : "Header name to get client_id:client_secret base64 encoded",
            "type" : "string"
          },
          "queryName" : {
            "description" : "Query param name to get client_id:client_secret base64 encoded",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          }
        }
      },
      "jwtAuth" : {
        "description" : "Settings to extract apikey from jwt token",
        "type" : "object",
        "properties" : {
          "headerName" : {
            "description" : "Header name to extract jwt token",
            "type" : "string"
          },
          "maxJwtLifespanSecs" : {
            "format" : "int64",
            "description" : "Check if token does not have a long lifespan",
            "type" : "integer"
          },
          "keyPairSigned" : {
            "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
            "type" : "boolean"
          },
          "secretSigned" : {
            "description" : "Jwt token signed with the client_secret",
            "type" : "boolean"
          },
          "queryName" : {
            "description" : "Query param name to extract jwt token",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "cookieName" : {
            "description" : "Cookie name to extract jwt token",
            "type" : "string"
          },
          "includeRequestAttributes" : {
            "description" : "Jwt token should include verb and path",
            "type" : "boolean"
          }
        }
      },
      "clientIdAuth" : {
        "description" : "Settings to extract client_id only apikey",
        "type" : "object",
        "properties" : {
          "headerName" : {
            "description" : "Header name to find client_id",
            "type" : "string"
          },
          "queryName" : {
            "description" : "Query param name to find client_id",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          }
        }
      }
    }
  },
  "otoroshi.plugins.metrics.ServiceMetrics" : {
    "description" : "Plugin to collect service metrics",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.core.apikeys.BasicAuthApikeyExtractor" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.izanami.IzanamiCanary" : {
    "description" : "Plugin that can route on different target paths based on an izanami experiment",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgOtoroshiChallengeConfig" : {
    "description" : "Configuration for OtoroshiChallenge",
    "type" : "object",
    "properties" : {
      "state_resp_leeway" : {
        "description" : "the number of seconds acceptable between client and server time",
        "type" : "number"
      },
      "response_header_name" : {
        "description" : "The header name to read the jwt",
        "type" : "string"
      },
      "algo_from_backend" : {
        "description" : "The jwt signing algorithm when reading",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          }
        }
      },
      "ttl" : {
        "description" : "The ttl of the generated jwt in milliseconds",
        "type" : "number"
      },
      "version" : {
        "description" : "Version of the challenge token",
        "type" : "string",
        "enum" : [ "V1", "v2" ]
      },
      "algo_to_backend" : {
        "description" : "The jwt signing algorithm when writing",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          }
        }
      },
      "request_header_name" : {
        "description" : "The header name to inject the jwt",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.mirror.MirroringPlugin" : {
    "description" : "Plugin to mirror calls",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgOtoroshiInfoConfig" : {
    "description" : "Configuration for OtoroshiInfos",
    "type" : "object",
    "properties" : {
      "headerName" : {
        "description" : "The header name to inject the jwt",
        "type" : "string"
      },
      "secComTtl" : {
        "description" : "The ttl of the generated jwt in milliseconds",
        "type" : "number"
      },
      "version" : {
        "description" : "Version of the info token",
        "type" : "string",
        "enum" : [ "Legacy", "Latest" ]
      },
      "algo" : {
        "description" : "The jwt signing algorithm",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          }
        }
      }
    }
  },
  "otoroshi.utils.http.DN" : {
    "type" : "string",
    "description" : "A string representation of a Distinguished Name"
  },
  "Any" : {
    "type" : "object"
  },
  "otoroshi.ssl.ClientAuth" : {
    "type" : "string",
    "enum" : [ "Need", "None", "Want" ],
    "description" : "Client authentication mode"
  },
  "otoroshi.models.SimpleOtoroshiAdmin" : {
    "description" : "An otoroshi admin user",
    "type" : "object",
    "properties" : {
      "createdAt" : {
        "description" : "User creation date",
        "type" : "number"
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "password" : {
        "description" : "User password (bcrypt hashed)",
        "type" : "string"
      },
      "rights" : {
        "description" : "User rights",
        "type" : "object",
        "properties" : {
          "rights" : {
            "description" : "Access rights of a user",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Access rights on teams",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "tenant" : {
                  "description" : "Access rights on organizations",
                  "type" : "object",
                  "properties" : {
                    "canWrite" : {
                      "description" : "Can this access right write data",
                      "type" : "boolean"
                    },
                    "value" : {
                      "description" : "Access pattern",
                      "type" : "string"
                    },
                    "canRead" : {
                      "description" : "Can this access right read data",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "typ" : {
        "description" : "Admin kind",
        "type" : "string",
        "enum" : [ "SIMPLE", "WEBAUTHN" ]
      },
      "label" : {
        "description" : "User label",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of admin",
        "type" : "string",
        "enum" : [ "simple", "webauthn" ]
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "username" : {
        "description" : "User username",
        "type" : "string"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      }
    }
  },
  "otoroshi.models.EntityIdentifier" : {
    "oneOfConstraints" : [ {
      "required" : [ "type", "description" ]
    }, {
      "required" : [ "type", "description" ]
    } ],
    "type" : "object",
    "properties" : {
      "type" : "string",
      "description" : "the id of a group prefixed by 'group_'"
    }
  },
  "otoroshi.next.plugins.ContextValidation" : {
    "description" : "Plugin for context validation",
    "type" : "object",
    "properties" : {
      "validators" : {
        "description" : "The validators to pass on the current context",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "???",
              "type" : "string"
            },
            "value" : {
              "description" : "???",
              "type" : "object"
            }
          }
        }
      }
    }
  },
  "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfig" : {
    "description" : "Configuration for IzanamiCanary",
    "type" : "object",
    "properties" : {
      "routes" : {
        "description" : "Possible routes",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "variants" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "The possible variant"
            },
            "wildcard" : {
              "description" : "Wildcard match",
              "type" : "boolean"
            },
            "default" : {
              "description" : "The default variant",
              "type" : "string"
            },
            "regex" : {
              "description" : "Regex match",
              "type" : "boolean"
            },
            "exact" : {
              "description" : "Exact match",
              "type" : "boolean"
            },
            "route" : {
              "description" : "The route path",
              "type" : "string"
            }
          }
        }
      }
    }
  },
  "otoroshi.next.plugins.NgApikeyExtractorBasic" : {
    "description" : "Configuration for ApikeyCalls",
    "type" : "object",
    "properties" : {
      "query_name" : {
        "description" : "The name of the query param to extract",
        "type" : "string"
      },
      "header_name" : {
        "description" : "The name of the header to extract",
        "type" : "string"
      },
      "enabled" : {
        "description" : "Is it enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.ssl.pki.models.SignCertResponse" : {
    "description" : "Response for a certificate signing operation",
    "type" : "object",
    "properties" : {
      "csr" : {
        "description" : "CSR (PEM encoded)",
        "type" : "string"
      },
      "cert" : {
        "description" : "Cert (PEM encoded)",
        "type" : "string"
      },
      "ca" : {
        "description" : "pem encoded X509 certificate",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.discovery.DiscoveryTargetsSelector" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.NgDomainAndPath" : {
    "type" : "string",
    "description" : "A string representing a domain and an optional path"
  },
  "otoroshi.next.plugins.JQ" : {
    "description" : "Plugin to transform body with JQ filters",
    "type" : "object",
    "properties" : {
      "request" : {
        "description" : "JQ filter for request",
        "type" : "string"
      },
      "response" : {
        "description" : "JQ filter for response",
        "type" : "string"
      }
    }
  },
  "otoroshi.events.KafkaConfig" : {
    "description" : "Settings for connection to a kafka cluster",
    "type" : "object",
    "properties" : {
      "hostValidation" : {
        "description" : "Enabled TLS hostname validation",
        "type" : "boolean"
      },
      "servers" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "URLs of the kafka servers"
      },
      "keyPass" : {
        "description" : "Optional keypass",
        "type" : "string"
      },
      "mtlsConfig" : {
        "description" : "TLS config to access the cluster",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "topic" : {
        "description" : "Optional kafka topic (otoroshi-events by default)",
        "type" : "string"
      },
      "truststore" : {
        "description" : "Optional truststore",
        "type" : "string"
      },
      "keystore" : {
        "description" : "Optional keystore",
        "type" : "string"
      },
      "sendEvents" : {
        "description" : "Send events to it, or just connect",
        "type" : "boolean"
      },
      "type" : {
        "description" : "the kind of exporter",
        "type" : "string",
        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
      }
    }
  },
  "otoroshi.next.plugins.SnowMonkeyChaos" : {
    "description" : "Plugin to induce chaos",
    "type" : "object",
    "properties" : {
      "bad_responses_fault_config" : {
        "description" : "Config. for bad responses faults",
        "type" : "object",
        "properties" : {
          "responses" : {
            "description" : "possible response",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "status" : {
                  "format" : "int32",
                  "description" : "status of the response",
                  "type" : "integer"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "headers of the response"
                },
                "body" : {
                  "description" : "Body of the response",
                  "type" : "string"
                }
              }
            }
          },
          "ratio" : {
            "format" : "double",
            "description" : "bad response ratio",
            "type" : "number"
          }
        }
      },
      "latency_injection_fault_config" : {
        "description" : "Config. for latency injection faults",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The ratio of requests impacted",
            "type" : "number"
          },
          "from" : {
            "description" : "Lower bound of latency injection",
            "type" : "number"
          },
          "to" : {
            "description" : "Upper bound of latency injection",
            "type" : "number"
          }
        }
      },
      "large_response_fault_config" : {
        "description" : "Config. for large response faults",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The ratio of responses impacted",
            "type" : "number"
          },
          "additional_response_size" : {
            "format" : "int32",
            "description" : "Amount of bytes added of the response body",
            "type" : "integer"
          }
        }
      },
      "large_request_fault_config" : {
        "description" : "Config. for large request body faults",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The ratio of requests impacted",
            "type" : "number"
          },
          "additional_request_size" : {
            "format" : "int32",
            "description" : "Amount of bytes added of the request body",
            "type" : "integer"
          }
        }
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesIngressSyncJob" : {
    "description" : "Plugin to sync kubernetes ingresses with otoroshi",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.UserRights" : {
    "description" : "Represent a list of user rights",
    "type" : "object",
    "properties" : {
      "rights" : {
        "description" : "Access rights of a user",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "teams" : {
              "description" : "Access rights on teams",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "canRead" : {
                    "description" : "Can this access right read data",
                    "type" : "boolean"
                  },
                  "value" : {
                    "description" : "Access pattern",
                    "type" : "string"
                  },
                  "canWrite" : {
                    "description" : "Can this access right write data",
                    "type" : "boolean"
                  }
                }
              }
            },
            "tenant" : {
              "description" : "Access rights on organizations",
              "type" : "object",
              "properties" : {
                "canWrite" : {
                  "description" : "Can this access right write data",
                  "type" : "boolean"
                },
                "value" : {
                  "description" : "Access pattern",
                  "type" : "string"
                },
                "canRead" : {
                  "description" : "Can this access right read data",
                  "type" : "boolean"
                }
              }
            }
          }
        }
      }
    }
  },
  "otoroshi.next.plugins.JsonTransformConfig" : {
    "description" : "Configuration for JsonTransform",
    "type" : "object",
    "properties" : {
      "filter" : {
        "description" : "JQ filter for transformation",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.biscuit.vavr_implicits" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.IndexSettingsInterval" : {
    "description" : "Elasticseach indexation interval",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.jq.JqBodyTransformer" : {
    "description" : "Plugin to transform http body using jq filters",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.discovery.DiscoveryJobServiceId" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "id" : {
        "description" : "A registration id",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.NgHeaderValuesConfig" : {
    "description" : "Configuration for headers plugins",
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Value of the headers"
      }
    }
  },
  "otoroshi.next.plugins.wrappers.AccessValidatorWrapper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.MaintenanceMode" : {
    "description" : "Plugin for maintainance mode",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesConfig" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "watchGracePeriodSeconds" : {
        "format" : "int32",
        "description" : "The number of second to wait between receiving a change event and the actual sync",
        "type" : "integer"
      },
      "openshiftDnsOperatorCoreDnsName" : {
        "description" : "DNS operator name",
        "type" : "string"
      },
      "clusterDomain" : {
        "description" : "The current kubernetes cluster domain",
        "type" : "string"
      },
      "useProxyState" : {
        "description" : "Use proxy state instead of loading everything from datastore",
        "type" : "boolean"
      },
      "otoroshiNamespace" : {
        "description" : "The namespace where otoroshi is deployed",
        "type" : "string"
      },
      "crds" : {
        "description" : "Enabled crds integration",
        "type" : "boolean"
      },
      "coreDnsDeploymentName" : {
        "description" : "The name of the coredns deployment",
        "type" : "string"
      },
      "namespacesLabels" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Kubernetes namespaces with those labels that will be query"
      },
      "triggerPath" : {
        "description" : "--",
        "type" : "string"
      },
      "coreDnsIntegration" : {
        "description" : "Enable coredns integration",
        "type" : "boolean"
      },
      "openshiftDnsOperatorIntegration" : {
        "description" : "Enable the openshift operator integration",
        "type" : "boolean"
      },
      "openshiftDnsOperatorCoreDnsNamespace" : {
        "description" : "DNS operator namespace",
        "type" : "string"
      },
      "watchTimeoutSeconds" : {
        "format" : "int32",
        "description" : "The timeout to call a watch resources",
        "type" : "integer"
      },
      "kubeSystemNamespace" : {
        "description" : "The namespace containing coredns",
        "type" : "string"
      },
      "image" : {
        "description" : "Sidecar image",
        "type" : "string"
      },
      "syncIntervalSeconds" : {
        "format" : "int64",
        "description" : "Number of seconds between syncs",
        "type" : "integer"
      },
      "syncDaikokuApikeysOnly" : {
        "description" : "Sync only daikoku apikeys",
        "type" : "boolean"
      },
      "templates" : {
        "description" : "Templates for created entities",
        "type" : "object"
      },
      "openshiftDnsOperatorCleanupNames" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Cleanup DNS operator based on names"
      },
      "labels" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Kubernetes entities with those labels will be query"
      },
      "openshiftDnsOperatorCoreDnsPort" : {
        "format" : "int32",
        "description" : "DNS operator port number",
        "type" : "integer"
      },
      "validatingWebhookName" : {
        "description" : "The name of the validating webhook",
        "type" : "string"
      },
      "kubeDnsOperatorCoreDnsNamespace" : {
        "description" : "Kube dns namespace",
        "type" : "string"
      },
      "namespaces" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Kubernetes namespaces that will be query"
      },
      "ingressClasses" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Ingress classes watched by otoroshi ingress controller"
      },
      "trust" : {
        "description" : "Trust Kube CA",
        "type" : "boolean"
      },
      "triggerKey" : {
        "description" : "--",
        "type" : "string"
      },
      "userPassword" : {
        "description" : "Optional username/password to access kube api",
        "type" : "string"
      },
      "caCert" : {
        "description" : "The kubernetes cacert",
        "type" : "string"
      },
      "kubeDnsOperatorCoreDnsPort" : {
        "format" : "int32",
        "description" : "Kube dns port number",
        "type" : "integer"
      },
      "ingressEndpointPublishedService" : {
        "description" : "--",
        "type" : "string"
      },
      "coreDnsConfigMapName" : {
        "description" : "The name of the coredns config-map",
        "type" : "string"
      },
      "endpoint" : {
        "description" : "Kube API endpoint",
        "type" : "string"
      },
      "restartDependantDeployments" : {
        "description" : "If enabled, deployments dependant to otoroshi managed secrets (apikeys, certs) will be automatically restarted as secrets are updated",
        "type" : "boolean"
      },
      "defaultGroup" : {
        "description" : "Otoroshi groups where ingress services will be created",
        "type" : "string"
      },
      "ingressEndpointHostname" : {
        "description" : "--",
        "type" : "string"
      },
      "kubeDnsOperatorCoreDnsName" : {
        "description" : "Kube dns name",
        "type" : "string"
      },
      "coreDnsIntegrationDryRun" : {
        "description" : "Do not modify coredns config automatically",
        "type" : "boolean"
      },
      "ingressEndpointIp" : {
        "description" : "--",
        "type" : "string"
      },
      "mutatingWebhookName" : {
        "description" : "Sidecar webhook name",
        "type" : "string"
      },
      "otoroshiServiceName" : {
        "description" : "The service name for otoroshi",
        "type" : "string"
      },
      "meshDomain" : {
        "description" : "The domain used for service mesh",
        "type" : "string"
      },
      "ingresses" : {
        "description" : "Enable ingress controller",
        "type" : "boolean"
      },
      "triggerHost" : {
        "description" : "--",
        "type" : "string"
      },
      "openshiftDnsOperatorCleanupDomains" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Cleanup DNS operator based on domains"
      },
      "token" : {
        "description" : "Kube API access token",
        "type" : "string"
      },
      "corednsPort" : {
        "format" : "int32",
        "description" : "Port of coredns",
        "type" : "integer"
      },
      "watch" : {
        "description" : "Enabled resources watch",
        "type" : "boolean"
      },
      "kubeLeader" : {
        "description" : "Use kubernetes to select a leader",
        "type" : "boolean"
      },
      "coreDnsEnv" : {
        "description" : "Domain name prefix",
        "type" : "string"
      },
      "openshiftDnsOperatorCleanup" : {
        "description" : "Cleanup DNS operator",
        "type" : "boolean"
      },
      "kubeDnsOperatorIntegration" : {
        "description" : "Enable the legacy kubedns operator integration",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.script.plugins.Plugins" : {
    "description" : "Settings for plugins (of any kind)",
    "type" : "object",
    "properties" : {
      "config" : {
        "description" : "Plugins configuration",
        "type" : "object"
      },
      "enabled" : {
        "description" : "Plugins enabled",
        "type" : "boolean"
      },
      "excluded" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Excluded paths"
      },
      "refs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Enabled plugins"
      }
    }
  },
  "otoroshi.plugins.cache.ResponseCacheFilterConfig" : {
    "description" : "Configuration for ResponseCache",
    "type" : "object",
    "properties" : {
      "json" : {
        "description" : "Config for response cache filter",
        "type" : "object"
      }
    }
  },
  "otoroshi.next.models.NgMinimalBackend" : {
    "description" : "A backend representation with it's minimal attributes",
    "type" : "object",
    "properties" : {
      "target_refs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "List of NgStoredBackend ids"
      },
      "root" : {
        "description" : "The root path of the backend or the full rewrite path",
        "type" : "string"
      },
      "targets" : {
        "description" : "The targets of the backend",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "predicate" : {
              "description" : "Predicate to choose this target",
              "type" : "object",
              "properties" : {
                "rack" : {
                  "description" : "Rack name",
                  "type" : "string"
                },
                "provider" : {
                  "description" : "Provider name",
                  "type" : "string"
                },
                "dataCenter" : {
                  "description" : "Datacenter name",
                  "type" : "string"
                },
                "zone" : {
                  "description" : "Zone name",
                  "type" : "string"
                },
                "positions" : {
                  "description" : "Possible positions",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "latitude" : {
                        "format" : "double",
                        "description" : "Latitude of the position",
                        "type" : "number"
                      },
                      "longitude" : {
                        "format" : "double",
                        "description" : "Longitude of the position",
                        "type" : "number"
                      },
                      "radius" : {
                        "format" : "double",
                        "description" : "Radius of the circle in meters",
                        "type" : "number"
                      }
                    }
                  }
                },
                "type" : {
                  "description" : "the kind of predicate",
                  "type" : "string",
                  "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                },
                "region" : {
                  "description" : "Region name",
                  "type" : "string"
                },
                "dc" : {
                  "description" : "DC name",
                  "type" : "string"
                }
              }
            },
            "protocol" : {
              "description" : "Protocol for the target",
              "type" : "string"
            },
            "hostname" : {
              "description" : "hostname of the target",
              "type" : "string"
            },
            "port" : {
              "format" : "int32",
              "description" : "port of the target",
              "type" : "integer"
            },
            "weight" : {
              "format" : "int32",
              "description" : "The weight of the target when choosing",
              "type" : "integer"
            },
            "tls" : {
              "description" : "Does the target uses TLS",
              "type" : "boolean"
            },
            "tls_config" : {
              "description" : "TLS settings to contact this target",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trust_all" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trusted_certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "id" : {
              "description" : "id of the target",
              "type" : "string"
            },
            "ip_address" : {
              "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
              "type" : "string"
            }
          }
        }
      },
      "rewrite" : {
        "description" : "Does the backend performs a full url rewrite ?",
        "type" : "boolean"
      },
      "load_balancing" : {
        "description" : "Loadbalancing config og the backend",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
          },
          "ratio" : {
            "type" : "number",
            "format" : "double"
          }
        }
      }
    }
  },
  "otoroshi.plugins.workflow.WorkflowJob" : {
    "description" : "Experimental plugin",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.apikeys.ClientCredentialService" : {
    "description" : "Plugin that provide the OAuth2 client_credentials flow",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.DisableHttp10" : {
    "description" : "Plugin to disable HTTP/1.0",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.loggers.RequestBodyEvent" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "ua" : {
        "description" : "The user agent",
        "type" : "string"
      },
      "reqId" : {
        "description" : "The request id",
        "type" : "string"
      },
      "url" : {
        "description" : "The request url",
        "type" : "string"
      },
      "from" : {
        "description" : "The incoming request ip address",
        "type" : "string"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The request headers"
      },
      "method" : {
        "description" : "The request method",
        "type" : "string"
      }
    }
  },
  "otoroshi.auth.WebAuthnDetails" : {
    "description" : "Handle and credentials for a webauthn user",
    "type" : "object",
    "properties" : {
      "handle" : {
        "description" : "Webauthn user handle",
        "type" : "string"
      },
      "credentials" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "object"
        },
        "description" : "Webauthn credentials"
      }
    }
  },
  "otoroshi.tcp.TcpTarget" : {
    "description" : "Target for a TCP proxy",
    "type" : "object",
    "properties" : {
      "port" : {
        "format" : "int32",
        "description" : "Target port",
        "type" : "integer"
      },
      "ip" : {
        "description" : "Target ip",
        "type" : "string"
      },
      "host" : {
        "description" : "Target host",
        "type" : "string"
      },
      "tls" : {
        "description" : "Use tls",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.models.GeoPositionRadius" : {
    "description" : "Geolocation radius",
    "type" : "object",
    "properties" : {
      "latitude" : {
        "format" : "double",
        "description" : "Latitude of the position",
        "type" : "number"
      },
      "longitude" : {
        "format" : "double",
        "description" : "Longitude of the position",
        "type" : "number"
      },
      "radius" : {
        "format" : "double",
        "description" : "Radius of the circle in meters",
        "type" : "number"
      }
    }
  },
  "otoroshi.models.InCookie" : {
    "description" : "JWT token location (cookie)",
    "type" : "object",
    "properties" : {
      "name" : {
        "description" : "Cookie name",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of location",
        "type" : "string",
        "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
      }
    }
  },
  "otoroshi.plugins.oidc.OIDCHeaders" : {
    "description" : "Plugin to pass OIDC related info as headers",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.apikeys.ApiKeyAllowedOnThisServiceValidator" : {
    "description" : "Plugin that validates apikey for specific services",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.RSAlgoSettings" : {
    "description" : "Settings to use RSA signing algorithm",
    "type" : "object",
    "properties" : {
      "privateKey" : {
        "description" : "Private key (for signing)",
        "type" : "string"
      },
      "size" : {
        "format" : "int32",
        "description" : "SHA function size",
        "type" : "integer"
      },
      "publicKey" : {
        "description" : "Public key (for verification)",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of algosettings",
        "type" : "string",
        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
      }
    }
  },
  "otoroshi.tcp.TcpService" : {
    "description" : "Model for a TCP proxy",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "description" : {
        "description" : "Entity description",
        "type" : "string"
      },
      "rules" : {
        "description" : "Routing rules",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "domain" : {
              "description" : "match on SNI domain",
              "type" : "string"
            },
            "targets" : {
              "description" : "TCP targets",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "port" : {
                    "format" : "int32",
                    "description" : "Target port",
                    "type" : "integer"
                  },
                  "ip" : {
                    "description" : "Target ip",
                    "type" : "string"
                  },
                  "host" : {
                    "description" : "Target host",
                    "type" : "string"
                  },
                  "tls" : {
                    "description" : "Use tls",
                    "type" : "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "interface" : {
        "description" : "Network interface",
        "type" : "string"
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "enabled" : {
        "description" : "Service enabled",
        "type" : "boolean"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "sni" : {
        "description" : "SNI settings",
        "type" : "object",
        "properties" : {
          "forwardIfNoMatch" : {
            "description" : "",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "SNI extraction enabled",
            "type" : "boolean"
          },
          "forwardsTo" : {
            "description" : "forwards call to",
            "type" : "object",
            "properties" : {
              "port" : {
                "format" : "int32",
                "description" : "Target port",
                "type" : "integer"
              },
              "ip" : {
                "description" : "Target ip",
                "type" : "string"
              },
              "host" : {
                "description" : "Target host",
                "type" : "string"
              },
              "tls" : {
                "description" : "Use tls",
                "type" : "boolean"
              }
            }
          }
        }
      },
      "port" : {
        "format" : "int32",
        "description" : "network port",
        "type" : "integer"
      },
      "name" : {
        "description" : "Entity name",
        "type" : "string"
      },
      "tls" : {
        "description" : "TLS mode",
        "type" : "string",
        "enum" : [ "Disabled", "Enabled", "PassThrough" ]
      },
      "id" : {
        "description" : "Entity id",
        "type" : "string"
      },
      "clientAuth" : {
        "description" : "Client authentication mode",
        "type" : "string",
        "enum" : [ "Need", "None", "Want" ]
      }
    }
  },
  "WebAuthnRegistrationFinishBody" : {
    "type" : "object",
    "description" : ""
  },
  "otoroshi.models.LocalJwtVerifier" : {
    "description" : "Local jwt verifier (deprecated)",
    "type" : "object",
    "properties" : {
      "excludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Verifier excluded paths"
      },
      "algoSettings" : {
        "description" : "Algo settings",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          }
        }
      },
      "source" : {
        "description" : "Token source",
        "oneOfConstraints" : [ {
          "required" : [ "name", "type" ]
        }, {
          "required" : [ "name", "type", "remove" ]
        }, {
          "required" : [ "name", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Query param name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          },
          "remove" : {
            "description" : "Remove from value",
            "type" : "string"
          }
        }
      },
      "type" : {
        "description" : "the kind of verifier",
        "type" : "string",
        "enum" : [ "global", "local", "ref" ]
      },
      "strict" : {
        "description" : "Strict token verification",
        "type" : "boolean"
      },
      "strategy" : {
        "description" : "Token strategy",
        "oneOfConstraints" : [ {
          "required" : [ "verificationSettings", "type", "strict", "token" ]
        }, {
          "required" : [ "verificationSettings", "type" ]
        }, {
          "required" : [ "algoSettings", "verificationSettings", "type" ]
        }, {
          "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "verificationSettings" : {
            "description" : "Verification settings",
            "type" : "object",
            "properties" : {
              "fields" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Fields validation"
              },
              "arrayFields" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Fields array validation"
              }
            }
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          },
          "strict" : {
            "description" : "If the token already exists in the request, then fail",
            "type" : "boolean"
          },
          "token" : {
            "description" : "The default token",
            "type" : "object"
          },
          "algoSettings" : {
            "description" : "Algorithm settings for re-signing token",
            "oneOfConstraints" : [ {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "size", "base64", "secret", "type" ]
            }, {
              "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
            }, {
              "required" : [ "onlyExposedCerts", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            } ],
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              }
            }
          },
          "transformSettings" : {
            "description" : "Transformation settings",
            "type" : "object",
            "properties" : {
              "mappingSettings" : {
                "description" : "Token mapping settings",
                "type" : "object",
                "properties" : {
                  "map" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Change values"
                  },
                  "values" : {
                    "description" : "Add values",
                    "type" : "object"
                  },
                  "remove" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Remove some token claims"
                  }
                }
              },
              "location" : {
                "description" : "Location of the token",
                "type" : "object",
                "properties" : {
                  "name" : {
                    "description" : "Query param name",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of location",
                    "type" : "string",
                    "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                  },
                  "remove" : {
                    "description" : "Remove from value",
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      },
      "enabled" : {
        "description" : "Verifier enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.utils.gzip.GzipConfig" : {
    "description" : "Settings for gzip support",
    "type" : "object",
    "properties" : {
      "compressionLevel" : {
        "format" : "int32",
        "description" : "Compression level (0 - 9)",
        "type" : "integer"
      },
      "blackList" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "blocklisted content types"
      },
      "chunkedThreshold" : {
        "format" : "int32",
        "description" : "Chunk size",
        "type" : "integer"
      },
      "excludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Excluded paths"
      },
      "bufferSize" : {
        "format" : "int32",
        "description" : "Buffer size in bytes",
        "type" : "integer"
      },
      "whiteList" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "allow listed content types"
      },
      "enabled" : {
        "description" : "Gzip enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.plugins.useragent.UserAgentExtractor" : {
    "description" : "Plugin that extract user-agent related infos",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.Webhook" : {
    "description" : "Settings for webhook call",
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Headers to authorize the call or whatever"
      },
      "mtlsConfig" : {
        "description" : "TLS config when calling webhook",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "type" : {
        "description" : "the kind of exporter",
        "type" : "string",
        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
      },
      "url" : {
        "description" : "The URL where events are posted",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.models.NgCustomTimeouts" : {
    "description" : "Custom timeouts per path",
    "type" : "object",
    "properties" : {
      "connection_timeout" : {
        "format" : "int64",
        "description" : "Timeout at connection",
        "type" : "integer"
      },
      "call_and_stream_timeout" : {
        "format" : "int64",
        "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
        "type" : "integer"
      },
      "path" : {
        "description" : "path on which this configuration works",
        "type" : "string"
      },
      "call_timeout" : {
        "format" : "int64",
        "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
        "type" : "integer"
      },
      "idle_timeout" : {
        "format" : "int64",
        "description" : "Timeout on idle connection",
        "type" : "integer"
      },
      "global_timeout" : {
        "format" : "int64",
        "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
        "type" : "integer"
      }
    }
  },
  "otoroshi.models.VerifierStrategy" : {
    "oneOfConstraints" : [ {
      "required" : [ "verificationSettings", "type", "strict", "token" ]
    }, {
      "required" : [ "verificationSettings", "type" ]
    }, {
      "required" : [ "algoSettings", "verificationSettings", "type" ]
    }, {
      "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
    } ],
    "type" : "object",
    "properties" : {
      "transformSettings" : {
        "description" : "Transformation settings",
        "type" : "object",
        "properties" : {
          "mappingSettings" : {
            "description" : "Token mapping settings",
            "type" : "object",
            "properties" : {
              "map" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Change values"
              },
              "values" : {
                "description" : "Add values",
                "type" : "object"
              },
              "remove" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Remove some token claims"
              }
            }
          },
          "location" : {
            "description" : "Location of the token",
            "type" : "object",
            "properties" : {
              "name" : {
                "description" : "Query param name",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of location",
                "type" : "string",
                "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
              },
              "remove" : {
                "description" : "Remove from value",
                "type" : "string"
              }
            }
          }
        }
      },
      "algoSettings" : {
        "description" : "Algorithm settings for re-signing token",
        "oneOfConstraints" : [ {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "size", "base64", "secret", "type" ]
        }, {
          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
        }, {
          "required" : [ "onlyExposedCerts", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          }
        }
      },
      "verificationSettings" : {
        "description" : "Verification settings",
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields validation"
          },
          "arrayFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields array validation"
          }
        }
      },
      "type" : {
        "description" : "the kind of strategy",
        "type" : "string",
        "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
      },
      "strict" : {
        "description" : "If the token already exists in the request, then fail",
        "type" : "boolean"
      },
      "token" : {
        "description" : "The default token",
        "type" : "object"
      }
    }
  },
  "otoroshi.next.plugins.TcpTunnel" : {
    "description" : "Plugin to have tcp tunnels over websockets",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.DefaultToken" : {
    "description" : "Default jwt token when no other token validated",
    "type" : "object",
    "properties" : {
      "verificationSettings" : {
        "description" : "Verification settings",
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields validation"
          },
          "arrayFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields array validation"
          }
        }
      },
      "type" : {
        "description" : "the kind of strategy",
        "type" : "string",
        "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
      },
      "strict" : {
        "description" : "If the token already exists in the request, then fail",
        "type" : "boolean"
      },
      "token" : {
        "description" : "The default token",
        "type" : "object"
      }
    }
  },
  "otoroshi.models.RemainingQuotas" : {
    "description" : "Remaining quotas for an apikey",
    "type" : "object",
    "properties" : {
      "currentCallsPerSec" : {
        "format" : "int64",
        "description" : "Current number of call per second",
        "type" : "integer"
      },
      "remainingCallsPerSec" : {
        "format" : "int64",
        "description" : "Remaining number of call per second",
        "type" : "integer"
      },
      "currentCallsPerDay" : {
        "format" : "int64",
        "description" : "Current number of call per day",
        "type" : "integer"
      },
      "authorizedCallsPerDay" : {
        "format" : "int64",
        "description" : "Number of authorized call per day",
        "type" : "integer"
      },
      "currentCallsPerMonth" : {
        "format" : "int64",
        "description" : "Current number of call per month",
        "type" : "integer"
      },
      "remainingCallsPerMonth" : {
        "format" : "int64",
        "description" : "Remaining number of call per month",
        "type" : "integer"
      },
      "authorizedCallsPerSec" : {
        "format" : "int64",
        "description" : "Number of authorized call per second",
        "type" : "integer"
      },
      "authorizedCallsPerMonth" : {
        "format" : "int64",
        "description" : "Number of authorized call per month",
        "type" : "integer"
      },
      "remainingCallsPerDay" : {
        "format" : "int64",
        "description" : "Remaining number of call per day",
        "type" : "integer"
      }
    }
  },
  "otoroshi.models.GlobalScripts" : {
    "description" : "Settings to apply plugins globally",
    "type" : "object",
    "properties" : {
      "jobConfig" : {
        "description" : "jobs enabled",
        "type" : "object"
      },
      "enabled" : {
        "description" : "Global scripts enabled",
        "type" : "boolean"
      },
      "transformersConfig" : {
        "description" : "transformers config",
        "type" : "object"
      },
      "transformersRefs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "transformers enabled"
      },
      "preRouteRefs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "pre-route plugins enabled"
      },
      "sinkConfig" : {
        "description" : "sinks config",
        "type" : "object"
      },
      "jobRefs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "running jobs"
      },
      "validatorRefs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "validator enabled"
      },
      "sinkRefs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "sinks enabled"
      },
      "preRouteConfig" : {
        "description" : "pre-route config",
        "type" : "object"
      },
      "validatorConfig" : {
        "description" : "validator config",
        "type" : "object"
      }
    }
  },
  "ErrorResponse" : {
    "type" : "object",
    "description" : "Typical error returned by otoroshi",
    "properties" : {
      "error" : {
        "type" : "string",
        "description" : "the error name"
      },
      "error_description" : {
        "type" : "string",
        "description" : "A short description of the error if one"
      },
      "Otoroshi-Error" : {
        "type" : "string",
        "description" : "sometimes, the error name is here"
      },
      "Otoroshi-Error-Msg" : {
        "type" : "string",
        "description" : "sometimes, the error description is here"
      }
    }
  },
  "otoroshi.plugins.cache.ResponseCacheConfig" : {
    "description" : "Configuration for ResponseCache",
    "type" : "object",
    "properties" : {
      "json" : {
        "description" : "Config for response cache",
        "type" : "object"
      }
    }
  },
  "otoroshi.plugins.biscuit.BiscuitValidator" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.JwtAuthConstraints" : {
    "description" : "Settings to extract apikey from a jwt token",
    "type" : "object",
    "properties" : {
      "headerName" : {
        "description" : "Header name to extract jwt token",
        "type" : "string"
      },
      "maxJwtLifespanSecs" : {
        "format" : "int64",
        "description" : "Check if token does not have a long lifespan",
        "type" : "integer"
      },
      "keyPairSigned" : {
        "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
        "type" : "boolean"
      },
      "secretSigned" : {
        "description" : "Jwt token signed with the client_secret",
        "type" : "boolean"
      },
      "queryName" : {
        "description" : "Query param name to extract jwt token",
        "type" : "string"
      },
      "enabled" : {
        "description" : "Constraint enabled",
        "type" : "boolean"
      },
      "cookieName" : {
        "description" : "Cookie name to extract jwt token",
        "type" : "string"
      },
      "includeRequestAttributes" : {
        "description" : "Jwt token should include verb and path",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.plugins.apikeys.ClientCredentialFlowExtractor" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.log4j.Log4ShellFilter" : {
    "description" : "Plugin to mitigate Log4Shell attacks",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.StoredNgBackend" : {
    "description" : "A backend that can be stored in the otoroshi datastore",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The metadata of the backend"
      },
      "name" : {
        "description" : "The name of the backend",
        "type" : "string"
      },
      "description" : {
        "description" : "The description of the backend",
        "type" : "string"
      },
      "backend" : {
        "description" : "The actual backend",
        "type" : "object",
        "properties" : {
          "target_refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of NgStoredBackend ids"
          },
          "root" : {
            "description" : "The root path of the backend or the full rewrite path",
            "type" : "string"
          },
          "client" : {
            "description" : "Client config. of the backend",
            "type" : "object",
            "properties" : {
              "custom_timeouts" : {
                "description" : "Custom timeouts per path",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "connection_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout at connection",
                      "type" : "integer"
                    },
                    "call_and_stream_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                      "type" : "integer"
                    },
                    "path" : {
                      "description" : "path on which this configuration works",
                      "type" : "string"
                    },
                    "call_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                      "type" : "integer"
                    },
                    "idle_timeout" : {
                      "format" : "int64",
                      "description" : "Timeout on idle connection",
                      "type" : "integer"
                    },
                    "global_timeout" : {
                      "format" : "int64",
                      "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                      "type" : "integer"
                    }
                  }
                }
              },
              "global_timeout" : {
                "format" : "int64",
                "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                "type" : "integer"
              },
              "max_errors" : {
                "format" : "int32",
                "description" : "Specify how many errors can pass before opening the circuit breaker",
                "type" : "integer"
              },
              "retry_initial_delay" : {
                "format" : "int64",
                "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                "type" : "integer"
              },
              "backoff_factor" : {
                "format" : "int64",
                "description" : "Specify the factor to multiply the delay for each retry",
                "type" : "integer"
              },
              "cache_connection_settings" : {
                "description" : "Cached connection settings",
                "type" : "object",
                "properties" : {
                  "queue_size" : {
                    "format" : "int32",
                    "description" : "How much request can be queue before dropping it",
                    "type" : "integer"
                  },
                  "enabled" : {
                    "description" : "Is cached connection enabled",
                    "type" : "boolean"
                  }
                }
              },
              "sample_interval" : {
                "format" : "int64",
                "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                "type" : "integer"
              },
              "call_and_stream_timeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                "type" : "integer"
              },
              "retries" : {
                "format" : "int32",
                "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                "type" : "integer"
              },
              "proxy" : {
                "description" : "Web proxy settings for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "call_timeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                "type" : "integer"
              },
              "idle_timeout" : {
                "format" : "int64",
                "description" : "Timeout on idle connection",
                "type" : "integer"
              },
              "connection_timeout" : {
                "format" : "int64",
                "description" : "Timeout at connection",
                "type" : "integer"
              }
            }
          },
          "health_check" : {
            "description" : "Healthcheck config og the backend",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                "type" : "boolean"
              },
              "url" : {
                "description" : "The URL to check",
                "type" : "string"
              }
            }
          },
          "targets" : {
            "description" : "The targets of the backend",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "predicate" : {
                  "description" : "Predicate to choose this target",
                  "type" : "object",
                  "properties" : {
                    "rack" : {
                      "description" : "Rack name",
                      "type" : "string"
                    },
                    "provider" : {
                      "description" : "Provider name",
                      "type" : "string"
                    },
                    "dataCenter" : {
                      "description" : "Datacenter name",
                      "type" : "string"
                    },
                    "zone" : {
                      "description" : "Zone name",
                      "type" : "string"
                    },
                    "positions" : {
                      "description" : "Possible positions",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "latitude" : {
                            "format" : "double",
                            "description" : "Latitude of the position",
                            "type" : "number"
                          },
                          "longitude" : {
                            "format" : "double",
                            "description" : "Longitude of the position",
                            "type" : "number"
                          },
                          "radius" : {
                            "format" : "double",
                            "description" : "Radius of the circle in meters",
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of predicate",
                      "type" : "string",
                      "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                    },
                    "region" : {
                      "description" : "Region name",
                      "type" : "string"
                    },
                    "dc" : {
                      "description" : "DC name",
                      "type" : "string"
                    }
                  }
                },
                "protocol" : {
                  "description" : "Protocol for the target",
                  "type" : "string"
                },
                "hostname" : {
                  "description" : "hostname of the target",
                  "type" : "string"
                },
                "port" : {
                  "format" : "int32",
                  "description" : "port of the target",
                  "type" : "integer"
                },
                "weight" : {
                  "format" : "int32",
                  "description" : "The weight of the target when choosing",
                  "type" : "integer"
                },
                "tls" : {
                  "description" : "Does the target uses TLS",
                  "type" : "boolean"
                },
                "tls_config" : {
                  "description" : "TLS settings to contact this target",
                  "type" : "object",
                  "properties" : {
                    "enabled" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trust_all" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trusted_certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "id" : {
                  "description" : "id of the target",
                  "type" : "string"
                },
                "ip_address" : {
                  "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                  "type" : "string"
                }
              }
            }
          },
          "rewrite" : {
            "description" : "Does the backend performs a full url rewrite ?",
            "type" : "boolean"
          },
          "load_balancing" : {
            "description" : "Loadbalancing config og the backend",
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
              },
              "ratio" : {
                "type" : "number",
                "format" : "double"
              }
            }
          }
        }
      },
      "id" : {
        "description" : "The id of the backend",
        "type" : "string"
      },
      "_loc" : {
        "description" : "The location of the backend",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The tags of the backend"
      }
    }
  },
  "Empty" : {
    "type" : "object",
    "description" : "an empty body. Useful for RPC like endpoints"
  },
  "otoroshi.models.ServiceGroupIdentifier" : {
    "type" : "string",
    "description" : "the id of a group prefixed by 'group_'"
  },
  "otoroshi.script.AccessValidatorRef" : {
    "description" : "References to access validation plugins",
    "type" : "object",
    "properties" : {
      "enabled" : {
        "description" : "Access validator plugins enabled",
        "type" : "boolean"
      },
      "excludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Excluded paths"
      },
      "refs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Enabled plugins"
      },
      "config" : {
        "description" : "Access validator plugins configuration",
        "type" : "object"
      }
    }
  },
  "otoroshi.ssl.pki.models.GenCertResponse" : {
    "description" : "Response for a certificate generation operation",
    "type" : "object",
    "properties" : {
      "csr" : {
        "description" : "CSR (PEM encoded)",
        "type" : "string"
      },
      "csrQuery" : {
        "description" : "JSON generation query",
        "type" : "object",
        "properties" : {
          "duration" : {
            "description" : "Certificate lifespan",
            "type" : "number"
          },
          "includeAIA" : {
            "description" : "Include AIA extension (if generated from otoroshi CA)",
            "type" : "boolean"
          },
          "signatureAlg" : {
            "description" : "Signature algorithm",
            "type" : "string"
          },
          "digestAlg" : {
            "description" : "Digest algo",
            "type" : "string"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Certificate SANs"
          },
          "subject" : {
            "description" : "Certificate subject",
            "type" : "string"
          },
          "name" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Certificate name"
          },
          "client" : {
            "description" : "Is cert client ?",
            "type" : "boolean"
          },
          "existingSerialNumber" : {
            "format" : "int64",
            "description" : "",
            "type" : "integer"
          },
          "ca" : {
            "description" : "Is cert ca ?",
            "type" : "boolean"
          },
          "key" : {
            "description" : "Keypair specs",
            "type" : "object",
            "properties" : {
              "algo" : {
                "description" : "Keypair algorithm",
                "type" : "string"
              },
              "size" : {
                "format" : "int32",
                "description" : "Keypair size",
                "type" : "integer"
              }
            }
          }
        }
      },
      "serial" : {
        "format" : "int64",
        "description" : "Certificate serial number",
        "type" : "integer"
      },
      "cert" : {
        "description" : "Cert (PEM encoded)",
        "type" : "string"
      },
      "caChain" : {
        "type" : "array",
        "items" : {
          "type" : "string",
          "description" : "pem encoded X509 certificate"
        },
        "description" : "Ca chain (PEM encoded)"
      },
      "ca" : {
        "description" : "Ca cert (PEM encoded)",
        "type" : "string"
      },
      "key" : {
        "description" : "Private key (PEM encoded)",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.models.NgPluginInstanceConfig" : {
    "description" : "The current configuration for a plugin",
    "type" : "object"
  },
  "otoroshi.models.PrivateAppsUser" : {
    "description" : "User session for private apps",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "lastRefresh" : {
        "description" : "Session last refresh (if OAuth refresh_token supported)",
        "type" : "number"
      },
      "profile" : {
        "description" : "Session user profile",
        "type" : "object"
      },
      "authConfigId" : {
        "description" : "Auth module id that created the session",
        "type" : "string"
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "token" : {
        "description" : "Session tokens (from OAuth)",
        "type" : "object"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "expiredAt" : {
        "description" : "Session expiration date",
        "type" : "number"
      },
      "createdAt" : {
        "description" : "Creation date of the session",
        "type" : "number"
      },
      "randomId" : {
        "description" : "Session random id",
        "type" : "string"
      },
      "name" : {
        "description" : "Entity name",
        "type" : "string"
      },
      "realm" : {
        "description" : "Session realm name",
        "type" : "string"
      },
      "email" : {
        "description" : "Session user email",
        "type" : "string"
      },
      "otoroshiData" : {
        "description" : "Otoroshi oriented metadata",
        "type" : "object"
      }
    }
  },
  "otoroshi.plugins.geoloc.GeolocationInfoEndpoint" : {
    "description" : "Plugin that send geolocation infos to the client through an endpoint",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.NgTreeNodePath" : {
    "description" : "A node of the tree router",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.QueryTransformer" : {
    "description" : "Plugin to transform query string",
    "type" : "object",
    "properties" : {
      "remove" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Remove query params"
      },
      "rename" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Rename query params to"
      }
    }
  },
  "HostMetrics" : {
    "type" : "object",
    "description" : "Host metrics"
  },
  "otoroshi.next.models.NgService" : {
    "description" : "A composition of multiple routes with the same plugins",
    "type" : "object",
    "properties" : {
      "debug_flow" : {
        "description" : "Enable report debugging",
        "type" : "boolean"
      },
      "routes" : {
        "description" : "The routes of the service",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "backend_ref" : {
              "description" : "The backend id of the route (if one)",
              "type" : "string"
            },
            "backend" : {
              "description" : "The backend of the route",
              "type" : "object",
              "properties" : {
                "target_refs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "List of NgStoredBackend ids"
                },
                "root" : {
                  "description" : "The root path of the backend or the full rewrite path",
                  "type" : "string"
                },
                "targets" : {
                  "description" : "The targets of the backend",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "predicate" : {
                        "description" : "Predicate to choose this target",
                        "type" : "object",
                        "properties" : {
                          "rack" : {
                            "description" : "Rack name",
                            "type" : "string"
                          },
                          "provider" : {
                            "description" : "Provider name",
                            "type" : "string"
                          },
                          "dataCenter" : {
                            "description" : "Datacenter name",
                            "type" : "string"
                          },
                          "zone" : {
                            "description" : "Zone name",
                            "type" : "string"
                          },
                          "positions" : {
                            "description" : "Possible positions",
                            "type" : "array",
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "latitude" : {
                                  "format" : "double",
                                  "description" : "Latitude of the position",
                                  "type" : "number"
                                },
                                "longitude" : {
                                  "format" : "double",
                                  "description" : "Longitude of the position",
                                  "type" : "number"
                                },
                                "radius" : {
                                  "format" : "double",
                                  "description" : "Radius of the circle in meters",
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "description" : "the kind of predicate",
                            "type" : "string",
                            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                          },
                          "region" : {
                            "description" : "Region name",
                            "type" : "string"
                          },
                          "dc" : {
                            "description" : "DC name",
                            "type" : "string"
                          }
                        }
                      },
                      "protocol" : {
                        "description" : "Protocol for the target",
                        "type" : "string"
                      },
                      "hostname" : {
                        "description" : "hostname of the target",
                        "type" : "string"
                      },
                      "port" : {
                        "format" : "int32",
                        "description" : "port of the target",
                        "type" : "integer"
                      },
                      "weight" : {
                        "format" : "int32",
                        "description" : "The weight of the target when choosing",
                        "type" : "integer"
                      },
                      "tls" : {
                        "description" : "Does the target uses TLS",
                        "type" : "boolean"
                      },
                      "tls_config" : {
                        "description" : "TLS settings to contact this target",
                        "type" : "object",
                        "properties" : {
                          "enabled" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trust_all" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trusted_certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "id" : {
                        "description" : "id of the target",
                        "type" : "string"
                      },
                      "ip_address" : {
                        "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                        "type" : "string"
                      }
                    }
                  }
                },
                "rewrite" : {
                  "description" : "Does the backend performs a full url rewrite ?",
                  "type" : "boolean"
                },
                "load_balancing" : {
                  "description" : "Loadbalancing config og the backend",
                  "type" : "object",
                  "properties" : {
                    "type" : {
                      "type" : "string",
                      "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                    },
                    "ratio" : {
                      "type" : "number",
                      "format" : "double"
                    }
                  }
                }
              }
            },
            "frontend" : {
              "description" : "The frontend of the route",
              "type" : "object",
              "properties" : {
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "the headers that will be matched"
                },
                "methods" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "the http methods that will be matched"
                },
                "query" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "the query params that will be matched"
                },
                "exact" : {
                  "description" : "Match on exact path ?",
                  "type" : "boolean"
                },
                "domains" : {
                  "description" : "The domain and path that will be matched",
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                },
                "strip_path" : {
                  "description" : "Is path stripped from backend request",
                  "type" : "boolean"
                }
              }
            }
          }
        }
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The metadata of the service"
      },
      "name" : {
        "description" : "The name of the service",
        "type" : "string"
      },
      "description" : {
        "description" : "The description of the service",
        "type" : "string"
      },
      "groups" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The groups of the service"
      },
      "client" : {
        "description" : "The client config of the service",
        "type" : "object",
        "properties" : {
          "custom_timeouts" : {
            "description" : "Custom timeouts per path",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "connection_timeout" : {
                  "format" : "int64",
                  "description" : "Timeout at connection",
                  "type" : "integer"
                },
                "call_and_stream_timeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                  "type" : "integer"
                },
                "path" : {
                  "description" : "path on which this configuration works",
                  "type" : "string"
                },
                "call_timeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                  "type" : "integer"
                },
                "idle_timeout" : {
                  "format" : "int64",
                  "description" : "Timeout on idle connection",
                  "type" : "integer"
                },
                "global_timeout" : {
                  "format" : "int64",
                  "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                  "type" : "integer"
                }
              }
            }
          },
          "global_timeout" : {
            "format" : "int64",
            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
            "type" : "integer"
          },
          "max_errors" : {
            "format" : "int32",
            "description" : "Specify how many errors can pass before opening the circuit breaker",
            "type" : "integer"
          },
          "retry_initial_delay" : {
            "format" : "int64",
            "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
            "type" : "integer"
          },
          "backoff_factor" : {
            "format" : "int64",
            "description" : "Specify the factor to multiply the delay for each retry",
            "type" : "integer"
          },
          "cache_connection_settings" : {
            "description" : "Cached connection settings",
            "type" : "object",
            "properties" : {
              "queue_size" : {
                "format" : "int32",
                "description" : "How much request can be queue before dropping it",
                "type" : "integer"
              },
              "enabled" : {
                "description" : "Is cached connection enabled",
                "type" : "boolean"
              }
            }
          },
          "sample_interval" : {
            "format" : "int64",
            "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
            "type" : "integer"
          },
          "call_and_stream_timeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
            "type" : "integer"
          },
          "retries" : {
            "format" : "int32",
            "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
            "type" : "integer"
          },
          "proxy" : {
            "description" : "Web proxy settings for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "call_timeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
            "type" : "integer"
          },
          "idle_timeout" : {
            "format" : "int64",
            "description" : "Timeout on idle connection",
            "type" : "integer"
          },
          "connection_timeout" : {
            "format" : "int64",
            "description" : "Timeout at connection",
            "type" : "integer"
          }
        }
      },
      "id" : {
        "description" : "The id of the service",
        "type" : "string"
      },
      "_loc" : {
        "description" : "The location of the service",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "enabled" : {
        "description" : "Is the service enabled",
        "type" : "boolean"
      },
      "export_reporting" : {
        "description" : "Export the execution reporting through standard data exporter",
        "type" : "boolean"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The tags of the service"
      }
    }
  },
  "AlertEventList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "type" : "object",
        "description" : "Alert trail event"
      }
    }
  },
  "otoroshi.models.HealthCheck" : {
    "description" : "Healthcheck settings for a service",
    "type" : "object",
    "properties" : {
      "enabled" : {
        "description" : "Whether or not healthcheck is enabled on the current service descriptor",
        "type" : "boolean"
      },
      "url" : {
        "description" : "The URL to check",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.core.apikeys.ClientIdApikeyExtractor" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.StaticResponseConfig" : {
    "description" : "Configuration for StaticResponse",
    "type" : "object",
    "properties" : {
      "status" : {
        "format" : "int32",
        "description" : "Status of the response",
        "type" : "integer"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Headers of the response"
      },
      "body" : {
        "description" : "Body of the response",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.useragent.UserAgentInfoHeader" : {
    "description" : "Plugin that pass user-agent infos in headers",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.HeadersValidation" : {
    "description" : "Plugin to validate headers",
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The headers value being checked"
      }
    }
  },
  "otoroshi.models.SnowMonkeyConfig" : {
    "description" : "Settings for the snow monkey (chaos engineering)",
    "type" : "object",
    "properties" : {
      "dryRun" : {
        "description" : "Whether or not outages will actualy impact requests",
        "type" : "boolean"
      },
      "targetGroups" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Groups impacted by Snow Monkey. If empty, all groups will be impacted"
      },
      "includeUserFacingDescriptors" : {
        "description" : "Whether or not user facing apps. will be impacted by Snow Monkey",
        "type" : "boolean"
      },
      "outageDurationTo" : {
        "description" : "End of outage duration range",
        "type" : "number"
      },
      "outageDurationFrom" : {
        "description" : "Start of outage duration range",
        "type" : "number"
      },
      "startTime" : {
        "description" : "Start time of Snow Monkey each day",
        "type" : "string"
      },
      "stopTime" : {
        "description" : "Stop time of Snow Monkey each day",
        "type" : "string"
      },
      "chaosConfig" : {
        "description" : "Chaos settings",
        "type" : "object",
        "properties" : {
          "badResponsesFaultConfig" : {
            "description" : "Settings for bad responses",
            "type" : "object",
            "properties" : {
              "responses" : {
                "description" : "The possibles responses",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "format" : "int32",
                      "description" : "The HTTP status for the response",
                      "type" : "integer"
                    },
                    "body" : {
                      "description" : "The body of the HTTP response",
                      "type" : "string"
                    },
                    "headers" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "The HTTP headers of the response"
                    }
                  }
                }
              },
              "ratio" : {
                "format" : "double",
                "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                "type" : "number"
              }
            }
          },
          "largeResponseFaultConfig" : {
            "description" : "Settings for large responses",
            "type" : "object",
            "properties" : {
              "ratio" : {
                "format" : "double",
                "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                "type" : "number"
              },
              "additionalResponseSize" : {
                "format" : "int32",
                "description" : "Add n 0 bytes",
                "type" : "integer"
              }
            }
          },
          "latencyInjectionFaultConfig" : {
            "description" : "Settings for latency injection",
            "type" : "object",
            "properties" : {
              "ratio" : {
                "format" : "double",
                "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                "type" : "number"
              },
              "from" : {
                "description" : "The start range of latency added to the request",
                "type" : "number"
              },
              "to" : {
                "description" : "The end range of latency added to the request",
                "type" : "number"
              }
            }
          },
          "largeRequestFaultConfig" : {
            "description" : "Settings for large requests",
            "type" : "object",
            "properties" : {
              "ratio" : {
                "format" : "double",
                "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                "type" : "number"
              },
              "additionalRequestSize" : {
                "format" : "int32",
                "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                "type" : "integer"
              }
            }
          },
          "enabled" : {
            "description" : "Whether or not this config is enabled",
            "type" : "boolean"
          }
        }
      },
      "timesPerDay" : {
        "format" : "int32",
        "description" : "Number of time per day each service will be outage",
        "type" : "integer"
      },
      "outageStrategy" : {
        "description" : "",
        "type" : "string",
        "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
      },
      "enabled" : {
        "description" : "Whether or not this config is enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.models.IndexSettings" : {
    "description" : "Elasticseach indexation settings",
    "type" : "object",
    "properties" : {
      "clientSide" : {
        "description" : "Enable index splitting on client side",
        "type" : "boolean"
      },
      "interval" : {
        "description" : "Index splitting interval",
        "type" : "object",
        "properties" : { }
      }
    }
  },
  "otoroshi.auth.NameIDFormat" : {
    "description" : "The name ID Format to use for the subject",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.ZoneMatch" : {
    "description" : "Match a target if in the same zone",
    "type" : "object",
    "properties" : {
      "zone" : {
        "description" : "Zone name",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of predicate",
        "type" : "string",
        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
      }
    }
  },
  "otoroshi.next.models.NgPlugins" : {
    "description" : "A set of NgPluginInstance",
    "type" : "object",
    "properties" : {
      "slots" : {
        "description" : "All the NgPluginInstance",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "debug" : {
              "description" : "Is the plugin in debug mode",
              "type" : "boolean"
            },
            "config" : {
              "description" : "The config. of the plugin",
              "type" : "object"
            },
            "exclude" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Excluded paths"
            },
            "include" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Included paths"
            },
            "plugin" : {
              "description" : "The id of the plugin",
              "type" : "string"
            },
            "enabled" : {
              "description" : "Is the plugin enabled",
              "type" : "boolean"
            }
          }
        }
      }
    }
  },
  "otoroshi.next.plugins.Http2Caller" : {
    "description" : "Experimental plugin",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesOtoroshiCRDsControllerJob" : {
    "description" : "Plugin to import entities from kubernetes CRDs",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.auth.GroupFilter" : {
    "description" : "Filter for a LDAP group",
    "type" : "object",
    "properties" : {
      "team" : {
        "description" : "The team associated with this group",
        "type" : "string"
      },
      "tenant" : {
        "description" : "The tenant associated with this group",
        "type" : "object",
        "properties" : {
          "canWrite" : {
            "description" : "Can this access right write data",
            "type" : "boolean"
          },
          "value" : {
            "description" : "Access pattern",
            "type" : "string"
          },
          "canRead" : {
            "description" : "Can this access right read data",
            "type" : "boolean"
          }
        }
      },
      "group" : {
        "description" : "The LDAP group",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.mirror.RequestContext" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "id" : {
        "description" : "The id of the request",
        "type" : "string"
      },
      "descriptor" : {
        "description" : "Current descriptor",
        "type" : "object",
        "properties" : {
          "removeHeadersIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client request"
          },
          "missingOnlyHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client response if they are not present"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Just a bunch of random properties"
          },
          "tcpUdpTunneling" : {
            "description" : "Enabled TCP/UDP tunneling through websocket connection",
            "type" : "boolean"
          },
          "cors" : {
            "description" : "CORS settings",
            "type" : "object",
            "properties" : {
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors excluded patterns"
              },
              "allowMethods" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors allowed methods"
              },
              "allowHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors allowed headers"
              },
              "exposeHeaders" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "The cors exposed header"
              },
              "maxAge" : {
                "description" : "Cors max age",
                "type" : "number"
              },
              "enabled" : {
                "description" : "Whether or not cors is enabled",
                "type" : "boolean"
              },
              "allowCredentials" : {
                "description" : "Allow to pass credentials",
                "type" : "boolean"
              },
              "allowOrigin" : {
                "description" : "The cors allowed origin",
                "type" : "string"
              }
            }
          },
          "forceHttps" : {
            "description" : "Will force redirection to https:// if not present",
            "type" : "boolean"
          },
          "matchingRoot" : {
            "description" : "The root path on which the service is available",
            "type" : "string"
          },
          "plugins" : {
            "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
            "type" : "object",
            "properties" : {
              "config" : {
                "description" : "Plugins configuration",
                "type" : "object"
              },
              "enabled" : {
                "description" : "Plugins enabled",
                "type" : "boolean"
              },
              "excluded" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled plugins"
              }
            }
          },
          "letsEncrypt" : {
            "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
            "type" : "boolean"
          },
          "useNewWSClient" : {
            "description" : "Use akka http client for this service on websocket calls",
            "type" : "boolean"
          },
          "chaosConfig" : {
            "description" : "Chaos engineering settings",
            "type" : "object",
            "properties" : {
              "badResponsesFaultConfig" : {
                "description" : "Settings for bad responses",
                "type" : "object",
                "properties" : {
                  "responses" : {
                    "description" : "The possibles responses",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "status" : {
                          "format" : "int32",
                          "description" : "The HTTP status for the response",
                          "type" : "integer"
                        },
                        "body" : {
                          "description" : "The body of the HTTP response",
                          "type" : "string"
                        },
                        "headers" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "The HTTP headers of the response"
                        }
                      }
                    }
                  },
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  }
                }
              },
              "largeResponseFaultConfig" : {
                "description" : "Settings for large responses",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "additionalResponseSize" : {
                    "format" : "int32",
                    "description" : "Add n 0 bytes",
                    "type" : "integer"
                  }
                }
              },
              "latencyInjectionFaultConfig" : {
                "description" : "Settings for latency injection",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "from" : {
                    "description" : "The start range of latency added to the request",
                    "type" : "number"
                  },
                  "to" : {
                    "description" : "The end range of latency added to the request",
                    "type" : "number"
                  }
                }
              },
              "largeRequestFaultConfig" : {
                "description" : "Settings for large requests",
                "type" : "object",
                "properties" : {
                  "ratio" : {
                    "format" : "double",
                    "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                    "type" : "number"
                  },
                  "additionalRequestSize" : {
                    "format" : "int32",
                    "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                    "type" : "integer"
                  }
                }
              },
              "enabled" : {
                "description" : "Whether or not this config is enabled",
                "type" : "boolean"
              }
            }
          },
          "secComSettings" : {
            "description" : "Sec. com. settings",
            "oneOfConstraints" : [ {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "size", "base64", "secret", "type" ]
            }, {
              "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
            }, {
              "required" : [ "onlyExposedCerts", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            } ],
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              }
            }
          },
          "detectApiKeySooner" : {
            "description" : "Detect if an apikey is present but do not fail if not",
            "type" : "boolean"
          },
          "transformerRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled transformer plugins"
          },
          "secComAlgoInfoToken" : {
            "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
            "oneOfConstraints" : [ {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "size", "base64", "secret", "type" ]
            }, {
              "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
            }, {
              "required" : [ "onlyExposedCerts", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            } ],
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              }
            }
          },
          "missingOnlyHeadersIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client request if they are not present"
          },
          "secComAlgoChallengeOtoToBack" : {
            "description" : "Algorithm to sign challenge token to the backend",
            "oneOfConstraints" : [ {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "size", "base64", "secret", "type" ]
            }, {
              "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
            }, {
              "required" : [ "onlyExposedCerts", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            } ],
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              }
            }
          },
          "removeHeadersOut" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client response"
          },
          "stripPath" : {
            "description" : "Strip matching path in the forwarded request path",
            "type" : "boolean"
          },
          "localHost" : {
            "description" : "The host used localy, mainly localhost:xxxx",
            "type" : "string"
          },
          "sendOtoroshiHeadersBack" : {
            "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
            "type" : "boolean"
          },
          "id" : {
            "description" : "A unique random string to identify your service",
            "type" : "string"
          },
          "api" : {
            "description" : "Api exposition settings",
            "type" : "object",
            "properties" : {
              "exposeApi" : {
                "description" : "Is this an API",
                "type" : "boolean"
              },
              "openApiDescriptorUrl" : {
                "description" : "openapi descriptor url",
                "type" : "string"
              }
            }
          },
          "secComTtl" : {
            "description" : "TTL for the info token",
            "type" : "number"
          },
          "secComVersion" : {
            "description" : "Version of the challenge token",
            "type" : "string",
            "enum" : [ "V1", "v2" ]
          },
          "targetsLoadBalancing" : {
            "description" : "Loadbalancing strategy",
            "type" : "object",
            "properties" : {
              "type" : {
                "type" : "string",
                "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
              },
              "ratio" : {
                "type" : "number",
                "format" : "double"
              }
            }
          },
          "userFacing" : {
            "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Possible hosts for the service"
          },
          "restrictions" : {
            "description" : "Restriction settings",
            "type" : "object",
            "properties" : {
              "allowed" : {
                "description" : "Allowed paths",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "allowLast" : {
                "description" : "Evalute allowed paths after everything else",
                "type" : "boolean"
              },
              "forbidden" : {
                "description" : "Forbidden paths (return 403)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "notFound" : {
                "description" : "Not found paths (return 404)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Restrictions enabled",
                "type" : "boolean"
              }
            }
          },
          "readOnly" : {
            "description" : "Service only accepts GET, HEAD and OPTIONS requests",
            "type" : "boolean"
          },
          "secComInfoTokenVersion" : {
            "description" : "Version of the info token",
            "type" : "string",
            "enum" : [ "Legacy", "Latest" ]
          },
          "_loc" : {
            "description" : "Entity location",
            "type" : "object",
            "properties" : {
              "teams" : {
                "description" : "Teams of the current entity",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tenant" : {
                "description" : "Organization of the current entity",
                "type" : "string"
              }
            }
          },
          "enforceSecureCommunication" : {
            "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "clientValidatorRef" : {
            "description" : "A reference to validation authority",
            "type" : "string"
          },
          "privateApp" : {
            "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
            "type" : "boolean"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching paths on request"
          },
          "domain" : {
            "description" : "The domain on which the service is available.",
            "type" : "string"
          },
          "name" : {
            "description" : "The name of your service. Only for debug and human readability purposes",
            "type" : "string"
          },
          "transformerConfig" : {
            "description" : "Transformer plugins configuration",
            "type" : "object"
          },
          "subdomain" : {
            "description" : "The subdomain on which the service is available",
            "type" : "string"
          },
          "maintenanceMode" : {
            "description" : "Display a maintainance page when a user try to use the service",
            "type" : "boolean"
          },
          "secComHeaders" : {
            "description" : "Header names for sec. com. protocol",
            "type" : "object",
            "properties" : {
              "stateResponseName" : {
                "description" : "Header name where the validation token respondewill be",
                "type" : "string"
              },
              "claimRequestName" : {
                "description" : "Header name where the info token will be",
                "type" : "string"
              },
              "stateRequestName" : {
                "description" : "Header name where the validation token will be",
                "type" : "string"
              }
            }
          },
          "handleLegacyDomain" : {
            "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
            "type" : "boolean"
          },
          "logAnalyticsOnServer" : {
            "description" : "Log analytics event on the server",
            "type" : "boolean"
          },
          "strictlyPrivate" : {
            "description" : "When strictly private, private app session will not pass apikey filters",
            "type" : "boolean"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "buildMode" : {
            "description" : "Display a construction page when a user try to use the service",
            "type" : "boolean"
          },
          "targets" : {
            "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "predicate" : {
                  "description" : "Predicate to choose this target",
                  "type" : "object",
                  "properties" : {
                    "rack" : {
                      "description" : "Rack name",
                      "type" : "string"
                    },
                    "provider" : {
                      "description" : "Provider name",
                      "type" : "string"
                    },
                    "dataCenter" : {
                      "description" : "Datacenter name",
                      "type" : "string"
                    },
                    "zone" : {
                      "description" : "Zone name",
                      "type" : "string"
                    },
                    "positions" : {
                      "description" : "Possible positions",
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "latitude" : {
                            "format" : "double",
                            "description" : "Latitude of the position",
                            "type" : "number"
                          },
                          "longitude" : {
                            "format" : "double",
                            "description" : "Longitude of the position",
                            "type" : "number"
                          },
                          "radius" : {
                            "format" : "double",
                            "description" : "Radius of the circle in meters",
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "description" : "the kind of predicate",
                      "type" : "string",
                      "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                    },
                    "region" : {
                      "description" : "Region name",
                      "type" : "string"
                    },
                    "dc" : {
                      "description" : "DC name",
                      "type" : "string"
                    }
                  }
                },
                "metadata" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "Metadata for this target"
                },
                "protocol" : {
                  "description" : "Protocol for the target",
                  "type" : "string"
                },
                "scheme" : {
                  "description" : "The protocol used for communication. Can be http or https",
                  "type" : "string"
                },
                "mtlsConfig" : {
                  "description" : "TLS settings to contact this target",
                  "type" : "object",
                  "properties" : {
                    "mtls" : {
                      "description" : "Enabled",
                      "type" : "boolean"
                    },
                    "loose" : {
                      "description" : "Loose verification",
                      "type" : "boolean"
                    },
                    "trustAll" : {
                      "description" : "Trust any certificate",
                      "type" : "boolean"
                    },
                    "trustedCerts" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    },
                    "certs" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Trusted cert. ids"
                    }
                  }
                },
                "host" : {
                  "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                  "type" : "string"
                },
                "ipAddress" : {
                  "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                  "type" : "string"
                },
                "weight" : {
                  "format" : "int32",
                  "description" : "The weight of the target when choosing",
                  "type" : "integer"
                },
                "tags" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Tags for this target"
                }
              }
            }
          },
          "enabled" : {
            "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
            "type" : "boolean"
          },
          "additionalHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client response"
          },
          "sendStateChallenge" : {
            "description" : "Should otoroshi send challenge token",
            "type" : "boolean"
          },
          "root" : {
            "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
            "type" : "string"
          },
          "additionalHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client request. Useful to add authentication"
          },
          "issueCertCA" : {
            "description" : "CA for cert issuance",
            "type" : "string"
          },
          "ipFiltering" : {
            "description" : "Ip filtering settings",
            "type" : "object",
            "properties" : {
              "whitelist" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Whitelisted IP addresses"
              },
              "blacklist" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Blacklisted IP addresses"
              }
            }
          },
          "redirection" : {
            "description" : "Redirection settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Whether or not redirection is enabled",
                "type" : "boolean"
              },
              "code" : {
                "format" : "int32",
                "description" : "The http redirect code",
                "type" : "integer"
              },
              "to" : {
                "description" : "The location for redirection",
                "type" : "string"
              }
            }
          },
          "redirectToLocal" : {
            "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
            "type" : "boolean"
          },
          "headersVerification" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be verified after routing."
          },
          "useAkkaHttpClient" : {
            "description" : "Use akka http client for this service",
            "type" : "boolean"
          },
          "securityExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Exclude some paths"
          },
          "authConfigRef" : {
            "description" : "A reference to a global auth module config",
            "type" : "string"
          },
          "preRouting" : {
            "description" : "Pre routing plugin settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "pre-routing plugins enabled",
                "type" : "boolean"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled plugins"
              },
              "config" : {
                "description" : "pre-routing plugins configuration",
                "type" : "object"
              }
            }
          },
          "canary" : {
            "description" : "Canary settings",
            "type" : "object",
            "properties" : {
              "root" : {
                "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                "type" : "string"
              },
              "targets" : {
                "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "predicate" : {
                      "description" : "Predicate to choose this target",
                      "type" : "object",
                      "properties" : {
                        "rack" : {
                          "description" : "Rack name",
                          "type" : "string"
                        },
                        "provider" : {
                          "description" : "Provider name",
                          "type" : "string"
                        },
                        "dataCenter" : {
                          "description" : "Datacenter name",
                          "type" : "string"
                        },
                        "zone" : {
                          "description" : "Zone name",
                          "type" : "string"
                        },
                        "positions" : {
                          "description" : "Possible positions",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "latitude" : {
                                "format" : "double",
                                "description" : "Latitude of the position",
                                "type" : "number"
                              },
                              "longitude" : {
                                "format" : "double",
                                "description" : "Longitude of the position",
                                "type" : "number"
                              },
                              "radius" : {
                                "format" : "double",
                                "description" : "Radius of the circle in meters",
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "description" : "the kind of predicate",
                          "type" : "string",
                          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                        },
                        "region" : {
                          "description" : "Region name",
                          "type" : "string"
                        },
                        "dc" : {
                          "description" : "DC name",
                          "type" : "string"
                        }
                      }
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Metadata for this target"
                    },
                    "protocol" : {
                      "description" : "Protocol for the target",
                      "type" : "string"
                    },
                    "scheme" : {
                      "description" : "The protocol used for communication. Can be http or https",
                      "type" : "string"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings to contact this target",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "host" : {
                      "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                      "type" : "string"
                    },
                    "ipAddress" : {
                      "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                      "type" : "string"
                    },
                    "weight" : {
                      "format" : "int32",
                      "description" : "The weight of the target when choosing",
                      "type" : "integer"
                    },
                    "tags" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Tags for this target"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Use canary mode for this service",
                "type" : "boolean"
              },
              "traffic" : {
                "format" : "double",
                "description" : "Ratio of traffic that will be sent to canary targets.",
                "type" : "number"
              }
            }
          },
          "secComExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "URI patterns excluded from secured communications"
          },
          "xForwardedHeaders" : {
            "description" : "Send X-Forwarded-* headers",
            "type" : "boolean"
          },
          "apiKeyConstraints" : {
            "description" : "Routing and extraction constraints for the apikeyh",
            "type" : "object",
            "properties" : {
              "routing" : {
                "description" : "Routing settings for this apikey",
                "type" : "object",
                "properties" : {
                  "oneTagIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "outing if one tag presents in apikey"
                  },
                  "noneMetaKeysIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if none meta keys presents in apikey"
                  },
                  "oneMetaIn" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Routing if one meta presents in apikey"
                  },
                  "oneMetaKeyIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if one meta key presents in apikey"
                  },
                  "allMetaKeysIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if all meta keys presents in apikey"
                  },
                  "noneTagIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if none tags presents in apikey"
                  },
                  "allTagsIn" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Routing if all tags presents in apikey"
                  },
                  "allMetaIn" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Routing if all meta presents in apikey"
                  },
                  "noneMetaIn" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Routing if none meta presents in apikey"
                  }
                }
              },
              "customHeadersAuth" : {
                "description" : "Settings to extract apikey from custom headers",
                "type" : "object",
                "properties" : {
                  "clientSecretHeaderName" : {
                    "description" : "Header name to find client_secret",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  },
                  "clientIdHeaderName" : {
                    "description" : "Header name to find client_id",
                    "type" : "string"
                  }
                }
              },
              "basicAuth" : {
                "description" : "Settings to extract basic auth style apikey",
                "type" : "object",
                "properties" : {
                  "headerName" : {
                    "description" : "Header name to get client_id:client_secret base64 encoded",
                    "type" : "string"
                  },
                  "queryName" : {
                    "description" : "Query param name to get client_id:client_secret base64 encoded",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  }
                }
              },
              "jwtAuth" : {
                "description" : "Settings to extract apikey from jwt token",
                "type" : "object",
                "properties" : {
                  "headerName" : {
                    "description" : "Header name to extract jwt token",
                    "type" : "string"
                  },
                  "maxJwtLifespanSecs" : {
                    "format" : "int64",
                    "description" : "Check if token does not have a long lifespan",
                    "type" : "integer"
                  },
                  "keyPairSigned" : {
                    "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                    "type" : "boolean"
                  },
                  "secretSigned" : {
                    "description" : "Jwt token signed with the client_secret",
                    "type" : "boolean"
                  },
                  "queryName" : {
                    "description" : "Query param name to extract jwt token",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  },
                  "cookieName" : {
                    "description" : "Cookie name to extract jwt token",
                    "type" : "string"
                  },
                  "includeRequestAttributes" : {
                    "description" : "Jwt token should include verb and path",
                    "type" : "boolean"
                  }
                }
              },
              "clientIdAuth" : {
                "description" : "Settings to extract client_id only apikey",
                "type" : "object",
                "properties" : {
                  "headerName" : {
                    "description" : "Header name to find client_id",
                    "type" : "string"
                  },
                  "queryName" : {
                    "description" : "Query param name to find client_id",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Constraint enabled",
                    "type" : "boolean"
                  }
                }
              }
            }
          },
          "sendInfoToken" : {
            "description" : "Should otoroshi send info token",
            "type" : "boolean"
          },
          "issueCert" : {
            "description" : "Flag to automatically issue a cert for this service",
            "type" : "boolean"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
          },
          "privatePatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
          },
          "gzip" : {
            "description" : "GZIP settings",
            "type" : "object",
            "properties" : {
              "compressionLevel" : {
                "format" : "int32",
                "description" : "Compression level (0 - 9)",
                "type" : "integer"
              },
              "blackList" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "blocklisted content types"
              },
              "chunkedThreshold" : {
                "format" : "int32",
                "description" : "Chunk size",
                "type" : "integer"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "bufferSize" : {
                "format" : "int32",
                "description" : "Buffer size in bytes",
                "type" : "integer"
              },
              "whiteList" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "allow listed content types"
              },
              "enabled" : {
                "description" : "Gzip enabled",
                "type" : "boolean"
              }
            }
          },
          "clientConfig" : {
            "description" : "Http client settings",
            "type" : "object",
            "properties" : {
              "sampleInterval" : {
                "format" : "int64",
                "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                "type" : "integer"
              },
              "backoffFactor" : {
                "format" : "int64",
                "description" : "Specify the factor to multiply the delay for each retry",
                "type" : "integer"
              },
              "customTimeouts" : {
                "description" : "Custom timeouts per path",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "path" : {
                      "description" : "path on which this configuration works",
                      "type" : "string"
                    },
                    "callAndStreamTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                      "type" : "integer"
                    },
                    "callTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                      "type" : "integer"
                    },
                    "idleTimeout" : {
                      "format" : "int64",
                      "description" : "Timeout on idle connection",
                      "type" : "integer"
                    },
                    "globalTimeout" : {
                      "format" : "int64",
                      "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                      "type" : "integer"
                    },
                    "connectionTimeout" : {
                      "format" : "int64",
                      "description" : "Timeout at connection",
                      "type" : "integer"
                    }
                  }
                }
              },
              "callAndStreamTimeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                "type" : "integer"
              },
              "retryInitialDelay" : {
                "format" : "int64",
                "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                "type" : "integer"
              },
              "callTimeout" : {
                "format" : "int64",
                "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                "type" : "integer"
              },
              "useCircuitBreaker" : {
                "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
                "type" : "boolean"
              },
              "retries" : {
                "format" : "int32",
                "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                "type" : "integer"
              },
              "proxy" : {
                "description" : "Web proxy settings for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "maxErrors" : {
                "format" : "int32",
                "description" : "Specify how many errors can pass before opening the circuit breaker",
                "type" : "integer"
              },
              "idleTimeout" : {
                "format" : "int64",
                "description" : "Timeout on idle connection",
                "type" : "integer"
              },
              "globalTimeout" : {
                "format" : "int64",
                "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                "type" : "integer"
              },
              "cacheConnectionSettings" : {
                "description" : "Cached connection settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Enable Cached connections at host tevel",
                    "type" : "boolean"
                  },
                  "queueSize" : {
                    "format" : "int32",
                    "description" : "The size for the request queue",
                    "type" : "integer"
                  }
                }
              },
              "connectionTimeout" : {
                "format" : "int64",
                "description" : "Timeout at connection",
                "type" : "integer"
              }
            }
          },
          "env" : {
            "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
            "type" : "string"
          },
          "jwtVerifier" : {
            "description" : "JWT verifiers settings",
            "oneOfConstraints" : [ {
              "required" : [ "metadata", "algoSettings", "name", "id", "source", "type", "strict", "strategy", "_loc", "desc", "tags" ]
            }, {
              "required" : [ "excludedPatterns", "algoSettings", "source", "type", "strict", "strategy", "enabled" ]
            }, {
              "required" : [ "excludedPatterns", "ids", "type", "enabled" ]
            } ],
            "type" : "object",
            "properties" : {
              "metadata" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Entity metadata"
              },
              "algoSettings" : {
                "description" : "Algo settings",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "name" : {
                "description" : "Verifier name",
                "type" : "string"
              },
              "id" : {
                "description" : "Verifier id",
                "type" : "string"
              },
              "source" : {
                "description" : "Token source",
                "oneOfConstraints" : [ {
                  "required" : [ "name", "type" ]
                }, {
                  "required" : [ "name", "type", "remove" ]
                }, {
                  "required" : [ "name", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "name" : {
                    "description" : "Query param name",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of location",
                    "type" : "string",
                    "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                  },
                  "remove" : {
                    "description" : "Remove from value",
                    "type" : "string"
                  }
                }
              },
              "type" : {
                "description" : "the kind of verifier",
                "type" : "string",
                "enum" : [ "global", "local", "ref" ]
              },
              "strict" : {
                "description" : "Strict token verification",
                "type" : "boolean"
              },
              "strategy" : {
                "description" : "Token strategy",
                "oneOfConstraints" : [ {
                  "required" : [ "verificationSettings", "type", "strict", "token" ]
                }, {
                  "required" : [ "verificationSettings", "type" ]
                }, {
                  "required" : [ "algoSettings", "verificationSettings", "type" ]
                }, {
                  "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "verificationSettings" : {
                    "description" : "Verification settings",
                    "type" : "object",
                    "properties" : {
                      "fields" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Fields validation"
                      },
                      "arrayFields" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Fields array validation"
                      }
                    }
                  },
                  "type" : {
                    "description" : "the kind of strategy",
                    "type" : "string",
                    "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                  },
                  "strict" : {
                    "description" : "If the token already exists in the request, then fail",
                    "type" : "boolean"
                  },
                  "token" : {
                    "description" : "The default token",
                    "type" : "object"
                  },
                  "algoSettings" : {
                    "description" : "Algorithm settings for re-signing token",
                    "oneOfConstraints" : [ {
                      "required" : [ "privateKey", "size", "publicKey", "type" ]
                    }, {
                      "required" : [ "size", "certId", "type" ]
                    }, {
                      "required" : [ "size", "base64", "secret", "type" ]
                    }, {
                      "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                    }, {
                      "required" : [ "onlyExposedCerts", "type" ]
                    }, {
                      "required" : [ "size", "certId", "type" ]
                    }, {
                      "required" : [ "privateKey", "size", "publicKey", "type" ]
                    } ],
                    "type" : "object",
                    "properties" : {
                      "privateKey" : {
                        "description" : "Private key (for signing)",
                        "type" : "string"
                      },
                      "size" : {
                        "format" : "int32",
                        "description" : "SHA function size",
                        "type" : "integer"
                      },
                      "publicKey" : {
                        "description" : "Public key (for verification)",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of algosettings",
                        "type" : "string",
                        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                      },
                      "certId" : {
                        "description" : "Certificate id",
                        "type" : "string"
                      },
                      "base64" : {
                        "description" : "The secret is base64 encoded",
                        "type" : "boolean"
                      },
                      "secret" : {
                        "description" : "HMAC secret",
                        "type" : "string"
                      },
                      "kty" : {
                        "description" : "Key type",
                        "type" : "string"
                      },
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Http header when fetching JWKS"
                      },
                      "proxy" : {
                        "description" : "Web proxy for http client",
                        "oneOfConstraints" : [ ],
                        "type" : "object",
                        "properties" : { }
                      },
                      "ttl" : {
                        "description" : "Cache ttl",
                        "type" : "number"
                      },
                      "url" : {
                        "description" : "JWKS url",
                        "type" : "string"
                      },
                      "timeout" : {
                        "description" : "Timeout when fetching JWKS",
                        "type" : "number"
                      },
                      "tlsConfig" : {
                        "description" : "TLS config",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "onlyExposedCerts" : {
                        "description" : "Use only exposed certs",
                        "type" : "boolean"
                      }
                    }
                  },
                  "transformSettings" : {
                    "description" : "Transformation settings",
                    "type" : "object",
                    "properties" : {
                      "mappingSettings" : {
                        "description" : "Token mapping settings",
                        "type" : "object",
                        "properties" : {
                          "map" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Change values"
                          },
                          "values" : {
                            "description" : "Add values",
                            "type" : "object"
                          },
                          "remove" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Remove some token claims"
                          }
                        }
                      },
                      "location" : {
                        "description" : "Location of the token",
                        "type" : "object",
                        "properties" : {
                          "name" : {
                            "description" : "Query param name",
                            "type" : "string"
                          },
                          "type" : {
                            "description" : "the kind of location",
                            "type" : "string",
                            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                          },
                          "remove" : {
                            "description" : "Remove from value",
                            "type" : "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "_loc" : {
                "description" : "Entity location",
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Teams of the current entity",
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "tenant" : {
                    "description" : "Organization of the current entity",
                    "type" : "string"
                  }
                }
              },
              "desc" : {
                "description" : "Verifier description",
                "type" : "string"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Entity tags"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Verifier excluded paths"
              },
              "enabled" : {
                "description" : "Verifier enabled",
                "type" : "boolean"
              },
              "ids" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Verifiers ids"
              }
            }
          },
          "allowHttp10" : {
            "description" : "Allow HTTP/1.0 requests",
            "type" : "boolean"
          },
          "publicPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
          },
          "secComAlgoChallengeBackToOto" : {
            "description" : "Algorithm to verify challenge token coming from the backend",
            "oneOfConstraints" : [ {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "size", "base64", "secret", "type" ]
            }, {
              "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
            }, {
              "required" : [ "onlyExposedCerts", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            } ],
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              }
            }
          },
          "localScheme" : {
            "description" : "The scheme used localy, mainly http",
            "type" : "string"
          },
          "healthCheck" : {
            "description" : "Healthcheck settings",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                "type" : "boolean"
              },
              "url" : {
                "description" : "The URL to check",
                "type" : "string"
              }
            }
          },
          "matchingHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
          },
          "overrideHost" : {
            "description" : "Host header will be overriden with Host of the target",
            "type" : "boolean"
          },
          "secComUseSameAlgo" : {
            "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
            "type" : "boolean"
          },
          "accessValidator" : {
            "description" : "Service access validatiors",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Access validator plugins enabled",
                "type" : "boolean"
              },
              "excludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Excluded paths"
              },
              "refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled plugins"
              },
              "config" : {
                "description" : "Access validator plugins configuration",
                "type" : "object"
              }
            }
          }
        }
      },
      "config" : {
        "description" : "Current plugin config",
        "type" : "object",
        "properties" : {
          "conf" : {
            "description" : "Current conf",
            "type" : "object"
          }
        }
      }
    }
  },
  "otoroshi.plugins.biscuit.PreRoutingVerifierContext" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "ctx" : {
        "description" : "Current context",
        "type" : "object",
        "properties" : {
          "snowflake" : {
            "description" : "The current request snowflake",
            "type" : "string"
          },
          "globalConfig" : {
            "description" : "The current global config",
            "type" : "object"
          },
          "index" : {
            "format" : "int32",
            "description" : "The current plugin index",
            "type" : "integer"
          },
          "descriptor" : {
            "description" : "The current service descriptor",
            "type" : "object",
            "properties" : {
              "removeHeadersIn" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Remove headers on client request"
              },
              "missingOnlyHeadersOut" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Add header on client response if they are not present"
              },
              "metadata" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Just a bunch of random properties"
              },
              "tcpUdpTunneling" : {
                "description" : "Enabled TCP/UDP tunneling through websocket connection",
                "type" : "boolean"
              },
              "cors" : {
                "description" : "CORS settings",
                "type" : "object",
                "properties" : {
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors excluded patterns"
                  },
                  "allowMethods" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors allowed methods"
                  },
                  "allowHeaders" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors allowed headers"
                  },
                  "exposeHeaders" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors exposed header"
                  },
                  "maxAge" : {
                    "description" : "Cors max age",
                    "type" : "number"
                  },
                  "enabled" : {
                    "description" : "Whether or not cors is enabled",
                    "type" : "boolean"
                  },
                  "allowCredentials" : {
                    "description" : "Allow to pass credentials",
                    "type" : "boolean"
                  },
                  "allowOrigin" : {
                    "description" : "The cors allowed origin",
                    "type" : "string"
                  }
                }
              },
              "forceHttps" : {
                "description" : "Will force redirection to https:// if not present",
                "type" : "boolean"
              },
              "matchingRoot" : {
                "description" : "The root path on which the service is available",
                "type" : "string"
              },
              "plugins" : {
                "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
                "type" : "object",
                "properties" : {
                  "config" : {
                    "description" : "Plugins configuration",
                    "type" : "object"
                  },
                  "enabled" : {
                    "description" : "Plugins enabled",
                    "type" : "boolean"
                  },
                  "excluded" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "refs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Enabled plugins"
                  }
                }
              },
              "letsEncrypt" : {
                "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
                "type" : "boolean"
              },
              "useNewWSClient" : {
                "description" : "Use akka http client for this service on websocket calls",
                "type" : "boolean"
              },
              "chaosConfig" : {
                "description" : "Chaos engineering settings",
                "type" : "object",
                "properties" : {
                  "badResponsesFaultConfig" : {
                    "description" : "Settings for bad responses",
                    "type" : "object",
                    "properties" : {
                      "responses" : {
                        "description" : "The possibles responses",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "status" : {
                              "format" : "int32",
                              "description" : "The HTTP status for the response",
                              "type" : "integer"
                            },
                            "body" : {
                              "description" : "The body of the HTTP response",
                              "type" : "string"
                            },
                            "headers" : {
                              "type" : "object",
                              "additionalProperties" : {
                                "type" : "string"
                              },
                              "description" : "The HTTP headers of the response"
                            }
                          }
                        }
                      },
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      }
                    }
                  },
                  "largeResponseFaultConfig" : {
                    "description" : "Settings for large responses",
                    "type" : "object",
                    "properties" : {
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      },
                      "additionalResponseSize" : {
                        "format" : "int32",
                        "description" : "Add n 0 bytes",
                        "type" : "integer"
                      }
                    }
                  },
                  "latencyInjectionFaultConfig" : {
                    "description" : "Settings for latency injection",
                    "type" : "object",
                    "properties" : {
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      },
                      "from" : {
                        "description" : "The start range of latency added to the request",
                        "type" : "number"
                      },
                      "to" : {
                        "description" : "The end range of latency added to the request",
                        "type" : "number"
                      }
                    }
                  },
                  "largeRequestFaultConfig" : {
                    "description" : "Settings for large requests",
                    "type" : "object",
                    "properties" : {
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      },
                      "additionalRequestSize" : {
                        "format" : "int32",
                        "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                        "type" : "integer"
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Whether or not this config is enabled",
                    "type" : "boolean"
                  }
                }
              },
              "secComSettings" : {
                "description" : "Sec. com. settings",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "detectApiKeySooner" : {
                "description" : "Detect if an apikey is present but do not fail if not",
                "type" : "boolean"
              },
              "transformerRefs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled transformer plugins"
              },
              "secComAlgoInfoToken" : {
                "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "missingOnlyHeadersIn" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Add header on client request if they are not present"
              },
              "secComAlgoChallengeOtoToBack" : {
                "description" : "Algorithm to sign challenge token to the backend",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "removeHeadersOut" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Remove headers on client response"
              },
              "stripPath" : {
                "description" : "Strip matching path in the forwarded request path",
                "type" : "boolean"
              },
              "localHost" : {
                "description" : "The host used localy, mainly localhost:xxxx",
                "type" : "string"
              },
              "sendOtoroshiHeadersBack" : {
                "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
                "type" : "boolean"
              },
              "id" : {
                "description" : "A unique random string to identify your service",
                "type" : "string"
              },
              "api" : {
                "description" : "Api exposition settings",
                "type" : "object",
                "properties" : {
                  "exposeApi" : {
                    "description" : "Is this an API",
                    "type" : "boolean"
                  },
                  "openApiDescriptorUrl" : {
                    "description" : "openapi descriptor url",
                    "type" : "string"
                  }
                }
              },
              "secComTtl" : {
                "description" : "TTL for the info token",
                "type" : "number"
              },
              "secComVersion" : {
                "description" : "Version of the challenge token",
                "type" : "string",
                "enum" : [ "V1", "v2" ]
              },
              "targetsLoadBalancing" : {
                "description" : "Loadbalancing strategy",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                  },
                  "ratio" : {
                    "type" : "number",
                    "format" : "double"
                  }
                }
              },
              "userFacing" : {
                "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
                "type" : "boolean"
              },
              "hosts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Possible hosts for the service"
              },
              "restrictions" : {
                "description" : "Restriction settings",
                "type" : "object",
                "properties" : {
                  "allowed" : {
                    "description" : "Allowed paths",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "allowLast" : {
                    "description" : "Evalute allowed paths after everything else",
                    "type" : "boolean"
                  },
                  "forbidden" : {
                    "description" : "Forbidden paths (return 403)",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "notFound" : {
                    "description" : "Not found paths (return 404)",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Restrictions enabled",
                    "type" : "boolean"
                  }
                }
              },
              "readOnly" : {
                "description" : "Service only accepts GET, HEAD and OPTIONS requests",
                "type" : "boolean"
              },
              "secComInfoTokenVersion" : {
                "description" : "Version of the info token",
                "type" : "string",
                "enum" : [ "Legacy", "Latest" ]
              },
              "_loc" : {
                "description" : "Entity location",
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Teams of the current entity",
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "tenant" : {
                    "description" : "Organization of the current entity",
                    "type" : "string"
                  }
                }
              },
              "enforceSecureCommunication" : {
                "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
                "type" : "boolean"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Entity tags"
              },
              "clientValidatorRef" : {
                "description" : "A reference to validation authority",
                "type" : "string"
              },
              "privateApp" : {
                "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
                "type" : "boolean"
              },
              "paths" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Matching paths on request"
              },
              "domain" : {
                "description" : "The domain on which the service is available.",
                "type" : "string"
              },
              "name" : {
                "description" : "The name of your service. Only for debug and human readability purposes",
                "type" : "string"
              },
              "transformerConfig" : {
                "description" : "Transformer plugins configuration",
                "type" : "object"
              },
              "subdomain" : {
                "description" : "The subdomain on which the service is available",
                "type" : "string"
              },
              "maintenanceMode" : {
                "description" : "Display a maintainance page when a user try to use the service",
                "type" : "boolean"
              },
              "secComHeaders" : {
                "description" : "Header names for sec. com. protocol",
                "type" : "object",
                "properties" : {
                  "stateResponseName" : {
                    "description" : "Header name where the validation token respondewill be",
                    "type" : "string"
                  },
                  "claimRequestName" : {
                    "description" : "Header name where the info token will be",
                    "type" : "string"
                  },
                  "stateRequestName" : {
                    "description" : "Header name where the validation token will be",
                    "type" : "string"
                  }
                }
              },
              "handleLegacyDomain" : {
                "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
                "type" : "boolean"
              },
              "logAnalyticsOnServer" : {
                "description" : "Log analytics event on the server",
                "type" : "boolean"
              },
              "strictlyPrivate" : {
                "description" : "When strictly private, private app session will not pass apikey filters",
                "type" : "boolean"
              },
              "description" : {
                "description" : "Entity description",
                "type" : "string"
              },
              "buildMode" : {
                "description" : "Display a construction page when a user try to use the service",
                "type" : "boolean"
              },
              "targets" : {
                "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "predicate" : {
                      "description" : "Predicate to choose this target",
                      "type" : "object",
                      "properties" : {
                        "rack" : {
                          "description" : "Rack name",
                          "type" : "string"
                        },
                        "provider" : {
                          "description" : "Provider name",
                          "type" : "string"
                        },
                        "dataCenter" : {
                          "description" : "Datacenter name",
                          "type" : "string"
                        },
                        "zone" : {
                          "description" : "Zone name",
                          "type" : "string"
                        },
                        "positions" : {
                          "description" : "Possible positions",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "latitude" : {
                                "format" : "double",
                                "description" : "Latitude of the position",
                                "type" : "number"
                              },
                              "longitude" : {
                                "format" : "double",
                                "description" : "Longitude of the position",
                                "type" : "number"
                              },
                              "radius" : {
                                "format" : "double",
                                "description" : "Radius of the circle in meters",
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "description" : "the kind of predicate",
                          "type" : "string",
                          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                        },
                        "region" : {
                          "description" : "Region name",
                          "type" : "string"
                        },
                        "dc" : {
                          "description" : "DC name",
                          "type" : "string"
                        }
                      }
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Metadata for this target"
                    },
                    "protocol" : {
                      "description" : "Protocol for the target",
                      "type" : "string"
                    },
                    "scheme" : {
                      "description" : "The protocol used for communication. Can be http or https",
                      "type" : "string"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings to contact this target",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "host" : {
                      "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                      "type" : "string"
                    },
                    "ipAddress" : {
                      "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                      "type" : "string"
                    },
                    "weight" : {
                      "format" : "int32",
                      "description" : "The weight of the target when choosing",
                      "type" : "integer"
                    },
                    "tags" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Tags for this target"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
                "type" : "boolean"
              },
              "additionalHeadersOut" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be added to each client response"
              },
              "sendStateChallenge" : {
                "description" : "Should otoroshi send challenge token",
                "type" : "boolean"
              },
              "root" : {
                "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                "type" : "string"
              },
              "additionalHeaders" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be added to each client request. Useful to add authentication"
              },
              "issueCertCA" : {
                "description" : "CA for cert issuance",
                "type" : "string"
              },
              "ipFiltering" : {
                "description" : "Ip filtering settings",
                "type" : "object",
                "properties" : {
                  "whitelist" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Whitelisted IP addresses"
                  },
                  "blacklist" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Blacklisted IP addresses"
                  }
                }
              },
              "redirection" : {
                "description" : "Redirection settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Whether or not redirection is enabled",
                    "type" : "boolean"
                  },
                  "code" : {
                    "format" : "int32",
                    "description" : "The http redirect code",
                    "type" : "integer"
                  },
                  "to" : {
                    "description" : "The location for redirection",
                    "type" : "string"
                  }
                }
              },
              "redirectToLocal" : {
                "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
                "type" : "boolean"
              },
              "headersVerification" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be verified after routing."
              },
              "useAkkaHttpClient" : {
                "description" : "Use akka http client for this service",
                "type" : "boolean"
              },
              "securityExcludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Exclude some paths"
              },
              "authConfigRef" : {
                "description" : "A reference to a global auth module config",
                "type" : "string"
              },
              "canary" : {
                "description" : "Canary settings",
                "type" : "object",
                "properties" : {
                  "root" : {
                    "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                    "type" : "string"
                  },
                  "targets" : {
                    "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "predicate" : {
                          "description" : "Predicate to choose this target",
                          "type" : "object",
                          "properties" : {
                            "rack" : {
                              "description" : "Rack name",
                              "type" : "string"
                            },
                            "provider" : {
                              "description" : "Provider name",
                              "type" : "string"
                            },
                            "dataCenter" : {
                              "description" : "Datacenter name",
                              "type" : "string"
                            },
                            "zone" : {
                              "description" : "Zone name",
                              "type" : "string"
                            },
                            "positions" : {
                              "description" : "Possible positions",
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "latitude" : {
                                    "format" : "double",
                                    "description" : "Latitude of the position",
                                    "type" : "number"
                                  },
                                  "longitude" : {
                                    "format" : "double",
                                    "description" : "Longitude of the position",
                                    "type" : "number"
                                  },
                                  "radius" : {
                                    "format" : "double",
                                    "description" : "Radius of the circle in meters",
                                    "type" : "number"
                                  }
                                }
                              }
                            },
                            "type" : {
                              "description" : "the kind of predicate",
                              "type" : "string",
                              "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                            },
                            "region" : {
                              "description" : "Region name",
                              "type" : "string"
                            },
                            "dc" : {
                              "description" : "DC name",
                              "type" : "string"
                            }
                          }
                        },
                        "metadata" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Metadata for this target"
                        },
                        "protocol" : {
                          "description" : "Protocol for the target",
                          "type" : "string"
                        },
                        "scheme" : {
                          "description" : "The protocol used for communication. Can be http or https",
                          "type" : "string"
                        },
                        "mtlsConfig" : {
                          "description" : "TLS settings to contact this target",
                          "type" : "object",
                          "properties" : {
                            "mtls" : {
                              "description" : "Enabled",
                              "type" : "boolean"
                            },
                            "loose" : {
                              "description" : "Loose verification",
                              "type" : "boolean"
                            },
                            "trustAll" : {
                              "description" : "Trust any certificate",
                              "type" : "boolean"
                            },
                            "trustedCerts" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            },
                            "certs" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            }
                          }
                        },
                        "host" : {
                          "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                          "type" : "string"
                        },
                        "ipAddress" : {
                          "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                          "type" : "string"
                        },
                        "weight" : {
                          "format" : "int32",
                          "description" : "The weight of the target when choosing",
                          "type" : "integer"
                        },
                        "tags" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Tags for this target"
                        }
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Use canary mode for this service",
                    "type" : "boolean"
                  },
                  "traffic" : {
                    "format" : "double",
                    "description" : "Ratio of traffic that will be sent to canary targets.",
                    "type" : "number"
                  }
                }
              },
              "preRouting" : {
                "description" : "Pre routing plugin settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "pre-routing plugins enabled",
                    "type" : "boolean"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "refs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Enabled plugins"
                  },
                  "config" : {
                    "description" : "pre-routing plugins configuration",
                    "type" : "object"
                  }
                }
              },
              "secComExcludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "URI patterns excluded from secured communications"
              },
              "xForwardedHeaders" : {
                "description" : "Send X-Forwarded-* headers",
                "type" : "boolean"
              },
              "apiKeyConstraints" : {
                "description" : "Routing and extraction constraints for the apikeyh",
                "type" : "object",
                "properties" : {
                  "routing" : {
                    "description" : "Routing settings for this apikey",
                    "type" : "object",
                    "properties" : {
                      "oneTagIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "outing if one tag presents in apikey"
                      },
                      "noneMetaKeysIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if none meta keys presents in apikey"
                      },
                      "oneMetaIn" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Routing if one meta presents in apikey"
                      },
                      "oneMetaKeyIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if one meta key presents in apikey"
                      },
                      "allMetaKeysIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if all meta keys presents in apikey"
                      },
                      "noneTagIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if none tags presents in apikey"
                      },
                      "allTagsIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if all tags presents in apikey"
                      },
                      "allMetaIn" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Routing if all meta presents in apikey"
                      },
                      "noneMetaIn" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Routing if none meta presents in apikey"
                      }
                    }
                  },
                  "customHeadersAuth" : {
                    "description" : "Settings to extract apikey from custom headers",
                    "type" : "object",
                    "properties" : {
                      "clientSecretHeaderName" : {
                        "description" : "Header name to find client_secret",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      },
                      "clientIdHeaderName" : {
                        "description" : "Header name to find client_id",
                        "type" : "string"
                      }
                    }
                  },
                  "basicAuth" : {
                    "description" : "Settings to extract basic auth style apikey",
                    "type" : "object",
                    "properties" : {
                      "headerName" : {
                        "description" : "Header name to get client_id:client_secret base64 encoded",
                        "type" : "string"
                      },
                      "queryName" : {
                        "description" : "Query param name to get client_id:client_secret base64 encoded",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      }
                    }
                  },
                  "jwtAuth" : {
                    "description" : "Settings to extract apikey from jwt token",
                    "type" : "object",
                    "properties" : {
                      "headerName" : {
                        "description" : "Header name to extract jwt token",
                        "type" : "string"
                      },
                      "maxJwtLifespanSecs" : {
                        "format" : "int64",
                        "description" : "Check if token does not have a long lifespan",
                        "type" : "integer"
                      },
                      "keyPairSigned" : {
                        "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                        "type" : "boolean"
                      },
                      "secretSigned" : {
                        "description" : "Jwt token signed with the client_secret",
                        "type" : "boolean"
                      },
                      "queryName" : {
                        "description" : "Query param name to extract jwt token",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      },
                      "cookieName" : {
                        "description" : "Cookie name to extract jwt token",
                        "type" : "string"
                      },
                      "includeRequestAttributes" : {
                        "description" : "Jwt token should include verb and path",
                        "type" : "boolean"
                      }
                    }
                  },
                  "clientIdAuth" : {
                    "description" : "Settings to extract client_id only apikey",
                    "type" : "object",
                    "properties" : {
                      "headerName" : {
                        "description" : "Header name to find client_id",
                        "type" : "string"
                      },
                      "queryName" : {
                        "description" : "Query param name to find client_id",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              },
              "sendInfoToken" : {
                "description" : "Should otoroshi send info token",
                "type" : "boolean"
              },
              "issueCert" : {
                "description" : "Flag to automatically issue a cert for this service",
                "type" : "boolean"
              },
              "groups" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
              },
              "privatePatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
              },
              "gzip" : {
                "description" : "GZIP settings",
                "type" : "object",
                "properties" : {
                  "compressionLevel" : {
                    "format" : "int32",
                    "description" : "Compression level (0 - 9)",
                    "type" : "integer"
                  },
                  "blackList" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "blocklisted content types"
                  },
                  "chunkedThreshold" : {
                    "format" : "int32",
                    "description" : "Chunk size",
                    "type" : "integer"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "bufferSize" : {
                    "format" : "int32",
                    "description" : "Buffer size in bytes",
                    "type" : "integer"
                  },
                  "whiteList" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "allow listed content types"
                  },
                  "enabled" : {
                    "description" : "Gzip enabled",
                    "type" : "boolean"
                  }
                }
              },
              "clientConfig" : {
                "description" : "Http client settings",
                "type" : "object",
                "properties" : {
                  "sampleInterval" : {
                    "format" : "int64",
                    "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                    "type" : "integer"
                  },
                  "backoffFactor" : {
                    "format" : "int64",
                    "description" : "Specify the factor to multiply the delay for each retry",
                    "type" : "integer"
                  },
                  "customTimeouts" : {
                    "description" : "Custom timeouts per path",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "path" : {
                          "description" : "path on which this configuration works",
                          "type" : "string"
                        },
                        "callAndStreamTimeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                          "type" : "integer"
                        },
                        "callTimeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                          "type" : "integer"
                        },
                        "idleTimeout" : {
                          "format" : "int64",
                          "description" : "Timeout on idle connection",
                          "type" : "integer"
                        },
                        "globalTimeout" : {
                          "format" : "int64",
                          "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                          "type" : "integer"
                        },
                        "connectionTimeout" : {
                          "format" : "int64",
                          "description" : "Timeout at connection",
                          "type" : "integer"
                        }
                      }
                    }
                  },
                  "callAndStreamTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                    "type" : "integer"
                  },
                  "retryInitialDelay" : {
                    "format" : "int64",
                    "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                    "type" : "integer"
                  },
                  "callTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                    "type" : "integer"
                  },
                  "useCircuitBreaker" : {
                    "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
                    "type" : "boolean"
                  },
                  "retries" : {
                    "format" : "int32",
                    "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                    "type" : "integer"
                  },
                  "proxy" : {
                    "description" : "Web proxy settings for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "maxErrors" : {
                    "format" : "int32",
                    "description" : "Specify how many errors can pass before opening the circuit breaker",
                    "type" : "integer"
                  },
                  "idleTimeout" : {
                    "format" : "int64",
                    "description" : "Timeout on idle connection",
                    "type" : "integer"
                  },
                  "globalTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                    "type" : "integer"
                  },
                  "cacheConnectionSettings" : {
                    "description" : "Cached connection settings",
                    "type" : "object",
                    "properties" : {
                      "enabled" : {
                        "description" : "Enable Cached connections at host tevel",
                        "type" : "boolean"
                      },
                      "queueSize" : {
                        "format" : "int32",
                        "description" : "The size for the request queue",
                        "type" : "integer"
                      }
                    }
                  },
                  "connectionTimeout" : {
                    "format" : "int64",
                    "description" : "Timeout at connection",
                    "type" : "integer"
                  }
                }
              },
              "env" : {
                "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
                "type" : "string"
              },
              "jwtVerifier" : {
                "description" : "JWT verifiers settings",
                "type" : "object",
                "properties" : {
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Verifier excluded paths"
                  },
                  "metadata" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Entity metadata"
                  },
                  "source" : {
                    "description" : "Token source",
                    "oneOfConstraints" : [ {
                      "required" : [ "name", "type" ]
                    }, {
                      "required" : [ "name", "type", "remove" ]
                    }, {
                      "required" : [ "name", "type" ]
                    } ],
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Query param name",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of location",
                        "type" : "string",
                        "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                      },
                      "remove" : {
                        "description" : "Remove from value",
                        "type" : "string"
                      }
                    }
                  },
                  "type" : {
                    "description" : "the kind of verifier",
                    "type" : "string",
                    "enum" : [ "global", "local", "ref" ]
                  },
                  "_loc" : {
                    "description" : "Entity location",
                    "type" : "object",
                    "properties" : {
                      "teams" : {
                        "description" : "Teams of the current entity",
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      },
                      "tenant" : {
                        "description" : "Organization of the current entity",
                        "type" : "string"
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Verifier enabled",
                    "type" : "boolean"
                  },
                  "tags" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Entity tags"
                  },
                  "algoSettings" : {
                    "description" : "Algo settings",
                    "type" : "object",
                    "properties" : {
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Http header when fetching JWKS"
                      },
                      "base64" : {
                        "description" : "The secret is base64 encoded",
                        "type" : "boolean"
                      },
                      "publicKey" : {
                        "description" : "Public key (for verification)",
                        "type" : "string"
                      },
                      "certId" : {
                        "description" : "Certificate id",
                        "type" : "string"
                      },
                      "secret" : {
                        "description" : "HMAC secret",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of algosettings",
                        "type" : "string",
                        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                      },
                      "ttl" : {
                        "description" : "Cache ttl",
                        "type" : "number"
                      },
                      "url" : {
                        "description" : "JWKS url",
                        "type" : "string"
                      },
                      "timeout" : {
                        "description" : "Timeout when fetching JWKS",
                        "type" : "number"
                      },
                      "tlsConfig" : {
                        "description" : "TLS config",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "kty" : {
                        "description" : "Key type",
                        "type" : "string"
                      },
                      "privateKey" : {
                        "description" : "Private key (for signing)",
                        "type" : "string"
                      },
                      "proxy" : {
                        "description" : "Web proxy for http client",
                        "oneOfConstraints" : [ ],
                        "type" : "object",
                        "properties" : { }
                      },
                      "onlyExposedCerts" : {
                        "description" : "Use only exposed certs",
                        "type" : "boolean"
                      },
                      "size" : {
                        "format" : "int32",
                        "description" : "SHA function size",
                        "type" : "integer"
                      }
                    }
                  },
                  "name" : {
                    "description" : "Verifier name",
                    "type" : "string"
                  },
                  "ids" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Verifiers ids"
                  },
                  "id" : {
                    "description" : "Verifier id",
                    "type" : "string"
                  },
                  "strict" : {
                    "description" : "Strict token verification",
                    "type" : "boolean"
                  },
                  "strategy" : {
                    "description" : "Token strategy",
                    "oneOfConstraints" : [ {
                      "required" : [ "verificationSettings", "type", "strict", "token" ]
                    }, {
                      "required" : [ "verificationSettings", "type" ]
                    }, {
                      "required" : [ "algoSettings", "verificationSettings", "type" ]
                    }, {
                      "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                    } ],
                    "type" : "object",
                    "properties" : {
                      "verificationSettings" : {
                        "description" : "Verification settings",
                        "type" : "object",
                        "properties" : {
                          "fields" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Fields validation"
                          },
                          "arrayFields" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Fields array validation"
                          }
                        }
                      },
                      "type" : {
                        "description" : "the kind of strategy",
                        "type" : "string",
                        "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                      },
                      "strict" : {
                        "description" : "If the token already exists in the request, then fail",
                        "type" : "boolean"
                      },
                      "token" : {
                        "description" : "The default token",
                        "type" : "object"
                      },
                      "algoSettings" : {
                        "description" : "Algorithm settings for re-signing token",
                        "oneOfConstraints" : [ {
                          "required" : [ "privateKey", "size", "publicKey", "type" ]
                        }, {
                          "required" : [ "size", "certId", "type" ]
                        }, {
                          "required" : [ "size", "base64", "secret", "type" ]
                        }, {
                          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                        }, {
                          "required" : [ "onlyExposedCerts", "type" ]
                        }, {
                          "required" : [ "size", "certId", "type" ]
                        }, {
                          "required" : [ "privateKey", "size", "publicKey", "type" ]
                        } ],
                        "type" : "object",
                        "properties" : {
                          "privateKey" : {
                            "description" : "Private key (for signing)",
                            "type" : "string"
                          },
                          "size" : {
                            "format" : "int32",
                            "description" : "SHA function size",
                            "type" : "integer"
                          },
                          "publicKey" : {
                            "description" : "Public key (for verification)",
                            "type" : "string"
                          },
                          "type" : {
                            "description" : "the kind of algosettings",
                            "type" : "string",
                            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                          },
                          "certId" : {
                            "description" : "Certificate id",
                            "type" : "string"
                          },
                          "base64" : {
                            "description" : "The secret is base64 encoded",
                            "type" : "boolean"
                          },
                          "secret" : {
                            "description" : "HMAC secret",
                            "type" : "string"
                          },
                          "kty" : {
                            "description" : "Key type",
                            "type" : "string"
                          },
                          "headers" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Http header when fetching JWKS"
                          },
                          "proxy" : {
                            "description" : "Web proxy for http client",
                            "oneOfConstraints" : [ ],
                            "type" : "object",
                            "properties" : { }
                          },
                          "ttl" : {
                            "description" : "Cache ttl",
                            "type" : "number"
                          },
                          "url" : {
                            "description" : "JWKS url",
                            "type" : "string"
                          },
                          "timeout" : {
                            "description" : "Timeout when fetching JWKS",
                            "type" : "number"
                          },
                          "tlsConfig" : {
                            "description" : "TLS config",
                            "type" : "object",
                            "properties" : {
                              "mtls" : {
                                "description" : "Enabled",
                                "type" : "boolean"
                              },
                              "loose" : {
                                "description" : "Loose verification",
                                "type" : "boolean"
                              },
                              "trustAll" : {
                                "description" : "Trust any certificate",
                                "type" : "boolean"
                              },
                              "trustedCerts" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Trusted cert. ids"
                              },
                              "certs" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Trusted cert. ids"
                              }
                            }
                          },
                          "onlyExposedCerts" : {
                            "description" : "Use only exposed certs",
                            "type" : "boolean"
                          }
                        }
                      },
                      "transformSettings" : {
                        "description" : "Transformation settings",
                        "type" : "object",
                        "properties" : {
                          "mappingSettings" : {
                            "description" : "Token mapping settings",
                            "type" : "object",
                            "properties" : {
                              "map" : {
                                "type" : "object",
                                "additionalProperties" : {
                                  "type" : "string"
                                },
                                "description" : "Change values"
                              },
                              "values" : {
                                "description" : "Add values",
                                "type" : "object"
                              },
                              "remove" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Remove some token claims"
                              }
                            }
                          },
                          "location" : {
                            "description" : "Location of the token",
                            "type" : "object",
                            "properties" : {
                              "name" : {
                                "description" : "Query param name",
                                "type" : "string"
                              },
                              "type" : {
                                "description" : "the kind of location",
                                "type" : "string",
                                "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                              },
                              "remove" : {
                                "description" : "Remove from value",
                                "type" : "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "desc" : {
                    "description" : "Verifier description",
                    "type" : "string"
                  }
                }
              },
              "allowHttp10" : {
                "description" : "Allow HTTP/1.0 requests",
                "type" : "boolean"
              },
              "publicPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
              },
              "secComAlgoChallengeBackToOto" : {
                "description" : "Algorithm to verify challenge token coming from the backend",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "localScheme" : {
                "description" : "The scheme used localy, mainly http",
                "type" : "string"
              },
              "healthCheck" : {
                "description" : "Healthcheck settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                    "type" : "boolean"
                  },
                  "url" : {
                    "description" : "The URL to check",
                    "type" : "string"
                  }
                }
              },
              "matchingHeaders" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
              },
              "overrideHost" : {
                "description" : "Host header will be overriden with Host of the target",
                "type" : "boolean"
              },
              "secComUseSameAlgo" : {
                "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
                "type" : "boolean"
              },
              "accessValidator" : {
                "description" : "Service access validatiors",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Access validator plugins enabled",
                    "type" : "boolean"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "refs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Enabled plugins"
                  },
                  "config" : {
                    "description" : "Access validator plugins configuration",
                    "type" : "object"
                  }
                }
              }
            }
          },
          "config" : {
            "description" : "The current plugin config.",
            "type" : "object"
          },
          "attrs" : {
            "description" : "The current request attributes",
            "type" : "object",
            "properties" : { }
          }
        }
      },
      "apk" : {
        "description" : "Current apikey",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Bunch of metadata for the key"
          },
          "clientId" : {
            "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
            "type" : "string"
          },
          "clientName" : {
            "description" : "The name of the api key, for humans ;-)",
            "type" : "string"
          },
          "rotation" : {
            "description" : "Apikey rotation settings",
            "type" : "object",
            "properties" : {
              "gracePeriod" : {
                "format" : "int64",
                "description" : "period (in hours) during which both secrets works",
                "type" : "integer"
              },
              "rotationEvery" : {
                "format" : "int64",
                "description" : "Rotate every n hours",
                "type" : "integer"
              },
              "nextSecret" : {
                "description" : "Next client_secret value",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Rotation enabled",
                "type" : "boolean"
              }
            }
          },
          "description" : {
            "description" : "Description of this apikey",
            "type" : "string"
          },
          "restrictions" : {
            "description" : "Apikey restrictions settings",
            "type" : "object",
            "properties" : {
              "allowed" : {
                "description" : "Allowed paths",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "allowLast" : {
                "description" : "Evalute allowed paths after everything else",
                "type" : "boolean"
              },
              "forbidden" : {
                "description" : "Forbidden paths (return 403)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "notFound" : {
                "description" : "Not found paths (return 404)",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "method" : {
                      "description" : "Method of the http request",
                      "type" : "string"
                    },
                    "path" : {
                      "description" : "Path of the http request",
                      "type" : "string"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Restrictions enabled",
                "type" : "boolean"
              }
            }
          },
          "readOnly" : {
            "description" : "The apikey only allow access for GET, HEAD and OPTIONS verbs",
            "type" : "boolean"
          },
          "_loc" : {
            "description" : "The location of the apikey",
            "type" : "object",
            "properties" : {
              "teams" : {
                "description" : "Teams of the current entity",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tenant" : {
                "description" : "Organization of the current entity",
                "type" : "string"
              }
            }
          },
          "enabled" : {
            "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Apikey tags"
          },
          "throttlingQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per second, measured on 10 seconds",
            "type" : "integer"
          },
          "constrainedServicesOnly" : {
            "description" : "This apikey can only be used on services that constrained their apikey routing",
            "type" : "boolean"
          },
          "allowClientIdOnly" : {
            "description" : "This apikey can be used juste with the client_id value",
            "type" : "boolean"
          },
          "monthlyQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per month",
            "type" : "integer"
          },
          "validUntil" : {
            "description" : "Date until when the apikey is valid",
            "type" : "number"
          },
          "authorizedEntities" : {
            "description" : "The group/service ids (prefixed by group_ or service_ on which the key is authorized",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "clientSecret" : {
            "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
            "type" : "string"
          },
          "dailyQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per day",
            "type" : "integer"
          }
        }
      }
    }
  },
  "CodeBody" : {
    "type" : "string",
    "description" : "Plugin scala code"
  },
  "otoroshi.models.AutoCert" : {
    "description" : "Settings to generate certificates on the fly",
    "type" : "object",
    "properties" : {
      "caRef" : {
        "description" : "Generate cert from the following CA",
        "type" : "string"
      },
      "allowed" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "allowed domains"
      },
      "replyNicely" : {
        "description" : "Reply TLS error with an auto generated certificate for the domain",
        "type" : "boolean"
      },
      "notAllowed" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "not allowed domains"
      },
      "enabled" : {
        "description" : "Enable auto cert",
        "type" : "boolean"
      }
    }
  },
  "CertValidResponse" : {
    "type" : "object",
    "description" : "Is certificate valid",
    "properties" : {
      "valid" : {
        "type" : "boolean"
      }
    }
  },
  "otoroshi.models.RestrictionPath" : {
    "description" : "Represent an http request on which restrictions will apply",
    "type" : "object",
    "properties" : {
      "method" : {
        "description" : "Method of the http request",
        "type" : "string"
      },
      "path" : {
        "description" : "Path of the http request",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.loggers.BodyLoggerFilterConfig" : {
    "description" : "Configuration for BodyLogger",
    "type" : "object",
    "properties" : {
      "json" : {
        "description" : "The current config",
        "type" : "object"
      }
    }
  },
  "otoroshi.plugins.external.ExternalHttpValidator" : {
    "description" : "Plugin that validates call based on an external http service",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.NgClientConfig" : {
    "description" : "Settings for the http client when http request is forwarded",
    "type" : "object",
    "properties" : {
      "custom_timeouts" : {
        "description" : "Custom timeouts per path",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "connection_timeout" : {
              "format" : "int64",
              "description" : "Timeout at connection",
              "type" : "integer"
            },
            "call_and_stream_timeout" : {
              "format" : "int64",
              "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
              "type" : "integer"
            },
            "path" : {
              "description" : "path on which this configuration works",
              "type" : "string"
            },
            "call_timeout" : {
              "format" : "int64",
              "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
              "type" : "integer"
            },
            "idle_timeout" : {
              "format" : "int64",
              "description" : "Timeout on idle connection",
              "type" : "integer"
            },
            "global_timeout" : {
              "format" : "int64",
              "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
              "type" : "integer"
            }
          }
        }
      },
      "global_timeout" : {
        "format" : "int64",
        "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
        "type" : "integer"
      },
      "max_errors" : {
        "format" : "int32",
        "description" : "Specify how many errors can pass before opening the circuit breaker",
        "type" : "integer"
      },
      "retry_initial_delay" : {
        "format" : "int64",
        "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
        "type" : "integer"
      },
      "backoff_factor" : {
        "format" : "int64",
        "description" : "Specify the factor to multiply the delay for each retry",
        "type" : "integer"
      },
      "cache_connection_settings" : {
        "description" : "Cached connection settings",
        "type" : "object",
        "properties" : {
          "queue_size" : {
            "format" : "int32",
            "description" : "How much request can be queue before dropping it",
            "type" : "integer"
          },
          "enabled" : {
            "description" : "Is cached connection enabled",
            "type" : "boolean"
          }
        }
      },
      "sample_interval" : {
        "format" : "int64",
        "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
        "type" : "integer"
      },
      "call_and_stream_timeout" : {
        "format" : "int64",
        "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
        "type" : "integer"
      },
      "retries" : {
        "format" : "int32",
        "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
        "type" : "integer"
      },
      "proxy" : {
        "description" : "Web proxy settings for http client",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "call_timeout" : {
        "format" : "int64",
        "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
        "type" : "integer"
      },
      "idle_timeout" : {
        "format" : "int64",
        "description" : "Timeout on idle connection",
        "type" : "integer"
      },
      "connection_timeout" : {
        "format" : "int64",
        "description" : "Timeout at connection",
        "type" : "integer"
      }
    }
  },
  "otoroshi.plugins.composite.CompositePlugin" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.wrappers.CompositeWrapper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.GeolocationMatch" : {
    "description" : "Match a target if in the same geo location radius",
    "type" : "object",
    "properties" : {
      "positions" : {
        "description" : "Possible positions",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "latitude" : {
              "format" : "double",
              "description" : "Latitude of the position",
              "type" : "number"
            },
            "longitude" : {
              "format" : "double",
              "description" : "Longitude of the position",
              "type" : "number"
            },
            "radius" : {
              "format" : "double",
              "description" : "Radius of the circle in meters",
              "type" : "number"
            }
          }
        }
      },
      "type" : {
        "description" : "the kind of predicate",
        "type" : "string",
        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
      }
    }
  },
  "BulkResponseBody" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "the id of the entity"
        },
        "status" : {
          "type" : "integer",
          "description" : "operation status"
        },
        "error" : {
          "type" : "string",
          "description" : "the error of the operation if one"
        }
      },
      "required" : [ "uid", "status" ]
    }
  },
  "otoroshi.models.BadResponsesFaultConfig" : {
    "description" : "List of bad response settings",
    "type" : "object",
    "properties" : {
      "responses" : {
        "description" : "The possibles responses",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "status" : {
              "format" : "int32",
              "description" : "The HTTP status for the response",
              "type" : "integer"
            },
            "body" : {
              "description" : "The body of the HTTP response",
              "type" : "string"
            },
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "The HTTP headers of the response"
            }
          }
        }
      },
      "ratio" : {
        "format" : "double",
        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
        "type" : "number"
      }
    }
  },
  "otoroshi.next.plugins.SOAPActionConfig" : {
    "description" : "Configuration for SOAPAction",
    "type" : "object",
    "properties" : {
      "convert_request_body_to_xml" : {
        "description" : "Convert json body to xml",
        "type" : "boolean"
      },
      "charset" : {
        "description" : "The body charset",
        "type" : "string"
      },
      "envelope" : {
        "description" : "The soap envelope to call",
        "type" : "string"
      },
      "jq_request_filter" : {
        "description" : "JQ filter to transform request body",
        "type" : "string"
      },
      "preserve_query" : {
        "description" : "Preserve query params",
        "type" : "boolean"
      },
      "action" : {
        "description" : "The soap action if one",
        "type" : "string"
      },
      "jq_response_filter" : {
        "description" : "JQ filter to transform response body",
        "type" : "string"
      },
      "url" : {
        "description" : "SOAP endpoint",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.Target" : {
    "description" : "A target model for a service (destination for forwarded requests)",
    "type" : "object",
    "properties" : {
      "predicate" : {
        "description" : "Predicate to choose this target",
        "type" : "object",
        "properties" : {
          "rack" : {
            "description" : "Rack name",
            "type" : "string"
          },
          "provider" : {
            "description" : "Provider name",
            "type" : "string"
          },
          "dataCenter" : {
            "description" : "Datacenter name",
            "type" : "string"
          },
          "zone" : {
            "description" : "Zone name",
            "type" : "string"
          },
          "positions" : {
            "description" : "Possible positions",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "latitude" : {
                  "format" : "double",
                  "description" : "Latitude of the position",
                  "type" : "number"
                },
                "longitude" : {
                  "format" : "double",
                  "description" : "Longitude of the position",
                  "type" : "number"
                },
                "radius" : {
                  "format" : "double",
                  "description" : "Radius of the circle in meters",
                  "type" : "number"
                }
              }
            }
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          },
          "region" : {
            "description" : "Region name",
            "type" : "string"
          },
          "dc" : {
            "description" : "DC name",
            "type" : "string"
          }
        }
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Metadata for this target"
      },
      "protocol" : {
        "description" : "Protocol for the target",
        "type" : "string"
      },
      "scheme" : {
        "description" : "The protocol used for communication. Can be http or https",
        "type" : "string"
      },
      "mtlsConfig" : {
        "description" : "TLS settings to contact this target",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "host" : {
        "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
        "type" : "string"
      },
      "ipAddress" : {
        "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
        "type" : "string"
      },
      "weight" : {
        "format" : "int32",
        "description" : "The weight of the target when choosing",
        "type" : "integer"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Tags for this target"
      }
    }
  },
  "otoroshi.next.plugins.Redirection" : {
    "description" : "Plugin to perform redirections",
    "type" : "object",
    "properties" : {
      "code" : {
        "format" : "int32",
        "description" : "Redirection status code used",
        "type" : "integer"
      },
      "to" : {
        "description" : "The redirection url",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.discovery.DiscoveryJobRegistrationId" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "id" : {
        "description" : "A service id",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.ContextValidationConfig" : {
    "description" : "Configuration for ContextValidation",
    "type" : "object",
    "properties" : {
      "validators" : {
        "description" : "The validators to pass on the current context",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "???",
              "type" : "string"
            },
            "value" : {
              "description" : "???",
              "type" : "object"
            }
          }
        }
      }
    }
  },
  "SimpleAdminList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "createdAt" : {
          "description" : "User creation date",
          "type" : "number"
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Entity metadata"
        },
        "password" : {
          "description" : "User password (bcrypt hashed)",
          "type" : "string"
        },
        "rights" : {
          "description" : "User rights",
          "type" : "object",
          "properties" : {
            "rights" : {
              "description" : "Access rights of a user",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Access rights on teams",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "canRead" : {
                          "description" : "Can this access right read data",
                          "type" : "boolean"
                        },
                        "value" : {
                          "description" : "Access pattern",
                          "type" : "string"
                        },
                        "canWrite" : {
                          "description" : "Can this access right write data",
                          "type" : "boolean"
                        }
                      }
                    }
                  },
                  "tenant" : {
                    "description" : "Access rights on organizations",
                    "type" : "object",
                    "properties" : {
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "typ" : {
          "description" : "Admin kind",
          "type" : "string",
          "enum" : [ "SIMPLE", "WEBAUTHN" ]
        },
        "label" : {
          "description" : "User label",
          "type" : "string"
        },
        "type" : {
          "description" : "the kind of admin",
          "type" : "string",
          "enum" : [ "simple", "webauthn" ]
        },
        "_loc" : {
          "description" : "Entity location",
          "type" : "object",
          "properties" : {
            "teams" : {
              "description" : "Teams of the current entity",
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "tenant" : {
              "description" : "Organization of the current entity",
              "type" : "string"
            }
          }
        },
        "username" : {
          "description" : "User username",
          "type" : "string"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Entity tags"
        }
      }
    }
  },
  "otoroshi.models.Proxies" : {
    "description" : "Various web proxy settings for http client",
    "type" : "object",
    "properties" : {
      "auth" : {
        "description" : "Web proxy used to call OAuth providers",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "clevercloud" : {
        "description" : "Web proxy used to call clevercloud",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "authority" : {
        "description" : "Web proxy used to check authorities",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "elastic" : {
        "description" : "Web proxy used to call elastic",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "alertEmails" : {
        "description" : "Web proxy used to send alert emails",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "services" : {
        "description" : "Web proxy used to access services targets",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "eventsWebhooks" : {
        "description" : "Web proxy used to call webhooks",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "jwk" : {
        "description" : "Web proxy used to fetch jwks",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      }
    }
  },
  "otoroshi.next.plugins.GlobalThrottling" : {
    "description" : "Plugin for throttling",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.ApiKeyRotation" : {
    "description" : "Settings for automatic apikey rotation with grace period",
    "type" : "object",
    "properties" : {
      "gracePeriod" : {
        "format" : "int64",
        "description" : "period (in hours) during which both secrets works",
        "type" : "integer"
      },
      "rotationEvery" : {
        "format" : "int64",
        "description" : "Rotate every n hours",
        "type" : "integer"
      },
      "nextSecret" : {
        "description" : "Next client_secret value",
        "type" : "string"
      },
      "enabled" : {
        "description" : "Rotation enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.utils.http.CacheConnectionSettings" : {
    "description" : "The settings for http cached connection at host level",
    "type" : "object",
    "properties" : {
      "enabled" : {
        "description" : "Enable Cached connections at host tevel",
        "type" : "boolean"
      },
      "queueSize" : {
        "format" : "int32",
        "description" : "The size for the request queue",
        "type" : "integer"
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesAdmissionWebhookSidecarInjector" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.tcp.SniSettings" : {
    "description" : "SNI settings for a TCP proxy",
    "type" : "object",
    "properties" : {
      "forwardIfNoMatch" : {
        "description" : "",
        "type" : "boolean"
      },
      "enabled" : {
        "description" : "SNI extraction enabled",
        "type" : "boolean"
      },
      "forwardsTo" : {
        "description" : "forwards call to",
        "type" : "object",
        "properties" : {
          "port" : {
            "format" : "int32",
            "description" : "Target port",
            "type" : "integer"
          },
          "ip" : {
            "description" : "Target ip",
            "type" : "string"
          },
          "host" : {
            "description" : "Target host",
            "type" : "string"
          },
          "tls" : {
            "description" : "Use tls",
            "type" : "boolean"
          }
        }
      }
    }
  },
  "otoroshi.plugins.clientcert.HasClientCertMatchingValidator" : {
    "description" : "Plugin that validates client certificates",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.LoadBalancing" : {
    "type" : "object",
    "description" : "Loadbalancing strategy",
    "properties" : {
      "type" : {
        "type" : "string",
        "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
      },
      "ratio" : {
        "type" : "number",
        "format" : "double"
      }
    }
  },
  "otoroshi.models.RedirectionSettings" : {
    "description" : "Settings for routing redirection",
    "type" : "object",
    "properties" : {
      "enabled" : {
        "description" : "Whether or not redirection is enabled",
        "type" : "boolean"
      },
      "code" : {
        "format" : "int32",
        "description" : "The http redirect code",
        "type" : "integer"
      },
      "to" : {
        "description" : "The location for redirection",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.NgOtoroshiChallengeKeys" : {
    "description" : "Configuration for OtoroshiChallenge",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.wrappers.RequestTransformerWrapper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.OtoroshiAdmin" : {
    "oneOfConstraints" : [ {
      "required" : [ "createdAt", "metadata", "password", "rights", "typ", "label", "type", "_loc", "username", "tags" ]
    }, {
      "required" : [ "createdAt", "metadata", "password", "credentials", "rights", "typ", "handle", "label", "type", "_loc", "username", "tags" ]
    } ],
    "type" : "object",
    "properties" : {
      "createdAt" : {
        "description" : "User creation date",
        "type" : "number"
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "password" : {
        "description" : "User password",
        "type" : "string"
      },
      "credentials" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "object"
        },
        "description" : "User webauthn credentials"
      },
      "rights" : {
        "description" : "User rights",
        "type" : "object",
        "properties" : {
          "rights" : {
            "description" : "Access rights of a user",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Access rights on teams",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "tenant" : {
                  "description" : "Access rights on organizations",
                  "type" : "object",
                  "properties" : {
                    "canWrite" : {
                      "description" : "Can this access right write data",
                      "type" : "boolean"
                    },
                    "value" : {
                      "description" : "Access pattern",
                      "type" : "string"
                    },
                    "canRead" : {
                      "description" : "Can this access right read data",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "handle" : {
        "description" : "User webauthn handle",
        "type" : "string"
      },
      "typ" : {
        "description" : "Admin kind",
        "type" : "string",
        "enum" : [ "SIMPLE", "WEBAUTHN" ]
      },
      "label" : {
        "description" : "User label",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of admin",
        "type" : "string",
        "enum" : [ "simple", "webauthn" ]
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "username" : {
        "description" : "User username",
        "type" : "string"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      }
    }
  },
  "otoroshi.models.JwtVerifier" : {
    "oneOfConstraints" : [ {
      "required" : [ "metadata", "algoSettings", "name", "id", "source", "type", "strict", "strategy", "_loc", "desc", "tags" ]
    }, {
      "required" : [ "excludedPatterns", "algoSettings", "source", "type", "strict", "strategy", "enabled" ]
    }, {
      "required" : [ "excludedPatterns", "ids", "type", "enabled" ]
    } ],
    "type" : "object",
    "properties" : {
      "excludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Verifier excluded paths"
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "source" : {
        "description" : "Token source",
        "oneOfConstraints" : [ {
          "required" : [ "name", "type" ]
        }, {
          "required" : [ "name", "type", "remove" ]
        }, {
          "required" : [ "name", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Query param name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          },
          "remove" : {
            "description" : "Remove from value",
            "type" : "string"
          }
        }
      },
      "type" : {
        "description" : "the kind of verifier",
        "type" : "string",
        "enum" : [ "global", "local", "ref" ]
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "enabled" : {
        "description" : "Verifier enabled",
        "type" : "boolean"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "algoSettings" : {
        "description" : "Algo settings",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          }
        }
      },
      "name" : {
        "description" : "Verifier name",
        "type" : "string"
      },
      "ids" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Verifiers ids"
      },
      "id" : {
        "description" : "Verifier id",
        "type" : "string"
      },
      "strict" : {
        "description" : "Strict token verification",
        "type" : "boolean"
      },
      "strategy" : {
        "description" : "Token strategy",
        "oneOfConstraints" : [ {
          "required" : [ "verificationSettings", "type", "strict", "token" ]
        }, {
          "required" : [ "verificationSettings", "type" ]
        }, {
          "required" : [ "algoSettings", "verificationSettings", "type" ]
        }, {
          "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "verificationSettings" : {
            "description" : "Verification settings",
            "type" : "object",
            "properties" : {
              "fields" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Fields validation"
              },
              "arrayFields" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Fields array validation"
              }
            }
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          },
          "strict" : {
            "description" : "If the token already exists in the request, then fail",
            "type" : "boolean"
          },
          "token" : {
            "description" : "The default token",
            "type" : "object"
          },
          "algoSettings" : {
            "description" : "Algorithm settings for re-signing token",
            "oneOfConstraints" : [ {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "size", "base64", "secret", "type" ]
            }, {
              "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
            }, {
              "required" : [ "onlyExposedCerts", "type" ]
            }, {
              "required" : [ "size", "certId", "type" ]
            }, {
              "required" : [ "privateKey", "size", "publicKey", "type" ]
            } ],
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key (for signing)",
                "type" : "string"
              },
              "size" : {
                "format" : "int32",
                "description" : "SHA function size",
                "type" : "integer"
              },
              "publicKey" : {
                "description" : "Public key (for verification)",
                "type" : "string"
              },
              "type" : {
                "description" : "the kind of algosettings",
                "type" : "string",
                "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
              },
              "certId" : {
                "description" : "Certificate id",
                "type" : "string"
              },
              "base64" : {
                "description" : "The secret is base64 encoded",
                "type" : "boolean"
              },
              "secret" : {
                "description" : "HMAC secret",
                "type" : "string"
              },
              "kty" : {
                "description" : "Key type",
                "type" : "string"
              },
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Http header when fetching JWKS"
              },
              "proxy" : {
                "description" : "Web proxy for http client",
                "oneOfConstraints" : [ ],
                "type" : "object",
                "properties" : { }
              },
              "ttl" : {
                "description" : "Cache ttl",
                "type" : "number"
              },
              "url" : {
                "description" : "JWKS url",
                "type" : "string"
              },
              "timeout" : {
                "description" : "Timeout when fetching JWKS",
                "type" : "number"
              },
              "tlsConfig" : {
                "description" : "TLS config",
                "type" : "object",
                "properties" : {
                  "mtls" : {
                    "description" : "Enabled",
                    "type" : "boolean"
                  },
                  "loose" : {
                    "description" : "Loose verification",
                    "type" : "boolean"
                  },
                  "trustAll" : {
                    "description" : "Trust any certificate",
                    "type" : "boolean"
                  },
                  "trustedCerts" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  },
                  "certs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Trusted cert. ids"
                  }
                }
              },
              "onlyExposedCerts" : {
                "description" : "Use only exposed certs",
                "type" : "boolean"
              }
            }
          },
          "transformSettings" : {
            "description" : "Transformation settings",
            "type" : "object",
            "properties" : {
              "mappingSettings" : {
                "description" : "Token mapping settings",
                "type" : "object",
                "properties" : {
                  "map" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Change values"
                  },
                  "values" : {
                    "description" : "Add values",
                    "type" : "object"
                  },
                  "remove" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Remove some token claims"
                  }
                }
              },
              "location" : {
                "description" : "Location of the token",
                "type" : "object",
                "properties" : {
                  "name" : {
                    "description" : "Query param name",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of location",
                    "type" : "string",
                    "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                  },
                  "remove" : {
                    "description" : "Remove from value",
                    "type" : "string"
                  }
                }
              }
            }
          }
        }
      },
      "desc" : {
        "description" : "Verifier description",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.jsoup.HtmlPatcher" : {
    "description" : "Plugin to transform html response body",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.apikeys.ClientCredentialFlowBody" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "clientId" : {
        "description" : "The request client id",
        "type" : "string"
      },
      "scope" : {
        "description" : "Scope of the request",
        "type" : "string"
      },
      "clientSecret" : {
        "description" : "The request client secret",
        "type" : "string"
      },
      "grantType" : {
        "description" : "The grand type (client_credentials)",
        "type" : "string"
      },
      "bearerKind" : {
        "description" : "The kind of bearer",
        "type" : "string"
      }
    }
  },
  "otoroshi.auth.BasicAuthModuleConfig" : {
    "description" : "Authentication module that let you use otoroshi as the identity provider",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "metadata of the module"
      },
      "sessionCookieValues" : {
        "description" : "Settings for the session cookie",
        "type" : "object",
        "properties" : {
          "httpOnly" : {
            "description" : "Is cookie accessible on server side only",
            "type" : "boolean"
          },
          "secure" : {
            "description" : "Is cookie for https only",
            "type" : "boolean"
          }
        }
      },
      "basicAuth" : {
        "description" : "Use standard basic auth or web login form",
        "type" : "boolean"
      },
      "type" : {
        "description" : "the type of the module",
        "type" : "string",
        "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
      },
      "userValidators" : {
        "description" : "Validators that will check if the current user is authorized after successful login",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "???",
              "type" : "string"
            },
            "value" : {
              "description" : "???",
              "type" : "object"
            }
          }
        }
      },
      "_loc" : {
        "description" : "location of the module",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "users" : {
        "description" : "Users attached to the module",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "description" : "User metadata",
              "type" : "object"
            },
            "password" : {
              "description" : "User password (bcrypt hashed)",
              "type" : "string"
            },
            "rights" : {
              "description" : "User rights",
              "type" : "object",
              "properties" : {
                "rights" : {
                  "description" : "Access rights of a user",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "teams" : {
                        "description" : "Access rights on teams",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "canRead" : {
                              "description" : "Can this access right read data",
                              "type" : "boolean"
                            },
                            "value" : {
                              "description" : "Access pattern",
                              "type" : "string"
                            },
                            "canWrite" : {
                              "description" : "Can this access right write data",
                              "type" : "boolean"
                            }
                          }
                        }
                      },
                      "tenant" : {
                        "description" : "Access rights on organizations",
                        "type" : "object",
                        "properties" : {
                          "canWrite" : {
                            "description" : "Can this access right write data",
                            "type" : "boolean"
                          },
                          "value" : {
                            "description" : "Access pattern",
                            "type" : "string"
                          },
                          "canRead" : {
                            "description" : "Can this access right read data",
                            "type" : "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "name" : {
              "description" : "User name",
              "type" : "string"
            },
            "webauthn" : {
              "description" : "Webauthn details",
              "type" : "object",
              "properties" : {
                "handle" : {
                  "description" : "Webauthn user handle",
                  "type" : "string"
                },
                "credentials" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object"
                  },
                  "description" : "Webauthn credentials"
                }
              }
            },
            "email" : {
              "description" : "User email",
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "User tags"
            }
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "sessionMaxAge" : {
        "format" : "int32",
        "description" : "max age for the session cookie in seconds",
        "type" : "integer"
      },
      "name" : {
        "description" : "name of the module",
        "type" : "string"
      },
      "webauthn" : {
        "description" : "Use webauthn for login",
        "type" : "boolean"
      },
      "id" : {
        "description" : "id of the module",
        "type" : "string"
      },
      "desc" : {
        "description" : "description of the module",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.metrics.PrometheusSupport" : {
    "description" : "Plugin to collect service metrics",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.izanami.IzanamiProxyConfig" : {
    "description" : "Configuration for IzanamiProxy",
    "type" : "object",
    "properties" : {
      "configurationEnabled" : {
        "description" : "Is configuration proxy enabled",
        "type" : "boolean"
      },
      "path" : {
        "description" : "Izanami server path",
        "type" : "string"
      },
      "izanamiUrl" : {
        "description" : "Izanami server url",
        "type" : "string"
      },
      "featuresWithContextEnabled" : {
        "description" : "Is contextual features enabled ?",
        "type" : "boolean"
      },
      "izanamiClientSecret" : {
        "description" : "Izanami client secret",
        "type" : "string"
      },
      "featurePattern" : {
        "description" : "the searched pattern for features",
        "type" : "string"
      },
      "configPattern" : {
        "description" : "the searched pattern for config",
        "type" : "string"
      },
      "izanamiClientId" : {
        "description" : "Izanami client id",
        "type" : "string"
      },
      "autoContext" : {
        "description" : "Automatically pass the current user and/or apikey as context",
        "type" : "boolean"
      },
      "mtls" : {
        "description" : "Izanami server tls config",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "featuresEnabled" : {
        "description" : "Is features proxy enabled",
        "type" : "boolean"
      },
      "timeout" : {
        "description" : "Timeout when talking to the izanami server",
        "type" : "number"
      }
    }
  },
  "otoroshi.next.plugins.NgBadResponsesFaultConfig" : {
    "description" : "Configuration for SnowMonkeyChaos",
    "type" : "object",
    "properties" : {
      "responses" : {
        "description" : "possible response",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "status" : {
              "format" : "int32",
              "description" : "status of the response",
              "type" : "integer"
            },
            "headers" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              },
              "description" : "headers of the response"
            },
            "body" : {
              "description" : "Body of the response",
              "type" : "string"
            }
          }
        }
      },
      "ratio" : {
        "format" : "double",
        "description" : "bad response ratio",
        "type" : "number"
      }
    }
  },
  "otoroshi.plugins.accesslog.KafkaAccessLog" : {
    "description" : "Plugin that log access in a kafka topic",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.AdditionalHeadersOut" : {
    "description" : "Plugin that add headers on a response",
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The headers added to the response"
      }
    }
  },
  "otoroshi.plugins.core.apikeys.CustomHeadersApikeyExtractor" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.utils.mailer.EmailLocation" : {
    "description" : "Email location settings",
    "type" : "object",
    "properties" : {
      "name" : {
        "description" : "Destination name",
        "type" : "string"
      },
      "email" : {
        "description" : "Email address",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.envoy.EnvoyControlPlane" : {
    "description" : "Experimental plugin",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.RackMatch" : {
    "description" : "Match a target if in the same rack",
    "type" : "object",
    "properties" : {
      "rack" : {
        "description" : "Rack name",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of predicate",
        "type" : "string",
        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
      }
    }
  },
  "otoroshi.plugins.oidc.ThirdPartyApiKeyConfig" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.ESAlgoSettings" : {
    "description" : "Settings to use elliptic curve signing algorithm",
    "type" : "object",
    "properties" : {
      "privateKey" : {
        "description" : "The EC private key. If used for verification, can be null",
        "type" : "string"
      },
      "size" : {
        "format" : "int32",
        "description" : "SHA function size",
        "type" : "integer"
      },
      "publicKey" : {
        "description" : "The EC private key. If used for signing, can be null",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of algosettings",
        "type" : "string",
        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
      }
    }
  },
  "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "excludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "deprecated"
      },
      "headerName" : {
        "description" : "deprecated",
        "type" : "string"
      },
      "roles" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "deprecated"
      },
      "localVerificationOnly" : {
        "description" : "deprecated",
        "type" : "boolean"
      },
      "ttl" : {
        "format" : "int64",
        "description" : "deprecated",
        "type" : "integer"
      },
      "enabled" : {
        "description" : "deprecated",
        "type" : "boolean"
      },
      "mode" : {
        "description" : "deprecated",
        "type" : "object",
        "properties" : { }
      },
      "oidcConfigRef" : {
        "description" : "deprecated",
        "type" : "string"
      },
      "rolesPath" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "deprecated"
      },
      "quotasEnabled" : {
        "description" : "deprecated",
        "type" : "boolean"
      },
      "monthlyQuota" : {
        "format" : "int64",
        "description" : "deprecated",
        "type" : "integer"
      },
      "throttlingQuota" : {
        "format" : "int64",
        "description" : "deprecated",
        "type" : "integer"
      },
      "uniqueApiKey" : {
        "description" : "deprecated",
        "type" : "boolean"
      },
      "scopes" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "deprecated"
      },
      "dailyQuota" : {
        "format" : "int64",
        "description" : "deprecated",
        "type" : "integer"
      }
    }
  },
  "otoroshi.plugins.geoloc.GeolocationInfoHeader" : {
    "description" : "Plugin that send geolocation infos to the backend through a header",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.NoneGeolocationSettings" : {
    "type" : "object",
    "description" : "No geolocation extraction",
    "properties" : {
      "type" : {
        "type" : "string",
        "enum" : [ "none" ]
      }
    }
  },
  "otoroshi.next.models.NgServiceDataStore" : {
    "description" : "The datastore for services",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.NgPluginInstance" : {
    "description" : "The current configuration and target for a plugin",
    "type" : "object",
    "properties" : {
      "debug" : {
        "description" : "Is the plugin in debug mode",
        "type" : "boolean"
      },
      "config" : {
        "description" : "The config. of the plugin",
        "type" : "object"
      },
      "exclude" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Excluded paths"
      },
      "include" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Included paths"
      },
      "plugin" : {
        "description" : "The id of the plugin",
        "type" : "string"
      },
      "enabled" : {
        "description" : "Is the plugin enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.next.plugins.JQRequestConfig" : {
    "description" : "Configuration for JQRequest",
    "type" : "object",
    "properties" : {
      "filter" : {
        "description" : "JQ filter for request",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.hmac.HMACValidator" : {
    "description" : "Plugin that can validate an hmac call",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgRestrictions" : {
    "description" : "Plugin to apply routing restrictions",
    "type" : "object",
    "properties" : {
      "allowed" : {
        "description" : "Allowed paths",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "method" : {
              "description" : "The http method (can be *)",
              "type" : "string"
            },
            "path" : {
              "description" : "The request path (can include domain)",
              "type" : "string"
            }
          }
        }
      },
      "forbidden" : {
        "description" : "Forbidden paths",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "method" : {
              "description" : "The http method (can be *)",
              "type" : "string"
            },
            "path" : {
              "description" : "The request path (can include domain)",
              "type" : "string"
            }
          }
        }
      },
      "not_found" : {
        "description" : "Not found paths",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "method" : {
              "description" : "The http method (can be *)",
              "type" : "string"
            },
            "path" : {
              "description" : "The request path (can include domain)",
              "type" : "string"
            }
          }
        }
      },
      "allow_last" : {
        "description" : "Evaluates allowed paths after forbidden and not found",
        "type" : "boolean"
      }
    }
  },
  "WebAuthnRegistrationStartBody" : {
    "type" : "object",
    "description" : ""
  },
  "PatchDocument" : {
    "type" : "object",
    "description" : "A JSONPatch document as defined by RFC 6902",
    "required" : [ "op", "path" ],
    "properties" : {
      "op" : {
        "type" : "string",
        "description" : "The operation to be performed",
        "enum" : [ "add", "remove", "replace", "move", "copy", "test" ]
      },
      "path" : {
        "type" : "string",
        "description" : "A JSON-Pointer"
      },
      "value" : {
        "type" : "object",
        "description" : "The value to be used within the operations."
      },
      "from" : {
        "type" : "string",
        "description" : "A string containing a JSON Pointer value."
      }
    }
  },
  "otoroshi.next.plugins.SendOtoroshiHeadersBack" : {
    "description" : "Plugin to enrich response header with otoroshi infos",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.accesslog.AccessLogJson" : {
    "description" : "Plugin that log access in json",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.Tenant" : {
    "description" : "An otoroshi model for an organization (otoroshi-ui)",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "name" : {
        "description" : "Entity name",
        "type" : "string"
      },
      "description" : {
        "description" : "Entity description",
        "type" : "string"
      },
      "id" : {
        "description" : "Entity id",
        "type" : "string"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      }
    }
  },
  "otoroshi.models.BackOfficeUser" : {
    "description" : "User session for otoroshi-ui admins",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "lastRefresh" : {
        "description" : "Last refresh of the session (OAuth with refresh tokens)",
        "type" : "number"
      },
      "profile" : {
        "description" : "Session user profile",
        "type" : "object"
      },
      "authConfigId" : {
        "description" : "Session created from auth module id",
        "type" : "string"
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "token" : {
        "description" : "Session tokens (only if OAuth/OIDC)",
        "type" : "object"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "createdAt" : {
        "description" : "Creation date for the session",
        "type" : "number"
      },
      "expiredAt" : {
        "description" : "Expiration date for the session",
        "type" : "number"
      },
      "randomId" : {
        "description" : "Session user random id",
        "type" : "string"
      },
      "simpleLogin" : {
        "description" : "Session generated from a simple login module (like basic or ldap)",
        "type" : "boolean"
      },
      "rights" : {
        "description" : "Session user rights",
        "type" : "object",
        "properties" : {
          "rights" : {
            "description" : "Access rights of a user",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Access rights on teams",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "tenant" : {
                  "description" : "Access rights on organizations",
                  "type" : "object",
                  "properties" : {
                    "canWrite" : {
                      "description" : "Can this access right write data",
                      "type" : "boolean"
                    },
                    "value" : {
                      "description" : "Access pattern",
                      "type" : "string"
                    },
                    "canRead" : {
                      "description" : "Can this access right read data",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "name" : {
        "description" : "Session user name",
        "type" : "string"
      },
      "email" : {
        "description" : "User email",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.NoopSpanExporter" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.GeolocationSettings" : {
    "oneOfConstraints" : [ {
      "required" : [ "apikey", "type", "enabled", "timeout" ]
    }, {
      "required" : [ "path", "type", "enabled" ]
    }, {
      "required" : [ "type" ]
    } ],
    "type" : "object",
    "properties" : {
      "apikey" : {
        "description" : "IpStack apikey",
        "type" : "string"
      },
      "type" : {
        "type" : "string",
        "enum" : [ "none" ]
      },
      "enabled" : {
        "description" : "Geolocation using maxmind db enabled",
        "type" : "boolean"
      },
      "timeout" : {
        "format" : "int64",
        "description" : "API call timeout",
        "type" : "integer"
      },
      "path" : {
        "description" : "Maxmlind db file path",
        "type" : "string"
      }
    }
  },
  "otoroshi.events.AlertEvent" : {
    "type" : "object",
    "description" : "Alert trail event"
  },
  "otoroshi.models.ApiDescriptor" : {
    "description" : "Represent if a service exposes an API with an optional url to an openapi descriptor",
    "type" : "object",
    "properties" : {
      "exposeApi" : {
        "description" : "Is this an API",
        "type" : "boolean"
      },
      "openApiDescriptorUrl" : {
        "description" : "openapi descriptor url",
        "type" : "string"
      }
    }
  },
  "otoroshi.auth.SessionCookieValues" : {
    "description" : "The configuration for session cookie",
    "type" : "object",
    "properties" : {
      "httpOnly" : {
        "description" : "Is cookie accessible on server side only",
        "type" : "boolean"
      },
      "secure" : {
        "description" : "Is cookie for https only",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesIngressToDescriptor" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.RBAC" : {
    "description" : "Plugin to apply RBAC",
    "type" : "object",
    "properties" : {
      "allow" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Allowed roles"
      },
      "deny" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Denied roles"
      },
      "role_prefix" : {
        "description" : "Optional value that will prefix roles in tokens",
        "type" : "string"
      },
      "user_path" : {
        "description" : "Where to find role field in a user",
        "type" : "string"
      },
      "roles" : {
        "description" : "roles field name",
        "type" : "string"
      },
      "apikey_path" : {
        "description" : "Where to find role field in an apikey",
        "type" : "string"
      },
      "allow_all" : {
        "description" : "Needs to have all allowed roles",
        "type" : "boolean"
      },
      "deny_all" : {
        "description" : "Needs to have all denied roles",
        "type" : "boolean"
      },
      "jwt_path" : {
        "description" : "Where to find role field in jwt token user",
        "type" : "string"
      }
    }
  },
  "otoroshi.utils.letsencrypt.LetsEncryptSettings" : {
    "description" : "Settings for connection to a let's encrypt (or ACME) server",
    "type" : "object",
    "properties" : {
      "privateKey" : {
        "description" : "Let's encrypt (ACME) private key",
        "type" : "string"
      },
      "contacts" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Let's encrypt (ACME) contacts"
      },
      "emails" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Let's encrypt (ACME) contact emails"
      },
      "enabled" : {
        "description" : "Let's encrypt (ACME) enabled",
        "type" : "boolean"
      },
      "publicKey" : {
        "description" : "Let's encrypt (ACME) public key",
        "type" : "string"
      },
      "server" : {
        "description" : "Let's encrypt (ACME) server",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.models.NgTlsConfig" : {
    "description" : "TLS settings for the http client",
    "type" : "object",
    "properties" : {
      "enabled" : {
        "description" : "Enabled",
        "type" : "boolean"
      },
      "certs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Trusted cert. ids"
      },
      "loose" : {
        "description" : "Loose verification",
        "type" : "boolean"
      },
      "trust_all" : {
        "description" : "Trust any certificate",
        "type" : "boolean"
      },
      "trusted_certs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Trusted cert. ids"
      }
    }
  },
  "otoroshi.models.ApiKeyRouteMatcher" : {
    "description" : "Routing settings based on apikeys metadata and tags",
    "type" : "object",
    "properties" : {
      "oneTagIn" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "outing if one tag presents in apikey"
      },
      "noneMetaKeysIn" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Routing if none meta keys presents in apikey"
      },
      "oneMetaIn" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Routing if one meta presents in apikey"
      },
      "oneMetaKeyIn" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Routing if one meta key presents in apikey"
      },
      "allMetaKeysIn" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Routing if all meta keys presents in apikey"
      },
      "noneTagIn" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Routing if none tags presents in apikey"
      },
      "allTagsIn" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Routing if all tags presents in apikey"
      },
      "allMetaIn" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Routing if all meta presents in apikey"
      },
      "noneMetaIn" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Routing if none meta presents in apikey"
      }
    }
  },
  "otoroshi.next.plugins.SOAPAction" : {
    "description" : "Plugin to call SOAP service",
    "type" : "object",
    "properties" : {
      "convert_request_body_to_xml" : {
        "description" : "Convert json body to xml",
        "type" : "boolean"
      },
      "charset" : {
        "description" : "The body charset",
        "type" : "string"
      },
      "envelope" : {
        "description" : "The soap envelope to call",
        "type" : "string"
      },
      "jq_request_filter" : {
        "description" : "JQ filter to transform request body",
        "type" : "string"
      },
      "preserve_query" : {
        "description" : "Preserve query params",
        "type" : "boolean"
      },
      "action" : {
        "description" : "The soap action if one",
        "type" : "string"
      },
      "jq_response_filter" : {
        "description" : "JQ filter to transform response body",
        "type" : "string"
      },
      "url" : {
        "description" : "SOAP endpoint",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.models.StoredNgBackendDataStore" : {
    "description" : "The datastore for backend",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgApikeyExtractorJwt" : {
    "description" : "Configuration for ApikeyCalls",
    "type" : "object",
    "properties" : {
      "include_request_attrs" : {
        "description" : "Does the jwt token need to include current request attributes to work",
        "type" : "boolean"
      },
      "query_name" : {
        "description" : "The name of the query param to extract",
        "type" : "string"
      },
      "header_name" : {
        "description" : "The name of the header to extract",
        "type" : "string"
      },
      "key_pair_signed" : {
        "description" : "Is it asymmetricaly signed",
        "type" : "boolean"
      },
      "secret_signed" : {
        "description" : "Is it symmetricaly signed",
        "type" : "boolean"
      },
      "enabled" : {
        "description" : "Is it enabled",
        "type" : "boolean"
      },
      "cookie_name" : {
        "description" : "The name of the cookies to extract",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.Outage" : {
    "description" : "A snowmonkey outage model",
    "type" : "object",
    "properties" : {
      "descriptorName" : {
        "description" : "Service descriptor name",
        "type" : "string"
      },
      "descriptorId" : {
        "description" : "Service descriptor id",
        "type" : "string"
      },
      "until" : {
        "description" : "Outage ending date",
        "type" : "string"
      },
      "duration" : {
        "description" : "Outage duration",
        "type" : "number"
      },
      "startedAt" : {
        "description" : "Outage starting date",
        "type" : "number"
      }
    }
  },
  "otoroshi.utils.JsonPathValidator" : {
    "description" : "???",
    "type" : "object",
    "properties" : {
      "path" : {
        "description" : "???",
        "type" : "string"
      },
      "value" : {
        "description" : "???",
        "type" : "object"
      }
    }
  },
  "otoroshi.next.plugins.XForwardedHeaders" : {
    "description" : "Plugin to add X-Forwarded headers in a request",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.utils.ConcurrentMutableTypedMap" : {
    "description" : "A concurrent map with typed keys",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.biscuit.PubKeyBiscuitToken" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "token" : {
        "description" : "the current token",
        "type" : "string"
      }
    }
  },
  "otoroshi.utils.mailer.SendgridSettings" : {
    "description" : "Settings for the sendgrid mailer",
    "type" : "object",
    "properties" : {
      "apiKey" : {
        "description" : "Sendgrid apikey",
        "type" : "string"
      },
      "to" : {
        "description" : "Destination email address",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "description" : "Destination name",
              "type" : "string"
            },
            "email" : {
              "description" : "Email address",
              "type" : "string"
            }
          }
        }
      },
      "type" : {
        "description" : "the kind of mailer",
        "type" : "string",
        "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
      }
    }
  },
  "otoroshi.gateway.CircuitBreakersHolder" : {
    "description" : "Internal component to hold current circuit breakers and their configuration",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgAuthModuleConfig" : {
    "description" : "Configuration for AuthModule",
    "type" : "object",
    "properties" : {
      "module" : {
        "description" : "The id of the auth. module",
        "type" : "string"
      },
      "pass_with_apikey" : {
        "description" : "Pass the request if an apikey is present",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.next.plugins.NgChaosConfig" : {
    "description" : "Configuration for SnowMonkeyChaos",
    "type" : "object",
    "properties" : {
      "bad_responses_fault_config" : {
        "description" : "Config. for bad responses faults",
        "type" : "object",
        "properties" : {
          "responses" : {
            "description" : "possible response",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "status" : {
                  "format" : "int32",
                  "description" : "status of the response",
                  "type" : "integer"
                },
                "headers" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "headers of the response"
                },
                "body" : {
                  "description" : "Body of the response",
                  "type" : "string"
                }
              }
            }
          },
          "ratio" : {
            "format" : "double",
            "description" : "bad response ratio",
            "type" : "number"
          }
        }
      },
      "latency_injection_fault_config" : {
        "description" : "Config. for latency injection faults",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The ratio of requests impacted",
            "type" : "number"
          },
          "from" : {
            "description" : "Lower bound of latency injection",
            "type" : "number"
          },
          "to" : {
            "description" : "Upper bound of latency injection",
            "type" : "number"
          }
        }
      },
      "large_response_fault_config" : {
        "description" : "Config. for large response faults",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The ratio of responses impacted",
            "type" : "number"
          },
          "additional_response_size" : {
            "format" : "int32",
            "description" : "Amount of bytes added of the response body",
            "type" : "integer"
          }
        }
      },
      "large_request_fault_config" : {
        "description" : "Config. for large request body faults",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The ratio of requests impacted",
            "type" : "number"
          },
          "additional_request_size" : {
            "format" : "int32",
            "description" : "Amount of bytes added of the request body",
            "type" : "integer"
          }
        }
      }
    }
  },
  "ByteStreamBody" : {
    "type" : "string",
    "description" : ""
  },
  "play.api.libs.ws.DefaultWSProxyServer" : {
    "type" : "object",
    "properties" : {
      "host" : {
        "type" : "string",
        "description" : "The hostname of the proxy server."
      },
      "port" : {
        "type" : "string",
        "description" : "The port of the proxy server."
      },
      "protocol" : {
        "type" : "string",
        "description" : "The protocol of the proxy server.  Use \"http\" or \"https\".  Defaults to \"http\" if not specified."
      },
      "principal" : {
        "type" : "string",
        "description" : "The principal (aka username) of the credentials for the proxy server."
      },
      "password" : {
        "type" : "string",
        "description" : "The password for the credentials for the proxy server."
      },
      "ntlmDomain" : {
        "type" : "string",
        "description" : "The ntlm domain for the proxy server."
      },
      "encoding" : {
        "type" : "string",
        "description" : "The realm's charset."
      },
      "nonProxyHosts" : {
        "type" : "string",
        "description" : "The non proxied hosts"
      }
    },
    "description" : "Proxy server"
  },
  "otoroshi.plugins.loggers.BodyLogger" : {
    "description" : "Plugin to log http bodies",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.biscuit.AccessValidatorContext" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "ctx" : {
        "description" : "Current context",
        "type" : "object",
        "properties" : {
          "snowflake" : {
            "description" : "The current request snowflake",
            "type" : "string"
          },
          "globalConfig" : {
            "description" : "The current global config",
            "type" : "object"
          },
          "apikey" : {
            "description" : "The current apikey",
            "type" : "object",
            "properties" : {
              "metadata" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Bunch of metadata for the key"
              },
              "clientId" : {
                "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
                "type" : "string"
              },
              "clientName" : {
                "description" : "The name of the api key, for humans ;-)",
                "type" : "string"
              },
              "rotation" : {
                "description" : "Apikey rotation settings",
                "type" : "object",
                "properties" : {
                  "gracePeriod" : {
                    "format" : "int64",
                    "description" : "period (in hours) during which both secrets works",
                    "type" : "integer"
                  },
                  "rotationEvery" : {
                    "format" : "int64",
                    "description" : "Rotate every n hours",
                    "type" : "integer"
                  },
                  "nextSecret" : {
                    "description" : "Next client_secret value",
                    "type" : "string"
                  },
                  "enabled" : {
                    "description" : "Rotation enabled",
                    "type" : "boolean"
                  }
                }
              },
              "description" : {
                "description" : "Description of this apikey",
                "type" : "string"
              },
              "restrictions" : {
                "description" : "Apikey restrictions settings",
                "type" : "object",
                "properties" : {
                  "allowed" : {
                    "description" : "Allowed paths",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "allowLast" : {
                    "description" : "Evalute allowed paths after everything else",
                    "type" : "boolean"
                  },
                  "forbidden" : {
                    "description" : "Forbidden paths (return 403)",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "notFound" : {
                    "description" : "Not found paths (return 404)",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Restrictions enabled",
                    "type" : "boolean"
                  }
                }
              },
              "readOnly" : {
                "description" : "The apikey only allow access for GET, HEAD and OPTIONS verbs",
                "type" : "boolean"
              },
              "_loc" : {
                "description" : "The location of the apikey",
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Teams of the current entity",
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "tenant" : {
                    "description" : "Organization of the current entity",
                    "type" : "string"
                  }
                }
              },
              "enabled" : {
                "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
                "type" : "boolean"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Apikey tags"
              },
              "throttlingQuota" : {
                "format" : "int64",
                "description" : "Authorized number of calls per second, measured on 10 seconds",
                "type" : "integer"
              },
              "constrainedServicesOnly" : {
                "description" : "This apikey can only be used on services that constrained their apikey routing",
                "type" : "boolean"
              },
              "allowClientIdOnly" : {
                "description" : "This apikey can be used juste with the client_id value",
                "type" : "boolean"
              },
              "monthlyQuota" : {
                "format" : "int64",
                "description" : "Authorized number of calls per month",
                "type" : "integer"
              },
              "validUntil" : {
                "description" : "Date until when the apikey is valid",
                "type" : "number"
              },
              "authorizedEntities" : {
                "description" : "The group/service ids (prefixed by group_ or service_ on which the key is authorized",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "clientSecret" : {
                "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
                "type" : "string"
              },
              "dailyQuota" : {
                "format" : "int64",
                "description" : "Authorized number of calls per day",
                "type" : "integer"
              }
            }
          },
          "index" : {
            "format" : "int32",
            "description" : "The current plugin index",
            "type" : "integer"
          },
          "descriptor" : {
            "description" : "The current service descriptor",
            "type" : "object",
            "properties" : {
              "removeHeadersIn" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Remove headers on client request"
              },
              "missingOnlyHeadersOut" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Add header on client response if they are not present"
              },
              "metadata" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Just a bunch of random properties"
              },
              "tcpUdpTunneling" : {
                "description" : "Enabled TCP/UDP tunneling through websocket connection",
                "type" : "boolean"
              },
              "cors" : {
                "description" : "CORS settings",
                "type" : "object",
                "properties" : {
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors excluded patterns"
                  },
                  "allowMethods" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors allowed methods"
                  },
                  "allowHeaders" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors allowed headers"
                  },
                  "exposeHeaders" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors exposed header"
                  },
                  "maxAge" : {
                    "description" : "Cors max age",
                    "type" : "number"
                  },
                  "enabled" : {
                    "description" : "Whether or not cors is enabled",
                    "type" : "boolean"
                  },
                  "allowCredentials" : {
                    "description" : "Allow to pass credentials",
                    "type" : "boolean"
                  },
                  "allowOrigin" : {
                    "description" : "The cors allowed origin",
                    "type" : "string"
                  }
                }
              },
              "forceHttps" : {
                "description" : "Will force redirection to https:// if not present",
                "type" : "boolean"
              },
              "matchingRoot" : {
                "description" : "The root path on which the service is available",
                "type" : "string"
              },
              "plugins" : {
                "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
                "type" : "object",
                "properties" : {
                  "config" : {
                    "description" : "Plugins configuration",
                    "type" : "object"
                  },
                  "enabled" : {
                    "description" : "Plugins enabled",
                    "type" : "boolean"
                  },
                  "excluded" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "refs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Enabled plugins"
                  }
                }
              },
              "letsEncrypt" : {
                "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
                "type" : "boolean"
              },
              "useNewWSClient" : {
                "description" : "Use akka http client for this service on websocket calls",
                "type" : "boolean"
              },
              "chaosConfig" : {
                "description" : "Chaos engineering settings",
                "type" : "object",
                "properties" : {
                  "badResponsesFaultConfig" : {
                    "description" : "Settings for bad responses",
                    "type" : "object",
                    "properties" : {
                      "responses" : {
                        "description" : "The possibles responses",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "status" : {
                              "format" : "int32",
                              "description" : "The HTTP status for the response",
                              "type" : "integer"
                            },
                            "body" : {
                              "description" : "The body of the HTTP response",
                              "type" : "string"
                            },
                            "headers" : {
                              "type" : "object",
                              "additionalProperties" : {
                                "type" : "string"
                              },
                              "description" : "The HTTP headers of the response"
                            }
                          }
                        }
                      },
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      }
                    }
                  },
                  "largeResponseFaultConfig" : {
                    "description" : "Settings for large responses",
                    "type" : "object",
                    "properties" : {
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      },
                      "additionalResponseSize" : {
                        "format" : "int32",
                        "description" : "Add n 0 bytes",
                        "type" : "integer"
                      }
                    }
                  },
                  "latencyInjectionFaultConfig" : {
                    "description" : "Settings for latency injection",
                    "type" : "object",
                    "properties" : {
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      },
                      "from" : {
                        "description" : "The start range of latency added to the request",
                        "type" : "number"
                      },
                      "to" : {
                        "description" : "The end range of latency added to the request",
                        "type" : "number"
                      }
                    }
                  },
                  "largeRequestFaultConfig" : {
                    "description" : "Settings for large requests",
                    "type" : "object",
                    "properties" : {
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      },
                      "additionalRequestSize" : {
                        "format" : "int32",
                        "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                        "type" : "integer"
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Whether or not this config is enabled",
                    "type" : "boolean"
                  }
                }
              },
              "secComSettings" : {
                "description" : "Sec. com. settings",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "detectApiKeySooner" : {
                "description" : "Detect if an apikey is present but do not fail if not",
                "type" : "boolean"
              },
              "transformerRefs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled transformer plugins"
              },
              "secComAlgoInfoToken" : {
                "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "missingOnlyHeadersIn" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Add header on client request if they are not present"
              },
              "secComAlgoChallengeOtoToBack" : {
                "description" : "Algorithm to sign challenge token to the backend",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "removeHeadersOut" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Remove headers on client response"
              },
              "stripPath" : {
                "description" : "Strip matching path in the forwarded request path",
                "type" : "boolean"
              },
              "localHost" : {
                "description" : "The host used localy, mainly localhost:xxxx",
                "type" : "string"
              },
              "sendOtoroshiHeadersBack" : {
                "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
                "type" : "boolean"
              },
              "id" : {
                "description" : "A unique random string to identify your service",
                "type" : "string"
              },
              "api" : {
                "description" : "Api exposition settings",
                "type" : "object",
                "properties" : {
                  "exposeApi" : {
                    "description" : "Is this an API",
                    "type" : "boolean"
                  },
                  "openApiDescriptorUrl" : {
                    "description" : "openapi descriptor url",
                    "type" : "string"
                  }
                }
              },
              "secComTtl" : {
                "description" : "TTL for the info token",
                "type" : "number"
              },
              "secComVersion" : {
                "description" : "Version of the challenge token",
                "type" : "string",
                "enum" : [ "V1", "v2" ]
              },
              "targetsLoadBalancing" : {
                "description" : "Loadbalancing strategy",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                  },
                  "ratio" : {
                    "type" : "number",
                    "format" : "double"
                  }
                }
              },
              "userFacing" : {
                "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
                "type" : "boolean"
              },
              "hosts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Possible hosts for the service"
              },
              "restrictions" : {
                "description" : "Restriction settings",
                "type" : "object",
                "properties" : {
                  "allowed" : {
                    "description" : "Allowed paths",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "allowLast" : {
                    "description" : "Evalute allowed paths after everything else",
                    "type" : "boolean"
                  },
                  "forbidden" : {
                    "description" : "Forbidden paths (return 403)",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "notFound" : {
                    "description" : "Not found paths (return 404)",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Restrictions enabled",
                    "type" : "boolean"
                  }
                }
              },
              "readOnly" : {
                "description" : "Service only accepts GET, HEAD and OPTIONS requests",
                "type" : "boolean"
              },
              "secComInfoTokenVersion" : {
                "description" : "Version of the info token",
                "type" : "string",
                "enum" : [ "Legacy", "Latest" ]
              },
              "_loc" : {
                "description" : "Entity location",
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Teams of the current entity",
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "tenant" : {
                    "description" : "Organization of the current entity",
                    "type" : "string"
                  }
                }
              },
              "enforceSecureCommunication" : {
                "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
                "type" : "boolean"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Entity tags"
              },
              "clientValidatorRef" : {
                "description" : "A reference to validation authority",
                "type" : "string"
              },
              "privateApp" : {
                "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
                "type" : "boolean"
              },
              "paths" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Matching paths on request"
              },
              "domain" : {
                "description" : "The domain on which the service is available.",
                "type" : "string"
              },
              "name" : {
                "description" : "The name of your service. Only for debug and human readability purposes",
                "type" : "string"
              },
              "transformerConfig" : {
                "description" : "Transformer plugins configuration",
                "type" : "object"
              },
              "subdomain" : {
                "description" : "The subdomain on which the service is available",
                "type" : "string"
              },
              "maintenanceMode" : {
                "description" : "Display a maintainance page when a user try to use the service",
                "type" : "boolean"
              },
              "secComHeaders" : {
                "description" : "Header names for sec. com. protocol",
                "type" : "object",
                "properties" : {
                  "stateResponseName" : {
                    "description" : "Header name where the validation token respondewill be",
                    "type" : "string"
                  },
                  "claimRequestName" : {
                    "description" : "Header name where the info token will be",
                    "type" : "string"
                  },
                  "stateRequestName" : {
                    "description" : "Header name where the validation token will be",
                    "type" : "string"
                  }
                }
              },
              "handleLegacyDomain" : {
                "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
                "type" : "boolean"
              },
              "logAnalyticsOnServer" : {
                "description" : "Log analytics event on the server",
                "type" : "boolean"
              },
              "strictlyPrivate" : {
                "description" : "When strictly private, private app session will not pass apikey filters",
                "type" : "boolean"
              },
              "description" : {
                "description" : "Entity description",
                "type" : "string"
              },
              "buildMode" : {
                "description" : "Display a construction page when a user try to use the service",
                "type" : "boolean"
              },
              "targets" : {
                "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "predicate" : {
                      "description" : "Predicate to choose this target",
                      "type" : "object",
                      "properties" : {
                        "rack" : {
                          "description" : "Rack name",
                          "type" : "string"
                        },
                        "provider" : {
                          "description" : "Provider name",
                          "type" : "string"
                        },
                        "dataCenter" : {
                          "description" : "Datacenter name",
                          "type" : "string"
                        },
                        "zone" : {
                          "description" : "Zone name",
                          "type" : "string"
                        },
                        "positions" : {
                          "description" : "Possible positions",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "latitude" : {
                                "format" : "double",
                                "description" : "Latitude of the position",
                                "type" : "number"
                              },
                              "longitude" : {
                                "format" : "double",
                                "description" : "Longitude of the position",
                                "type" : "number"
                              },
                              "radius" : {
                                "format" : "double",
                                "description" : "Radius of the circle in meters",
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "description" : "the kind of predicate",
                          "type" : "string",
                          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                        },
                        "region" : {
                          "description" : "Region name",
                          "type" : "string"
                        },
                        "dc" : {
                          "description" : "DC name",
                          "type" : "string"
                        }
                      }
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Metadata for this target"
                    },
                    "protocol" : {
                      "description" : "Protocol for the target",
                      "type" : "string"
                    },
                    "scheme" : {
                      "description" : "The protocol used for communication. Can be http or https",
                      "type" : "string"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings to contact this target",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "host" : {
                      "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                      "type" : "string"
                    },
                    "ipAddress" : {
                      "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                      "type" : "string"
                    },
                    "weight" : {
                      "format" : "int32",
                      "description" : "The weight of the target when choosing",
                      "type" : "integer"
                    },
                    "tags" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Tags for this target"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
                "type" : "boolean"
              },
              "additionalHeadersOut" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be added to each client response"
              },
              "sendStateChallenge" : {
                "description" : "Should otoroshi send challenge token",
                "type" : "boolean"
              },
              "root" : {
                "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                "type" : "string"
              },
              "additionalHeaders" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be added to each client request. Useful to add authentication"
              },
              "issueCertCA" : {
                "description" : "CA for cert issuance",
                "type" : "string"
              },
              "ipFiltering" : {
                "description" : "Ip filtering settings",
                "type" : "object",
                "properties" : {
                  "whitelist" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Whitelisted IP addresses"
                  },
                  "blacklist" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Blacklisted IP addresses"
                  }
                }
              },
              "redirection" : {
                "description" : "Redirection settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Whether or not redirection is enabled",
                    "type" : "boolean"
                  },
                  "code" : {
                    "format" : "int32",
                    "description" : "The http redirect code",
                    "type" : "integer"
                  },
                  "to" : {
                    "description" : "The location for redirection",
                    "type" : "string"
                  }
                }
              },
              "redirectToLocal" : {
                "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
                "type" : "boolean"
              },
              "headersVerification" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be verified after routing."
              },
              "useAkkaHttpClient" : {
                "description" : "Use akka http client for this service",
                "type" : "boolean"
              },
              "securityExcludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Exclude some paths"
              },
              "authConfigRef" : {
                "description" : "A reference to a global auth module config",
                "type" : "string"
              },
              "canary" : {
                "description" : "Canary settings",
                "type" : "object",
                "properties" : {
                  "root" : {
                    "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                    "type" : "string"
                  },
                  "targets" : {
                    "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "predicate" : {
                          "description" : "Predicate to choose this target",
                          "type" : "object",
                          "properties" : {
                            "rack" : {
                              "description" : "Rack name",
                              "type" : "string"
                            },
                            "provider" : {
                              "description" : "Provider name",
                              "type" : "string"
                            },
                            "dataCenter" : {
                              "description" : "Datacenter name",
                              "type" : "string"
                            },
                            "zone" : {
                              "description" : "Zone name",
                              "type" : "string"
                            },
                            "positions" : {
                              "description" : "Possible positions",
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "latitude" : {
                                    "format" : "double",
                                    "description" : "Latitude of the position",
                                    "type" : "number"
                                  },
                                  "longitude" : {
                                    "format" : "double",
                                    "description" : "Longitude of the position",
                                    "type" : "number"
                                  },
                                  "radius" : {
                                    "format" : "double",
                                    "description" : "Radius of the circle in meters",
                                    "type" : "number"
                                  }
                                }
                              }
                            },
                            "type" : {
                              "description" : "the kind of predicate",
                              "type" : "string",
                              "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                            },
                            "region" : {
                              "description" : "Region name",
                              "type" : "string"
                            },
                            "dc" : {
                              "description" : "DC name",
                              "type" : "string"
                            }
                          }
                        },
                        "metadata" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Metadata for this target"
                        },
                        "protocol" : {
                          "description" : "Protocol for the target",
                          "type" : "string"
                        },
                        "scheme" : {
                          "description" : "The protocol used for communication. Can be http or https",
                          "type" : "string"
                        },
                        "mtlsConfig" : {
                          "description" : "TLS settings to contact this target",
                          "type" : "object",
                          "properties" : {
                            "mtls" : {
                              "description" : "Enabled",
                              "type" : "boolean"
                            },
                            "loose" : {
                              "description" : "Loose verification",
                              "type" : "boolean"
                            },
                            "trustAll" : {
                              "description" : "Trust any certificate",
                              "type" : "boolean"
                            },
                            "trustedCerts" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            },
                            "certs" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            }
                          }
                        },
                        "host" : {
                          "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                          "type" : "string"
                        },
                        "ipAddress" : {
                          "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                          "type" : "string"
                        },
                        "weight" : {
                          "format" : "int32",
                          "description" : "The weight of the target when choosing",
                          "type" : "integer"
                        },
                        "tags" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Tags for this target"
                        }
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Use canary mode for this service",
                    "type" : "boolean"
                  },
                  "traffic" : {
                    "format" : "double",
                    "description" : "Ratio of traffic that will be sent to canary targets.",
                    "type" : "number"
                  }
                }
              },
              "preRouting" : {
                "description" : "Pre routing plugin settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "pre-routing plugins enabled",
                    "type" : "boolean"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "refs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Enabled plugins"
                  },
                  "config" : {
                    "description" : "pre-routing plugins configuration",
                    "type" : "object"
                  }
                }
              },
              "secComExcludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "URI patterns excluded from secured communications"
              },
              "xForwardedHeaders" : {
                "description" : "Send X-Forwarded-* headers",
                "type" : "boolean"
              },
              "apiKeyConstraints" : {
                "description" : "Routing and extraction constraints for the apikeyh",
                "type" : "object",
                "properties" : {
                  "routing" : {
                    "description" : "Routing settings for this apikey",
                    "type" : "object",
                    "properties" : {
                      "oneTagIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "outing if one tag presents in apikey"
                      },
                      "noneMetaKeysIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if none meta keys presents in apikey"
                      },
                      "oneMetaIn" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Routing if one meta presents in apikey"
                      },
                      "oneMetaKeyIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if one meta key presents in apikey"
                      },
                      "allMetaKeysIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if all meta keys presents in apikey"
                      },
                      "noneTagIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if none tags presents in apikey"
                      },
                      "allTagsIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if all tags presents in apikey"
                      },
                      "allMetaIn" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Routing if all meta presents in apikey"
                      },
                      "noneMetaIn" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Routing if none meta presents in apikey"
                      }
                    }
                  },
                  "customHeadersAuth" : {
                    "description" : "Settings to extract apikey from custom headers",
                    "type" : "object",
                    "properties" : {
                      "clientSecretHeaderName" : {
                        "description" : "Header name to find client_secret",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      },
                      "clientIdHeaderName" : {
                        "description" : "Header name to find client_id",
                        "type" : "string"
                      }
                    }
                  },
                  "basicAuth" : {
                    "description" : "Settings to extract basic auth style apikey",
                    "type" : "object",
                    "properties" : {
                      "headerName" : {
                        "description" : "Header name to get client_id:client_secret base64 encoded",
                        "type" : "string"
                      },
                      "queryName" : {
                        "description" : "Query param name to get client_id:client_secret base64 encoded",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      }
                    }
                  },
                  "jwtAuth" : {
                    "description" : "Settings to extract apikey from jwt token",
                    "type" : "object",
                    "properties" : {
                      "headerName" : {
                        "description" : "Header name to extract jwt token",
                        "type" : "string"
                      },
                      "maxJwtLifespanSecs" : {
                        "format" : "int64",
                        "description" : "Check if token does not have a long lifespan",
                        "type" : "integer"
                      },
                      "keyPairSigned" : {
                        "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                        "type" : "boolean"
                      },
                      "secretSigned" : {
                        "description" : "Jwt token signed with the client_secret",
                        "type" : "boolean"
                      },
                      "queryName" : {
                        "description" : "Query param name to extract jwt token",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      },
                      "cookieName" : {
                        "description" : "Cookie name to extract jwt token",
                        "type" : "string"
                      },
                      "includeRequestAttributes" : {
                        "description" : "Jwt token should include verb and path",
                        "type" : "boolean"
                      }
                    }
                  },
                  "clientIdAuth" : {
                    "description" : "Settings to extract client_id only apikey",
                    "type" : "object",
                    "properties" : {
                      "headerName" : {
                        "description" : "Header name to find client_id",
                        "type" : "string"
                      },
                      "queryName" : {
                        "description" : "Query param name to find client_id",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              },
              "sendInfoToken" : {
                "description" : "Should otoroshi send info token",
                "type" : "boolean"
              },
              "issueCert" : {
                "description" : "Flag to automatically issue a cert for this service",
                "type" : "boolean"
              },
              "groups" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
              },
              "privatePatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
              },
              "gzip" : {
                "description" : "GZIP settings",
                "type" : "object",
                "properties" : {
                  "compressionLevel" : {
                    "format" : "int32",
                    "description" : "Compression level (0 - 9)",
                    "type" : "integer"
                  },
                  "blackList" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "blocklisted content types"
                  },
                  "chunkedThreshold" : {
                    "format" : "int32",
                    "description" : "Chunk size",
                    "type" : "integer"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "bufferSize" : {
                    "format" : "int32",
                    "description" : "Buffer size in bytes",
                    "type" : "integer"
                  },
                  "whiteList" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "allow listed content types"
                  },
                  "enabled" : {
                    "description" : "Gzip enabled",
                    "type" : "boolean"
                  }
                }
              },
              "clientConfig" : {
                "description" : "Http client settings",
                "type" : "object",
                "properties" : {
                  "sampleInterval" : {
                    "format" : "int64",
                    "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                    "type" : "integer"
                  },
                  "backoffFactor" : {
                    "format" : "int64",
                    "description" : "Specify the factor to multiply the delay for each retry",
                    "type" : "integer"
                  },
                  "customTimeouts" : {
                    "description" : "Custom timeouts per path",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "path" : {
                          "description" : "path on which this configuration works",
                          "type" : "string"
                        },
                        "callAndStreamTimeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                          "type" : "integer"
                        },
                        "callTimeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                          "type" : "integer"
                        },
                        "idleTimeout" : {
                          "format" : "int64",
                          "description" : "Timeout on idle connection",
                          "type" : "integer"
                        },
                        "globalTimeout" : {
                          "format" : "int64",
                          "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                          "type" : "integer"
                        },
                        "connectionTimeout" : {
                          "format" : "int64",
                          "description" : "Timeout at connection",
                          "type" : "integer"
                        }
                      }
                    }
                  },
                  "callAndStreamTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                    "type" : "integer"
                  },
                  "retryInitialDelay" : {
                    "format" : "int64",
                    "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                    "type" : "integer"
                  },
                  "callTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                    "type" : "integer"
                  },
                  "useCircuitBreaker" : {
                    "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
                    "type" : "boolean"
                  },
                  "retries" : {
                    "format" : "int32",
                    "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                    "type" : "integer"
                  },
                  "proxy" : {
                    "description" : "Web proxy settings for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "maxErrors" : {
                    "format" : "int32",
                    "description" : "Specify how many errors can pass before opening the circuit breaker",
                    "type" : "integer"
                  },
                  "idleTimeout" : {
                    "format" : "int64",
                    "description" : "Timeout on idle connection",
                    "type" : "integer"
                  },
                  "globalTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                    "type" : "integer"
                  },
                  "cacheConnectionSettings" : {
                    "description" : "Cached connection settings",
                    "type" : "object",
                    "properties" : {
                      "enabled" : {
                        "description" : "Enable Cached connections at host tevel",
                        "type" : "boolean"
                      },
                      "queueSize" : {
                        "format" : "int32",
                        "description" : "The size for the request queue",
                        "type" : "integer"
                      }
                    }
                  },
                  "connectionTimeout" : {
                    "format" : "int64",
                    "description" : "Timeout at connection",
                    "type" : "integer"
                  }
                }
              },
              "env" : {
                "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
                "type" : "string"
              },
              "jwtVerifier" : {
                "description" : "JWT verifiers settings",
                "type" : "object",
                "properties" : {
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Verifier excluded paths"
                  },
                  "metadata" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Entity metadata"
                  },
                  "source" : {
                    "description" : "Token source",
                    "oneOfConstraints" : [ {
                      "required" : [ "name", "type" ]
                    }, {
                      "required" : [ "name", "type", "remove" ]
                    }, {
                      "required" : [ "name", "type" ]
                    } ],
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Query param name",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of location",
                        "type" : "string",
                        "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                      },
                      "remove" : {
                        "description" : "Remove from value",
                        "type" : "string"
                      }
                    }
                  },
                  "type" : {
                    "description" : "the kind of verifier",
                    "type" : "string",
                    "enum" : [ "global", "local", "ref" ]
                  },
                  "_loc" : {
                    "description" : "Entity location",
                    "type" : "object",
                    "properties" : {
                      "teams" : {
                        "description" : "Teams of the current entity",
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      },
                      "tenant" : {
                        "description" : "Organization of the current entity",
                        "type" : "string"
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Verifier enabled",
                    "type" : "boolean"
                  },
                  "tags" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Entity tags"
                  },
                  "algoSettings" : {
                    "description" : "Algo settings",
                    "type" : "object",
                    "properties" : {
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Http header when fetching JWKS"
                      },
                      "base64" : {
                        "description" : "The secret is base64 encoded",
                        "type" : "boolean"
                      },
                      "publicKey" : {
                        "description" : "Public key (for verification)",
                        "type" : "string"
                      },
                      "certId" : {
                        "description" : "Certificate id",
                        "type" : "string"
                      },
                      "secret" : {
                        "description" : "HMAC secret",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of algosettings",
                        "type" : "string",
                        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                      },
                      "ttl" : {
                        "description" : "Cache ttl",
                        "type" : "number"
                      },
                      "url" : {
                        "description" : "JWKS url",
                        "type" : "string"
                      },
                      "timeout" : {
                        "description" : "Timeout when fetching JWKS",
                        "type" : "number"
                      },
                      "tlsConfig" : {
                        "description" : "TLS config",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "kty" : {
                        "description" : "Key type",
                        "type" : "string"
                      },
                      "privateKey" : {
                        "description" : "Private key (for signing)",
                        "type" : "string"
                      },
                      "proxy" : {
                        "description" : "Web proxy for http client",
                        "oneOfConstraints" : [ ],
                        "type" : "object",
                        "properties" : { }
                      },
                      "onlyExposedCerts" : {
                        "description" : "Use only exposed certs",
                        "type" : "boolean"
                      },
                      "size" : {
                        "format" : "int32",
                        "description" : "SHA function size",
                        "type" : "integer"
                      }
                    }
                  },
                  "name" : {
                    "description" : "Verifier name",
                    "type" : "string"
                  },
                  "ids" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Verifiers ids"
                  },
                  "id" : {
                    "description" : "Verifier id",
                    "type" : "string"
                  },
                  "strict" : {
                    "description" : "Strict token verification",
                    "type" : "boolean"
                  },
                  "strategy" : {
                    "description" : "Token strategy",
                    "oneOfConstraints" : [ {
                      "required" : [ "verificationSettings", "type", "strict", "token" ]
                    }, {
                      "required" : [ "verificationSettings", "type" ]
                    }, {
                      "required" : [ "algoSettings", "verificationSettings", "type" ]
                    }, {
                      "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                    } ],
                    "type" : "object",
                    "properties" : {
                      "verificationSettings" : {
                        "description" : "Verification settings",
                        "type" : "object",
                        "properties" : {
                          "fields" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Fields validation"
                          },
                          "arrayFields" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Fields array validation"
                          }
                        }
                      },
                      "type" : {
                        "description" : "the kind of strategy",
                        "type" : "string",
                        "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                      },
                      "strict" : {
                        "description" : "If the token already exists in the request, then fail",
                        "type" : "boolean"
                      },
                      "token" : {
                        "description" : "The default token",
                        "type" : "object"
                      },
                      "algoSettings" : {
                        "description" : "Algorithm settings for re-signing token",
                        "oneOfConstraints" : [ {
                          "required" : [ "privateKey", "size", "publicKey", "type" ]
                        }, {
                          "required" : [ "size", "certId", "type" ]
                        }, {
                          "required" : [ "size", "base64", "secret", "type" ]
                        }, {
                          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                        }, {
                          "required" : [ "onlyExposedCerts", "type" ]
                        }, {
                          "required" : [ "size", "certId", "type" ]
                        }, {
                          "required" : [ "privateKey", "size", "publicKey", "type" ]
                        } ],
                        "type" : "object",
                        "properties" : {
                          "privateKey" : {
                            "description" : "Private key (for signing)",
                            "type" : "string"
                          },
                          "size" : {
                            "format" : "int32",
                            "description" : "SHA function size",
                            "type" : "integer"
                          },
                          "publicKey" : {
                            "description" : "Public key (for verification)",
                            "type" : "string"
                          },
                          "type" : {
                            "description" : "the kind of algosettings",
                            "type" : "string",
                            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                          },
                          "certId" : {
                            "description" : "Certificate id",
                            "type" : "string"
                          },
                          "base64" : {
                            "description" : "The secret is base64 encoded",
                            "type" : "boolean"
                          },
                          "secret" : {
                            "description" : "HMAC secret",
                            "type" : "string"
                          },
                          "kty" : {
                            "description" : "Key type",
                            "type" : "string"
                          },
                          "headers" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Http header when fetching JWKS"
                          },
                          "proxy" : {
                            "description" : "Web proxy for http client",
                            "oneOfConstraints" : [ ],
                            "type" : "object",
                            "properties" : { }
                          },
                          "ttl" : {
                            "description" : "Cache ttl",
                            "type" : "number"
                          },
                          "url" : {
                            "description" : "JWKS url",
                            "type" : "string"
                          },
                          "timeout" : {
                            "description" : "Timeout when fetching JWKS",
                            "type" : "number"
                          },
                          "tlsConfig" : {
                            "description" : "TLS config",
                            "type" : "object",
                            "properties" : {
                              "mtls" : {
                                "description" : "Enabled",
                                "type" : "boolean"
                              },
                              "loose" : {
                                "description" : "Loose verification",
                                "type" : "boolean"
                              },
                              "trustAll" : {
                                "description" : "Trust any certificate",
                                "type" : "boolean"
                              },
                              "trustedCerts" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Trusted cert. ids"
                              },
                              "certs" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Trusted cert. ids"
                              }
                            }
                          },
                          "onlyExposedCerts" : {
                            "description" : "Use only exposed certs",
                            "type" : "boolean"
                          }
                        }
                      },
                      "transformSettings" : {
                        "description" : "Transformation settings",
                        "type" : "object",
                        "properties" : {
                          "mappingSettings" : {
                            "description" : "Token mapping settings",
                            "type" : "object",
                            "properties" : {
                              "map" : {
                                "type" : "object",
                                "additionalProperties" : {
                                  "type" : "string"
                                },
                                "description" : "Change values"
                              },
                              "values" : {
                                "description" : "Add values",
                                "type" : "object"
                              },
                              "remove" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Remove some token claims"
                              }
                            }
                          },
                          "location" : {
                            "description" : "Location of the token",
                            "type" : "object",
                            "properties" : {
                              "name" : {
                                "description" : "Query param name",
                                "type" : "string"
                              },
                              "type" : {
                                "description" : "the kind of location",
                                "type" : "string",
                                "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                              },
                              "remove" : {
                                "description" : "Remove from value",
                                "type" : "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "desc" : {
                    "description" : "Verifier description",
                    "type" : "string"
                  }
                }
              },
              "allowHttp10" : {
                "description" : "Allow HTTP/1.0 requests",
                "type" : "boolean"
              },
              "publicPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
              },
              "secComAlgoChallengeBackToOto" : {
                "description" : "Algorithm to verify challenge token coming from the backend",
                "type" : "object",
                "properties" : {
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  }
                }
              },
              "localScheme" : {
                "description" : "The scheme used localy, mainly http",
                "type" : "string"
              },
              "healthCheck" : {
                "description" : "Healthcheck settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                    "type" : "boolean"
                  },
                  "url" : {
                    "description" : "The URL to check",
                    "type" : "string"
                  }
                }
              },
              "matchingHeaders" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
              },
              "overrideHost" : {
                "description" : "Host header will be overriden with Host of the target",
                "type" : "boolean"
              },
              "secComUseSameAlgo" : {
                "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
                "type" : "boolean"
              },
              "accessValidator" : {
                "description" : "Service access validatiors",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Access validator plugins enabled",
                    "type" : "boolean"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "refs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Enabled plugins"
                  },
                  "config" : {
                    "description" : "Access validator plugins configuration",
                    "type" : "object"
                  }
                }
              }
            }
          },
          "config" : {
            "description" : "The current plugin config.",
            "type" : "object"
          },
          "user" : {
            "description" : "The current user",
            "type" : "object",
            "properties" : {
              "metadata" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Entity metadata"
              },
              "lastRefresh" : {
                "description" : "Session last refresh (if OAuth refresh_token supported)",
                "type" : "number"
              },
              "profile" : {
                "description" : "Session user profile",
                "type" : "object"
              },
              "authConfigId" : {
                "description" : "Auth module id that created the session",
                "type" : "string"
              },
              "_loc" : {
                "description" : "Entity location",
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Teams of the current entity",
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "tenant" : {
                    "description" : "Organization of the current entity",
                    "type" : "string"
                  }
                }
              },
              "token" : {
                "description" : "Session tokens (from OAuth)",
                "type" : "object"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Entity tags"
              },
              "expiredAt" : {
                "description" : "Session expiration date",
                "type" : "number"
              },
              "createdAt" : {
                "description" : "Creation date of the session",
                "type" : "number"
              },
              "randomId" : {
                "description" : "Session random id",
                "type" : "string"
              },
              "name" : {
                "description" : "Entity name",
                "type" : "string"
              },
              "realm" : {
                "description" : "Session realm name",
                "type" : "string"
              },
              "email" : {
                "description" : "Session user email",
                "type" : "string"
              },
              "otoroshiData" : {
                "description" : "Otoroshi oriented metadata",
                "type" : "object"
              }
            }
          },
          "attrs" : {
            "description" : "The current request attributes",
            "type" : "object",
            "properties" : { }
          }
        }
      }
    }
  },
  "otoroshi.next.plugins.MockResponse" : {
    "description" : "Plugin to mock responses",
    "type" : "object",
    "properties" : {
      "path" : {
        "description" : "The path for the response",
        "type" : "string"
      },
      "body" : {
        "description" : "The body of the response",
        "type" : "string"
      },
      "status" : {
        "format" : "int32",
        "description" : "The status of the response",
        "type" : "integer"
      },
      "method" : {
        "description" : "The method for the response",
        "type" : "string"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The headers of the response"
      }
    }
  },
  "PemCertificateBody" : {
    "type" : "string",
    "description" : "PEM encoded certificate"
  },
  "otoroshi.next.plugins.GlobalMaintenanceMode" : {
    "description" : "Plugin for maintainance mode",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.LargeRequestFaultConfig" : {
    "description" : "Settings for a large request fault (chaos engineering)",
    "type" : "object",
    "properties" : {
      "ratio" : {
        "format" : "double",
        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
        "type" : "number"
      },
      "additionalRequestSize" : {
        "format" : "int32",
        "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
        "type" : "integer"
      }
    }
  },
  "otoroshi.next.models.NgBackend" : {
    "description" : "A backend representation with it's targets, load balancing and general settings",
    "type" : "object",
    "properties" : {
      "target_refs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "List of NgStoredBackend ids"
      },
      "root" : {
        "description" : "The root path of the backend or the full rewrite path",
        "type" : "string"
      },
      "client" : {
        "description" : "Client config. of the backend",
        "type" : "object",
        "properties" : {
          "custom_timeouts" : {
            "description" : "Custom timeouts per path",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "connection_timeout" : {
                  "format" : "int64",
                  "description" : "Timeout at connection",
                  "type" : "integer"
                },
                "call_and_stream_timeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                  "type" : "integer"
                },
                "path" : {
                  "description" : "path on which this configuration works",
                  "type" : "string"
                },
                "call_timeout" : {
                  "format" : "int64",
                  "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                  "type" : "integer"
                },
                "idle_timeout" : {
                  "format" : "int64",
                  "description" : "Timeout on idle connection",
                  "type" : "integer"
                },
                "global_timeout" : {
                  "format" : "int64",
                  "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                  "type" : "integer"
                }
              }
            }
          },
          "global_timeout" : {
            "format" : "int64",
            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
            "type" : "integer"
          },
          "max_errors" : {
            "format" : "int32",
            "description" : "Specify how many errors can pass before opening the circuit breaker",
            "type" : "integer"
          },
          "retry_initial_delay" : {
            "format" : "int64",
            "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
            "type" : "integer"
          },
          "backoff_factor" : {
            "format" : "int64",
            "description" : "Specify the factor to multiply the delay for each retry",
            "type" : "integer"
          },
          "cache_connection_settings" : {
            "description" : "Cached connection settings",
            "type" : "object",
            "properties" : {
              "queue_size" : {
                "format" : "int32",
                "description" : "How much request can be queue before dropping it",
                "type" : "integer"
              },
              "enabled" : {
                "description" : "Is cached connection enabled",
                "type" : "boolean"
              }
            }
          },
          "sample_interval" : {
            "format" : "int64",
            "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
            "type" : "integer"
          },
          "call_and_stream_timeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
            "type" : "integer"
          },
          "retries" : {
            "format" : "int32",
            "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
            "type" : "integer"
          },
          "proxy" : {
            "description" : "Web proxy settings for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "call_timeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
            "type" : "integer"
          },
          "idle_timeout" : {
            "format" : "int64",
            "description" : "Timeout on idle connection",
            "type" : "integer"
          },
          "connection_timeout" : {
            "format" : "int64",
            "description" : "Timeout at connection",
            "type" : "integer"
          }
        }
      },
      "health_check" : {
        "description" : "Healthcheck config og the backend",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Whether or not healthcheck is enabled on the current service descriptor",
            "type" : "boolean"
          },
          "url" : {
            "description" : "The URL to check",
            "type" : "string"
          }
        }
      },
      "targets" : {
        "description" : "The targets of the backend",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "predicate" : {
              "description" : "Predicate to choose this target",
              "type" : "object",
              "properties" : {
                "rack" : {
                  "description" : "Rack name",
                  "type" : "string"
                },
                "provider" : {
                  "description" : "Provider name",
                  "type" : "string"
                },
                "dataCenter" : {
                  "description" : "Datacenter name",
                  "type" : "string"
                },
                "zone" : {
                  "description" : "Zone name",
                  "type" : "string"
                },
                "positions" : {
                  "description" : "Possible positions",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "latitude" : {
                        "format" : "double",
                        "description" : "Latitude of the position",
                        "type" : "number"
                      },
                      "longitude" : {
                        "format" : "double",
                        "description" : "Longitude of the position",
                        "type" : "number"
                      },
                      "radius" : {
                        "format" : "double",
                        "description" : "Radius of the circle in meters",
                        "type" : "number"
                      }
                    }
                  }
                },
                "type" : {
                  "description" : "the kind of predicate",
                  "type" : "string",
                  "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                },
                "region" : {
                  "description" : "Region name",
                  "type" : "string"
                },
                "dc" : {
                  "description" : "DC name",
                  "type" : "string"
                }
              }
            },
            "protocol" : {
              "description" : "Protocol for the target",
              "type" : "string"
            },
            "hostname" : {
              "description" : "hostname of the target",
              "type" : "string"
            },
            "port" : {
              "format" : "int32",
              "description" : "port of the target",
              "type" : "integer"
            },
            "weight" : {
              "format" : "int32",
              "description" : "The weight of the target when choosing",
              "type" : "integer"
            },
            "tls" : {
              "description" : "Does the target uses TLS",
              "type" : "boolean"
            },
            "tls_config" : {
              "description" : "TLS settings to contact this target",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trust_all" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trusted_certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "id" : {
              "description" : "id of the target",
              "type" : "string"
            },
            "ip_address" : {
              "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
              "type" : "string"
            }
          }
        }
      },
      "rewrite" : {
        "description" : "Does the backend performs a full url rewrite ?",
        "type" : "boolean"
      },
      "load_balancing" : {
        "description" : "Loadbalancing config og the backend",
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
          },
          "ratio" : {
            "type" : "number",
            "format" : "double"
          }
        }
      }
    }
  },
  "ExperimentalFormResponse" : {
    "type" : "object",
    "description" : "The representation of a form to configure a plugin or an entity"
  },
  "otoroshi.next.plugins.NgApikeyExtractorClientId" : {
    "description" : "Configuration for ApikeyCalls",
    "type" : "object",
    "properties" : {
      "query_name" : {
        "description" : "The name of the query param to extract",
        "type" : "string"
      },
      "header_name" : {
        "description" : "The name of the header to extract",
        "type" : "string"
      },
      "enabled" : {
        "description" : "Is it enabled",
        "type" : "boolean"
      }
    }
  },
  "OutagesList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "descriptorName" : {
          "description" : "Service descriptor name",
          "type" : "string"
        },
        "descriptorId" : {
          "description" : "Service descriptor id",
          "type" : "string"
        },
        "until" : {
          "description" : "Outage ending date",
          "type" : "string"
        },
        "duration" : {
          "description" : "Outage duration",
          "type" : "number"
        },
        "startedAt" : {
          "description" : "Outage starting date",
          "type" : "number"
        }
      }
    }
  },
  "otoroshi.plugins.mirror.MirroringPluginConfig" : {
    "description" : "Configuration for MirroringPlugin",
    "type" : "object",
    "properties" : {
      "conf" : {
        "description" : "Current conf",
        "type" : "object"
      }
    }
  },
  "PluginDescriptionsResponse" : {
    "type" : "array",
    "items" : { }
  },
  "otoroshi.script.PreRoutingRef" : {
    "description" : "References to pre-routing plugins",
    "type" : "object",
    "properties" : {
      "enabled" : {
        "description" : "pre-routing plugins enabled",
        "type" : "boolean"
      },
      "excludedPatterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Excluded paths"
      },
      "refs" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Enabled plugins"
      },
      "config" : {
        "description" : "pre-routing plugins configuration",
        "type" : "object"
      }
    }
  },
  "otoroshi.plugins.biscuit.BiscuitConfig" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "checks" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Biscuit checks"
      },
      "revocation_ids" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Ids of revoked tokens"
      },
      "extractorName" : {
        "description" : "The name for the location",
        "type" : "string"
      },
      "resources" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Biscuit resources"
      },
      "enforce" : {
        "description" : "Enforce biscuit validation",
        "type" : "boolean"
      },
      "extractor" : {
        "description" : "Biscuit location (header, cookie, query)",
        "type" : "string"
      },
      "rules" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Biscuit rules"
      },
      "publicKey" : {
        "description" : "Biscuit public key for validation",
        "type" : "string"
      },
      "facts" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Biscuit facts"
      }
    }
  },
  "otoroshi.next.plugins.NgJwtVerificationConfig" : {
    "description" : "Configuration for JwtVerification",
    "type" : "object",
    "properties" : {
      "verifiers" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Id of the jwt verifiers"
      }
    }
  },
  "otoroshi.next.plugins.W3CTracingConfig" : {
    "description" : "Configuration for W3CTracing",
    "type" : "object",
    "properties" : {
      "endpoint" : {
        "description" : "Endpoint of distributed tracing collection",
        "type" : "string"
      },
      "baggage" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Support baggage"
      },
      "kind" : {
        "description" : "Configuration for W3CTracing",
        "type" : "string",
        "enum" : [ "jaeger", "zipkin", "logger", "noop" ]
      },
      "timeout" : {
        "format" : "int64",
        "description" : "Request timeout",
        "type" : "integer"
      }
    }
  },
  "otoroshi.next.models.NgCacheConnectionSettings" : {
    "description" : "The settings for http cached connection at host level",
    "type" : "object",
    "properties" : {
      "queue_size" : {
        "format" : "int32",
        "description" : "How much request can be queue before dropping it",
        "type" : "integer"
      },
      "enabled" : {
        "description" : "Is cached connection enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.plugins.geoloc.IpStackGeolocationHelper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.DataExporterConfig" : {
    "description" : "Module to export otoroshi specific events to whatever destination you want",
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Metadata"
      },
      "type" : {
        "description" : "Type of data exporter",
        "type" : "string",
        "enum" : [ "kafka", "pulsar", "elastic", "webhook", "file", "mailer", "custom", "none", "console", "metrics" ]
      },
      "_loc" : {
        "description" : "location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "enabled" : {
        "description" : "Boolean",
        "type" : "boolean"
      },
      "groupDuration" : {
        "description" : "duration",
        "type" : "number"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      },
      "jsonWorkers" : {
        "format" : "int32",
        "description" : "nb workers",
        "type" : "integer"
      },
      "name" : {
        "description" : "Name",
        "type" : "string"
      },
      "groupSize" : {
        "format" : "int32",
        "description" : "Group size",
        "type" : "integer"
      },
      "id" : {
        "description" : "Id",
        "type" : "string"
      },
      "projection" : {
        "description" : "projection",
        "type" : "object"
      },
      "filtering" : {
        "description" : "filtering",
        "type" : "object",
        "properties" : {
          "include" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            },
            "description" : "Exclude the events matching one of those filters"
          },
          "exclude" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            },
            "description" : "Include the events matching one of those filters"
          }
        }
      },
      "config" : {
        "description" : "Data Exporter config",
        "type" : "object",
        "properties" : {
          "clusterUri" : {
            "description" : "Cluster URL",
            "type" : "string"
          },
          "apiKey" : {
            "description" : "Sendgrid apikey",
            "type" : "string"
          },
          "indexSettings" : {
            "description" : "Indexation settings",
            "type" : "object",
            "properties" : {
              "clientSide" : {
                "description" : "Enable index splitting on client side",
                "type" : "boolean"
              },
              "interval" : {
                "description" : "Index splitting interval",
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "mtlsConfig" : {
            "description" : "TLS config when calling webhook",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "tlsTrustCertsFilePath" : {
            "description" : "Trusted cert path",
            "type" : "string"
          },
          "apiKeyPrivate" : {
            "description" : "Private key",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          },
          "hostValidation" : {
            "description" : "Enabled TLS hostname validation",
            "type" : "boolean"
          },
          "path" : {
            "description" : "File path",
            "type" : "string"
          },
          "password" : {
            "description" : "Elastic password",
            "type" : "string"
          },
          "ref" : {
            "description" : "Script id",
            "type" : "string"
          },
          "servers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "URLs of the kafka servers"
          },
          "truststore" : {
            "description" : "Optional truststore",
            "type" : "string"
          },
          "keystore" : {
            "description" : "Optional keystore",
            "type" : "string"
          },
          "sendEvents" : {
            "description" : "Send events to it, or just connect",
            "type" : "boolean"
          },
          "applyTemplate" : {
            "description" : "Enable template creation/update",
            "type" : "boolean"
          },
          "tenant" : {
            "description" : "Pulsar tenant",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Sender headers"
          },
          "index" : {
            "description" : "Index name",
            "type" : "string"
          },
          "maxFileSize" : {
            "format" : "int32",
            "description" : "Max file size in bytes",
            "type" : "integer"
          },
          "uri" : {
            "description" : "Pulsar cluster url",
            "type" : "string"
          },
          "version" : {
            "description" : "Version of Elasticsearch",
            "type" : "string"
          },
          "url" : {
            "description" : "Sender URL",
            "type" : "string"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Exposed labels"
          },
          "eu" : {
            "description" : "European tenant",
            "type" : "boolean"
          },
          "keyPass" : {
            "description" : "Optional keypass",
            "type" : "string"
          },
          "domain" : {
            "description" : "Mailgun domain",
            "type" : "string"
          },
          "namespace" : {
            "description" : "Pulsar namespace",
            "type" : "string"
          },
          "topic" : {
            "description" : "Pulsar topic",
            "type" : "string"
          },
          "apiKeyPublic" : {
            "description" : "Public key",
            "type" : "string"
          },
          "to" : {
            "description" : "Destination email address",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "description" : "Destination name",
                  "type" : "string"
                },
                "email" : {
                  "description" : "Email address",
                  "type" : "string"
                }
              }
            }
          },
          "user" : {
            "description" : "Elasticsearch user",
            "type" : "string"
          },
          "config" : {
            "description" : "Script config",
            "type" : "object"
          }
        }
      },
      "sendWorkers" : {
        "format" : "int32",
        "description" : "send workers",
        "type" : "integer"
      },
      "desc" : {
        "description" : "Description",
        "type" : "string"
      },
      "bufferSize" : {
        "format" : "int32",
        "description" : "buffer size",
        "type" : "integer"
      }
    }
  },
  "otoroshi.next.plugins.NgEndlessHttpResponseConfig" : {
    "description" : "Configuration for EndlessHttpResponse",
    "type" : "object",
    "properties" : {
      "finger" : {
        "description" : "Using emoji instead of 0 in the response",
        "type" : "boolean"
      },
      "addresses" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "IP address that will get endless responses"
      }
    }
  },
  "otoroshi.ssl.pki.models.GenKeyPairResponse" : {
    "description" : "Response for a keypair generation operation",
    "type" : "object",
    "properties" : {
      "publicKey" : {
        "description" : "Public key (PEM encoded)",
        "type" : "string"
      },
      "privateKey" : {
        "description" : "Private key (PEM encoded)",
        "type" : "string"
      }
    }
  },
  "BulkBody" : {
    "type" : "string",
    "description" : "Body composed of stringified JSON lines, each one representing an entity"
  },
  "otoroshi.plugins.discovery.DiscoveryJob" : {
    "description" : "Plugin that add services discovery to otoroshi",
    "type" : "object",
    "properties" : { }
  },
  "PemCsrBody" : {
    "type" : "string",
    "description" : "PEM encoded csr"
  },
  "Unknown" : {
    "type" : "object",
    "description" : "value used by the openapi generator when no matching type found. Should be fixed in a near future."
  },
  "otoroshi.plugins.authcallers.OAuth2CallerConfig" : {
    "description" : "Configuration for OAuth2Caller",
    "type" : "object",
    "properties" : {
      "cacheTokenSeconds" : {
        "description" : "How long will the token be cached before reaching out to the id server",
        "type" : "number"
      },
      "audience" : {
        "description" : "An optional audiance",
        "type" : "string"
      },
      "headerName" : {
        "description" : "The header name to pass the token",
        "type" : "string"
      },
      "clientId" : {
        "description" : "The client id",
        "type" : "string"
      },
      "method" : {
        "description" : "Http method to talk with the id server",
        "type" : "string"
      },
      "kind" : {
        "description" : "The kind of oauth2 flow",
        "type" : "string",
        "enum" : [ "client_credentials", "password" ]
      },
      "url" : {
        "description" : "Url of the id server",
        "type" : "string"
      },
      "tlsConfig" : {
        "description" : "Current tls config to talk to the id server",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "password" : {
        "description" : "Optional password for password flow",
        "type" : "string"
      },
      "headerValueFormat" : {
        "description" : "The header format to pass the token",
        "type" : "string"
      },
      "jsonPayload" : {
        "description" : "Use a json payload instead of a urlformencoded one",
        "type" : "boolean"
      },
      "scope" : {
        "description" : "Optional request scope",
        "type" : "string"
      },
      "clientSecret" : {
        "description" : "The client secret",
        "type" : "string"
      },
      "user" : {
        "description" : "Optional user for password flow",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.MissingHeadersOut" : {
    "description" : "Plugin to add headers to a response",
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Headers added to the response if missing"
      }
    }
  },
  "otoroshi.plugins.oidc.ThirdPartyApiKeyConfigType" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.authcallers.BasicAuthCaller" : {
    "description" : "Plugin that can call a basic auth. backend",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.Keys" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.CustomHeadersAuthConstraints" : {
    "description" : "Settings to extract apikey from a custom headers",
    "type" : "object",
    "properties" : {
      "clientSecretHeaderName" : {
        "description" : "Header name to find client_secret",
        "type" : "string"
      },
      "enabled" : {
        "description" : "Constraint enabled",
        "type" : "boolean"
      },
      "clientIdHeaderName" : {
        "description" : "Header name to find client_id",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.TlsSettings" : {
    "description" : "Global TLS settings. The default domain that will be picked if no certificate matches the current request",
    "type" : "object",
    "properties" : {
      "randomIfNotFound" : {
        "description" : "Use a random one",
        "type" : "boolean"
      },
      "trustedCAsServer" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "List for CAs trusted by otoroshi when performing TLS termination"
      },
      "includeJdkCaClient" : {
        "description" : "Use known JDK CAs to build trust when performing request from otoroshi to backends",
        "type" : "boolean"
      },
      "defaultDomain" : {
        "description" : "Default domain to choose if not found from current certificates",
        "type" : "string"
      },
      "includeJdkCaServer" : {
        "description" : "Use known JDK CAs to build trust for incoming request",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.models.MetricsSettings" : {
    "description" : "Settings for metrics labels",
    "type" : "object",
    "properties" : {
      "type" : {
        "description" : "the kind of exporter",
        "type" : "string",
        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
      },
      "labels" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Exposed labels"
      }
    }
  },
  "otoroshi.models.Sign" : {
    "description" : "jwt token re-sign policy settings",
    "type" : "object",
    "properties" : {
      "algoSettings" : {
        "description" : "Re-signing jwt token settings",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          }
        }
      },
      "verificationSettings" : {
        "description" : "Verification settings",
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields validation"
          },
          "arrayFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields array validation"
          }
        }
      },
      "type" : {
        "description" : "the kind of strategy",
        "type" : "string",
        "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
      }
    }
  },
  "otoroshi.plugins.mirror.MirroringEvent" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "ctx" : {
        "description" : "Current request context",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "The id of the request",
            "type" : "string"
          },
          "descriptor" : {
            "description" : "Current descriptor",
            "type" : "object",
            "properties" : {
              "removeHeadersIn" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Remove headers on client request"
              },
              "missingOnlyHeadersOut" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Add header on client response if they are not present"
              },
              "metadata" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Just a bunch of random properties"
              },
              "tcpUdpTunneling" : {
                "description" : "Enabled TCP/UDP tunneling through websocket connection",
                "type" : "boolean"
              },
              "cors" : {
                "description" : "CORS settings",
                "type" : "object",
                "properties" : {
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors excluded patterns"
                  },
                  "allowMethods" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors allowed methods"
                  },
                  "allowHeaders" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors allowed headers"
                  },
                  "exposeHeaders" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "The cors exposed header"
                  },
                  "maxAge" : {
                    "description" : "Cors max age",
                    "type" : "number"
                  },
                  "enabled" : {
                    "description" : "Whether or not cors is enabled",
                    "type" : "boolean"
                  },
                  "allowCredentials" : {
                    "description" : "Allow to pass credentials",
                    "type" : "boolean"
                  },
                  "allowOrigin" : {
                    "description" : "The cors allowed origin",
                    "type" : "string"
                  }
                }
              },
              "forceHttps" : {
                "description" : "Will force redirection to https:// if not present",
                "type" : "boolean"
              },
              "matchingRoot" : {
                "description" : "The root path on which the service is available",
                "type" : "string"
              },
              "plugins" : {
                "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
                "type" : "object",
                "properties" : {
                  "config" : {
                    "description" : "Plugins configuration",
                    "type" : "object"
                  },
                  "enabled" : {
                    "description" : "Plugins enabled",
                    "type" : "boolean"
                  },
                  "excluded" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "refs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Enabled plugins"
                  }
                }
              },
              "letsEncrypt" : {
                "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
                "type" : "boolean"
              },
              "useNewWSClient" : {
                "description" : "Use akka http client for this service on websocket calls",
                "type" : "boolean"
              },
              "chaosConfig" : {
                "description" : "Chaos engineering settings",
                "type" : "object",
                "properties" : {
                  "badResponsesFaultConfig" : {
                    "description" : "Settings for bad responses",
                    "type" : "object",
                    "properties" : {
                      "responses" : {
                        "description" : "The possibles responses",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "status" : {
                              "format" : "int32",
                              "description" : "The HTTP status for the response",
                              "type" : "integer"
                            },
                            "body" : {
                              "description" : "The body of the HTTP response",
                              "type" : "string"
                            },
                            "headers" : {
                              "type" : "object",
                              "additionalProperties" : {
                                "type" : "string"
                              },
                              "description" : "The HTTP headers of the response"
                            }
                          }
                        }
                      },
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      }
                    }
                  },
                  "largeResponseFaultConfig" : {
                    "description" : "Settings for large responses",
                    "type" : "object",
                    "properties" : {
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      },
                      "additionalResponseSize" : {
                        "format" : "int32",
                        "description" : "Add n 0 bytes",
                        "type" : "integer"
                      }
                    }
                  },
                  "latencyInjectionFaultConfig" : {
                    "description" : "Settings for latency injection",
                    "type" : "object",
                    "properties" : {
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      },
                      "from" : {
                        "description" : "The start range of latency added to the request",
                        "type" : "number"
                      },
                      "to" : {
                        "description" : "The end range of latency added to the request",
                        "type" : "number"
                      }
                    }
                  },
                  "largeRequestFaultConfig" : {
                    "description" : "Settings for large requests",
                    "type" : "object",
                    "properties" : {
                      "ratio" : {
                        "format" : "double",
                        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
                        "type" : "number"
                      },
                      "additionalRequestSize" : {
                        "format" : "int32",
                        "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
                        "type" : "integer"
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Whether or not this config is enabled",
                    "type" : "boolean"
                  }
                }
              },
              "secComSettings" : {
                "description" : "Sec. com. settings",
                "oneOfConstraints" : [ {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "size", "base64", "secret", "type" ]
                }, {
                  "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                }, {
                  "required" : [ "onlyExposedCerts", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  }
                }
              },
              "detectApiKeySooner" : {
                "description" : "Detect if an apikey is present but do not fail if not",
                "type" : "boolean"
              },
              "transformerRefs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Enabled transformer plugins"
              },
              "secComAlgoInfoToken" : {
                "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
                "oneOfConstraints" : [ {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "size", "base64", "secret", "type" ]
                }, {
                  "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                }, {
                  "required" : [ "onlyExposedCerts", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  }
                }
              },
              "missingOnlyHeadersIn" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Add header on client request if they are not present"
              },
              "secComAlgoChallengeOtoToBack" : {
                "description" : "Algorithm to sign challenge token to the backend",
                "oneOfConstraints" : [ {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "size", "base64", "secret", "type" ]
                }, {
                  "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                }, {
                  "required" : [ "onlyExposedCerts", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  }
                }
              },
              "removeHeadersOut" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Remove headers on client response"
              },
              "stripPath" : {
                "description" : "Strip matching path in the forwarded request path",
                "type" : "boolean"
              },
              "localHost" : {
                "description" : "The host used localy, mainly localhost:xxxx",
                "type" : "string"
              },
              "sendOtoroshiHeadersBack" : {
                "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
                "type" : "boolean"
              },
              "id" : {
                "description" : "A unique random string to identify your service",
                "type" : "string"
              },
              "api" : {
                "description" : "Api exposition settings",
                "type" : "object",
                "properties" : {
                  "exposeApi" : {
                    "description" : "Is this an API",
                    "type" : "boolean"
                  },
                  "openApiDescriptorUrl" : {
                    "description" : "openapi descriptor url",
                    "type" : "string"
                  }
                }
              },
              "secComTtl" : {
                "description" : "TTL for the info token",
                "type" : "number"
              },
              "secComVersion" : {
                "description" : "Version of the challenge token",
                "type" : "string",
                "enum" : [ "V1", "v2" ]
              },
              "targetsLoadBalancing" : {
                "description" : "Loadbalancing strategy",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                  },
                  "ratio" : {
                    "type" : "number",
                    "format" : "double"
                  }
                }
              },
              "userFacing" : {
                "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
                "type" : "boolean"
              },
              "hosts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Possible hosts for the service"
              },
              "restrictions" : {
                "description" : "Restriction settings",
                "type" : "object",
                "properties" : {
                  "allowed" : {
                    "description" : "Allowed paths",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "allowLast" : {
                    "description" : "Evalute allowed paths after everything else",
                    "type" : "boolean"
                  },
                  "forbidden" : {
                    "description" : "Forbidden paths (return 403)",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "notFound" : {
                    "description" : "Not found paths (return 404)",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "method" : {
                          "description" : "Method of the http request",
                          "type" : "string"
                        },
                        "path" : {
                          "description" : "Path of the http request",
                          "type" : "string"
                        }
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Restrictions enabled",
                    "type" : "boolean"
                  }
                }
              },
              "readOnly" : {
                "description" : "Service only accepts GET, HEAD and OPTIONS requests",
                "type" : "boolean"
              },
              "secComInfoTokenVersion" : {
                "description" : "Version of the info token",
                "type" : "string",
                "enum" : [ "Legacy", "Latest" ]
              },
              "_loc" : {
                "description" : "Entity location",
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Teams of the current entity",
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "tenant" : {
                    "description" : "Organization of the current entity",
                    "type" : "string"
                  }
                }
              },
              "enforceSecureCommunication" : {
                "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
                "type" : "boolean"
              },
              "tags" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Entity tags"
              },
              "clientValidatorRef" : {
                "description" : "A reference to validation authority",
                "type" : "string"
              },
              "privateApp" : {
                "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
                "type" : "boolean"
              },
              "paths" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Matching paths on request"
              },
              "domain" : {
                "description" : "The domain on which the service is available.",
                "type" : "string"
              },
              "name" : {
                "description" : "The name of your service. Only for debug and human readability purposes",
                "type" : "string"
              },
              "transformerConfig" : {
                "description" : "Transformer plugins configuration",
                "type" : "object"
              },
              "subdomain" : {
                "description" : "The subdomain on which the service is available",
                "type" : "string"
              },
              "maintenanceMode" : {
                "description" : "Display a maintainance page when a user try to use the service",
                "type" : "boolean"
              },
              "secComHeaders" : {
                "description" : "Header names for sec. com. protocol",
                "type" : "object",
                "properties" : {
                  "stateResponseName" : {
                    "description" : "Header name where the validation token respondewill be",
                    "type" : "string"
                  },
                  "claimRequestName" : {
                    "description" : "Header name where the info token will be",
                    "type" : "string"
                  },
                  "stateRequestName" : {
                    "description" : "Header name where the validation token will be",
                    "type" : "string"
                  }
                }
              },
              "handleLegacyDomain" : {
                "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
                "type" : "boolean"
              },
              "logAnalyticsOnServer" : {
                "description" : "Log analytics event on the server",
                "type" : "boolean"
              },
              "strictlyPrivate" : {
                "description" : "When strictly private, private app session will not pass apikey filters",
                "type" : "boolean"
              },
              "description" : {
                "description" : "Entity description",
                "type" : "string"
              },
              "buildMode" : {
                "description" : "Display a construction page when a user try to use the service",
                "type" : "boolean"
              },
              "targets" : {
                "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "predicate" : {
                      "description" : "Predicate to choose this target",
                      "type" : "object",
                      "properties" : {
                        "rack" : {
                          "description" : "Rack name",
                          "type" : "string"
                        },
                        "provider" : {
                          "description" : "Provider name",
                          "type" : "string"
                        },
                        "dataCenter" : {
                          "description" : "Datacenter name",
                          "type" : "string"
                        },
                        "zone" : {
                          "description" : "Zone name",
                          "type" : "string"
                        },
                        "positions" : {
                          "description" : "Possible positions",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "latitude" : {
                                "format" : "double",
                                "description" : "Latitude of the position",
                                "type" : "number"
                              },
                              "longitude" : {
                                "format" : "double",
                                "description" : "Longitude of the position",
                                "type" : "number"
                              },
                              "radius" : {
                                "format" : "double",
                                "description" : "Radius of the circle in meters",
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "description" : "the kind of predicate",
                          "type" : "string",
                          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                        },
                        "region" : {
                          "description" : "Region name",
                          "type" : "string"
                        },
                        "dc" : {
                          "description" : "DC name",
                          "type" : "string"
                        }
                      }
                    },
                    "metadata" : {
                      "type" : "object",
                      "additionalProperties" : {
                        "type" : "string"
                      },
                      "description" : "Metadata for this target"
                    },
                    "protocol" : {
                      "description" : "Protocol for the target",
                      "type" : "string"
                    },
                    "scheme" : {
                      "description" : "The protocol used for communication. Can be http or https",
                      "type" : "string"
                    },
                    "mtlsConfig" : {
                      "description" : "TLS settings to contact this target",
                      "type" : "object",
                      "properties" : {
                        "mtls" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trustAll" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trustedCerts" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "host" : {
                      "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                      "type" : "string"
                    },
                    "ipAddress" : {
                      "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                      "type" : "string"
                    },
                    "weight" : {
                      "format" : "int32",
                      "description" : "The weight of the target when choosing",
                      "type" : "integer"
                    },
                    "tags" : {
                      "type" : "array",
                      "items" : {
                        "type" : "string"
                      },
                      "description" : "Tags for this target"
                    }
                  }
                }
              },
              "enabled" : {
                "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
                "type" : "boolean"
              },
              "additionalHeadersOut" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be added to each client response"
              },
              "sendStateChallenge" : {
                "description" : "Should otoroshi send challenge token",
                "type" : "boolean"
              },
              "root" : {
                "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                "type" : "string"
              },
              "additionalHeaders" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be added to each client request. Useful to add authentication"
              },
              "issueCertCA" : {
                "description" : "CA for cert issuance",
                "type" : "string"
              },
              "ipFiltering" : {
                "description" : "Ip filtering settings",
                "type" : "object",
                "properties" : {
                  "whitelist" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Whitelisted IP addresses"
                  },
                  "blacklist" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Blacklisted IP addresses"
                  }
                }
              },
              "redirection" : {
                "description" : "Redirection settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Whether or not redirection is enabled",
                    "type" : "boolean"
                  },
                  "code" : {
                    "format" : "int32",
                    "description" : "The http redirect code",
                    "type" : "integer"
                  },
                  "to" : {
                    "description" : "The location for redirection",
                    "type" : "string"
                  }
                }
              },
              "redirectToLocal" : {
                "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
                "type" : "boolean"
              },
              "headersVerification" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that will be verified after routing."
              },
              "useAkkaHttpClient" : {
                "description" : "Use akka http client for this service",
                "type" : "boolean"
              },
              "securityExcludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Exclude some paths"
              },
              "authConfigRef" : {
                "description" : "A reference to a global auth module config",
                "type" : "string"
              },
              "preRouting" : {
                "description" : "Pre routing plugin settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "pre-routing plugins enabled",
                    "type" : "boolean"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "refs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Enabled plugins"
                  },
                  "config" : {
                    "description" : "pre-routing plugins configuration",
                    "type" : "object"
                  }
                }
              },
              "canary" : {
                "description" : "Canary settings",
                "type" : "object",
                "properties" : {
                  "root" : {
                    "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
                    "type" : "string"
                  },
                  "targets" : {
                    "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "predicate" : {
                          "description" : "Predicate to choose this target",
                          "type" : "object",
                          "properties" : {
                            "rack" : {
                              "description" : "Rack name",
                              "type" : "string"
                            },
                            "provider" : {
                              "description" : "Provider name",
                              "type" : "string"
                            },
                            "dataCenter" : {
                              "description" : "Datacenter name",
                              "type" : "string"
                            },
                            "zone" : {
                              "description" : "Zone name",
                              "type" : "string"
                            },
                            "positions" : {
                              "description" : "Possible positions",
                              "type" : "array",
                              "items" : {
                                "type" : "object",
                                "properties" : {
                                  "latitude" : {
                                    "format" : "double",
                                    "description" : "Latitude of the position",
                                    "type" : "number"
                                  },
                                  "longitude" : {
                                    "format" : "double",
                                    "description" : "Longitude of the position",
                                    "type" : "number"
                                  },
                                  "radius" : {
                                    "format" : "double",
                                    "description" : "Radius of the circle in meters",
                                    "type" : "number"
                                  }
                                }
                              }
                            },
                            "type" : {
                              "description" : "the kind of predicate",
                              "type" : "string",
                              "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                            },
                            "region" : {
                              "description" : "Region name",
                              "type" : "string"
                            },
                            "dc" : {
                              "description" : "DC name",
                              "type" : "string"
                            }
                          }
                        },
                        "metadata" : {
                          "type" : "object",
                          "additionalProperties" : {
                            "type" : "string"
                          },
                          "description" : "Metadata for this target"
                        },
                        "protocol" : {
                          "description" : "Protocol for the target",
                          "type" : "string"
                        },
                        "scheme" : {
                          "description" : "The protocol used for communication. Can be http or https",
                          "type" : "string"
                        },
                        "mtlsConfig" : {
                          "description" : "TLS settings to contact this target",
                          "type" : "object",
                          "properties" : {
                            "mtls" : {
                              "description" : "Enabled",
                              "type" : "boolean"
                            },
                            "loose" : {
                              "description" : "Loose verification",
                              "type" : "boolean"
                            },
                            "trustAll" : {
                              "description" : "Trust any certificate",
                              "type" : "boolean"
                            },
                            "trustedCerts" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            },
                            "certs" : {
                              "type" : "array",
                              "items" : {
                                "type" : "string"
                              },
                              "description" : "Trusted cert. ids"
                            }
                          }
                        },
                        "host" : {
                          "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
                          "type" : "string"
                        },
                        "ipAddress" : {
                          "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                          "type" : "string"
                        },
                        "weight" : {
                          "format" : "int32",
                          "description" : "The weight of the target when choosing",
                          "type" : "integer"
                        },
                        "tags" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Tags for this target"
                        }
                      }
                    }
                  },
                  "enabled" : {
                    "description" : "Use canary mode for this service",
                    "type" : "boolean"
                  },
                  "traffic" : {
                    "format" : "double",
                    "description" : "Ratio of traffic that will be sent to canary targets.",
                    "type" : "number"
                  }
                }
              },
              "secComExcludedPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "URI patterns excluded from secured communications"
              },
              "xForwardedHeaders" : {
                "description" : "Send X-Forwarded-* headers",
                "type" : "boolean"
              },
              "apiKeyConstraints" : {
                "description" : "Routing and extraction constraints for the apikeyh",
                "type" : "object",
                "properties" : {
                  "routing" : {
                    "description" : "Routing settings for this apikey",
                    "type" : "object",
                    "properties" : {
                      "oneTagIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "outing if one tag presents in apikey"
                      },
                      "noneMetaKeysIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if none meta keys presents in apikey"
                      },
                      "oneMetaIn" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Routing if one meta presents in apikey"
                      },
                      "oneMetaKeyIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if one meta key presents in apikey"
                      },
                      "allMetaKeysIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if all meta keys presents in apikey"
                      },
                      "noneTagIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if none tags presents in apikey"
                      },
                      "allTagsIn" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Routing if all tags presents in apikey"
                      },
                      "allMetaIn" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Routing if all meta presents in apikey"
                      },
                      "noneMetaIn" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Routing if none meta presents in apikey"
                      }
                    }
                  },
                  "customHeadersAuth" : {
                    "description" : "Settings to extract apikey from custom headers",
                    "type" : "object",
                    "properties" : {
                      "clientSecretHeaderName" : {
                        "description" : "Header name to find client_secret",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      },
                      "clientIdHeaderName" : {
                        "description" : "Header name to find client_id",
                        "type" : "string"
                      }
                    }
                  },
                  "basicAuth" : {
                    "description" : "Settings to extract basic auth style apikey",
                    "type" : "object",
                    "properties" : {
                      "headerName" : {
                        "description" : "Header name to get client_id:client_secret base64 encoded",
                        "type" : "string"
                      },
                      "queryName" : {
                        "description" : "Query param name to get client_id:client_secret base64 encoded",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      }
                    }
                  },
                  "jwtAuth" : {
                    "description" : "Settings to extract apikey from jwt token",
                    "type" : "object",
                    "properties" : {
                      "headerName" : {
                        "description" : "Header name to extract jwt token",
                        "type" : "string"
                      },
                      "maxJwtLifespanSecs" : {
                        "format" : "int64",
                        "description" : "Check if token does not have a long lifespan",
                        "type" : "integer"
                      },
                      "keyPairSigned" : {
                        "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
                        "type" : "boolean"
                      },
                      "secretSigned" : {
                        "description" : "Jwt token signed with the client_secret",
                        "type" : "boolean"
                      },
                      "queryName" : {
                        "description" : "Query param name to extract jwt token",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      },
                      "cookieName" : {
                        "description" : "Cookie name to extract jwt token",
                        "type" : "string"
                      },
                      "includeRequestAttributes" : {
                        "description" : "Jwt token should include verb and path",
                        "type" : "boolean"
                      }
                    }
                  },
                  "clientIdAuth" : {
                    "description" : "Settings to extract client_id only apikey",
                    "type" : "object",
                    "properties" : {
                      "headerName" : {
                        "description" : "Header name to find client_id",
                        "type" : "string"
                      },
                      "queryName" : {
                        "description" : "Query param name to find client_id",
                        "type" : "string"
                      },
                      "enabled" : {
                        "description" : "Constraint enabled",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              },
              "sendInfoToken" : {
                "description" : "Should otoroshi send info token",
                "type" : "boolean"
              },
              "issueCert" : {
                "description" : "Flag to automatically issue a cert for this service",
                "type" : "boolean"
              },
              "groups" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
              },
              "privatePatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
              },
              "gzip" : {
                "description" : "GZIP settings",
                "type" : "object",
                "properties" : {
                  "compressionLevel" : {
                    "format" : "int32",
                    "description" : "Compression level (0 - 9)",
                    "type" : "integer"
                  },
                  "blackList" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "blocklisted content types"
                  },
                  "chunkedThreshold" : {
                    "format" : "int32",
                    "description" : "Chunk size",
                    "type" : "integer"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "bufferSize" : {
                    "format" : "int32",
                    "description" : "Buffer size in bytes",
                    "type" : "integer"
                  },
                  "whiteList" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "allow listed content types"
                  },
                  "enabled" : {
                    "description" : "Gzip enabled",
                    "type" : "boolean"
                  }
                }
              },
              "clientConfig" : {
                "description" : "Http client settings",
                "type" : "object",
                "properties" : {
                  "sampleInterval" : {
                    "format" : "int64",
                    "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                    "type" : "integer"
                  },
                  "backoffFactor" : {
                    "format" : "int64",
                    "description" : "Specify the factor to multiply the delay for each retry",
                    "type" : "integer"
                  },
                  "customTimeouts" : {
                    "description" : "Custom timeouts per path",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "path" : {
                          "description" : "path on which this configuration works",
                          "type" : "string"
                        },
                        "callAndStreamTimeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                          "type" : "integer"
                        },
                        "callTimeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                          "type" : "integer"
                        },
                        "idleTimeout" : {
                          "format" : "int64",
                          "description" : "Timeout on idle connection",
                          "type" : "integer"
                        },
                        "globalTimeout" : {
                          "format" : "int64",
                          "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                          "type" : "integer"
                        },
                        "connectionTimeout" : {
                          "format" : "int64",
                          "description" : "Timeout at connection",
                          "type" : "integer"
                        }
                      }
                    }
                  },
                  "callAndStreamTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                    "type" : "integer"
                  },
                  "retryInitialDelay" : {
                    "format" : "int64",
                    "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                    "type" : "integer"
                  },
                  "callTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                    "type" : "integer"
                  },
                  "useCircuitBreaker" : {
                    "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
                    "type" : "boolean"
                  },
                  "retries" : {
                    "format" : "int32",
                    "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                    "type" : "integer"
                  },
                  "proxy" : {
                    "description" : "Web proxy settings for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "maxErrors" : {
                    "format" : "int32",
                    "description" : "Specify how many errors can pass before opening the circuit breaker",
                    "type" : "integer"
                  },
                  "idleTimeout" : {
                    "format" : "int64",
                    "description" : "Timeout on idle connection",
                    "type" : "integer"
                  },
                  "globalTimeout" : {
                    "format" : "int64",
                    "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                    "type" : "integer"
                  },
                  "cacheConnectionSettings" : {
                    "description" : "Cached connection settings",
                    "type" : "object",
                    "properties" : {
                      "enabled" : {
                        "description" : "Enable Cached connections at host tevel",
                        "type" : "boolean"
                      },
                      "queueSize" : {
                        "format" : "int32",
                        "description" : "The size for the request queue",
                        "type" : "integer"
                      }
                    }
                  },
                  "connectionTimeout" : {
                    "format" : "int64",
                    "description" : "Timeout at connection",
                    "type" : "integer"
                  }
                }
              },
              "env" : {
                "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
                "type" : "string"
              },
              "jwtVerifier" : {
                "description" : "JWT verifiers settings",
                "oneOfConstraints" : [ {
                  "required" : [ "metadata", "algoSettings", "name", "id", "source", "type", "strict", "strategy", "_loc", "desc", "tags" ]
                }, {
                  "required" : [ "excludedPatterns", "algoSettings", "source", "type", "strict", "strategy", "enabled" ]
                }, {
                  "required" : [ "excludedPatterns", "ids", "type", "enabled" ]
                } ],
                "type" : "object",
                "properties" : {
                  "metadata" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Entity metadata"
                  },
                  "algoSettings" : {
                    "description" : "Algo settings",
                    "type" : "object",
                    "properties" : {
                      "headers" : {
                        "type" : "object",
                        "additionalProperties" : {
                          "type" : "string"
                        },
                        "description" : "Http header when fetching JWKS"
                      },
                      "base64" : {
                        "description" : "The secret is base64 encoded",
                        "type" : "boolean"
                      },
                      "publicKey" : {
                        "description" : "Public key (for verification)",
                        "type" : "string"
                      },
                      "certId" : {
                        "description" : "Certificate id",
                        "type" : "string"
                      },
                      "secret" : {
                        "description" : "HMAC secret",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of algosettings",
                        "type" : "string",
                        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                      },
                      "ttl" : {
                        "description" : "Cache ttl",
                        "type" : "number"
                      },
                      "url" : {
                        "description" : "JWKS url",
                        "type" : "string"
                      },
                      "timeout" : {
                        "description" : "Timeout when fetching JWKS",
                        "type" : "number"
                      },
                      "tlsConfig" : {
                        "description" : "TLS config",
                        "type" : "object",
                        "properties" : {
                          "mtls" : {
                            "description" : "Enabled",
                            "type" : "boolean"
                          },
                          "loose" : {
                            "description" : "Loose verification",
                            "type" : "boolean"
                          },
                          "trustAll" : {
                            "description" : "Trust any certificate",
                            "type" : "boolean"
                          },
                          "trustedCerts" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          },
                          "certs" : {
                            "type" : "array",
                            "items" : {
                              "type" : "string"
                            },
                            "description" : "Trusted cert. ids"
                          }
                        }
                      },
                      "kty" : {
                        "description" : "Key type",
                        "type" : "string"
                      },
                      "privateKey" : {
                        "description" : "Private key (for signing)",
                        "type" : "string"
                      },
                      "proxy" : {
                        "description" : "Web proxy for http client",
                        "oneOfConstraints" : [ ],
                        "type" : "object",
                        "properties" : { }
                      },
                      "onlyExposedCerts" : {
                        "description" : "Use only exposed certs",
                        "type" : "boolean"
                      },
                      "size" : {
                        "format" : "int32",
                        "description" : "SHA function size",
                        "type" : "integer"
                      }
                    }
                  },
                  "name" : {
                    "description" : "Verifier name",
                    "type" : "string"
                  },
                  "id" : {
                    "description" : "Verifier id",
                    "type" : "string"
                  },
                  "source" : {
                    "description" : "Token source",
                    "oneOfConstraints" : [ {
                      "required" : [ "name", "type" ]
                    }, {
                      "required" : [ "name", "type", "remove" ]
                    }, {
                      "required" : [ "name", "type" ]
                    } ],
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "description" : "Query param name",
                        "type" : "string"
                      },
                      "type" : {
                        "description" : "the kind of location",
                        "type" : "string",
                        "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                      },
                      "remove" : {
                        "description" : "Remove from value",
                        "type" : "string"
                      }
                    }
                  },
                  "type" : {
                    "description" : "the kind of verifier",
                    "type" : "string",
                    "enum" : [ "global", "local", "ref" ]
                  },
                  "strict" : {
                    "description" : "Strict token verification",
                    "type" : "boolean"
                  },
                  "strategy" : {
                    "description" : "Token strategy",
                    "oneOfConstraints" : [ {
                      "required" : [ "verificationSettings", "type", "strict", "token" ]
                    }, {
                      "required" : [ "verificationSettings", "type" ]
                    }, {
                      "required" : [ "algoSettings", "verificationSettings", "type" ]
                    }, {
                      "required" : [ "transformSettings", "algoSettings", "verificationSettings", "type" ]
                    } ],
                    "type" : "object",
                    "properties" : {
                      "verificationSettings" : {
                        "description" : "Verification settings",
                        "type" : "object",
                        "properties" : {
                          "fields" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Fields validation"
                          },
                          "arrayFields" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Fields array validation"
                          }
                        }
                      },
                      "type" : {
                        "description" : "the kind of strategy",
                        "type" : "string",
                        "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
                      },
                      "strict" : {
                        "description" : "If the token already exists in the request, then fail",
                        "type" : "boolean"
                      },
                      "token" : {
                        "description" : "The default token",
                        "type" : "object"
                      },
                      "algoSettings" : {
                        "description" : "Algorithm settings for re-signing token",
                        "oneOfConstraints" : [ {
                          "required" : [ "privateKey", "size", "publicKey", "type" ]
                        }, {
                          "required" : [ "size", "certId", "type" ]
                        }, {
                          "required" : [ "size", "base64", "secret", "type" ]
                        }, {
                          "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                        }, {
                          "required" : [ "onlyExposedCerts", "type" ]
                        }, {
                          "required" : [ "size", "certId", "type" ]
                        }, {
                          "required" : [ "privateKey", "size", "publicKey", "type" ]
                        } ],
                        "type" : "object",
                        "properties" : {
                          "privateKey" : {
                            "description" : "Private key (for signing)",
                            "type" : "string"
                          },
                          "size" : {
                            "format" : "int32",
                            "description" : "SHA function size",
                            "type" : "integer"
                          },
                          "publicKey" : {
                            "description" : "Public key (for verification)",
                            "type" : "string"
                          },
                          "type" : {
                            "description" : "the kind of algosettings",
                            "type" : "string",
                            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                          },
                          "certId" : {
                            "description" : "Certificate id",
                            "type" : "string"
                          },
                          "base64" : {
                            "description" : "The secret is base64 encoded",
                            "type" : "boolean"
                          },
                          "secret" : {
                            "description" : "HMAC secret",
                            "type" : "string"
                          },
                          "kty" : {
                            "description" : "Key type",
                            "type" : "string"
                          },
                          "headers" : {
                            "type" : "object",
                            "additionalProperties" : {
                              "type" : "string"
                            },
                            "description" : "Http header when fetching JWKS"
                          },
                          "proxy" : {
                            "description" : "Web proxy for http client",
                            "oneOfConstraints" : [ ],
                            "type" : "object",
                            "properties" : { }
                          },
                          "ttl" : {
                            "description" : "Cache ttl",
                            "type" : "number"
                          },
                          "url" : {
                            "description" : "JWKS url",
                            "type" : "string"
                          },
                          "timeout" : {
                            "description" : "Timeout when fetching JWKS",
                            "type" : "number"
                          },
                          "tlsConfig" : {
                            "description" : "TLS config",
                            "type" : "object",
                            "properties" : {
                              "mtls" : {
                                "description" : "Enabled",
                                "type" : "boolean"
                              },
                              "loose" : {
                                "description" : "Loose verification",
                                "type" : "boolean"
                              },
                              "trustAll" : {
                                "description" : "Trust any certificate",
                                "type" : "boolean"
                              },
                              "trustedCerts" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Trusted cert. ids"
                              },
                              "certs" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Trusted cert. ids"
                              }
                            }
                          },
                          "onlyExposedCerts" : {
                            "description" : "Use only exposed certs",
                            "type" : "boolean"
                          }
                        }
                      },
                      "transformSettings" : {
                        "description" : "Transformation settings",
                        "type" : "object",
                        "properties" : {
                          "mappingSettings" : {
                            "description" : "Token mapping settings",
                            "type" : "object",
                            "properties" : {
                              "map" : {
                                "type" : "object",
                                "additionalProperties" : {
                                  "type" : "string"
                                },
                                "description" : "Change values"
                              },
                              "values" : {
                                "description" : "Add values",
                                "type" : "object"
                              },
                              "remove" : {
                                "type" : "array",
                                "items" : {
                                  "type" : "string"
                                },
                                "description" : "Remove some token claims"
                              }
                            }
                          },
                          "location" : {
                            "description" : "Location of the token",
                            "type" : "object",
                            "properties" : {
                              "name" : {
                                "description" : "Query param name",
                                "type" : "string"
                              },
                              "type" : {
                                "description" : "the kind of location",
                                "type" : "string",
                                "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
                              },
                              "remove" : {
                                "description" : "Remove from value",
                                "type" : "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "_loc" : {
                    "description" : "Entity location",
                    "type" : "object",
                    "properties" : {
                      "teams" : {
                        "description" : "Teams of the current entity",
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        }
                      },
                      "tenant" : {
                        "description" : "Organization of the current entity",
                        "type" : "string"
                      }
                    }
                  },
                  "desc" : {
                    "description" : "Verifier description",
                    "type" : "string"
                  },
                  "tags" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Entity tags"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Verifier excluded paths"
                  },
                  "enabled" : {
                    "description" : "Verifier enabled",
                    "type" : "boolean"
                  },
                  "ids" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Verifiers ids"
                  }
                }
              },
              "allowHttp10" : {
                "description" : "Allow HTTP/1.0 requests",
                "type" : "boolean"
              },
              "publicPatterns" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
              },
              "secComAlgoChallengeBackToOto" : {
                "description" : "Algorithm to verify challenge token coming from the backend",
                "oneOfConstraints" : [ {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "size", "base64", "secret", "type" ]
                }, {
                  "required" : [ "kty", "headers", "proxy", "type", "ttl", "url", "timeout", "tlsConfig" ]
                }, {
                  "required" : [ "onlyExposedCerts", "type" ]
                }, {
                  "required" : [ "size", "certId", "type" ]
                }, {
                  "required" : [ "privateKey", "size", "publicKey", "type" ]
                } ],
                "type" : "object",
                "properties" : {
                  "privateKey" : {
                    "description" : "Private key (for signing)",
                    "type" : "string"
                  },
                  "size" : {
                    "format" : "int32",
                    "description" : "SHA function size",
                    "type" : "integer"
                  },
                  "publicKey" : {
                    "description" : "Public key (for verification)",
                    "type" : "string"
                  },
                  "type" : {
                    "description" : "the kind of algosettings",
                    "type" : "string",
                    "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
                  },
                  "certId" : {
                    "description" : "Certificate id",
                    "type" : "string"
                  },
                  "base64" : {
                    "description" : "The secret is base64 encoded",
                    "type" : "boolean"
                  },
                  "secret" : {
                    "description" : "HMAC secret",
                    "type" : "string"
                  },
                  "kty" : {
                    "description" : "Key type",
                    "type" : "string"
                  },
                  "headers" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "string"
                    },
                    "description" : "Http header when fetching JWKS"
                  },
                  "proxy" : {
                    "description" : "Web proxy for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "ttl" : {
                    "description" : "Cache ttl",
                    "type" : "number"
                  },
                  "url" : {
                    "description" : "JWKS url",
                    "type" : "string"
                  },
                  "timeout" : {
                    "description" : "Timeout when fetching JWKS",
                    "type" : "number"
                  },
                  "tlsConfig" : {
                    "description" : "TLS config",
                    "type" : "object",
                    "properties" : {
                      "mtls" : {
                        "description" : "Enabled",
                        "type" : "boolean"
                      },
                      "loose" : {
                        "description" : "Loose verification",
                        "type" : "boolean"
                      },
                      "trustAll" : {
                        "description" : "Trust any certificate",
                        "type" : "boolean"
                      },
                      "trustedCerts" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      },
                      "certs" : {
                        "type" : "array",
                        "items" : {
                          "type" : "string"
                        },
                        "description" : "Trusted cert. ids"
                      }
                    }
                  },
                  "onlyExposedCerts" : {
                    "description" : "Use only exposed certs",
                    "type" : "boolean"
                  }
                }
              },
              "localScheme" : {
                "description" : "The scheme used localy, mainly http",
                "type" : "string"
              },
              "healthCheck" : {
                "description" : "Healthcheck settings",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                    "type" : "boolean"
                  },
                  "url" : {
                    "description" : "The URL to check",
                    "type" : "string"
                  }
                }
              },
              "matchingHeaders" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
              },
              "overrideHost" : {
                "description" : "Host header will be overriden with Host of the target",
                "type" : "boolean"
              },
              "secComUseSameAlgo" : {
                "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
                "type" : "boolean"
              },
              "accessValidator" : {
                "description" : "Service access validatiors",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Access validator plugins enabled",
                    "type" : "boolean"
                  },
                  "excludedPatterns" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Excluded paths"
                  },
                  "refs" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    },
                    "description" : "Enabled plugins"
                  },
                  "config" : {
                    "description" : "Access validator plugins configuration",
                    "type" : "object"
                  }
                }
              }
            }
          },
          "config" : {
            "description" : "Current plugin config",
            "type" : "object",
            "properties" : {
              "conf" : {
                "description" : "Current conf",
                "type" : "object"
              }
            }
          }
        }
      }
    }
  },
  "otoroshi.models.PassThrough" : {
    "description" : "jwt token validation policicy that just validate the token",
    "type" : "object",
    "properties" : {
      "verificationSettings" : {
        "description" : "Verification settings",
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields validation"
          },
          "arrayFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields array validation"
          }
        }
      },
      "type" : {
        "description" : "the kind of strategy",
        "type" : "string",
        "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
      }
    }
  },
  "otoroshi.plugins.external.ExternalHttpValidatorConfig" : {
    "description" : "Configuration for ExternalHttpValidator",
    "type" : "object",
    "properties" : {
      "config" : {
        "description" : "Configuration for external http validation",
        "type" : "object"
      }
    }
  },
  "otoroshi.plugins.geoloc.MaxMindGeolocationInfoExtractor" : {
    "description" : "Plugin that extracts geolocation based on maxmind db",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgHeaderNamesConfig" : {
    "description" : "Configuration for headers plugins",
    "type" : "object",
    "properties" : {
      "names" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Name of the headers"
      }
    }
  },
  "otoroshi.events.PulsarConfig" : {
    "description" : "Settings for connection to a pulsar cluster",
    "type" : "object",
    "properties" : {
      "mtlsConfig" : {
        "description" : "TLS config to access the cluster",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "namespace" : {
        "description" : "Pulsar namespace",
        "type" : "string"
      },
      "tlsTrustCertsFilePath" : {
        "description" : "Trusted cert path",
        "type" : "string"
      },
      "topic" : {
        "description" : "Pulsar topic",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of exporter",
        "type" : "string",
        "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
      },
      "uri" : {
        "description" : "Pulsar cluster url",
        "type" : "string"
      },
      "tenant" : {
        "description" : "Pulsar tenant",
        "type" : "string"
      }
    }
  },
  "otoroshi.auth.SamlAuthModuleConfig" : {
    "description" : "Configuration of SAML Authentication module",
    "type" : "object",
    "properties" : {
      "validateSignature" : {
        "description" : "Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider",
        "type" : "boolean"
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Metadata of the SAML module"
      },
      "ssoProtocolBinding" : {
        "description" : "Protocol binding used to send login request to identity provider",
        "type" : "object",
        "properties" : { }
      },
      "sessionCookieValues" : {
        "description" : "Settings for the session cookie",
        "type" : "object",
        "properties" : {
          "httpOnly" : {
            "description" : "Is cookie accessible on server side only",
            "type" : "boolean"
          },
          "secure" : {
            "description" : "Is cookie for https only",
            "type" : "boolean"
          }
        }
      },
      "validatingCertificates" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Certificates used to validate SAML response signature"
      },
      "signature" : {
        "description" : "Algorithm and canonicalization method to sign SAML documents",
        "type" : "object",
        "properties" : {
          "canocalizationMethod" : {
            "description" : "Canonicalization Method for XML Signatures",
            "type" : "object",
            "properties" : { }
          },
          "algorithm" : {
            "description" : "Algorithm to sign documents or assertions",
            "type" : "object",
            "properties" : { }
          }
        }
      },
      "credentials" : {
        "description" : "Certificates and private keys to sign and encrypt SAML documents/assertions",
        "type" : "object",
        "properties" : {
          "signedDocuments" : {
            "description" : "Indicates if SAML documents have to be sign before sending to identity provider",
            "type" : "boolean"
          },
          "encryptedAssertions" : {
            "description" : "Indicates if assertions have to be encrypt before sending to identity provider",
            "type" : "boolean"
          },
          "signingKey" : {
            "description" : "Pair of configuration used to sign documents",
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "certificate" : {
                "description" : "PEM certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "certId" : {
                "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "useOtoroshiCertificate" : {
                "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                "type" : "boolean"
              }
            }
          },
          "encryptionKey" : {
            "description" : "Pair of configuration used to encrypt assertions",
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "certificate" : {
                "description" : "PEM certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "certId" : {
                "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "useOtoroshiCertificate" : {
                "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                "type" : "boolean"
              }
            }
          }
        }
      },
      "validateAssertions" : {
        "description" : "Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider",
        "type" : "boolean"
      },
      "type" : {
        "description" : "the type of the module",
        "type" : "string",
        "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
      },
      "userValidators" : {
        "description" : "Validators that will check if the current user is authorized after successful login",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "???",
              "type" : "string"
            },
            "value" : {
              "description" : "???",
              "type" : "object"
            }
          }
        }
      },
      "_loc" : {
        "description" : "Location of the SAML module",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "issuer" : {
        "description" : "Issuer of the SAML requests",
        "type" : "string"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "SAML module tags"
      },
      "sessionMaxAge" : {
        "format" : "int32",
        "description" : "Max age of the session",
        "type" : "integer"
      },
      "usedNameIDAsEmail" : {
        "description" : "Is name ID used as email ?",
        "type" : "boolean"
      },
      "singleLogoutUrl" : {
        "description" : "URL used by otoroshi to disconnect users from identity provider",
        "type" : "string"
      },
      "name" : {
        "description" : "Name of the SAML module",
        "type" : "string"
      },
      "emailAttributeName" : {
        "description" : "Field name to find email in user profile returned by identity provider",
        "type" : "string"
      },
      "singleSignOnUrl" : {
        "description" : "URL used by otoroshi to redirect users to identity provider login page",
        "type" : "string"
      },
      "nameIDFormat" : {
        "description" : "Format of the name ID",
        "type" : "object",
        "properties" : { }
      },
      "singleLogoutProtocolBinding" : {
        "description" : "Protocol binding used by identity provider to logout users",
        "type" : "object",
        "properties" : { }
      },
      "id" : {
        "description" : "Id of the SAML Auth module",
        "type" : "string"
      },
      "desc" : {
        "description" : "Description of the SAML Auth module",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesCRDsJob" : {
    "description" : "Plugin to import entities from kubernetes CRDs",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.Restrictions" : {
    "description" : "Http requests restrictions for a service or an apikey",
    "type" : "object",
    "properties" : {
      "allowed" : {
        "description" : "Allowed paths",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "method" : {
              "description" : "Method of the http request",
              "type" : "string"
            },
            "path" : {
              "description" : "Path of the http request",
              "type" : "string"
            }
          }
        }
      },
      "allowLast" : {
        "description" : "Evalute allowed paths after everything else",
        "type" : "boolean"
      },
      "forbidden" : {
        "description" : "Forbidden paths (return 403)",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "method" : {
              "description" : "Method of the http request",
              "type" : "string"
            },
            "path" : {
              "description" : "Path of the http request",
              "type" : "string"
            }
          }
        }
      },
      "notFound" : {
        "description" : "Not found paths (return 404)",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "method" : {
              "description" : "Method of the http request",
              "type" : "string"
            },
            "path" : {
              "description" : "Path of the http request",
              "type" : "string"
            }
          }
        }
      },
      "enabled" : {
        "description" : "Restrictions enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.next.plugins.NgLargeRequestFaultConfig" : {
    "description" : "Configuration for SnowMonkeyChaos",
    "type" : "object",
    "properties" : {
      "ratio" : {
        "format" : "double",
        "description" : "The ratio of requests impacted",
        "type" : "number"
      },
      "additional_request_size" : {
        "format" : "int32",
        "description" : "Amount of bytes added of the request body",
        "type" : "integer"
      }
    }
  },
  "otoroshi.auth.PKCEConfig" : {
    "description" : "Settings for PKCE challenge (OAuth 2.1)",
    "type" : "object",
    "properties" : {
      "enabled" : {
        "description" : "Is PKCE challenge enabled",
        "type" : "boolean"
      },
      "algorithm" : {
        "description" : "Hashing algorithm used in PKCE challenge",
        "type" : "string"
      }
    }
  },
  "otoroshi.events.StatsdConfig" : {
    "description" : "Settings for connection to a statsd agent",
    "type" : "object",
    "properties" : {
      "datadog" : {
        "description" : "Datadog agent",
        "type" : "boolean"
      },
      "host" : {
        "description" : "The host of the StatsD agent",
        "type" : "string"
      },
      "port" : {
        "format" : "int32",
        "description" : "The port of the StatsD agent",
        "type" : "integer"
      }
    }
  },
  "otoroshi.next.plugins.RBACConfig" : {
    "description" : "Configuration for RBAC",
    "type" : "object",
    "properties" : {
      "allow" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Allowed roles"
      },
      "deny" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Denied roles"
      },
      "role_prefix" : {
        "description" : "Optional value that will prefix roles in tokens",
        "type" : "string"
      },
      "user_path" : {
        "description" : "Where to find role field in a user",
        "type" : "string"
      },
      "roles" : {
        "description" : "roles field name",
        "type" : "string"
      },
      "apikey_path" : {
        "description" : "Where to find role field in an apikey",
        "type" : "string"
      },
      "allow_all" : {
        "description" : "Needs to have all allowed roles",
        "type" : "boolean"
      },
      "deny_all" : {
        "description" : "Needs to have all denied roles",
        "type" : "boolean"
      },
      "jwt_path" : {
        "description" : "Where to find role field in jwt token user",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.biscuit.VerificationContext" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgCanarySettings" : {
    "description" : "Configuration for CanaryMode",
    "type" : "object",
    "properties" : {
      "root" : {
        "description" : "Root for canary targets",
        "type" : "string"
      },
      "targets" : {
        "description" : "Canary targets",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "predicate" : {
              "description" : "Predicate to choose this target",
              "type" : "object",
              "properties" : {
                "rack" : {
                  "description" : "Rack name",
                  "type" : "string"
                },
                "provider" : {
                  "description" : "Provider name",
                  "type" : "string"
                },
                "dataCenter" : {
                  "description" : "Datacenter name",
                  "type" : "string"
                },
                "zone" : {
                  "description" : "Zone name",
                  "type" : "string"
                },
                "positions" : {
                  "description" : "Possible positions",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "latitude" : {
                        "format" : "double",
                        "description" : "Latitude of the position",
                        "type" : "number"
                      },
                      "longitude" : {
                        "format" : "double",
                        "description" : "Longitude of the position",
                        "type" : "number"
                      },
                      "radius" : {
                        "format" : "double",
                        "description" : "Radius of the circle in meters",
                        "type" : "number"
                      }
                    }
                  }
                },
                "type" : {
                  "description" : "the kind of predicate",
                  "type" : "string",
                  "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                },
                "region" : {
                  "description" : "Region name",
                  "type" : "string"
                },
                "dc" : {
                  "description" : "DC name",
                  "type" : "string"
                }
              }
            },
            "protocol" : {
              "description" : "Protocol for the target",
              "type" : "string"
            },
            "hostname" : {
              "description" : "hostname of the target",
              "type" : "string"
            },
            "port" : {
              "format" : "int32",
              "description" : "port of the target",
              "type" : "integer"
            },
            "weight" : {
              "format" : "int32",
              "description" : "The weight of the target when choosing",
              "type" : "integer"
            },
            "tls" : {
              "description" : "Does the target uses TLS",
              "type" : "boolean"
            },
            "tls_config" : {
              "description" : "TLS settings to contact this target",
              "type" : "object",
              "properties" : {
                "enabled" : {
                  "description" : "Enabled",
                  "type" : "boolean"
                },
                "certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                },
                "loose" : {
                  "description" : "Loose verification",
                  "type" : "boolean"
                },
                "trust_all" : {
                  "description" : "Trust any certificate",
                  "type" : "boolean"
                },
                "trusted_certs" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "description" : "Trusted cert. ids"
                }
              }
            },
            "id" : {
              "description" : "id of the target",
              "type" : "string"
            },
            "ip_address" : {
              "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
              "type" : "string"
            }
          }
        }
      },
      "traffic" : {
        "format" : "double",
        "description" : "Traffic ratio for canary targets",
        "type" : "number"
      }
    }
  },
  "otoroshi.models.JWKSAlgoSettings" : {
    "description" : "Settings to use keypair from JWKS for verification",
    "type" : "object",
    "properties" : {
      "kty" : {
        "description" : "Key type",
        "type" : "string"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Http header when fetching JWKS"
      },
      "proxy" : {
        "description" : "Web proxy for http client",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "type" : {
        "description" : "the kind of algosettings",
        "type" : "string",
        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
      },
      "ttl" : {
        "description" : "Cache ttl",
        "type" : "number"
      },
      "url" : {
        "description" : "JWKS url",
        "type" : "string"
      },
      "timeout" : {
        "description" : "Timeout when fetching JWKS",
        "type" : "number"
      },
      "tlsConfig" : {
        "description" : "TLS config",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      }
    }
  },
  "otoroshi.plugins.hmac.HMACUtils" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.authcallers.ForceRetryException" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.models.RoutingStrategy" : {
    "description" : "The routing strategy",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.IpAddressBlockList" : {
    "description" : "Plugin to block only some ip addresses",
    "type" : "object",
    "properties" : {
      "addresses" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "The list of blocked ip addresses of cidr blocks"
      }
    }
  },
  "otoroshi.plugins.biscuit.SealedBiscuitToken" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "token" : {
        "description" : "the current token",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.IpFiltering" : {
    "description" : "Settings for ip address filtering for a service or globally",
    "type" : "object",
    "properties" : {
      "whitelist" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Whitelisted IP addresses"
      },
      "blacklist" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Blacklisted IP addresses"
      }
    }
  },
  "otoroshi.plugins.quotas.ServiceQuotas" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.jobs.kubernetes.KubernetesCertSyncJob" : {
    "description" : "Plugin to sync kubernetes certificates with otoroshi",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.ssl.pki.models.GenCsrResponse" : {
    "description" : "Response for a csr generation operation",
    "type" : "object",
    "properties" : {
      "csr" : {
        "description" : "CSR (PEM encoded)",
        "type" : "string"
      },
      "publicKey" : {
        "description" : "Public key (PEM encoded)",
        "type" : "string"
      },
      "privateKey" : {
        "description" : "Private key (PEM encoded)",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.models.NgMatchedRoute" : {
    "description" : "A matched route in the new router",
    "type" : "object",
    "properties" : {
      "path" : {
        "description" : "Current matched path",
        "type" : "string"
      },
      "route" : {
        "description" : "Current matched route",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata of the route"
          },
          "backend_ref" : {
            "description" : "The backend id of the route (if one)",
            "type" : "string"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The groups of the route"
          },
          "description" : {
            "description" : "The description of the route",
            "type" : "string"
          },
          "_loc" : {
            "description" : "The location of the route",
            "type" : "object",
            "properties" : {
              "teams" : {
                "description" : "Teams of the current entity",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "tenant" : {
                "description" : "Organization of the current entity",
                "type" : "string"
              }
            }
          },
          "enabled" : {
            "description" : "Is the route enabled",
            "type" : "boolean"
          },
          "export_reporting" : {
            "description" : "Export the execution reporting through standard data exporter",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The tags of the route"
          },
          "debug_flow" : {
            "description" : "Enable report debugging",
            "type" : "boolean"
          },
          "name" : {
            "description" : "The name of the route",
            "type" : "string"
          },
          "backend" : {
            "description" : "The backend of the route",
            "type" : "object",
            "properties" : {
              "target_refs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "List of NgStoredBackend ids"
              },
              "root" : {
                "description" : "The root path of the backend or the full rewrite path",
                "type" : "string"
              },
              "client" : {
                "description" : "Client config. of the backend",
                "type" : "object",
                "properties" : {
                  "custom_timeouts" : {
                    "description" : "Custom timeouts per path",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "connection_timeout" : {
                          "format" : "int64",
                          "description" : "Timeout at connection",
                          "type" : "integer"
                        },
                        "call_and_stream_timeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                          "type" : "integer"
                        },
                        "path" : {
                          "description" : "path on which this configuration works",
                          "type" : "string"
                        },
                        "call_timeout" : {
                          "format" : "int64",
                          "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                          "type" : "integer"
                        },
                        "idle_timeout" : {
                          "format" : "int64",
                          "description" : "Timeout on idle connection",
                          "type" : "integer"
                        },
                        "global_timeout" : {
                          "format" : "int64",
                          "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                          "type" : "integer"
                        }
                      }
                    }
                  },
                  "global_timeout" : {
                    "format" : "int64",
                    "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
                    "type" : "integer"
                  },
                  "max_errors" : {
                    "format" : "int32",
                    "description" : "Specify how many errors can pass before opening the circuit breaker",
                    "type" : "integer"
                  },
                  "retry_initial_delay" : {
                    "format" : "int64",
                    "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
                    "type" : "integer"
                  },
                  "backoff_factor" : {
                    "format" : "int64",
                    "description" : "Specify the factor to multiply the delay for each retry",
                    "type" : "integer"
                  },
                  "cache_connection_settings" : {
                    "description" : "Cached connection settings",
                    "type" : "object",
                    "properties" : {
                      "queue_size" : {
                        "format" : "int32",
                        "description" : "How much request can be queue before dropping it",
                        "type" : "integer"
                      },
                      "enabled" : {
                        "description" : "Is cached connection enabled",
                        "type" : "boolean"
                      }
                    }
                  },
                  "sample_interval" : {
                    "format" : "int64",
                    "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
                    "type" : "integer"
                  },
                  "call_and_stream_timeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
                    "type" : "integer"
                  },
                  "retries" : {
                    "format" : "int32",
                    "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
                    "type" : "integer"
                  },
                  "proxy" : {
                    "description" : "Web proxy settings for http client",
                    "oneOfConstraints" : [ ],
                    "type" : "object",
                    "properties" : { }
                  },
                  "call_timeout" : {
                    "format" : "int64",
                    "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
                    "type" : "integer"
                  },
                  "idle_timeout" : {
                    "format" : "int64",
                    "description" : "Timeout on idle connection",
                    "type" : "integer"
                  },
                  "connection_timeout" : {
                    "format" : "int64",
                    "description" : "Timeout at connection",
                    "type" : "integer"
                  }
                }
              },
              "health_check" : {
                "description" : "Healthcheck config og the backend",
                "type" : "object",
                "properties" : {
                  "enabled" : {
                    "description" : "Whether or not healthcheck is enabled on the current service descriptor",
                    "type" : "boolean"
                  },
                  "url" : {
                    "description" : "The URL to check",
                    "type" : "string"
                  }
                }
              },
              "targets" : {
                "description" : "The targets of the backend",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "predicate" : {
                      "description" : "Predicate to choose this target",
                      "type" : "object",
                      "properties" : {
                        "rack" : {
                          "description" : "Rack name",
                          "type" : "string"
                        },
                        "provider" : {
                          "description" : "Provider name",
                          "type" : "string"
                        },
                        "dataCenter" : {
                          "description" : "Datacenter name",
                          "type" : "string"
                        },
                        "zone" : {
                          "description" : "Zone name",
                          "type" : "string"
                        },
                        "positions" : {
                          "description" : "Possible positions",
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "latitude" : {
                                "format" : "double",
                                "description" : "Latitude of the position",
                                "type" : "number"
                              },
                              "longitude" : {
                                "format" : "double",
                                "description" : "Longitude of the position",
                                "type" : "number"
                              },
                              "radius" : {
                                "format" : "double",
                                "description" : "Radius of the circle in meters",
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "description" : "the kind of predicate",
                          "type" : "string",
                          "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
                        },
                        "region" : {
                          "description" : "Region name",
                          "type" : "string"
                        },
                        "dc" : {
                          "description" : "DC name",
                          "type" : "string"
                        }
                      }
                    },
                    "protocol" : {
                      "description" : "Protocol for the target",
                      "type" : "string"
                    },
                    "hostname" : {
                      "description" : "hostname of the target",
                      "type" : "string"
                    },
                    "port" : {
                      "format" : "int32",
                      "description" : "port of the target",
                      "type" : "integer"
                    },
                    "weight" : {
                      "format" : "int32",
                      "description" : "The weight of the target when choosing",
                      "type" : "integer"
                    },
                    "tls" : {
                      "description" : "Does the target uses TLS",
                      "type" : "boolean"
                    },
                    "tls_config" : {
                      "description" : "TLS settings to contact this target",
                      "type" : "object",
                      "properties" : {
                        "enabled" : {
                          "description" : "Enabled",
                          "type" : "boolean"
                        },
                        "certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        },
                        "loose" : {
                          "description" : "Loose verification",
                          "type" : "boolean"
                        },
                        "trust_all" : {
                          "description" : "Trust any certificate",
                          "type" : "boolean"
                        },
                        "trusted_certs" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string"
                          },
                          "description" : "Trusted cert. ids"
                        }
                      }
                    },
                    "id" : {
                      "description" : "id of the target",
                      "type" : "string"
                    },
                    "ip_address" : {
                      "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
                      "type" : "string"
                    }
                  }
                }
              },
              "rewrite" : {
                "description" : "Does the backend performs a full url rewrite ?",
                "type" : "boolean"
              },
              "load_balancing" : {
                "description" : "Loadbalancing config og the backend",
                "type" : "object",
                "properties" : {
                  "type" : {
                    "type" : "string",
                    "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
                  },
                  "ratio" : {
                    "type" : "number",
                    "format" : "double"
                  }
                }
              }
            }
          },
          "id" : {
            "description" : "The ud of the route",
            "type" : "string"
          },
          "frontend" : {
            "description" : "The frontend of the route",
            "type" : "object",
            "properties" : {
              "headers" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "the headers that will be matched"
              },
              "methods" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "the http methods that will be matched"
              },
              "query" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "the query params that will be matched"
              },
              "exact" : {
                "description" : "Match on exact path ?",
                "type" : "boolean"
              },
              "domains" : {
                "description" : "The domain and path that will be matched",
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "strip_path" : {
                "description" : "Is path stripped from backend request",
                "type" : "boolean"
              }
            }
          }
        }
      },
      "no_more_segments" : {
        "description" : "Is the path fully matched",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.auth.SAMLProtocolBinding" : {
    "description" : "Protocol binding used during SAML requests",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.MaxmindGeolocationSettings" : {
    "description" : "Settings for connection to a maxmind db",
    "type" : "object",
    "properties" : {
      "path" : {
        "description" : "Maxmlind db file path",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of geolocation",
        "type" : "string",
        "enum" : [ "none", "maxmind", "ipstack" ]
      },
      "enabled" : {
        "description" : "Geolocation using maxmind db enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.next.plugins.NgLargeResponseFaultConfig" : {
    "description" : "Configuration for SnowMonkeyChaos",
    "type" : "object",
    "properties" : {
      "ratio" : {
        "format" : "double",
        "description" : "The ratio of responses impacted",
        "type" : "number"
      },
      "additional_response_size" : {
        "format" : "int32",
        "description" : "Amount of bytes added of the response body",
        "type" : "integer"
      }
    }
  },
  "otoroshi.models.LatencyInjectionFaultConfig" : {
    "description" : "Settings for a latency injection fault (chaos engineering)",
    "type" : "object",
    "properties" : {
      "ratio" : {
        "format" : "double",
        "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
        "type" : "number"
      },
      "from" : {
        "description" : "The start range of latency added to the request",
        "type" : "number"
      },
      "to" : {
        "description" : "The end range of latency added to the request",
        "type" : "number"
      }
    }
  },
  "otoroshi.plugins.oidc.OIDCAccessTokenAsApikey" : {
    "description" : "Plugin to use OIDC token as apikey",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgIpAddressesConfig" : {
    "description" : "Configuration for ip address related plugins",
    "type" : "object",
    "properties" : {
      "addresses" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Ip addresses targeted"
      }
    }
  },
  "otoroshi.models.RSAKPAlgoSettings" : {
    "description" : "Settings to use RSA signing algorithm from a certificate keypair",
    "type" : "object",
    "properties" : {
      "size" : {
        "format" : "int32",
        "description" : "SHA function size",
        "type" : "integer"
      },
      "certId" : {
        "description" : "Certificate id",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of algosettings",
        "type" : "string",
        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
      }
    }
  },
  "otoroshi.utils.mailer.MailerSettings" : {
    "oneOfConstraints" : [ {
      "required" : [ "type" ]
    }, {
      "required" : [ "headers", "to", "type", "url" ]
    }, {
      "required" : [ "eu", "apiKey", "domain", "to", "type" ]
    }, {
      "required" : [ "apiKeyPrivate", "apiKeyPublic", "to", "type" ]
    }, {
      "required" : [ "type" ]
    }, {
      "required" : [ "apiKey", "to", "type" ]
    } ],
    "type" : "object",
    "properties" : {
      "type" : {
        "description" : "the kind of mailer",
        "type" : "string",
        "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Sender headers"
      },
      "to" : {
        "description" : "Destination email address",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "description" : "Destination name",
              "type" : "string"
            },
            "email" : {
              "description" : "Email address",
              "type" : "string"
            }
          }
        }
      },
      "url" : {
        "description" : "Sender URL",
        "type" : "string"
      },
      "eu" : {
        "description" : "European tenant",
        "type" : "boolean"
      },
      "apiKey" : {
        "description" : "Sendgrid apikey",
        "type" : "string"
      },
      "domain" : {
        "description" : "Mailgun domain",
        "type" : "string"
      },
      "apiKeyPrivate" : {
        "description" : "Private key",
        "type" : "string"
      },
      "apiKeyPublic" : {
        "description" : "Public key",
        "type" : "string"
      }
    }
  },
  "otoroshi.auth.Oauth1ModuleConfig" : {
    "description" : "Configuration of OAuth 1.0 module",
    "type" : "object",
    "properties" : {
      "profileURL" : {
        "description" : "URL fetch by otoroshi to get user information from identity provider",
        "type" : "string"
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "The metadata of the OAuth 1 module"
      },
      "authorizeURL" : {
        "description" : "The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider",
        "type" : "string"
      },
      "requestTokenURL" : {
        "description" : "URL fetch to get a request token during the first step of the authorization OAuth 1 flow",
        "type" : "string"
      },
      "sessionCookieValues" : {
        "description" : "Settings for the session cookie",
        "type" : "object",
        "properties" : {
          "httpOnly" : {
            "description" : "Is cookie accessible on server side only",
            "type" : "boolean"
          },
          "secure" : {
            "description" : "Is cookie for https only",
            "type" : "boolean"
          }
        }
      },
      "type" : {
        "description" : "the type of the module",
        "type" : "string",
        "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
      },
      "httpMethod" : {
        "description" : "Method used to fetch access and request token",
        "type" : "object",
        "properties" : { }
      },
      "userValidators" : {
        "description" : "Validators that will check if the current user is authorized after successful login",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "???",
              "type" : "string"
            },
            "value" : {
              "description" : "???",
              "type" : "object"
            }
          }
        }
      },
      "_loc" : {
        "description" : "The location of the OAuth 1 module",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "OAuth module tags"
      },
      "sessionMaxAge" : {
        "format" : "int32",
        "description" : "Max age of the session",
        "type" : "integer"
      },
      "consumerSecret" : {
        "description" : "Client secret obtained from identity provider configuration",
        "type" : "string"
      },
      "accessTokenURL" : {
        "description" : "Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow",
        "type" : "string"
      },
      "name" : {
        "description" : "The name of the OAuth 1 module",
        "type" : "string"
      },
      "rightsOverride" : {
        "description" : "Overrides user rights of users connected by OAuth1 module",
        "additionalProperties" : {
          "type" : "object",
          "properties" : {
            "rights" : {
              "description" : "Access rights of a user",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Access rights on teams",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "canRead" : {
                          "description" : "Can this access right read data",
                          "type" : "boolean"
                        },
                        "value" : {
                          "description" : "Access pattern",
                          "type" : "string"
                        },
                        "canWrite" : {
                          "description" : "Can this access right write data",
                          "type" : "boolean"
                        }
                      }
                    }
                  },
                  "tenant" : {
                    "description" : "Access rights on organizations",
                    "type" : "object",
                    "properties" : {
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type" : "object"
      },
      "callbackURL" : {
        "description" : "The location where the identity provider returns a browser after the user finishes authenticating with their IDP",
        "type" : "string"
      },
      "id" : {
        "description" : "Id of the module",
        "type" : "string"
      },
      "consumerKey" : {
        "description" : "Client ID obtained on identity provider",
        "type" : "string"
      },
      "desc" : {
        "description" : "Description of the oauth 1 module",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.JsonToXmlRequest" : {
    "description" : "Plugin to transform json body to xml",
    "type" : "object",
    "properties" : {
      "filter" : {
        "description" : "JQ filter for request",
        "type" : "string"
      }
    }
  },
  "otoroshi.plugins.defer.DeferPlugin" : {
    "description" : "Plugin that defers http responses",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.StaticResponse" : {
    "description" : "Plugin to return static responses",
    "type" : "object",
    "properties" : {
      "status" : {
        "format" : "int32",
        "description" : "Status of the response",
        "type" : "integer"
      },
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Headers of the response"
      },
      "body" : {
        "description" : "Body of the response",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.OverrideHost" : {
    "description" : "Plugin to override backend host header",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgPublicPrivatePathsConfig" : {
    "description" : "Configuration for PublicPrivatePaths",
    "type" : "object",
    "properties" : {
      "strict" : {
        "description" : "apikey only",
        "type" : "boolean"
      },
      "public_patterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Paths that should not have user or apikey to pass"
      },
      "private_patterns" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Paths that should have user or apikey to pass"
      }
    }
  },
  "otoroshi.models.InQueryParam" : {
    "description" : "JWT token location (query param)",
    "type" : "object",
    "properties" : {
      "name" : {
        "description" : "Query param name",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of location",
        "type" : "string",
        "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
      }
    }
  },
  "otoroshi.plugins.clientcert.ClientCertChainHeader" : {
    "description" : "Plugin that can pass client certificates as header to the backends",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.security.SecurityTxt" : {
    "description" : "Plugin that serves /.well-known/security.txt resources",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.EntityLocation" : {
    "description" : "Location of any entity (teams and organization)",
    "type" : "object",
    "properties" : {
      "teams" : {
        "description" : "Teams of the current entity",
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      },
      "tenant" : {
        "description" : "Organization of the current entity",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.RoutingRestrictions" : {
    "description" : "Configuration for NgRestrictions",
    "type" : "object",
    "properties" : {
      "allowed" : {
        "description" : "Allowed paths",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "method" : {
              "description" : "The http method (can be *)",
              "type" : "string"
            },
            "path" : {
              "description" : "The request path (can include domain)",
              "type" : "string"
            }
          }
        }
      },
      "forbidden" : {
        "description" : "Forbidden paths",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "method" : {
              "description" : "The http method (can be *)",
              "type" : "string"
            },
            "path" : {
              "description" : "The request path (can include domain)",
              "type" : "string"
            }
          }
        }
      },
      "not_found" : {
        "description" : "Not found paths",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "method" : {
              "description" : "The http method (can be *)",
              "type" : "string"
            },
            "path" : {
              "description" : "The request path (can include domain)",
              "type" : "string"
            }
          }
        }
      },
      "allow_last" : {
        "description" : "Evaluates allowed paths after forbidden and not found",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.next.plugins.GlobalPerIpAddressThrottling" : {
    "description" : "Plugin for ip address throttling",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.events.AuditEvent" : {
    "type" : "object",
    "description" : "Audit trail event"
  },
  "otoroshi.plugins.izanami.IzanamiProxy" : {
    "description" : "Plugin to proxy izanami",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.ErrorTemplate" : {
    "description" : "Service descriptor error template",
    "type" : "object",
    "properties" : {
      "template50x" : {
        "description" : "The 50x error html template",
        "type" : "string"
      },
      "templateMaintenance" : {
        "description" : "The maintenance html template",
        "type" : "string"
      },
      "templateBuild" : {
        "description" : "The build html template",
        "type" : "string"
      },
      "serviceId" : {
        "description" : "Service id for this template",
        "type" : "string"
      },
      "messages" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Map of messages"
      },
      "template40x" : {
        "description" : "The 40x error html template",
        "type" : "string"
      }
    }
  },
  "otoroshi.utils.mailer.NoneMailerSettings" : {
    "description" : "Settings for the /dev/null mailer",
    "type" : "object",
    "properties" : {
      "type" : {
        "description" : "the kind of mailer",
        "type" : "string",
        "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
      }
    }
  },
  "otoroshi.next.plugins.EndlessHttpResponse" : {
    "description" : "Plugin for endless response",
    "type" : "object",
    "properties" : {
      "finger" : {
        "description" : "Using emoji instead of 0 in the response",
        "type" : "boolean"
      },
      "addresses" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "IP address that will get endless responses"
      }
    }
  },
  "otoroshi.models.SecComInfoTokenVersion" : {
    "type" : "string",
    "enum" : [ "Legacy", "Latest" ],
    "description" : "Version of the info token"
  },
  "otoroshi.plugins.biscuit.BiscuitHelper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "BulkPatchBody" : {
    "type" : "array",
    "description" : "Body composed of stringified JSON-Patch lines, each one representing updates to an entity",
    "items" : { }
  },
  "otoroshi.next.plugins.W3CTracing" : {
    "description" : "Plugin to have distributed tracing",
    "type" : "object",
    "properties" : {
      "endpoint" : {
        "description" : "Endpoint of distributed tracing collection",
        "type" : "string"
      },
      "baggage" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Support baggage"
      },
      "kind" : {
        "description" : "Configuration for W3CTracing",
        "type" : "string",
        "enum" : [ "jaeger", "zipkin", "logger", "noop" ]
      },
      "timeout" : {
        "format" : "int64",
        "description" : "Request timeout",
        "type" : "integer"
      }
    }
  },
  "otoroshi.next.models.NgSelectedBackendTarget" : {
    "description" : "The current target",
    "type" : "object",
    "properties" : {
      "cb_start" : {
        "format" : "int64",
        "description" : "Time start of circuit breaker usage",
        "type" : "integer"
      },
      "attempts" : {
        "format" : "int32",
        "description" : "Circuit breaker attemps",
        "type" : "integer"
      },
      "target" : {
        "description" : "The current target",
        "type" : "object",
        "properties" : {
          "predicate" : {
            "description" : "Predicate to choose this target",
            "type" : "object",
            "properties" : {
              "rack" : {
                "description" : "Rack name",
                "type" : "string"
              },
              "provider" : {
                "description" : "Provider name",
                "type" : "string"
              },
              "dataCenter" : {
                "description" : "Datacenter name",
                "type" : "string"
              },
              "zone" : {
                "description" : "Zone name",
                "type" : "string"
              },
              "positions" : {
                "description" : "Possible positions",
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "latitude" : {
                      "format" : "double",
                      "description" : "Latitude of the position",
                      "type" : "number"
                    },
                    "longitude" : {
                      "format" : "double",
                      "description" : "Longitude of the position",
                      "type" : "number"
                    },
                    "radius" : {
                      "format" : "double",
                      "description" : "Radius of the circle in meters",
                      "type" : "number"
                    }
                  }
                }
              },
              "type" : {
                "description" : "the kind of predicate",
                "type" : "string",
                "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
              },
              "region" : {
                "description" : "Region name",
                "type" : "string"
              },
              "dc" : {
                "description" : "DC name",
                "type" : "string"
              }
            }
          },
          "protocol" : {
            "description" : "Protocol for the target",
            "type" : "string"
          },
          "hostname" : {
            "description" : "hostname of the target",
            "type" : "string"
          },
          "port" : {
            "format" : "int32",
            "description" : "port of the target",
            "type" : "integer"
          },
          "weight" : {
            "format" : "int32",
            "description" : "The weight of the target when choosing",
            "type" : "integer"
          },
          "tls" : {
            "description" : "Does the target uses TLS",
            "type" : "boolean"
          },
          "tls_config" : {
            "description" : "TLS settings to contact this target",
            "type" : "object",
            "properties" : {
              "enabled" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trust_all" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trusted_certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "id" : {
            "description" : "id of the target",
            "type" : "string"
          },
          "ip_address" : {
            "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
            "type" : "string"
          }
        }
      }
    }
  },
  "GlobalConfigImportBody" : {
    "type" : "object",
    "description" : ""
  },
  "otoroshi.auth.AuthModuleConfig" : {
    "oneOfConstraints" : [ {
      "required" : [ "metadata", "sessionCookieValues", "basicAuth", "type", "userValidators", "_loc", "users", "tags", "sessionMaxAge", "name", "webauthn", "id", "desc" ]
    }, {
      "required" : [ "refreshTokens", "metadata", "tokenUrl", "otoroshiRightsField", "mtlsConfig", "nameField", "emailField", "type", "introspectionUrl", "loginUrl", "scope", "rightsOverride", "callbackUrl", "clientSecret", "id", "extraMetadata", "accessTokenField", "userInfoUrl", "clientId", "useCookie", "authorizeUrl", "sessionCookieValues", "dataOverride", "superAdmins", "apiKeyMetaField", "useJson", "pkce", "apiKeyTagsField", "otoroshiDataField", "userValidators", "_loc", "tags", "jwtVerifier", "sessionMaxAge", "proxy", "logoutUrl", "noWildcardRedirectURI", "readProfileFromToken", "oidConfig", "name", "claims", "desc" ]
    }, {
      "required" : [ "groupFilters", "metadata", "allowEmptyPassword", "basicAuth", "searchBase", "nameField", "emailField", "extractProfileFilterNot", "type", "metadataField", "rightsOverride", "id", "groupRights", "extraMetadata", "searchFilter", "adminPassword", "extractProfileFilter", "sessionCookieValues", "dataOverride", "superAdmins", "userBase", "serverUrls", "userValidators", "_loc", "tags", "sessionMaxAge", "adminUsername", "extractProfile", "name", "desc" ]
    }, {
      "required" : [ "profileURL", "metadata", "authorizeURL", "requestTokenURL", "sessionCookieValues", "type", "httpMethod", "userValidators", "_loc", "tags", "sessionMaxAge", "consumerSecret", "accessTokenURL", "name", "rightsOverride", "callbackURL", "id", "consumerKey", "desc" ]
    }, {
      "required" : [ "validateSignature", "metadata", "ssoProtocolBinding", "sessionCookieValues", "validatingCertificates", "signature", "credentials", "validateAssertions", "type", "userValidators", "_loc", "issuer", "tags", "sessionMaxAge", "usedNameIDAsEmail", "singleLogoutUrl", "name", "emailAttributeName", "singleSignOnUrl", "nameIDFormat", "singleLogoutProtocolBinding", "id", "desc" ]
    } ],
    "type" : "object",
    "properties" : {
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Metadata of the SAML module"
      },
      "tokenUrl" : {
        "description" : "OAuth token URL",
        "type" : "string"
      },
      "allowEmptyPassword" : {
        "description" : "Allow empty password access",
        "type" : "boolean"
      },
      "ssoProtocolBinding" : {
        "description" : "Protocol binding used to send login request to identity provider",
        "type" : "object",
        "properties" : { }
      },
      "mtlsConfig" : {
        "description" : "TLS config. for the module (for server accessed endpoints like tokenUrl, introspectionUrl, etc)",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "searchBase" : {
        "description" : "LDAP search base",
        "type" : "string"
      },
      "nameField" : {
        "description" : "Field name to get name from user profile",
        "type" : "string"
      },
      "emailField" : {
        "description" : "Field name to get email from user profile",
        "type" : "string"
      },
      "type" : {
        "description" : "the type of the module",
        "type" : "string",
        "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
      },
      "issuer" : {
        "description" : "Issuer of the SAML requests",
        "type" : "string"
      },
      "introspectionUrl" : {
        "description" : "URL to introspect access_token",
        "type" : "string"
      },
      "rightsOverride" : {
        "description" : "Overrides user rights of users connected by OAuth1 module",
        "additionalProperties" : {
          "type" : "object",
          "properties" : {
            "rights" : {
              "description" : "Access rights of a user",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "teams" : {
                    "description" : "Access rights on teams",
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "canRead" : {
                          "description" : "Can this access right read data",
                          "type" : "boolean"
                        },
                        "value" : {
                          "description" : "Access pattern",
                          "type" : "string"
                        },
                        "canWrite" : {
                          "description" : "Can this access right write data",
                          "type" : "boolean"
                        }
                      }
                    }
                  },
                  "tenant" : {
                    "description" : "Access rights on organizations",
                    "type" : "object",
                    "properties" : {
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type" : "object"
      },
      "nameIDFormat" : {
        "description" : "Format of the name ID",
        "type" : "object",
        "properties" : { }
      },
      "callbackUrl" : {
        "description" : "Otoroshi callback URL",
        "type" : "string"
      },
      "clientSecret" : {
        "description" : "OAuth Client secret",
        "type" : "string"
      },
      "callbackURL" : {
        "description" : "The location where the identity provider returns a browser after the user finishes authenticating with their IDP",
        "type" : "string"
      },
      "singleLogoutProtocolBinding" : {
        "description" : "Protocol binding used by identity provider to logout users",
        "type" : "object",
        "properties" : { }
      },
      "id" : {
        "description" : "Id of the SAML Auth module",
        "type" : "string"
      },
      "extraMetadata" : {
        "description" : "Add metadata to user. Object with email as key",
        "type" : "object"
      },
      "accessTokenField" : {
        "description" : "Field name to get access token",
        "type" : "string"
      },
      "searchFilter" : {
        "description" : "Filter for users",
        "type" : "string"
      },
      "useCookie" : {
        "description" : "Use cookies for redirection",
        "type" : "boolean"
      },
      "sessionCookieValues" : {
        "description" : "Settings for the session cookie",
        "type" : "object",
        "properties" : {
          "httpOnly" : {
            "description" : "Is cookie accessible on server side only",
            "type" : "boolean"
          },
          "secure" : {
            "description" : "Is cookie for https only",
            "type" : "boolean"
          }
        }
      },
      "dataOverride" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "object"
        },
        "description" : "Overiddes user data. Object with email as key"
      },
      "validatingCertificates" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Certificates used to validate SAML response signature"
      },
      "apiKeyMetaField" : {
        "description" : "Field name to extract apikey metadata",
        "type" : "string"
      },
      "useJson" : {
        "description" : "Use JSON or URL Form Encoded as payload with the OAuth provider",
        "type" : "boolean"
      },
      "pkce" : {
        "description" : "Use PKCE challenge (OAuth 2.1)",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Is PKCE challenge enabled",
            "type" : "boolean"
          },
          "algorithm" : {
            "description" : "Hashing algorithm used in PKCE challenge",
            "type" : "string"
          }
        }
      },
      "userBase" : {
        "description" : "LDAP user base DN",
        "type" : "string"
      },
      "otoroshiDataField" : {
        "description" : "Field name to get otoroshi metadata from. You can specify sub fields using | as separator",
        "type" : "string"
      },
      "_loc" : {
        "description" : "Location of the SAML module",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "users" : {
        "description" : "Users attached to the module",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "metadata" : {
              "description" : "User metadata",
              "type" : "object"
            },
            "password" : {
              "description" : "User password (bcrypt hashed)",
              "type" : "string"
            },
            "rights" : {
              "description" : "User rights",
              "type" : "object",
              "properties" : {
                "rights" : {
                  "description" : "Access rights of a user",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "teams" : {
                        "description" : "Access rights on teams",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "canRead" : {
                              "description" : "Can this access right read data",
                              "type" : "boolean"
                            },
                            "value" : {
                              "description" : "Access pattern",
                              "type" : "string"
                            },
                            "canWrite" : {
                              "description" : "Can this access right write data",
                              "type" : "boolean"
                            }
                          }
                        }
                      },
                      "tenant" : {
                        "description" : "Access rights on organizations",
                        "type" : "object",
                        "properties" : {
                          "canWrite" : {
                            "description" : "Can this access right write data",
                            "type" : "boolean"
                          },
                          "value" : {
                            "description" : "Access pattern",
                            "type" : "string"
                          },
                          "canRead" : {
                            "description" : "Can this access right read data",
                            "type" : "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "name" : {
              "description" : "User name",
              "type" : "string"
            },
            "webauthn" : {
              "description" : "Webauthn details",
              "type" : "object",
              "properties" : {
                "handle" : {
                  "description" : "Webauthn user handle",
                  "type" : "string"
                },
                "credentials" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "object"
                  },
                  "description" : "Webauthn credentials"
                }
              }
            },
            "email" : {
              "description" : "User email",
              "type" : "string"
            },
            "tags" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "User tags"
            }
          }
        }
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "SAML module tags"
      },
      "adminUsername" : {
        "description" : "The admin username",
        "type" : "string"
      },
      "proxy" : {
        "description" : "Web proxy configuration for the module's http client",
        "oneOfConstraints" : [ ],
        "type" : "object",
        "properties" : { }
      },
      "extractProfile" : {
        "description" : "Extract profile from LDAP profile",
        "type" : "boolean"
      },
      "logoutUrl" : {
        "description" : "OAuth logout URL",
        "type" : "string"
      },
      "oidConfig" : {
        "description" : "URL of the OIDC config. file",
        "type" : "string"
      },
      "name" : {
        "description" : "Name of the SAML module",
        "type" : "string"
      },
      "webauthn" : {
        "description" : "Use webauthn for login",
        "type" : "boolean"
      },
      "claims" : {
        "description" : "The claims of the token",
        "type" : "string"
      },
      "desc" : {
        "description" : "Description of the SAML Auth module",
        "type" : "string"
      },
      "profileURL" : {
        "description" : "URL fetch by otoroshi to get user information from identity provider",
        "type" : "string"
      },
      "groupFilters" : {
        "description" : "LDAP group filters",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "team" : {
              "description" : "The team associated with this group",
              "type" : "string"
            },
            "tenant" : {
              "description" : "The tenant associated with this group",
              "type" : "object",
              "properties" : {
                "canWrite" : {
                  "description" : "Can this access right write data",
                  "type" : "boolean"
                },
                "value" : {
                  "description" : "Access pattern",
                  "type" : "string"
                },
                "canRead" : {
                  "description" : "Can this access right read data",
                  "type" : "boolean"
                }
              }
            },
            "group" : {
              "description" : "The LDAP group",
              "type" : "string"
            }
          }
        }
      },
      "refreshTokens" : {
        "description" : "Refresh token support",
        "type" : "boolean"
      },
      "otoroshiRightsField" : {
        "description" : "Field in user profile to find otoroshi UI rights",
        "type" : "string"
      },
      "signature" : {
        "description" : "Algorithm and canonicalization method to sign SAML documents",
        "type" : "object",
        "properties" : {
          "canocalizationMethod" : {
            "description" : "Canonicalization Method for XML Signatures",
            "type" : "object",
            "properties" : { }
          },
          "algorithm" : {
            "description" : "Algorithm to sign documents or assertions",
            "type" : "object",
            "properties" : { }
          }
        }
      },
      "credentials" : {
        "description" : "Certificates and private keys to sign and encrypt SAML documents/assertions",
        "type" : "object",
        "properties" : {
          "signedDocuments" : {
            "description" : "Indicates if SAML documents have to be sign before sending to identity provider",
            "type" : "boolean"
          },
          "encryptedAssertions" : {
            "description" : "Indicates if assertions have to be encrypt before sending to identity provider",
            "type" : "boolean"
          },
          "signingKey" : {
            "description" : "Pair of configuration used to sign documents",
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "certificate" : {
                "description" : "PEM certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "certId" : {
                "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "useOtoroshiCertificate" : {
                "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                "type" : "boolean"
              }
            }
          },
          "encryptionKey" : {
            "description" : "Pair of configuration used to encrypt assertions",
            "type" : "object",
            "properties" : {
              "privateKey" : {
                "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "certificate" : {
                "description" : "PEM certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "certId" : {
                "description" : "Id of the certificate used to sign SAML requests send to identity provider",
                "type" : "string"
              },
              "useOtoroshiCertificate" : {
                "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
                "type" : "boolean"
              }
            }
          }
        }
      },
      "basicAuth" : {
        "description" : "Use standard basic auth or web login form",
        "type" : "boolean"
      },
      "validateAssertions" : {
        "description" : "Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider",
        "type" : "boolean"
      },
      "extractProfileFilterNot" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Exclude LDAP properties matching"
      },
      "httpMethod" : {
        "description" : "Method used to fetch access and request token",
        "type" : "object",
        "properties" : { }
      },
      "metadataField" : {
        "description" : "Field name to get metadata from user profile",
        "type" : "string"
      },
      "consumerSecret" : {
        "description" : "Client secret obtained from identity provider configuration",
        "type" : "string"
      },
      "loginUrl" : {
        "description" : "OAuth login URL",
        "type" : "string"
      },
      "scope" : {
        "description" : "The scope of the token",
        "type" : "string"
      },
      "accessTokenURL" : {
        "description" : "Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow",
        "type" : "string"
      },
      "singleSignOnUrl" : {
        "description" : "URL used by otoroshi to redirect users to identity provider login page",
        "type" : "string"
      },
      "groupRights" : {
        "description" : "Rights associated with groups",
        "additionalProperties" : {
          "type" : "object",
          "properties" : {
            "userRights" : {
              "description" : "The user rights associated with this group",
              "type" : "object",
              "properties" : {
                "rights" : {
                  "description" : "Access rights of a user",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "teams" : {
                        "description" : "Access rights on teams",
                        "type" : "array",
                        "items" : {
                          "type" : "object",
                          "properties" : {
                            "canRead" : {
                              "description" : "Can this access right read data",
                              "type" : "boolean"
                            },
                            "value" : {
                              "description" : "Access pattern",
                              "type" : "string"
                            },
                            "canWrite" : {
                              "description" : "Can this access right write data",
                              "type" : "boolean"
                            }
                          }
                        }
                      },
                      "tenant" : {
                        "description" : "Access rights on organizations",
                        "type" : "object",
                        "properties" : {
                          "canWrite" : {
                            "description" : "Can this access right write data",
                            "type" : "boolean"
                          },
                          "value" : {
                            "description" : "Access pattern",
                            "type" : "string"
                          },
                          "canRead" : {
                            "description" : "Can this access right read data",
                            "type" : "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "users" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "The users associated with this group"
            }
          }
        },
        "type" : "object"
      },
      "consumerKey" : {
        "description" : "Client ID obtained on identity provider",
        "type" : "string"
      },
      "adminPassword" : {
        "description" : "The admin password",
        "type" : "string"
      },
      "userInfoUrl" : {
        "description" : "OAuth userinfo to get user profile",
        "type" : "string"
      },
      "validateSignature" : {
        "description" : "Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider",
        "type" : "boolean"
      },
      "clientId" : {
        "description" : "OAuth Client id",
        "type" : "string"
      },
      "authorizeUrl" : {
        "description" : "OAuth authorize URL",
        "type" : "string"
      },
      "extractProfileFilter" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Only include LDAP properties matching"
      },
      "authorizeURL" : {
        "description" : "The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider",
        "type" : "string"
      },
      "requestTokenURL" : {
        "description" : "URL fetch to get a request token during the first step of the authorization OAuth 1 flow",
        "type" : "string"
      },
      "superAdmins" : {
        "description" : "This module produces only super admins",
        "type" : "boolean"
      },
      "apiKeyTagsField" : {
        "description" : "Field name to extract apikey tags",
        "type" : "string"
      },
      "userValidators" : {
        "description" : "Validators that will check if the current user is authorized after successful login",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "path" : {
              "description" : "???",
              "type" : "string"
            },
            "value" : {
              "description" : "???",
              "type" : "object"
            }
          }
        }
      },
      "serverUrls" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "LDAP server list of url"
      },
      "jwtVerifier" : {
        "description" : "Algo. settings to verify JWT token",
        "oneOfConstraints" : [ {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "size", "base64", "secret", "type" ]
        }, {
          "required" : [ "kty", "proxy", "headers", "type", "ttl", "url", "timeout", "tlsConfig" ]
        }, {
          "required" : [ "onlyExposedCerts", "type" ]
        }, {
          "required" : [ "size", "certId", "type" ]
        }, {
          "required" : [ "privateKey", "size", "publicKey", "type" ]
        } ],
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "type" : "object",
            "properties" : {
              "mtls" : {
                "description" : "Enabled",
                "type" : "boolean"
              },
              "loose" : {
                "description" : "Loose verification",
                "type" : "boolean"
              },
              "trustAll" : {
                "description" : "Trust any certificate",
                "type" : "boolean"
              },
              "trustedCerts" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              },
              "certs" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                },
                "description" : "Trusted cert. ids"
              }
            }
          },
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (for signing)",
            "type" : "string"
          },
          "proxy" : {
            "description" : "Web proxy for http client",
            "oneOfConstraints" : [ ],
            "type" : "object",
            "properties" : { }
          },
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          }
        }
      },
      "sessionMaxAge" : {
        "format" : "int32",
        "description" : "Max age of the session",
        "type" : "integer"
      },
      "usedNameIDAsEmail" : {
        "description" : "Is name ID used as email ?",
        "type" : "boolean"
      },
      "singleLogoutUrl" : {
        "description" : "URL used by otoroshi to disconnect users from identity provider",
        "type" : "string"
      },
      "noWildcardRedirectURI" : {
        "description" : "Manage redirection without query params for exact string comparison (OAuth 2.1)",
        "type" : "boolean"
      },
      "readProfileFromToken" : {
        "description" : "The user profile will be read from the JWT token in id_token",
        "type" : "boolean"
      },
      "emailAttributeName" : {
        "description" : "Field name to find email in user profile returned by identity provider",
        "type" : "string"
      }
    }
  },
  "otoroshi.next.plugins.Robots" : {
    "description" : "Plugin to handle search engine bots",
    "type" : "object",
    "properties" : {
      "robot_txt_content" : {
        "description" : "Content of /robots.txt",
        "type" : "string"
      },
      "meta_content" : {
        "description" : "content of the <meta name='robots' /> tag",
        "type" : "string"
      },
      "robot_enabled" : {
        "description" : "/robots.txt enabled",
        "type" : "boolean"
      },
      "header_content" : {
        "description" : "Content of the X-Robots-Tag headers",
        "type" : "string"
      },
      "header_enabled" : {
        "description" : "Header enabled",
        "type" : "boolean"
      },
      "meta_enabled" : {
        "description" : "Meta tag enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.utils.mailer.GenericMailerSettings" : {
    "description" : "Settings for the generic mailer (http requests)",
    "type" : "object",
    "properties" : {
      "headers" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Sender headers"
      },
      "to" : {
        "description" : "Destination email address",
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "description" : "Destination name",
              "type" : "string"
            },
            "email" : {
              "description" : "Email address",
              "type" : "string"
            }
          }
        }
      },
      "type" : {
        "description" : "the kind of mailer",
        "type" : "string",
        "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
      },
      "url" : {
        "description" : "Sender URL",
        "type" : "string"
      }
    }
  },
  "Null" : {
    "type" : "object",
    "description" : "no value object, used to represent a None option value"
  },
  "otoroshi.next.plugins.NgApikeyExtractors" : {
    "description" : "Configuration for ApikeyCalls",
    "type" : "object",
    "properties" : {
      "jwt" : {
        "description" : "jwt extractor config.",
        "type" : "object",
        "properties" : {
          "include_request_attrs" : {
            "description" : "Does the jwt token need to include current request attributes to work",
            "type" : "boolean"
          },
          "query_name" : {
            "description" : "The name of the query param to extract",
            "type" : "string"
          },
          "header_name" : {
            "description" : "The name of the header to extract",
            "type" : "string"
          },
          "key_pair_signed" : {
            "description" : "Is it asymmetricaly signed",
            "type" : "boolean"
          },
          "secret_signed" : {
            "description" : "Is it symmetricaly signed",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "Is it enabled",
            "type" : "boolean"
          },
          "cookie_name" : {
            "description" : "The name of the cookies to extract",
            "type" : "string"
          }
        }
      },
      "basic" : {
        "description" : "basic auth extractor config.",
        "type" : "object",
        "properties" : {
          "query_name" : {
            "description" : "The name of the query param to extract",
            "type" : "string"
          },
          "header_name" : {
            "description" : "The name of the header to extract",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Is it enabled",
            "type" : "boolean"
          }
        }
      },
      "client_id" : {
        "description" : "client id only extractor config.",
        "type" : "object",
        "properties" : {
          "query_name" : {
            "description" : "The name of the query param to extract",
            "type" : "string"
          },
          "header_name" : {
            "description" : "The name of the header to extract",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Is it enabled",
            "type" : "boolean"
          }
        }
      },
      "custom_headers" : {
        "description" : "custom headers extractor config.",
        "type" : "object",
        "properties" : {
          "client_secret_header_name" : {
            "description" : "Header name to extract client secret",
            "type" : "string"
          },
          "client_id_header_name" : {
            "description" : "Header name to extract client id",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Is it enabled",
            "type" : "boolean"
          }
        }
      }
    }
  },
  "TargetsList" : {
    "type" : "array",
    "items" : {
      "type" : "object",
      "properties" : {
        "predicate" : {
          "description" : "Predicate to choose this target",
          "type" : "object",
          "properties" : {
            "rack" : {
              "description" : "Rack name",
              "type" : "string"
            },
            "provider" : {
              "description" : "Provider name",
              "type" : "string"
            },
            "dataCenter" : {
              "description" : "Datacenter name",
              "type" : "string"
            },
            "zone" : {
              "description" : "Zone name",
              "type" : "string"
            },
            "positions" : {
              "description" : "Possible positions",
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : {
                  "latitude" : {
                    "format" : "double",
                    "description" : "Latitude of the position",
                    "type" : "number"
                  },
                  "longitude" : {
                    "format" : "double",
                    "description" : "Longitude of the position",
                    "type" : "number"
                  },
                  "radius" : {
                    "format" : "double",
                    "description" : "Radius of the circle in meters",
                    "type" : "number"
                  }
                }
              }
            },
            "type" : {
              "description" : "the kind of predicate",
              "type" : "string",
              "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
            },
            "region" : {
              "description" : "Region name",
              "type" : "string"
            },
            "dc" : {
              "description" : "DC name",
              "type" : "string"
            }
          }
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          },
          "description" : "Metadata for this target"
        },
        "protocol" : {
          "description" : "Protocol for the target",
          "type" : "string"
        },
        "scheme" : {
          "description" : "The protocol used for communication. Can be http or https",
          "type" : "string"
        },
        "mtlsConfig" : {
          "description" : "TLS settings to contact this target",
          "type" : "object",
          "properties" : {
            "mtls" : {
              "description" : "Enabled",
              "type" : "boolean"
            },
            "loose" : {
              "description" : "Loose verification",
              "type" : "boolean"
            },
            "trustAll" : {
              "description" : "Trust any certificate",
              "type" : "boolean"
            },
            "trustedCerts" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Trusted cert. ids"
            },
            "certs" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              },
              "description" : "Trusted cert. ids"
            }
          }
        },
        "host" : {
          "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
          "type" : "string"
        },
        "ipAddress" : {
          "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
          "type" : "string"
        },
        "weight" : {
          "format" : "int32",
          "description" : "The weight of the target when choosing",
          "type" : "integer"
        },
        "tags" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "description" : "Tags for this target"
        }
      }
    }
  },
  "otoroshi.auth.Credential" : {
    "description" : "Pair of raw certificate, private key and certId for SAML protocol",
    "type" : "object",
    "properties" : {
      "privateKey" : {
        "description" : "Private key of the certificate used to sign SAML requests send to identity provider",
        "type" : "string"
      },
      "certificate" : {
        "description" : "PEM certificate used to sign SAML requests send to identity provider",
        "type" : "string"
      },
      "certId" : {
        "description" : "Id of the certificate used to sign SAML requests send to identity provider",
        "type" : "string"
      },
      "useOtoroshiCertificate" : {
        "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.next.plugins.NgRedirectionSettings" : {
    "description" : "Configuration for Redirection",
    "type" : "object",
    "properties" : {
      "code" : {
        "format" : "int32",
        "description" : "Redirection status code used",
        "type" : "integer"
      },
      "to" : {
        "description" : "The redirection url",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.WebAuthnOtoroshiAdmin" : {
    "description" : "An otoroshi admin user that uses webauthn at login",
    "type" : "object",
    "properties" : {
      "createdAt" : {
        "description" : "User creation date",
        "type" : "number"
      },
      "metadata" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Entity metadata"
      },
      "password" : {
        "description" : "User password",
        "type" : "string"
      },
      "credentials" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "object"
        },
        "description" : "User webauthn credentials"
      },
      "rights" : {
        "description" : "User rights",
        "type" : "object",
        "properties" : {
          "rights" : {
            "description" : "Access rights of a user",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "teams" : {
                  "description" : "Access rights on teams",
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "canRead" : {
                        "description" : "Can this access right read data",
                        "type" : "boolean"
                      },
                      "value" : {
                        "description" : "Access pattern",
                        "type" : "string"
                      },
                      "canWrite" : {
                        "description" : "Can this access right write data",
                        "type" : "boolean"
                      }
                    }
                  }
                },
                "tenant" : {
                  "description" : "Access rights on organizations",
                  "type" : "object",
                  "properties" : {
                    "canWrite" : {
                      "description" : "Can this access right write data",
                      "type" : "boolean"
                    },
                    "value" : {
                      "description" : "Access pattern",
                      "type" : "string"
                    },
                    "canRead" : {
                      "description" : "Can this access right read data",
                      "type" : "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "handle" : {
        "description" : "User webauthn handle",
        "type" : "string"
      },
      "typ" : {
        "description" : "Admin kind",
        "type" : "string",
        "enum" : [ "SIMPLE", "WEBAUTHN" ]
      },
      "label" : {
        "description" : "User label",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of admin",
        "type" : "string",
        "enum" : [ "simple", "webauthn" ]
      },
      "_loc" : {
        "description" : "Entity location",
        "type" : "object",
        "properties" : {
          "teams" : {
            "description" : "Teams of the current entity",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tenant" : {
            "description" : "Organization of the current entity",
            "type" : "string"
          }
        }
      },
      "username" : {
        "description" : "User username",
        "type" : "string"
      },
      "tags" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        },
        "description" : "Entity tags"
      }
    }
  },
  "otoroshi.plugins.jobs.kubernetes.OtoroshiToKubernetesCertSyncJob" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.plugins.biscuit.BiscuitExtractor" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "PatchBody" : {
    "type" : "array",
    "items" : { }
  },
  "otoroshi.plugins.jobs.kubernetes.OtoAnnotationConfig" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : {
      "annotations" : {
        "type" : "object",
        "additionalProperties" : {
          "type" : "string"
        },
        "description" : "Internal api"
      }
    }
  },
  "otoroshi.plugins.accesslog.AccessLog" : {
    "description" : "Plugin that log access",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.models.DataCenterMatch" : {
    "description" : "Match a target if in the same datacenter",
    "type" : "object",
    "properties" : {
      "type" : {
        "description" : "the kind of predicate",
        "type" : "string",
        "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
      },
      "dc" : {
        "description" : "DC name",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.JwtTokenLocation" : {
    "oneOfConstraints" : [ {
      "required" : [ "name", "type" ]
    }, {
      "required" : [ "name", "type", "remove" ]
    }, {
      "required" : [ "name", "type" ]
    } ],
    "type" : "object",
    "properties" : {
      "name" : {
        "description" : "Query param name",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of location",
        "type" : "string",
        "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
      },
      "remove" : {
        "description" : "Remove from value",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.HSAlgoSettings" : {
    "description" : "Settings to use HMAC-SHA signing algorithm",
    "type" : "object",
    "properties" : {
      "size" : {
        "format" : "int32",
        "description" : "Size for SHA function",
        "type" : "integer"
      },
      "base64" : {
        "description" : "The secret is base64 encoded",
        "type" : "boolean"
      },
      "secret" : {
        "description" : "HMAC secret",
        "type" : "string"
      },
      "type" : {
        "description" : "the kind of algosettings",
        "type" : "string",
        "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
      }
    }
  },
  "otoroshi.next.models.NgTarget" : {
    "description" : "A target where incoming requests will be forwarded",
    "type" : "object",
    "properties" : {
      "predicate" : {
        "description" : "Predicate to choose this target",
        "type" : "object",
        "properties" : {
          "rack" : {
            "description" : "Rack name",
            "type" : "string"
          },
          "provider" : {
            "description" : "Provider name",
            "type" : "string"
          },
          "dataCenter" : {
            "description" : "Datacenter name",
            "type" : "string"
          },
          "zone" : {
            "description" : "Zone name",
            "type" : "string"
          },
          "positions" : {
            "description" : "Possible positions",
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "latitude" : {
                  "format" : "double",
                  "description" : "Latitude of the position",
                  "type" : "number"
                },
                "longitude" : {
                  "format" : "double",
                  "description" : "Longitude of the position",
                  "type" : "number"
                },
                "radius" : {
                  "format" : "double",
                  "description" : "Radius of the circle in meters",
                  "type" : "number"
                }
              }
            }
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          },
          "region" : {
            "description" : "Region name",
            "type" : "string"
          },
          "dc" : {
            "description" : "DC name",
            "type" : "string"
          }
        }
      },
      "protocol" : {
        "description" : "Protocol for the target",
        "type" : "string"
      },
      "hostname" : {
        "description" : "hostname of the target",
        "type" : "string"
      },
      "port" : {
        "format" : "int32",
        "description" : "port of the target",
        "type" : "integer"
      },
      "weight" : {
        "format" : "int32",
        "description" : "The weight of the target when choosing",
        "type" : "integer"
      },
      "tls" : {
        "description" : "Does the target uses TLS",
        "type" : "boolean"
      },
      "tls_config" : {
        "description" : "TLS settings to contact this target",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trust_all" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trusted_certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "id" : {
        "description" : "id of the target",
        "type" : "string"
      },
      "ip_address" : {
        "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI",
        "type" : "string"
      }
    }
  },
  "otoroshi.models.UserAgentSettings" : {
    "description" : "Settings to extract informations about user agent (for otoroshi events)",
    "type" : "object",
    "properties" : {
      "enabled" : {
        "description" : "User agent extraction enabled",
        "type" : "boolean"
      }
    }
  },
  "otoroshi.plugins.useragent.UserAgentHelper" : {
    "description" : "Internal api",
    "type" : "object",
    "properties" : { }
  },
  "otoroshi.next.plugins.NgApikeyCallsConfig" : {
    "description" : "Configuration for ApikeyCalls",
    "type" : "object",
    "properties" : {
      "wipe_backend_request" : {
        "description" : "Removes the apikeys from the request to not forward it to the backend",
        "type" : "boolean"
      },
      "routing" : {
        "description" : "Use apikey for routing",
        "type" : "object",
        "properties" : {
          "none_meta_keys_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on none metadata keys being present"
          },
          "all_meta_keys_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on all metadata keys being present"
          },
          "all_meta_in" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Matching on all metadata being present"
          },
          "none_meta_in" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Matching on none metadata being present"
          },
          "one_tag_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on one tag being present"
          },
          "enabled" : {
            "description" : "Tags and metadata matching enabled",
            "type" : "boolean"
          },
          "one_meta_in" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Matching on none metadata being present"
          },
          "all_tags_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on all tags being present"
          },
          "one_meta_key_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on one metadata being present"
          },
          "none_tag_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on none tags being present"
          }
        }
      },
      "extractors" : {
        "description" : "Configuration of the apikey extraction modes",
        "type" : "object",
        "properties" : {
          "jwt" : {
            "description" : "jwt extractor config.",
            "type" : "object",
            "properties" : {
              "include_request_attrs" : {
                "description" : "Does the jwt token need to include current request attributes to work",
                "type" : "boolean"
              },
              "query_name" : {
                "description" : "The name of the query param to extract",
                "type" : "string"
              },
              "header_name" : {
                "description" : "The name of the header to extract",
                "type" : "string"
              },
              "key_pair_signed" : {
                "description" : "Is it asymmetricaly signed",
                "type" : "boolean"
              },
              "secret_signed" : {
                "description" : "Is it symmetricaly signed",
                "type" : "boolean"
              },
              "enabled" : {
                "description" : "Is it enabled",
                "type" : "boolean"
              },
              "cookie_name" : {
                "description" : "The name of the cookies to extract",
                "type" : "string"
              }
            }
          },
          "basic" : {
            "description" : "basic auth extractor config.",
            "type" : "object",
            "properties" : {
              "query_name" : {
                "description" : "The name of the query param to extract",
                "type" : "string"
              },
              "header_name" : {
                "description" : "The name of the header to extract",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Is it enabled",
                "type" : "boolean"
              }
            }
          },
          "client_id" : {
            "description" : "client id only extractor config.",
            "type" : "object",
            "properties" : {
              "query_name" : {
                "description" : "The name of the query param to extract",
                "type" : "string"
              },
              "header_name" : {
                "description" : "The name of the header to extract",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Is it enabled",
                "type" : "boolean"
              }
            }
          },
          "custom_headers" : {
            "description" : "custom headers extractor config.",
            "type" : "object",
            "properties" : {
              "client_secret_header_name" : {
                "description" : "Header name to extract client secret",
                "type" : "string"
              },
              "client_id_header_name" : {
                "description" : "Header name to extract client id",
                "type" : "string"
              },
              "enabled" : {
                "description" : "Is it enabled",
                "type" : "boolean"
              }
            }
          }
        }
      },
      "pass_with_user" : {
        "description" : "Let the request pass if a user is connected",
        "type" : "boolean"
      },
      "validate" : {
        "description" : "Enabled quotas validation",
        "type" : "boolean"
      }
    }
  }
}