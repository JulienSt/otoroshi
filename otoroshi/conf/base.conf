http.port = 8080                       # the main http port for the otoroshi server
http.port = ${?otoroshi.http.port}     # the main http port for the otoroshi server
http.port = ${?PORT}                   # the main http port for the otoroshi server
http.port = ${?OTOROSHI_PORT}                   # the main http port for the otoroshi server
http.port = ${?OTOROSHI_HTTP_PORT}                   # the main http port for the otoroshi server
play.server.http.port = ${http.port}   # the main http port for the otoroshi server
play.server.http.port = ${?PORT}       # the main http port for the otoroshi server
play.server.http.port = ${?OTOROSHI_PORT}       # the main http port for the otoroshi server
play.server.http.port = ${?OTOROSHI_HTTP_PORT}       # the main http port for the otoroshi server
https.port = 8443                      # the main https port for the otoroshi server
https.port = ${?otoroshi.https.port}   # the main https port for the otoroshi server
https.port = ${?HTTPS_PORT}            # the main https port for the otoroshi server
https.port = ${?OTOROSHI_HTTPS_PORT}            # the main https port for the otoroshi server

play.server.https.engineProvider = "otoroshi.ssl.DynamicSSLEngineProvider"  # the module to handle TLS connections dynamically
play.server.https.keyStoreDumpPath = ${?HTTPS_KEYSTORE_DUMP_PATH}           # the file path where the TLSContext will be dumped (for debugging purposes only)
play.server.https.keyStoreDumpPath = ${?OTOROSHI_HTTPS_KEYSTORE_DUMP_PATH}           # the file path where the TLSContext will be dumped (for debugging purposes only)

play.http.secret.key = ${otoroshi.secret}       # the secret used to signed session cookies                       
play.http.secret.key = ${?PLAY_CRYPTO_SECRET}   # the secret used to signed session cookies
play.http.secret.key = ${?OTOROSHI_CRYPTO_SECRET}   # the secret used to signed session cookies

play.server.http.idleTimeout = 3600s                              # the default server idle timeout
play.server.http.idleTimeout = ${?PLAY_SERVER_IDLE_TIMEOUT}       # the default server idle timeout
play.server.http.idleTimeout = ${?OTOROSHI_SERVER_IDLE_TIMEOUT}       # the default server idle timeout
play.server.akka.requestTimeout = 3600s                           # the default server idle timeout (for akka server specifically)
play.server.akka.requestTimeout = ${?PLAY_SERVER_REQUEST_TIMEOUT} # the default server idle timeout (for akka server specifically)
play.server.akka.requestTimeout = ${?OTOROSHI_SERVER_REQUEST_TIMEOUT} # the default server idle timeout (for akka server specifically)

http2.enabled = true               # enable HTTP2 support
http2.enabled = ${?otoroshi.http2.enabled}
http2.enabled = ${?HTTP2_ENABLED}  # enable HTTP2 support
http2.enabled = ${?OTOROSHI_HTTP2_ENABLED}  # enable HTTP2 support

play.server.https.keyStore.path=${?HTTPS_KEYSTORE_PATH}         # settings for the default server keystore
play.server.https.keyStore.path=${?OTOROSHI_HTTPS_KEYSTORE_PATH}         # settings for the default server keystore
play.server.https.keyStore.type=${?HTTPS_KEYSTORE_TYPE}         # settings for the default server keystore
play.server.https.keyStore.type=${?OTOROSHI_HTTPS_KEYSTORE_TYPE}         # settings for the default server keystore
play.server.https.keyStore.password=${?HTTPS_KEYSTORE_PASSWORD} # settings for the default server keystore
play.server.https.keyStore.password=${?OTOROSHI_HTTPS_KEYSTORE_PASSWORD} # settings for the default server keystore
play.server.https.keyStore.algorithm=${?HTTPS_KEYSTORE_ALGO}    # settings for the default server keystore
play.server.https.keyStore.algorithm=${?OTOROSHI_HTTPS_KEYSTORE_ALGO}    # settings for the default server keystore
 
play.server.https.wantClientAuth = false                        # mTLS Want client auth settings (client cert COULD be provided) #not-used
play.server.https.wantClientAuth = ${?HTTPS_WANT_CLIENT_AUTH}   # mTLS Want client auth settings (client cert COULD be provided) #not-used
play.server.https.wantClientAuth = ${?OTOROSHI_HTTPS_WANT_CLIENT_AUTH}   # mTLS Want client auth settings (client cert COULD be provided) #not-used
play.server.https.needClientAuth = false                        # mTLS Need client auth settings (client cert MUST be provided)  #not-used
play.server.https.needClientAuth = ${?HTTPS_NEED_CLIENT_AUTH}   # mTLS Need client auth settings (client cert MUST be provided)  #not-used
play.server.https.needClientAuth = ${?OTOROSHI_HTTPS_NEED_CLIENT_AUTH}   # mTLS Need client auth settings (client cert MUST be provided)  #not-used

play.server.pidfile.path = "/dev/null"  # pid file path  #not-used

play.modules { #not-used
} #not-used

play.application.loader = "otoroshi.loader.OtoroshiLoader"  # the loader used to launch otoroshi

play.http {
  session {
    secure = false                    # the cookie for otoroshi backoffice should be exhanged over https only
    secure = ${?SESSION_SECURE_ONLY}  # the cookie for otoroshi backoffice should be exhanged over https only
    secure = ${?OTOROSHI_SESSION_SECURE_ONLY}  # the cookie for otoroshi backoffice should be exhanged over https only
    httpOnly = true                   # the cookie for otoroshi backoffice is not accessible from javascript
    maxAge = 259200000                # the cookie for otoroshi backoffice max age
    maxAge = ${?SESSION_MAX_AGE}      # the cookie for otoroshi backoffice max age
    maxAge = ${?OTOROSHI_SESSION_MAX_AGE}      # the cookie for otoroshi backoffice max age
    domain = "."${app.domain}         # the cookie for otoroshi backoffice domain
    domain = ${?SESSION_DOMAIN}       # the cookie for otoroshi backoffice domain
    domain = ${?OTOROSHI_SESSION_DOMAIN}       # the cookie for otoroshi backoffice domain
    cookieName = "otoroshi-session"   # the cookie for otoroshi backoffice name
    cookieName = ${?SESSION_NAME}     # the cookie for otoroshi backoffice name
    cookieName = ${?OTOROSHI_SESSION_NAME}     # the cookie for otoroshi backoffice name
  }
}

play.http.filters = play.api.http.NoHttpFilters #not-used
play.filters.enabled = [] #not-used

play.ws { #not-used
  useragent="Otoroshi-ahc" #not-used
  useragent=${?USER_AGENT} #not-used
  useragent=${?OTOROSHI_USER_AGENT} #not-used
  ssl { #not-used
  } #not-used
} #not-used

play.cache { #not-used
} #not-used

akka { #not-used
  jvm-exit-on-fatal-error = off #not-used
} #not-used

play.akka { #not-used
  jvm-exit-on-fatal-error = off #not-used
} #not-used

akka { # akka specific configuration
  version = "2.6.18"
  loglevel = ERROR
  logger-startup-timeout = 60s
  log-dead-letters-during-shutdown = false
  jvm-exit-on-fatal-error = false
  actor {
    default-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {     
        parallelism-factor = 4.0
        parallelism-factor = ${?OTOROSHI_AKKA_DISPATCHER_PARALLELISM_FACTOR}
        parallelism-min = 8
        parallelism-min = ${?OTOROSHI_AKKA_DISPATCHER_PARALLELISM_MIN}
        parallelism-max = 64
        parallelism-max = ${?OTOROSHI_AKKA_DISPATCHER_PARALLELISM_MAX}
        task-peeking-mode = "FIFO"
        task-peeking-mode = ${?OTOROSHI_AKKA_DISPATCHER_TASK_PEEKING_MODE}
      }
      throughput = 1
      throughput = ${?OTOROSHI_AKKA_DISPATCHER_THROUGHPUT}
    }
  }
  http {
    server {
      server-header = otoroshi
      max-connections = 2048
      remote-address-header = on
      raw-request-uri-header = on
      pipelining-limit = 64
      backlog = 512
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = true
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
      http2 {
        request-entity-chunk-size = 65536 b
        incoming-connection-level-buffer-size = 10 MB
        incoming-stream-level-buffer-size = 512kB
      }
    }
    client {
      user-agent-header = Otoroshi-akka
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = true
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
    }
    host-connection-pool {
      max-connections = 512
      max-open-requests = 2048
      pipelining-limit = 32
      client {
        user-agent-header = otoroshi
        socket-options {
          so-receive-buffer-size = undefined
          so-send-buffer-size = undefined
          so-reuse-address = undefined
          so-traffic-class = undefined
          tcp-keep-alive = true
          tcp-oob-inline = undefined
          tcp-no-delay = undefined
        }
      }
    }
    parsing {
      max-uri-length             = 4k
      max-method-length          = 16
      max-response-reason-length = 128
      max-header-name-length     = 128
      max-header-value-length    = 16k
      max-header-count           = 128
      max-chunk-ext-length       = 256
      max-chunk-size             = 256m
      max-chunk-size             = ${?AKKA_HTTP_SERVER_MAX_CHUNK_SIZE}
      max-chunk-size             = ${?OTOROSHI_AKKA_HTTP_SERVER_MAX_CHUNK_SIZE}
      max-content-length         = infinite
      max-content-length         = ${?AKKA_HTTP_SERVER_MAX_CONTENT_LENGHT}
      max-content-length         = ${?OTOROSHI_AKKA_HTTP_SERVER_MAX_CONTENT_LENGHT}
    }
  }
}